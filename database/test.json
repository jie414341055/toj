{pid:1001, vid:1001, oj:"hdu", title:"Sum Problem", desc:"Hey, welcome to HDOJ(Hangzhou Dianzi University Online Judge).<br><br>In this problem, your task is to calculate SUM(n) = 1 + 2 + 3 + ... + n.<br>", input:"The input will consist of a series of integers n, one integer per line.<br>", output:"For each case, output SUM(n) in one line, followed by a blank line. You may assume the result will be in the range of 32-bit signed integer.<br>", sample_in:"1\n100", sample_out:"1\n\n5050", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:48334, vtotal_submit:253802, special_status:0, time_limit:500, mem_limit:32768, hint:"", source:"", author:"DOOM III", tag:["TEST"]}
{pid:1002, vid:1002, oj:"hdu", title:"A + B Problem II", desc:"I have a very simple problem for you. Given two integers A and B, your job is to calculate the Sum of A + B.<br>", input:"The first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases. Then T lines follow, each line consists of two positive integers, A and B. Notice that the integers are very large, that means you should not process them by using 32-bit integer. You may assume the length of each integer will not exceed 1000.<br>", output:"For each test case, you should output two lines. The first line is &quot;Case #:&quot;, # means the number of the test case. The second line is the an equation &quot;A + B = Sum&quot;, Sum means the result of A + B. Note there are some spaces int the equation. Output a blank line between two test cases.<br>", sample_in:"2\n1 2\n112233445566778899 998877665544332211", sample_out:"Case 1:\n1 + 2 = 3\n\nCase 2:\n112233445566778899 + 998877665544332211 = 1111111111111111110", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:25321, vtotal_submit:189166, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1003, vid:1003, oj:"hdu", title:"Max Sum", desc:"Given a sequence a[1],a[2],a[3]......a[n], your job is to calculate the max sum of a sub-sequence. For example, given (6,-1,5,4,-7), the max sum in this sequence is 6 + (-1) + 5 + 4 = 14.<br>", input:"The first line of the input contains an integer T(1&lt;=T&lt;=20) which means the number of test cases. Then T lines follow, each line starts with a number N(1&lt;=N&lt;=100000), then N integers followed(all the integers are between -1000 and 1000).<br>", output:"For each test case, you should output two lines. The first line is &quot;Case #:&quot;, # means the number of the test case. The second line contains three integers, the Max Sum in the sequence, the start position of the sub-sequence, the end position of the sub-sequence. If there are more than one result, output the first one. Output a blank line between two cases.<br>", sample_in:"2\n5 6 -1 5 4 -7\n7 0 6 -1 1 -6 7 -5", sample_out:"Case 1:\n14 1 4\n\nCase 2:\n7 1 6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:18722, vtotal_submit:127402, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1004, vid:1004, oj:"hdu", title:"Let the Balloon Rise", desc:"Contest time again! How excited it is to see balloons floating around. But to tell you a secret, the judges\' favorite time is guessing the most popular problem. When the contest is over, they will count the balloons of each color and find the result.<br><br>This year, they decide to leave this lovely job to you. <br>", input:"Input contains multiple test cases. Each test case starts with a number N (0 &lt; N &lt;= 1000) -- the total number of balloons distributed. The next N lines contain one color each. The color of a balloon is a string of up to 15 lower-case letters.<br><br>A test case with N = 0 terminates the input and this test case is not to be processed.<br>", output:"For each case, print the color of balloon for the most popular problem on a single line. It is guaranteed that there is a unique solution for each test case.<br>", sample_in:"5\ngreen\nred\nblue\nred\nred\n3\npink\norange\npink\n0", sample_out:"red\npink", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:17699, vtotal_submit:65246, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ZJCPC2004", author:"", tag:["TEST"]}
{pid:1005, vid:1005, oj:"hdu", title:"Number Sequence", desc:"A number sequence is defined as follows:<br><br>f(1) = 1, f(2) = 1, f(n) = (A * f(n - 1) + B * f(n - 2)) mod 7.<br><br>Given A, B, and n, you are to calculate the value of f(n).<br>", input:"The input consists of multiple test cases. Each test case contains 3 integers A, B and n on a single line (1 &lt;= A, B &lt;= 1000, 1 &lt;= n &lt;= 100,000,000). Three zeros signal the end of input and this test case is not to be processed.<br>", output:"For each test case, print the value of f(n) on a single line.<br>", sample_in:"1 1 3\n1 2 10\n0 0 0", sample_out:"2\n5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:14791, vtotal_submit:92776, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ZJCPC2004", author:"", tag:["TEST"]}
{pid:1006, vid:1006, oj:"hdu", title:"Tick and Tick", desc:"The three hands of the clock are rotating every second and meeting each other many times everyday. Finally, they get bored of this and each of them would like to stay away from the other two. A hand is happy if it is at least D degrees from any of the rest. You are to calculate how much time in a day that all the hands are happy.<br>", input:"The input contains many test cases. Each of them has a single line with a real number D between 0 and 120, inclusively. The input is terminated with a D of -1.<br>", output:"For each D, print in a single line the percentage of time in a day that all of the hands are happy, accurate up to 3 decimal places.<br>", sample_in:"0\n120\n90\n-1", sample_out:"100.000\n0.000\n6.251", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1947, vtotal_submit:8663, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ZJCPC2004", author:"", tag:["TEST"]}
{pid:1007, vid:1007, oj:"hdu", title:"Quoit Design", desc:"Have you ever played quoit in a playground? Quoit is a game in which flat rings are pitched at some toys, with all the toys encircled awarded.<br>In the field of Cyberground, the position of each toy is fixed, and the ring is carefully designed so it can only encircle one toy at a time. On the other hand, to make the game look more attractive, the ring is designed to have the largest radius. Given a configuration of the field, you are supposed to find the radius of such a ring.<br><br>Assume that all the toys are points on a plane. A point is encircled by the ring if the distance between the point and the center of the ring is strictly less than the radius of the ring. If two toys are placed at the same point, the radius of the ring is considered to be 0.<br>", input:"The input consists of several test cases. For each case, the first line contains an integer N (2 &lt;= N &lt;= 100,000), the total number of toys in the field. Then N lines follow, each contains a pair of (x, y) which are the coordinates of a toy. The input is terminated by N = 0.<br>", output:"For each test case, print in one line the radius of the ring required by the Cyberground manager, accurate up to 2 decimal places. <br>", sample_in:"2\n0 0\n1 1\n2\n1 1\n1 1\n3\n-1.5 0\n0 0\n0 1.5\n0", sample_out:"0.71\n0.00\n0.75", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2855, vtotal_submit:27021, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"ZJCPC2004", author:"", tag:["TEST"]}
{pid:1008, vid:1008, oj:"hdu", title:"Elevator", desc:"The highest building in our city has only one elevator. A request list is made up with N positive numbers. The numbers denote at which floors the elevator will stop, in specified order. It costs 6 seconds to move the elevator up one floor, and 4 seconds to move down one floor. The elevator will stay for 5 seconds at each stop.<br><br>For a given request list, you are to compute the total time spent to fulfill the requests on the list. The elevator is on the 0th floor at the beginning and does not have to return to the ground floor when the requests are fulfilled.<br>", input:"There are multiple test cases. Each case contains a positive integer N, followed by N positive numbers. All the numbers in the input are less than 100. A test case with N = 0 denotes the end of input. This test case is not to be processed.<br>", output:"Print the total time on a single line for each test case. <br>", sample_in:"1 2\n3 2 3 1\n0", sample_out:"17\n41", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:16758, vtotal_submit:38660, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ZJCPC2004", author:"", tag:["TEST"]}
{pid:1009, vid:1009, oj:"hdu", title:"FatMouse\' Trade", desc:"FatMouse prepared M pounds of cat food, ready to trade with the cats guarding the warehouse containing his favorite food, JavaBean.<br>The warehouse has N rooms. The i-th room contains J[i] pounds of JavaBeans and requires F[i] pounds of cat food. FatMouse does not have to trade for all the JavaBeans in the room, instead, he may get J[i]* a% pounds of JavaBeans if he pays F[i]* a% pounds of cat food. Here a is a real number. Now he is assigning this homework to you: tell him the maximum amount of JavaBeans he can obtain.<br>", input:"The input consists of multiple test cases. Each test case begins with a line containing two non-negative integers M and N. Then N lines follow, each contains two non-negative integers J[i] and F[i] respectively. The last test case is followed by two -1\'s. All integers are not greater than 1000.<br>", output:"For each test case, print in a single line a real number accurate up to 3 decimal places, which is the maximum amount of JavaBeans that FatMouse can obtain.<br>", sample_in:"5 3\n7 2\n4 3\n5 2\n20 3\n25 18\n24 15\n15 10\n-1 -1", sample_out:"13.333\n31.500", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8638, vtotal_submit:37904, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ZJCPC2004", author:"", tag:["TEST"]}
{pid:1010, vid:1010, oj:"hdu", title:"Tempter of the Bone", desc:"The doggie found a bone in an ancient maze, which fascinated him a lot. However, when he picked it up, the maze began to shake, and the doggie could feel the ground sinking. He realized that the bone was a trap, and he tried desperately to get out of this maze.<br><br>The maze was a rectangle with sizes N by M. There was a door in the maze. At the beginning, the door was closed and it would open at the T-th second for a short period of time (less than 1 second). Therefore the doggie had to arrive at the door on exactly the T-th second. In every second, he could move one block to one of the upper, lower, left and right neighboring blocks. Once he entered a block, the ground of this block would start to sink and disappear in the next second. He could not stay at one block for more than one second, nor could he move into a visited block. Can the poor doggie survive? Please help him.<br>", input:"The input consists of multiple test cases. The first line of each test case contains three integers N, M, and T (1 &lt; N, M &lt; 7; 0 &lt; T &lt; 50), which denote the sizes of the maze and the time at which the door will open, respectively. The next N lines give the maze layout, with each line containing M characters. A character is one of the following:<br><br>\'X\': a block of wall, which the doggie cannot enter; <br>\'S\': the start point of the doggie; <br>\'D\': the Door; or<br>\'.\': an empty block.<br><br>The input is terminated with three 0\'s. This test case is not to be processed.<br>", output:"For each test case, print in one line &quot;YES&quot; if the doggie can survive, or &quot;NO&quot; otherwise.<br>", sample_in:"4 4 5\nS.X.\n..X.\n..XD\n....\n3 4 5\nS.X.\n..X.\n...D\n0 0 0", sample_out:"NO\nYES", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:6801, vtotal_submit:60859, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ZJCPC2004", author:"", tag:["TEST"]}
{pid:1011, vid:1011, oj:"hdu", title:"Starship Troopers", desc:"You, the leader of Starship Troopers, are sent to destroy a base of the bugs. The base is built underground. It is actually a huge cavern, which consists of many rooms connected with tunnels. Each room is occupied by some bugs, and their brains hide in some of the rooms. Scientists have just developed a new weapon and want to experiment it on some brains. Your task is to destroy the whole base, and capture as many brains as possible.<br><br>To kill all the bugs is always easier than to capture their brains. A map is drawn for you, with all the rooms marked by the amount of bugs inside, and the possibility of containing a brain. The cavern\'s structure is like a tree in such a way that there is one unique path leading to each room from the entrance. To finish the battle as soon as possible, you do not want to wait for the troopers to clear a room before advancing to the next one, instead you have to leave some troopers at each room passed to fight all the bugs inside. The troopers never re-enter a room where they have visited before.<br><br>A starship trooper can fight against 20 bugs. Since you do not have enough troopers, you can only take some of the rooms and let the nerve gas do the rest of the job. At the mean time, you should maximize the possibility of capturing a brain. To simplify the problem, just maximize the sum of all the possibilities of containing brains for the taken rooms. Making such a plan is a difficult job. You need the help of a computer.<br>", input:"The input contains several test cases. The first line of each test case contains two integers N (0 &lt; N &lt;= 100) and M (0 &lt;= M &lt;= 100), which are the number of rooms in the cavern and the number of starship troopers you have, respectively. The following N lines give the description of the rooms. Each line contains two non-negative integers -- the amount of bugs inside and the possibility of containing a brain, respectively. The next N - 1 lines give the description of tunnels. Each tunnel is described by two integers, which are the indices of the two rooms it connects. Rooms are numbered from 1 and room 1 is the entrance to the cavern.<br><br>The last test case is followed by two -1\'s.<br>", output:"For each test case, print on a single line the maximum sum of all the possibilities of containing brains for the taken rooms.<br>", sample_in:"5 10\n50 10\n40 10\n40 20\n65 30\n70 30\n1 2\n1 3\n2 4\n2 5\n1 1\n20 7\n-1 -1", sample_out:"50\n7", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1310, vtotal_submit:9199, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"ZJCPC2004", author:"", tag:["TEST"]}
{pid:1012, vid:1012, oj:"hdu", title:"u Calculate e", desc:"A simple mathematical formula for e is<br><br><img src=data/images/1012-1.gif><br><br>where n is allowed to go to infinity. This can actually yield very accurate approximations of e using relatively small values of n.<br>", input:"", output:"Output the approximations of e generated by the above formula for the values of n from 0 to 9. The beginning of your output should appear similar to that shown below.<br>", sample_in:"n e\n- -----------\n0 1\n1 2\n2 2.5\n3 2.666666667\n4 2.708333333", sample_out:"", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:10470, vtotal_submit:27503, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Greater New York 2000", author:"", tag:["TEST"]}
{pid:1013, vid:1013, oj:"hdu", title:"Digital Roots", desc:"The digital root of a positive integer is found by summing the digits of the integer. If the resulting value is a single digit then that digit is the digital root. If the resulting value contains two or more digits, those digits are summed and the process is repeated. This is continued as long as necessary to obtain a single digit.<br><br>For example, consider the positive integer 24. Adding the 2 and the 4 yields a value of 6. Since 6 is a single digit, 6 is the digital root of 24. Now consider the positive integer 39. Adding the 3 and the 9 yields 12. Since 12 is not a single digit, the process must be repeated. Adding the 1 and the 2 yeilds 3, a single digit and also the digital root of 39.<br>", input:"The input file will contain a list of positive integers, one per line. The end of the input will be indicated by an integer value of zero.<br>", output:"For each integer in the input, output its digital root on a separate line of the output.<br>", sample_in:"24\n39\n0", sample_out:"6\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:10604, vtotal_submit:44188, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Greater New York 2000", author:"", tag:["TEST"]}
{pid:1014, vid:1014, oj:"hdu", title:"Uniform Generator", desc:"Computer simulations often require random numbers. One way to generate pseudo-random numbers is via a function of the form<br><br>seed(x+1) = [seed(x) + STEP] % MOD<br><br>where \'%\' is the modulus operator. <br><br>Such a function will generate pseudo-random numbers (seed) between 0 and MOD-1. One problem with functions of this form is that they will always generate the same pattern over and over. In order to minimize this effect, selecting the STEP and MOD values carefully can result in a uniform distribution of all values between (and including) 0 and MOD-1. <br><br>For example, if STEP = 3 and MOD = 5, the function will generate the series of pseudo-random numbers 0, 3, 1, 4, 2 in a repeating cycle. In this example, all of the numbers between and including 0 and MOD-1 will be generated every MOD iterations of the function. Note that by the nature of the function to generate the same seed(x+1) every time seed(x) occurs means that if a function will generate all the numbers between 0 and MOD-1, it will generate pseudo-random numbers uniformly with every MOD iterations. <br><br>If STEP = 15 and MOD = 20, the function generates the series 0, 15, 10, 5 (or any other repeating series if the initial seed is other than 0). This is a poor selection of STEP and MOD because no initial seed will generate all of the numbers from 0 and MOD-1. <br><br>Your program will determine if choices of STEP and MOD will generate a uniform distribution of pseudo-random numbers. <br>", input:"Each line of input will contain a pair of integers for STEP and MOD in that order (1 &lt;= STEP, MOD &lt;= 100000).<br>", output:"For each line of input, your program should print the STEP value right- justified in columns 1 through 10, the MOD value right-justified in columns 11 through 20 and either &quot;Good Choice&quot; or &quot;Bad Choice&quot; left-justified starting in column 25. The &quot;Good Choice&quot; message should be printed when the selection of STEP and MOD will generate all the numbers between and including 0 and MOD-1 when MOD numbers are generated. Otherwise, your program should print the message &quot;Bad Choice&quot;. After each output test set, your program should print exactly one blank line.<br>", sample_in:"3 5\n15 20\n63923 99999", sample_out:"         3         5    Good Choice\n\n        15        20    Bad Choice\n\n     63923     99999    Good Choice", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4968, vtotal_submit:15331, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Central USA 1996", author:"", tag:["TEST"]}
{pid:1015, vid:1015, oj:"hdu", title:"Safecracker", desc:"=== Op tech briefing, 2002/11/02 06:42 CST === <br>&quot;The item is locked in a Klein safe behind a painting in the second-floor library. Klein safes are extremely rare; most of them, along with Klein and his factory, were destroyed in World War II. Fortunately old Brumbaugh from research knew Klein\'s secrets and wrote them down before he died. A Klein safe has two distinguishing features: a combination lock that uses letters instead of numbers, and an engraved quotation on the door. A Klein quotation always contains between five and twelve distinct uppercase letters, usually at the beginning of sentences, and mentions one or more numbers. Five of the uppercase letters form the combination that opens the safe. By combining the digits from all the numbers in the appropriate way you get a numeric target. (The details of constructing the target number are classified.) To find the combination you must select five letters v, w, x, y, and z that satisfy the following equation, where each letter is replaced by its ordinal position in the alphabet (A=1, B=2, ..., Z=26). The combination is then vwxyz. If there is more than one solution then the combination is the one that is lexicographically greatest, i.e., the one that would appear last in a dictionary.&quot; <br><br>v - w^2 + x^3 - y^4 + z^5 = target <br><br>&quot;For example, given target 1 and letter set ABCDEFGHIJKL, one possible solution is FIECB, since 6 - 9^2 + 5^3 - 3^4 + 2^5 = 1. There are actually several solutions in this case, and the combination turns out to be LKEBA. Klein thought it was safe to encode the combination within the engraving, because it could take months of effort to try all the possibilities even if you knew the secret. But of course computers didn\'t exist then.&quot; <br><br>=== Op tech directive, computer division, 2002/11/02 12:30 CST === <br><br>&quot;Develop a program to find Klein combinations in preparation for field deployment. Use standard test methodology as per departmental regulations. Input consists of one or more lines containing a positive integer target less than twelve million, a space, then at least five and at most twelve distinct uppercase letters. The last line will contain a target of zero and the letters END; this signals the end of the input. For each line output the Klein combination, break ties with lexicographic order, or \'no solution\' if there is no correct combination. Use the exact format shown below.&quot;<br>", input:"", output:"", sample_in:"1 ABCDEFGHIJKL\n11700519 ZAYEXIWOVU\n3072997 SOUGHT\n1234567 THEQUICKFROG\n0 END", sample_out:"LKEBA\nYOXUZ\nGHOST\nno solution", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2799, vtotal_submit:7338, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 2002", author:"", tag:["TEST"]}
{pid:1016, vid:1016, oj:"hdu", title:"Prime Ring Problem", desc:"A ring is compose of n circles as shown in diagram. Put natural number 1, 2, ..., n into each circle separately, and the sum of numbers in two adjacent circles should be a prime.<br><br>Note: the number of first circle should always be 1.<br><br><img src=data/images/1016-1.gif><br>", input:"n (0 &lt; n &lt; 20).<br>", output:"The output format is shown as sample below. Each row represents a series of circle numbers in the ring beginning from 1 clockwisely and anticlockwisely. The order of numbers must satisfy the above requirements. Print solutions in lexicographical order.<br><br>You are to write a program that completes above process.<br><br>Print a blank line after each case.<br>", sample_in:"6\n8", sample_out:"Case 1:\n1 4 3 2 5 6\n1 6 5 2 3 4\n\nCase 2:\n1 2 3 8 5 6 7 4\n1 2 5 8 3 4 7 6\n1 4 7 6 5 8 3 2\n1 6 7 4 3 8 5 2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:6249, vtotal_submit:22847, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"Asia 1996, Shanghai (Mainland China)", author:"", tag:["TEST"]}
{pid:1017, vid:1017, oj:"hdu", title:"A Mathematical Curiosity", desc:"Given two integers n and m, count the number of pairs of integers (a,b) such that 0 &lt; a &lt; b &lt; n and (a^2+b^2 +m)/(ab) is an integer.<br><br>This problem contains multiple test cases!<br><br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br>", input:"You will be given a number of cases in the input. Each case is specified by a line containing the integers n and m. The end of input is indicated by a case in which n = m = 0. You may assume that 0 &lt; n &lt;= 100.<br>", output:"For each case, print the case number as well as the number of pairs (a,b) satisfying the given property. Print the output for each case on one line in the format as shown below.<br>", sample_in:"1\n\n10 1\n20 3\n30 4\n0 0", sample_out:"Case 1: 2\nCase 2: 4\nCase 3: 5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5946, vtotal_submit:23747, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"East Central North America 1999, Practice", author:"", tag:["TEST"]}
{pid:1018, vid:1018, oj:"hdu", title:"Big Number", desc:"In many applications very large integers numbers are required. Some of these applications are using keys for secure transmission of data, encryption, etc. In this problem you are given a number, you have to determine the number of digits in the factorial of the number.<br>", input:"Input consists of several lines of integer numbers. The first line contains an integer n, which is the number of cases to be tested, followed by n lines, one integer 1 ≤ n ≤ 10<sup>7</sup> on each line.<br>", output:"The output contains the number of digits in the factorial of the integers appearing in the input.<br>", sample_in:"2\n10\n20", sample_out:"7\n19", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8149, vtotal_submit:23223, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2002, Dhaka (Bengal)", author:"", tag:["TEST"]}
{pid:1019, vid:1019, oj:"hdu", title:"Least Common Multiple", desc:"The least common multiple (LCM) of a set of positive integers is the smallest positive integer which is divisible by all the numbers in the set. For example, the LCM of 5, 7 and 15 is 105.<br><br>", input:"Input will consist of multiple problem instances. The first line of the input will contain a single integer indicating the number of problem instances. Each instance will consist of a single line of the form m n1 n2 n3 ... nm where m is the number of integers in the set and n1 ... nm are the integers. All integers will be positive and lie within the range of a 32-bit integer.<br>", output:"For each problem instance, output a single line containing the corresponding LCM. All results will lie in the range of a 32-bit integer.<br>", sample_in:"2\n3 5 7 15\n6 4 10296 936 1287 792 1", sample_out:"105\n10296", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:7170, vtotal_submit:26900, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"East Central North America 2003, Practice", author:"", tag:["TEST"]}
{pid:1020, vid:1020, oj:"hdu", title:"Encoding", desc:"Given a string containing only \'A\' - \'Z\', we could encode it using the following method: <br><br>1. Each sub-string containing k same characters should be encoded to &quot;kX&quot; where &quot;X&quot; is the only character in this sub-string.<br><br>2. If the length of the sub-string is 1, \'1\' should be ignored.<br>", input:"The first line contains an integer N (1 &lt;= N &lt;= 100) which indicates the number of test cases. The next N lines contain N strings. Each string consists of only \'A\' - \'Z\' and the length is less than 10000.<br>", output:"For each test case, output the encoded string in a line.<br>", sample_in:"2\nABC\nABBCCC", sample_out:"ABC\nA2B3C", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8546, vtotal_submit:23868, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"ZHANG Zheng", tag:["TEST"]}
{pid:1021, vid:1021, oj:"hdu", title:"Fibonacci Again", desc:"There are another kind of Fibonacci numbers: F(0) = 7, F(1) = 11, F(n) = F(n-1) + F(n-2) (n&gt;=2).<br>", input:"Input consists of a sequence of lines, each containing an integer n. (n &lt; 1,000,000).<br>", output:"Print the word &quot;yes&quot; if 3 divide evenly into F(n).<br><br>Print the word &quot;no&quot; if not.<br>", sample_in:"0\n1\n2\n3\n4\n5", sample_out:"no\nno\nyes\nno\nno\nno", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:12249, vtotal_submit:32878, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Leojay", tag:["TEST"]}
{pid:1022, vid:1022, oj:"hdu", title:"Train Problem I", desc:"As the new term comes, the Ignatius Train Station is very busy nowadays. A lot of student want to get back to school by train(because the trains in the Ignatius Train Station is the fastest all over the world ^v^). But here comes a problem, there is only one railway where all the trains stop. So all the trains come in from one side and get out from the other side. For this problem, if train A gets into the railway first, and then train B gets into the railway before train A leaves, train A can\'t leave until train B leaves. The pictures below figure out the problem. Now the problem for you is, there are at most 9 trains in the station, all the trains has an ID(numbered from 1 to n), the trains get into the railway in an order O1, your task is to determine whether the trains can get out in an order O2.<br><img src=data/images/1022-1.jpg><img src=data/images/1022-2.jpg><img src=data/images/1022-3.jpg>", input:"The input contains several test cases. Each test case consists of an integer, the number of trains, and two strings, the order of the trains come in:O1, and the order of the trains leave:O2. The input is terminated by the end of file. More details in the Sample Input.<br>", output:"The output contains a string &quot;No.&quot; if you can\'t exchange O2 to O1, or you should output a line contains &quot;Yes.&quot;, and then output your way in exchanging the order(you should output &quot;in&quot; for a train getting into the railway, and &quot;out&quot; for a train getting out of the railway). Print a line contains &quot;FINISH&quot; after each test case. More details in the Sample Output.<br>", sample_in:"3 123 321\n3 123 312", sample_out:"Yes.\nin\nin\nin\nout\nout\nout\nFINISH\nNo.\nFINISH\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nFor the first Sample Input, we let train 1 get in, then train 2 and train 3.\nSo now train 3 is at the top of the railway, so train 3 can leave first, then train 2 and train 1.\nIn the second Sample input, we should let train 3 leave first, so we have to let train 1 get in, then train 2 and train 3.\nNow we can let train 3 leave.\nBut after that we can\'t let train 1 leave before train 2, because train 2 is at the top of the railway at the moment.\nSo we output \"No.\".", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4689, vtotal_submit:18182, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1023, vid:1023, oj:"hdu", title:"Train Problem II", desc:"As we all know the Train Problem I, the boss of the Ignatius Train Station want to know if all the trains come in strict-increasing order, how many orders that all the trains can get out of the railway.<br>", input:"The input contains several test cases. Each test cases consists of a number N(1&lt;=N&lt;=100). The input is terminated by the end of file.<br>", output:"For each test case, you should output how many ways that all the trains can get out of the railway.<br>", sample_in:"1\n2\n3\n10", sample_out:"1\n2\n5\n16796\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nThe result will be very large, so you may not process it by 32-bit integers.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2259, vtotal_submit:5178, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1024, vid:1024, oj:"hdu", title:"Max Sum Plus Plus", desc:"Now I think you have got an AC in Ignatius.L\'s &quot;Max Sum&quot; problem. To be a brave ACMer, we always challenge ourselves to more difficult problems. Now you are faced with a more difficult problem.<br><br>Given a consecutive number sequence S<sub><i>1</i></sub>, S<sub><i>2</i></sub>, S<sub><i>3</i></sub>, S<sub><i>4</i></sub> ... S<sub><i>x</i></sub>, ... S<sub><i>n</i></sub> (1 ≤ x ≤ n ≤ 1,000,000, -32768 ≤ S<sub><i>x</i></sub> ≤ 32767). We define a function sum(i, j) = S<sub><i>i</i></sub> + ... + S<sub><i>j</i></sub> (1 ≤ i ≤ j ≤ n).<br><br>Now given an integer m (m &gt; 0), your task is to find m pairs of i and j which make sum(i<sub><i>1</i></sub>, j<sub><i>1</i></sub>) + sum(i<sub><i>2</i></sub>, j<sub><i>2</i></sub>) + sum(i<sub><i>3</i></sub>, j<sub><i>3</i></sub>) + ... + sum(i<sub><i>m</i></sub>, j<sub><i>m</i></sub>) maximal (i<sub><i>x</i></sub> ≤ i<sub><i>y</i></sub> ≤ j<sub><i>x</i></sub> or i<sub><i>x</i></sub> ≤ j<sub><i>y</i></sub> ≤ j<sub><i>x</i></sub> is not allowed).<br><br>But I`m lazy, I don\'t want to write a special-judge module, so you don\'t have to output m pairs of i and j, just output the maximal summation of sum(i<sub><i>x</i></sub>, j<sub><i>x</i></sub>)(1 ≤ x ≤ m) instead. ^_^<br>", input:"Each test case will begin with two integers m and n, followed by n integers S<sub><i>1</i></sub>, S<sub><i>2</i></sub>, S<sub><i>3</i></sub> ... S<sub><i>n</i></sub>.<br>Process to the end of file.<br>", output:"Output the maximal summation described above in one line.<br>", sample_in:"1 3 1 2 3\n2 6 -1 4 -2 3 -2 3", sample_out:"6\n8\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nHuge input, scanf and dynamic programming is recommended.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2470, vtotal_submit:14810, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"JGShining（极光炫影）", tag:["TEST"]}
{pid:1025, vid:1025, oj:"hdu", title:"Constructing Roads In JGShining\'s Kingdom", desc:"JGShining\'s kingdom consists of 2n(n is no more than 500,000) small cities which are located in two parallel lines.<br> <br>Half of these cities are rich in resource (we call them rich cities) while the others are short of resource (we call them poor cities). Each poor city is short of exactly one kind of resource and also each rich city is rich in exactly one kind of resource. You may assume no two poor cities are short of one same kind of resource and no two rich cities are rich in one same kind of resource. <br><br>With the development of industry, poor cities wanna import resource from rich ones. The roads existed are so small that they\'re unable to ensure the heavy trucks, so new roads should be built. The poor cities strongly BS each other, so are the rich ones. Poor cities don\'t wanna build a road with other poor ones, and rich ones also can\'t abide sharing an end of road with other rich ones. Because of economic benefit, any rich city will be willing to export resource to any poor one.<br><br>Rich citis marked from 1 to n are located in Line I and poor ones marked from 1 to n are located in Line II. <br><br>The location of Rich City 1 is on the left of all other cities, Rich City 2 is on the left of all other cities excluding Rich City 1,  Rich City 3 is on the right of Rich City 1 and Rich City 2 but on the left of all other cities ... And so as the poor ones. <br><br>But as you know, two crossed roads may cause a lot of traffic accident so JGShining has established a law to forbid constructing crossed roads.<br><br>For example, the roads in Figure I are forbidden.<br><br><center><img src=data/images/1025-1.png></center><br><br>In order to build as many roads as possible, the young and handsome king of the kingdom - JGShining needs your help, please help him. ^_^<br>", input:"Each test case will begin with a line containing an integer n(1 ≤ n ≤ 500,000). Then n lines follow. Each line contains two integers p and r which represents that Poor City p needs to import resources from Rich City r. Process to the end of file.<br>", output:"For each test case, output the result in the form of sample. <br>You should tell JGShining what\'s the maximal number of road(s) can be built. <br>", sample_in:"2\n1 2\n2 1\n3\n1 2\n2 3\n3 1", sample_out:"Case 1:\nMy king, at most 1 road can be built.\n\nCase 2:\nMy king, at most 2 roads can be built.\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nHuge input, scanf is recommended.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2324, vtotal_submit:13919, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"JGShining（极光炫影）", tag:["TEST"]}
{pid:1026, vid:1026, oj:"hdu", title:"Ignatius and the Princess I", desc:"The Princess has been abducted by the BEelzebub feng5166, our hero Ignatius has to rescue our pretty Princess. Now he gets into feng5166\'s castle. The castle is a large labyrinth. To make the problem simply, we assume the labyrinth is a N*M two-dimensional array which left-top corner is (0,0) and right-bottom corner is (N-1,M-1). Ignatius enters at (0,0), and the door to feng5166\'s room is at (N-1,M-1), that is our target. There are some monsters in the castle, if Ignatius meet them, he has to kill them. Here is some rules:<br><br>1.Ignatius can only move in four directions(up, down, left, right), one step per second. A step is defined as follow: if current position is (x,y), after a step, Ignatius can only stand on (x-1,y), (x+1,y), (x,y-1) or (x,y+1).<br>2.The array is marked with some characters and numbers. We define them like this:<br> . : The place where Ignatius can walk on.<br> X : The place is a trap, Ignatius should not walk on it.<br> n : Here is a monster with n HP(1&lt;=n&lt;=9), if Ignatius walk on it, it takes him n seconds to kill the monster.<br><br>Your task is to give out the path which costs minimum seconds for Ignatius to reach target position. You may assume that the start position and the target position will never be a trap, and there will never be a monster at the start position.<br>", input:"The input contains several test cases. Each test case starts with a line contains two numbers N and M(2&lt;=N&lt;=100,2&lt;=M&lt;=100) which indicate the size of the labyrinth. Then a N*M two-dimensional array follows, which describe the whole labyrinth. The input is terminated by the end of file. More details in the Sample Input.<br>", output:"For each test case, you should output &quot;God please help our poor hero.&quot; if Ignatius can\'t reach the target position, or you should output &quot;It takes n seconds to reach the target position, let me show you the way.&quot;(n is the minimum seconds), and tell our hero the whole path. Output a line contains &quot;FINISH&quot; after each test case. If there are more than one path, any one is OK in this problem. More details in the Sample Output.<br>", sample_in:"5 6\n.XX.1.\n..X.2.\n2...X.\n...XX.\nXXXXX.\n5 6\n.XX.1.\n..X.2.\n2...X.\n...XX.\nXXXXX1\n5 6\n.XX...\n..XX1.\n2...X.\n...XX.\nXXXXX.", sample_out:"It takes 13 seconds to reach the target position, let me show you the way.\n1s:(0,0)->(1,0)\n2s:(1,0)->(1,1)\n3s:(1,1)->(2,1)\n4s:(2,1)->(2,2)\n5s:(2,2)->(2,3)\n6s:(2,3)->(1,3)\n7s:(1,3)->(1,4)\n8s:FIGHT AT (1,4)\n9s:FIGHT AT (1,4)\n10s:(1,4)->(1,5)\n11s:(1,5)->(2,5)\n12s:(2,5)->(3,5)\n13s:(3,5)->(4,5)\nFINISH\nIt takes 14 seconds to reach the target position, let me show you the way.\n1s:(0,0)->(1,0)\n2s:(1,0)->(1,1)\n3s:(1,1)->(2,1)\n4s:(2,1)->(2,2)\n5s:(2,2)->(2,3)\n6s:(2,3)->(1,3)\n7s:(1,3)->(1,4)\n8s:FIGHT AT (1,4)\n9s:FIGHT AT (1,4)\n10s:(1,4)->(1,5)\n11s:(1,5)->(2,5)\n12s:(2,5)->(3,5)\n13s:(3,5)->(4,5)\n14s:FIGHT AT (4,5)\nFINISH\nGod please help our poor hero.\nFINISH", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2004, vtotal_submit:10740, special_status:1, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1027, vid:1027, oj:"hdu", title:"Ignatius and the Princess II", desc:"Now our hero finds the door to the BEelzebub feng5166. He opens the door and finds feng5166 is about to kill our pretty Princess. But now the BEelzebub has to beat our hero first. feng5166 says, &quot;I have three question for you, if you can work them out, I will release the Princess, or you will be my dinner, too.&quot; Ignatius says confidently, &quot;OK, at last, I will save the Princess.&quot;<br><br>&quot;Now I will show you the first problem.&quot; feng5166 says, &quot;Given a sequence of number 1 to N, we define that 1,2,3...N-1,N is the smallest sequence among all the sequence which can be composed with number 1 to N(each number can be and should be use only once in this problem). So it\'s easy to see the second smallest sequence is 1,2,3...N,N-1. Now I will give you two numbers, N and M. You should tell me the Mth smallest sequence which is composed with number 1 to N. It\'s easy, isn\'t is? Hahahahaha......&quot;<br>Can you help Ignatius to solve this problem?<br>", input:"The input contains several test cases. Each test case consists of two numbers, N and M(1&lt;=N&lt;=1000, 1&lt;=M&lt;=10000). You may assume that there is always a sequence satisfied the BEelzebub\'s demand. The input is terminated by the end of file.<br>", output:"For each test case, you only have to output the sequence satisfied the BEelzebub\'s demand. When output a sequence, you should print a space between two numbers, but do not output any spaces after the last number.<br>", sample_in:"6 4\n11 8", sample_out:"1 2 3 5 6 4\n1 2 3 4 5 6 7 9 8 11 10", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2034, vtotal_submit:4110, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1028, vid:1028, oj:"hdu", title:"Ignatius and the Princess III", desc:"&quot;Well, it seems the first problem is too easy. I will let you know how foolish you are later.&quot; feng5166 says.<br><br>&quot;The second problem is, given an positive integer N, we define an equation like this:<br>&nbsp;&nbsp;N=a[1]+a[2]+a[3]+...+a[m];<br>&nbsp;&nbsp;a[i]&gt;0,1&lt;=m&lt;=N;<br>My question is how many different equations you can find for a given N.<br>For example, assume N is 4, we can find:<br>&nbsp;&nbsp;4 = 4;<br>&nbsp;&nbsp;4 = 3 + 1;<br>&nbsp;&nbsp;4 = 2 + 2;<br>&nbsp;&nbsp;4 = 2 + 1 + 1;<br>&nbsp;&nbsp;4 = 1 + 1 + 1 + 1;<br>so the result is 5 when N is 4. Note that &quot;4 = 3 + 1&quot; and &quot;4 = 1 + 3&quot; is the same in this problem. Now, you do it!&quot;<br>", input:"The input contains several test cases. Each test case contains a positive integer N(1&lt;=N&lt;=120) which is mentioned above. The input is terminated by the end of file.<br>", output:"For each test case, you have to output a line contains an integer P which indicate the different equations you have found.<br>", sample_in:"4\n10\n20", sample_out:"5\n42\n627", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5393, vtotal_submit:11176, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1029, vid:1029, oj:"hdu", title:"Ignatius and the Princess IV", desc:"&quot;OK, you are not too bad, em... But you can never pass the next test.&quot; feng5166 says.<br><br>&quot;I will tell you an odd number N, and then N integers. There will be a special integer among them, you have to tell me which integer is the special one after I tell you all the integers.&quot; feng5166 says.<br><br>&quot;But what is the characteristic of the special integer?&quot; Ignatius asks.<br><br>&quot;The integer will appear at least (N+1)/2 times. If you can\'t find the right integer, I will kill the Princess, and you will be my dinner, too. Hahahaha.....&quot; feng5166 says.<br><br>Can you find the special integer for Ignatius?<br>", input:"The input contains several test cases. Each test case contains two lines. The first line consists of an odd integer N(1&lt;=N&lt;=999999) which indicate the number of the integers feng5166 will tell our hero. The second line contains the N integers. The input is terminated by the end of file.<br>", output:"For each test case, you have to output only one line which contains the special number you have found.<br>", sample_in:"5\n1 3 2 3 3\n11\n1 1 1 1 1 5 5 5 5 5 5\n7\n1 1 1 1 1 1 1", sample_out:"3\n5\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4171, vtotal_submit:14644, special_status:0, time_limit:1000, mem_limit:32767, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1030, vid:1030, oj:"hdu", title:"Delta-wave ", desc:"A triangle field is numbered with successive integers in the way shown on the picture below. <br><br><center><img src=data/images/1030-1.jpg></center><br><br>The traveller needs to go from the cell with number M to the cell with number N. The traveller is able to enter the cell through cell edges only, he can not travel from cell to cell through vertices. The number of edges the traveller passes makes the length of the traveller\'s route. <br><br>Write the program to determine the length of the shortest route connecting cells with numbers N and M. <br>", input:"Input contains two integer numbers M and N in the range from 1 to 1000000000 separated with space(s).", output:"Output should contain the length of the shortest route.", sample_in:"6 12 ", sample_out:"3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1509, vtotal_submit:4970, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Ural Collegiate Programming Contest 1998", author:"", tag:["TEST"]}
{pid:1031, vid:1031, oj:"hdu", title:"Design T-Shirt", desc:"Soon after he decided to design a T-shirt for our Algorithm Board on Free-City BBS, XKA found that he was trapped by all kinds of suggestions from everyone on the board. It is indeed a mission-impossible to have everybody perfectly satisfied. So he took a poll to collect people\'s opinions. Here are what he obtained: N people voted for M design elements (such as the ACM-ICPC logo, big names in computer science, well-known graphs, etc.). Everyone assigned each element a number of satisfaction. However, XKA can only put K (&lt;=M) elements into his design. He needs you to pick for him the K elements such that the total number of satisfaction is maximized.<br>", input:"The input consists of multiple test cases. For each case, the first line contains three positive integers N, M and K where N is the number of people, M is the number of design elements, and K is the number of elements XKA will put into his design. Then N lines follow, each contains M numbers. The j-th number in the i-th line represents the i-th person\'s satisfaction on the j-th element.<br>", output:"For each test case, print in one line the indices of the K elements you would suggest XKA to take into consideration so that the total number of satisfaction is maximized. If there are more than one solutions, you must output the one with minimal indices. The indices start from 1 and must be printed in non-increasing order. There must be exactly one space between two adjacent indices, and no extra space at the end of the line.<br>", sample_in:"3 6 4\n2 2.5 5 1 3 4\n5 1 3.5 2 2 2\n1 1 1 1 1 10\n3 3 2\n1 2 3\n2 3 1\n3 1 2", sample_out:"6 5 3 1\n2 1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1843, vtotal_submit:4681, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1032, vid:1032, oj:"hdu", title:"The 3n + 1 problem", desc:"Problems in Computer Science are often classified as belonging to a certain class of problems (e.g., NP, Unsolvable, Recursive). In this problem you will be analyzing a property of an algorithm whose classification is not known for all possible inputs.<br><br>Consider the following algorithm: <br><br> <br>&nbsp;&nbsp;&nbsp;&nbsp;1. &nbsp;&nbsp;&nbsp;&nbsp; input n<br><br>&nbsp;&nbsp;&nbsp;&nbsp;2. &nbsp;&nbsp;&nbsp;&nbsp; print n<br><br>&nbsp;&nbsp;&nbsp;&nbsp;3. &nbsp;&nbsp;&nbsp;&nbsp; if n = 1 then STOP<br><br>&nbsp;&nbsp;&nbsp;&nbsp;4. &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; if n is odd then   n &lt;- 3n + 1<br><br>&nbsp;&nbsp;&nbsp;&nbsp;5. &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; else   n &lt;- n / 2<br><br>&nbsp;&nbsp;&nbsp;&nbsp;6. &nbsp;&nbsp;&nbsp;&nbsp; GOTO 2<br><br><br>Given the input 22, the following sequence of numbers will be printed 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 <br><br>It is conjectured that the algorithm above will terminate (when a 1 is printed) for any integral input value. Despite the simplicity of the algorithm, it is unknown whether this conjecture is true. It has been verified, however, for all integers n such that 0 &lt; n &lt; 1,000,000 (and, in fact, for many more numbers than this.) <br><br>Given an input n, it is possible to determine the number of numbers printed (including the 1). For a given n this is called the cycle-length of n. In the example above, the cycle length of 22 is 16. <br><br>For any two numbers i and j you are to determine the maximum cycle length over all numbers between i and j. <br>", input:"The input will consist of a series of pairs of integers i and j, one pair of integers per line. All integers will be less than 1,000,000 and greater than 0. <br><br>You should process all pairs of integers and for each pair determine the maximum cycle length over all integers between and including i and j. <br><br>You can assume that no opperation overflows a 32-bit integer.<br>", output:"For each pair of input integers i and j you should output i, j, and the maximum cycle length for integers between and including i and j. These three numbers should be separated by at least one space with all three numbers on one line and with one line of output for each line of input. The integers i and j must appear in the output in the same order in which they appeared in the input and should be followed by the maximum cycle length (on the same line). <br>", sample_in:"1 10\n100 200\n201 210\n900 1000", sample_out:"1 10 20\n100 200 125\n201 210 89\n900 1000 174", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5808, vtotal_submit:19780, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1033, vid:1033, oj:"hdu", title:"Edge", desc:"For products that are wrapped in small packings it is necessary that the sheet of paper containing the directions for use is folded until its size becomes small enough. We assume that a sheet of paper is rectangular and only folded along lines parallel to its initially shorter edge. The act of folding along such a line, however, can be performed in two directions: either the surface on the top of the sheet is brought together, or the surface on its bottom. In both cases the two parts of the rectangle that are separated by the folding line are laid together neatly and we ignore any differences in thickness of the resulting folded sheet. <br>After several such folding steps have been performed we may unfold the sheet again and take a look at its longer edge holding the sheet so that it appears as a one-dimensional curve, actually a concatenation of line segments. If we move along this curve in a fixed direction we can classify every place where the sheet was folded as either type A meaning a clockwise turn or type V meaning a counter-clockwise turn. Given such a sequence of classifications, produce a drawing of the longer edge of the sheet assuming 90 degree turns at equidistant places.<br>", input:"The input contains several test cases, each on a separate line. Each line contains a nonempty string of characters A and V describing the longer edge of the sheet. You may assume that the length of the string is less than 200. The input file terminates immediately after the last test case.<br>", output:"For each test case generate a PostScript drawing of the edge with commands placed on separate lines. Start every drawing at the coordinates (300, 420) with the command &quot;300 420 moveto&quot;. The first turn occurs at (310, 420) using the command &quot;310 420 lineto&quot;. Continue with clockwise or counter-clockwise turns according to the input string, using a sequence of &quot;x y lineto&quot; commands with the appropriate coordinates. The turning points are separated at a distance of 10 units. Do not forget the end point of the edge and finish each test case by the commands stroke and showpage. <br><br>You may display such drawings with the gv PostScript interpreter, optionally after a conversion using the ps2ps utility.<br><br><center><img src=data/images/1033-1.gif></center><br>", sample_in:"V\nAVV", sample_out:"300 420 moveto\n310 420 lineto\n310 430 lineto\nstroke\nshowpage\n300 420 moveto\n310 420 lineto\n310 410 lineto\n320 410 lineto\n320 420 lineto\nstroke\nshowpage", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:994, vtotal_submit:1763, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 2003", author:"", tag:["TEST"]}
{pid:1034, vid:1034, oj:"hdu", title:"Candy Sharing Game", desc:"A number of students sit in a circle facing their teacher in the center. Each student initially has an even number of pieces of candy. When the teacher blows a whistle, each student simultaneously gives half of his or her candy to the neighbor on the right. Any student, who ends up with an odd number of pieces of candy, is given another piece by the teacher. The game ends when all students have the same number of pieces of candy. <br>Write a program which determines the number of times the teacher blows the whistle and the final number of pieces of candy for each student from the amount of candy each child starts with.<br>", input:"The input may describe more than one game. For each game, the input begins with the number N of students, followed by N (even) candy counts for the children counter-clockwise around the circle. The input ends with a student count of 0. Each input number is on a line by itself.<br>", output:"For each game, output the number of rounds of the game followed by the amount of candy each child ends up with, both on one line.<br>", sample_in:"6\n36\n2\n2\n2\n2\n2\n11\n22\n20\n18\n16\n14\n12\n10\n8\n6\n4\n2\n4\n2\n4\n6\n8\n0", sample_out:"15 14\n17 22\n4 8\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nThe game ends in a finite number of steps because:\n1. The maximum candy count can never increase.\n2. The minimum candy count can never decrease.\n3. No one with more than the minimum amount will ever decrease to the minimum.\n4. If the maximum and minimum candy count are not the same, at least one student with the minimum amount must have their count increase.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1481, vtotal_submit:2717, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Greater New York 2003", author:"", tag:["TEST"]}
{pid:1035, vid:1035, oj:"hdu", title:"Robot Motion", desc:"<img src=data/images/1035-1.gif><br><br>A robot has been programmed to follow the instructions in its path. Instructions for the next direction the robot is to move are laid down in a grid. The possible instructions are <br><br>N north (up the page)<br>S south (down the page)<br>E east (to the right on the page)<br>W west (to the left on the page)<br><br>For example, suppose the robot starts on the north (top) side of Grid 1 and starts south (down). The path the robot follows is shown. The robot goes through 10 instructions in the grid before leaving the grid.<br><br>Compare what happens in Grid 2: the robot goes through 3 instructions only once, and then starts a loop through 8 instructions, and never exits.<br><br>You are to write a program that determines how long it takes a robot to get out of the grid or how the robot loops around.<br>", input:"There will be one or more grids for robots to navigate. The data for each is in the following form. On the first line are three integers separated by blanks: the number of rows in the grid, the number of columns in the grid, and the number of the column in which the robot enters from the north. The possible entry columns are numbered starting with one at the left. Then come the rows of the direction instructions. Each grid will have at least one and at most 10 rows and columns of instructions. The lines of instructions contain only the characters N, S, E, or W with no blanks. The end of input is indicated by a row containing 0 0 0.<br>", output:"For each grid in the input there is one line of output. Either the robot follows a certain number of instructions and exits the grid on any one the four sides or else the robot follows the instructions on a certain number of locations once, and then the instructions on some number of locations repeatedly. The sample input below corresponds to the two grids above and illustrates the two forms of output. The word &quot;step&quot; is always immediately followed by &quot;(s)&quot; whether or not the number before it is 1.<br>", sample_in:"3 6 5\nNEESWE\nWWWESS\nSNWWWW\n4 5 1\nSESWE\nEESNW\nNWEEN\nEWSEN\n0 0 ", sample_out:"10 step(s) to exit\n3 step(s) before a loop of 8 step(s)", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2082, vtotal_submit:5721, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 1999", author:"", tag:["TEST"]}
{pid:1036, vid:1036, oj:"hdu", title:"Average is not Fast Enough!", desc:"A relay is a race for two or more teams of runners. Each member of a team runs one section of the race. Your task is to help to evaluate the results of a relay race. <br><br>You have to process several teams. For each team you are given a list with the running times for every section of the race. You are to compute the average time per kilometer over the whole distance. That\'s easy, isn\'t it? <br>So if you like the fun and challenge competing at this contest, perhaps you like a relay race, too. Students from Ulm participated e.g. at the &quot;SOLA&quot; relay in Zurich, Switzerland. For more information visit http://www.sola.asvz.ethz.ch/ after the contest is over.<br>", input:"The first line of the input specifies the number of sections n followed by the total distance of the relay d in kilometers. You may safely assume that 1 &lt;= n &lt;= 20 and 0.0 &lt; d &lt; 200.0. Every following line gives information about one team: the team number t (an integer, right-justified in a field of width 3) is followed by the n results for each section, separated by a single space. These running times are given in the format &quot;h:mm:ss&quot; with integer numbers for the hours, minutes and seconds, respectively. In the special case of a runner being disqualified, the running time will be denoted by &quot;-:--:--&quot;. Finally, the data on every line is terminated by a newline character. Input is terminated by EOF.<br>", output:"For each team output exactly one line giving the team\'s number t right aligned in a field of width 3, and the average time for this team rounded to whole seconds in the format &quot;m:ss&quot;. If at least one of the team\'s runners has been disqualified, output &quot;-&quot; instead. Adhere to the sample output for the exact format of presentation.<br>", sample_in:"2 12.5\n  5 0:23:21 0:25:01\n 42 0:23:32 -:--:--\n  7 0:33:20 0:41:35", sample_out:"  5: 3:52 min/km\n 42: -\n  7: 6:00 min/km", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1194, vtotal_submit:3708, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 2001", author:"", tag:["TEST"]}
{pid:1037, vid:1037, oj:"hdu", title:"Keep on Truckin\'", desc:"Boudreaux and Thibodeaux are on the road again . . .<br><br>&quot;Boudreaux, we have to get this shipment of mudbugs to Baton Rouge by tonight!&quot;<br><br>&quot;Don\'t worry, Thibodeaux, I already checked ahead. There are three underpasses and our 18-wheeler will fit through all of them, so just keep that motor running!&quot;<br><br>&quot;We\'re not going to make it, I say!&quot;<br><br>So, which is it: will there be a very messy accident on Interstate 10, or is Thibodeaux just letting the sound of his own wheels drive him crazy?<br>", input:"Input to this problem will consist of a single data set. The data set will be formatted according to the following description.<br><br>The data set will consist of a single line containing 3 numbers, separated by single spaces. Each number represents the height of a single underpass in inches. Each number will be between 0 and 300 inclusive.<br>", output:"There will be exactly one line of output. This line will be:<br><br>&nbsp;&nbsp;&nbsp;NO CRASH<br><br>if the height of the 18-wheeler is less than the height of each of the underpasses, or:<br><br>&nbsp;&nbsp;&nbsp;CRASH X<br><br>otherwise, where X is the height of the first underpass in the data set that the 18-wheeler is unable to go under (which means its height is less than or equal to the height of the 18-wheeler). <br>The height of the 18-wheeler is 168 inches.<br>", sample_in:"180 160 170", sample_out:"CRASH 160", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4836, vtotal_submit:7797, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Central USA 2003", author:"", tag:["TEST"]}
{pid:1038, vid:1038, oj:"hdu", title:"Biker\'s Trip Odometer", desc:"Most bicycle speedometers work by using a Hall Effect sensor fastened to the front fork of the bicycle. A magnet is attached to one of the spokes on the front wheel so that it will line up with the Hall Effect switch once per revolution of the wheel. The speedometer monitors the sensor to count wheel revolutions. If the diameter of the wheel is known, the distance traveled can be easily be calculated if you know how many revolutions the wheel has made. In addition, if the time it takes to complete the revolutions is known, the average speed can also be calculated. <br>For this problem, you will write a program to determine the total distance traveled (in miles) and the average speed (in Miles Per Hour) given the wheel diameter, the number of revolutions and the total time of the trip. You can assume that the front wheel never leaves the ground, and there is no slipping or skidding.<br>", input:"Input consists of multiple datasets, one per line, of the form:<br><br>diameter revolutions time<br><br>The diameter is expressed in inches as a floating point value. The revolutions is an integer value. The time is expressed in seconds as a floating point value. Input ends when the value of revolutions is 0 (zero).<br>", output:"For each data set, print:<br><br>Trip #N: distance MPH<br><br>Of course N should be replaced by the data set number, distance by the total distance in miles (accurate to 2 decimal places) and MPH by the speed in miles per hour (accurate to 2 decimal places). Your program should not generate any output for the ending case when revolutions is 0.<br><br>Constants<br><br>For p use the value: 3.1415927.<br>There are 5280 feet in a mile.<br>There are 12 inches in a foot.<br>There are 60 minutes in an hour.<br>There are 60 seconds in a minute.<br>There are 201.168 meters in a furlong.<br>", sample_in:"26 1000 5\n27.25 873234 3000\n26 0 1000", sample_out:"Trip #1: 1.29 928.20\nTrip #2: 1179.86 1415.84", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2298, vtotal_submit:3837, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Greater New York 2003", author:"", tag:["TEST"]}
{pid:1039, vid:1039, oj:"hdu", title:"Easier Done Than Said?", desc:"Password security is a tricky thing. Users prefer simple passwords that are easy to remember (like buddy), but such passwords are often insecure. Some sites use random computer-generated passwords (like xvtpzyo), but users have a hard time remembering them and sometimes leave them written on notes stuck to their computer. One potential solution is to generate &quot;pronounceable&quot; passwords that are relatively secure but still easy to remember.<br><br>FnordCom is developing such a password generator. You work in the quality control department, and it\'s your job to test the generator and make sure that the passwords are acceptable. To be acceptable, a password must satisfy these three rules:<br><br>It must contain at least one vowel.<br><br>It cannot contain three consecutive vowels or three consecutive consonants.<br><br>It cannot contain two consecutive occurrences of the same letter, except for \'ee\' or \'oo\'.<br><br>(For the purposes of this problem, the vowels are \'a\', \'e\', \'i\', \'o\', and \'u\'; all other letters are consonants.) Note that these rules are not perfect; there are many common/pronounceable words that are not acceptable.<br>", input:"The input consists of one or more potential passwords, one per line, followed by a line containing only the word \'end\' that signals the end of the file. Each password is at least one and at most twenty letters long and consists only of lowercase letters.<br>", output:"For each password, output whether or not it is acceptable, using the precise format shown in the example.<br>", sample_in:"a\ntv\nptoui\nbontres\nzoggax\nwiinq\neep\nhouctuh\nend", sample_out:"&lt;a> is acceptable.\n&lt;tv> is not acceptable.\n&lt;ptoui> is not acceptable.\n&lt;bontres> is not acceptable.\n&lt;zoggax> is not acceptable.\n&lt;wiinq> is not acceptable.\n&lt;eep> is acceptable.\n&lt;houctuh> is acceptable.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2869, vtotal_submit:6833, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 2000", author:"", tag:["TEST"]}
{pid:1040, vid:1040, oj:"hdu", title:"As Easy As A+B", desc:"These days, I am thinking about a question, how can I get a problem as easy as A+B? It is fairly difficulty to do such a thing. Of course, I got it after many waking nights.<br>Give you some integers, your task is to sort these number ascending (升序).<br>You should know how easy the problem is now!<br>Good luck!<br>", input:"Input contains multiple test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow. Each test case contains an integer N (1&lt;=N&lt;=1000 the number of integers to be sorted) and then N integers follow in the same line. <br>It is guarantied that all integers are in the range of 32-int.<br>", output:"For each case, print the sorting result, and one line one case.<br>", sample_in:"2\n3 2 1 3\n9 1 4 7 2 5 8 3 6 9", sample_out:"1 2 3\n1 2 3 4 5 6 7 8 9", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:11418, vtotal_submit:33462, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1041, vid:1041, oj:"hdu", title:"Computer Transformation", desc:"A sequence consisting of one digit, the number 1 is initially written into a computer. At each successive time step, the computer simultaneously tranforms each digit 0 into the sequence 1 0 and each digit 1 into the sequence 0 1. So, after the first time step, the sequence 0 1 is obtained; after the second, the sequence 1 0 0 1, after the third, the sequence 0 1 1 0 1 0 0 1 and so on. <br><br>How many pairs of consequitive zeroes will appear in the sequence after n steps? <br>", input:"Every input line contains one natural number n (0 &lt; n ≤1000). ", output:"For each input n print the number of consecutive zeroes pairs that will appear in the sequence after n steps.<br>", sample_in:"2\n3", sample_out:"1\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1478, vtotal_submit:5446, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southeastern Europe 2005", author:"", tag:["TEST"]}
{pid:1042, vid:1042, oj:"hdu", title:"N!", desc:"Given an integer N(0 ≤ N ≤ 10000), your task is to calculate N!<br>", input:"One N in one line, process to the end of file.<br>", output:"For each N, output N! in one line.<br>", sample_in:"1\n2\n3", sample_out:"1\n2\n6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8520, vtotal_submit:48757, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"", author:"JGShining（极光炫影）", tag:["TEST"]}
{pid:1043, vid:1043, oj:"hdu", title:"Eight", desc:"The 15-puzzle has been around for over 100 years; even if you don\'t know it by that name, you\'ve seen it. It is constructed with 15 sliding tiles, each with a number from 1 to 15 on it, and all packed into a 4 by 4 frame with one tile missing. Let\'s call the missing tile \'x\'; the object of the puzzle is to arrange the tiles so that they are ordered as: <br><pre><br> 1  2  3  4<br> 5  6  7  8<br> 9 10 11 12<br>13 14 15  x<br></pre><br>where the only legal operation is to exchange \'x\' with one of the tiles with which it shares an edge. As an example, the following sequence of moves solves a slightly scrambled puzzle: <br><pre><br> 1  2  3  4     1  2  3  4     1  2  3  4     1  2  3  4<br> 5  6  7  8     5  6  7  8     5  6  7  8     5  6  7  8<br> 9  x 10 12     9 10  x 12     9 10 11 12     9 10 11 12<br>13 14 11 15    13 14 11 15    13 14  x 15    13 14 15  x<br>            r-&gt;            d-&gt;            r-&gt;<br></pre><br>The letters in the previous row indicate which neighbor of the \'x\' tile is swapped with the \'x\' tile at each step; legal values are \'r\',\'l\',\'u\' and \'d\', for right, left, up, and down, respectively. <br><br>Not all puzzles can be solved; in 1870, a man named Sam Loyd was famous for distributing an unsolvable version of the puzzle, and <br>frustrating many people. In fact, all you have to do to make a regular puzzle into an unsolvable one is to swap two tiles (not counting the missing \'x\' tile, of course). <br><br>In this problem, you will write a program for solving the less well-known 8-puzzle, composed of tiles on a three by three <br>arrangement.<br>", input:"You will receive, several descriptions of configuration of the 8 puzzle. One description is just a list of the tiles in their initial positions, with the rows listed from top to bottom, and the tiles listed from left to right within a row, where the tiles are represented by numbers 1 to 8, plus \'x\'. For example, this puzzle <br><br> 1  2  3 <br> x  4  6 <br> 7  5  8 <br><br>is described by this list: <br><br>1 2 3 x 4 6 7 5 8<br>", output:"You will print to standard output either the word ``unsolvable\'\', if the puzzle has no solution, or a string consisting entirely of the letters \'r\', \'l\', \'u\' and \'d\' that describes a series of moves that produce a solution. The string should include no spaces and start at the beginning of the line. Do not print a blank line between cases.<br>", sample_in:"2  3  4  1  5  x  7  6  8", sample_out:"ullddrurdllurdruldr", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:950, vtotal_submit:10503, special_status:1, time_limit:5000, mem_limit:32768, hint:"", source:"South Central USA 1998 (Sepcial Judge Module By JGShining)", author:"", tag:["TEST"]}
{pid:1044, vid:1044, oj:"hdu", title:"Collect More Jewels", desc:"It is written in the Book of The Lady: After the Creation, the cruel god Moloch rebelled against the authority of Marduk the Creator.Moloch stole from Marduk the most powerful of all the artifacts of the gods, the Amulet of Yendor, and he hid it in the dark cavities of Gehennom, the Under World, where he now lurks, and bides his time.<br><br>Your goddess The Lady seeks to possess the Amulet, and with it to gain deserved ascendance over the other gods.<br><br>You, a newly trained Rambler, have been heralded from birth as the instrument of The Lady. You are destined to recover the Amulet for your deity, or die in the attempt. Your hour of destiny has come. For the sake of us all: Go bravely with The Lady!<br><br>If you have ever played the computer game NETHACK, you must be familiar with the quotes above. If you have never heard of it, do not worry. You will learn it (and love it) soon.<br><br>In this problem, you, the adventurer, are in a dangerous dungeon. You are informed that the dungeon is going to collapse. You must find the exit stairs within given time. However, you do not want to leave the dungeon empty handed. There are lots of rare jewels in the dungeon. Try collecting some of them before you leave. Some of the jewels are cheaper and some are more expensive. So you will try your best to maximize your collection, more importantly, leave the dungeon in time.<br>", input:"Standard input will contain multiple test cases. The first line of the input is a single integer T (1 &lt;= T &lt;= 10) which is the number of test cases. T test cases follow, each preceded by a single blank line.<br><br>The first line of each test case contains four integers W (1 &lt;= W &lt;= 50), H (1 &lt;= H &lt;= 50), L (1 &lt;= L &lt;= 1,000,000) and M (1 &lt;= M &lt;= 10). The dungeon is a rectangle area W block wide and H block high. L is the time limit, by which you need to reach the exit. You can move to one of the adjacent blocks up, down, left and right in each time unit, as long as the target block is inside the dungeon and is not a wall. Time starts at 1 when the game begins. M is the number of jewels in the dungeon. Jewels will be collected once the adventurer is in that block. This does not cost extra time.<br><br>The next line contains M integers，which are the values of the jewels.<br><br>The next H lines will contain W characters each. They represent the dungeon map in the following notation:<br>&gt; [*] marks a wall, into which you can not move;<br>&gt; [.] marks an empty space, into which you can move;<br>&gt; [@] marks the initial position of the adventurer;<br>&gt; [&lt;] marks the exit stairs;<br>&gt; [A] - [J] marks the jewels.<br>", output:"Results should be directed to standard output. Start each case with &quot;Case #:&quot; on a single line, where # is the case number starting from 1. Two consecutive cases should be separated by a single blank line. No blank line should be produced after the last test case.<br><br>If the adventurer can make it to the exit stairs in the time limit, print the sentence &quot;The best score is S.&quot;, where S is the maximum value of the jewels he can collect along the way; otherwise print the word &quot;Impossible&quot; on a single line.<br>", sample_in:"3\n\n4 4 2 2\n100 200\n****\n*@A*\n*B&lt;*\n****\n\n4 4 1 2\n100 200\n****\n*@A*\n*B&lt;*\n****\n\n12 5 13 2\n100 200\n************\n*B.........*\n*.********.*\n*@...A....&lt;*\n************", sample_out:"Case 1:\nThe best score is 200.\n\nCase 2:\nImpossible\n\nCase 3:\nThe best score is 300.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:468, vtotal_submit:4276, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2005, Hangzhou (Mainland China), Preliminary", author:"", tag:["TEST"]}
{pid:1045, vid:1045, oj:"hdu", title:"Fire Net", desc:"Suppose that we have a square city with straight streets. A map of a city is a square board with n rows and n columns, each representing a street or a piece of wall. <br><br>A blockhouse is a small castle that has four openings through which to shoot. The four openings are facing North, East, South, and West, respectively. There will be one machine gun shooting through each opening. <br><br>Here we assume that a bullet is so powerful that it can run across any distance and destroy a blockhouse on its way. On the other hand, a wall is so strongly built that can stop the bullets. <br><br>The goal is to place as many blockhouses in a city as possible so that no two can destroy each other. A configuration of blockhouses is legal provided that no two blockhouses are on the same horizontal row or vertical column in a map unless there is at least one wall separating them. In this problem we will consider small square cities (at most 4x4) that contain walls through which bullets cannot run through. <br><br>The following image shows five pictures of the same board. The first picture is the empty board, the second and third pictures show legal configurations, and the fourth and fifth pictures show illegal configurations. For this board, the maximum number of blockhouses in a legal configuration is 5; the second picture shows one way to do it, but there are several other ways. <br><br><img src=data/images/1045-1.jpg><br><br>Your task is to write a program that, given a description of a map, calculates the maximum number of blockhouses that can be placed in the city in a legal configuration. <br>", input:"The input file contains one or more map descriptions, followed by a line containing the number 0 that signals the end of the file. Each map description begins with a line containing a positive integer n that is the size of the city; n will be at most 4. The next n lines each describe one row of the map, with a \'.\' indicating an open space and an uppercase \'X\' indicating a wall. There are no spaces in the input file. <br>", output:"For each test case, output one line containing the maximum number of blockhouses that can be placed in the city in a legal configuration.<br>", sample_in:"4\n.X..\n....\nXX..\n....\n2\nXX\n.X\n3\n.X.\nX.X\n.X.\n3\n...\n.XX\n.XX\n4\n....\n....\n....\n....\n0", sample_out:"5\n1\n5\n2\n4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2212, vtotal_submit:5560, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Zhejiang University Local Contest 2001", author:"", tag:["TEST"]}
{pid:1046, vid:1046, oj:"hdu", title:"Gridland", desc:"For years, computer scientists have been trying to find efficient solutions to different computing problems. For some of them efficient algorithms are already available, these are the “easy” problems like sorting, evaluating a polynomial or finding the shortest path in a graph. For the “hard” ones only exponential-time algorithms are known. The traveling-salesman problem belongs to this latter group. Given a set of N towns and roads between these towns, the problem is to compute the shortest path allowing a salesman to visit each of the towns once and only once and return to the starting point.<br><br>The president of Gridland has hired you to design a program that calculates the length of the shortest traveling-salesman tour for the towns in the country. In Gridland, there is one town at each of the points of a rectangular grid. Roads run from every town in the directions North, Northwest, West, Southwest, South, Southeast, East, and Northeast, provided that there is a neighbouring town in that direction. The distance between neighbouring towns in directions North–South or East–West is 1 unit. The length of the roads is measured by the Euclidean distance. For example, Figure 7 shows 2 × 3-Gridland, i.e., a rectangular grid of dimensions 2 by 3. In 2 × 3-Gridland, the shortest tour has length 6. <br><br><img src=data/images/1046-1.jpg><br>", input:"The first line contains the number of scenarios.<br><br>For each scenario, the grid dimensions m and n will be given as two integer numbers in a single line, separated by a single blank, satisfying 1 &lt; m &lt; 50 and 1 &lt; n &lt; 50.<br>", output:"The output for each scenario begins with a line containing “Scenario #i:”, where i is the number of the scenario starting at 1. In the next line, print the length of the shortest traveling-salesman tour rounded to two decimal digits. The output for every scenario ends with a blank line.<br>", sample_in:"2\n2 2\n2 3", sample_out:"Scenario #1:\n4.00\n\nScenario #2:\n6.00", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1600, vtotal_submit:3947, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Northwestern Europe 2001", author:"", tag:["TEST"]}
{pid:1047, vid:1047, oj:"hdu", title:"Integer Inquiry", desc:"One of the first users of BIT\'s new supercomputer was Chip Diller. He extended his exploration of powers of 3 to go from 0 to 333 and he explored taking various sums of those numbers. <br>``This supercomputer is great,\'\' remarked Chip. ``I only wish Timothy were here to see these results.\'\' (Chip moved to a new apartment, once one became available on the third floor of the Lemon Sky apartments on Third Street.) <br>", input:"The input will consist of at most 100 lines of text, each of which contains a single VeryLongInteger. Each VeryLongInteger will be 100 or fewer characters in length, and will only contain digits (no VeryLongInteger will be negative). <br><br>The final input line will contain a single zero on a line by itself.<br>", output:"Your program should output the sum of the VeryLongIntegers given in the input. <br><br><br>This problem contains multiple test cases!<br><br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br>", sample_in:"1\n\n\n123456789012345678901234567890\n123456789012345678901234567890\n123456789012345678901234567890\n0", sample_out:"370370367037037036703703703670", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2043, vtotal_submit:10507, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"East Central North America 1996", author:"", tag:["TEST"]}
{pid:1048, vid:1048, oj:"hdu", title:"The Hardest Problem Ever", desc:"Julius Caesar lived in a time of danger and intrigue. The hardest situation Caesar ever faced was keeping himself alive. In order for him to survive, he decided to create one of the first ciphers. This cipher was so incredibly sound, that no one could figure it out without knowing how it worked. <br>You are a sub captain of Caesar\'s army. It is your job to decipher the messages sent by Caesar and provide to your general. The code is simple. For each letter in a plaintext message, you shift it five places to the right to create the secure message (i.e., if the letter is \'A\', the cipher text would be \'F\'). Since you are creating plain text out of Caesar\'s messages, you will do the opposite: <br><br>Cipher text<br>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z<br><br>Plain text<br>V W X Y Z A B C D E F G H I J K L M N O P Q R S T U <br><br>Only letters are shifted in this cipher. Any non-alphabetical character should remain the same, and all alphabetical characters will be upper case.<br>", input:"Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets. All characters will be uppercase. <br><br>A single data set has 3 components: <br><br>Start line - A single line, &quot;START&quot; <br><br>Cipher message - A single line containing from one to two hundred characters, inclusive, comprising a single message from Caesar <br><br>End line - A single line, &quot;END&quot; <br><br>Following the final data set will be a single line, &quot;ENDOFINPUT&quot;.<br>", output:"For each data set, there will be exactly one line of output. This is the original message by Caesar.<br>", sample_in:"START\nNS BFW, JAJSYX TK NRUTWYFSHJ FWJ YMJ WJXZQY TK YWNANFQ HFZXJX\nEND\nSTART\nN BTZQI WFYMJW GJ KNWXY NS F QNYYQJ NGJWNFS ANQQFLJ YMFS XJHTSI NS WTRJ\nEND\nSTART\nIFSLJW PSTBX KZQQ BJQQ YMFY HFJXFW NX RTWJ IFSLJWTZX YMFS MJ\nEND\nENDOFINPUT", sample_out:"IN WAR, EVENTS OF IMPORTANCE ARE THE RESULT OF TRIVIAL CAUSES\nI WOULD RATHER BE FIRST IN A LITTLE IBERIAN VILLAGE THAN SECOND IN ROME\nDANGER KNOWS FULL WELL THAT CAESAR IS MORE DANGEROUS THAN HE", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5356, vtotal_submit:14361, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Central USA 2002", author:"", tag:["TEST"]}
{pid:1049, vid:1049, oj:"hdu", title:"Climbing Worm", desc:"An inch worm is at the bottom of a well n inches deep. It has enough energy to climb u inches every minute, but then has to rest a minute before climbing again. During the rest, it slips down d inches. The process of climbing and resting then repeats. How long before the worm climbs out of the well? We\'ll always count a portion of a minute as a whole minute and if the worm just reaches the top of the well at the end of its climbing, we\'ll assume the worm makes it out.<br>", input:"There will be multiple problem instances. Each line will contain 3 positive integers n, u and d. These give the values mentioned in the paragraph above. Furthermore, you may assume d &lt; u and n &lt; 100. A value of n = 0 indicates end of output.<br>", output:"Each input instance should generate a single integer on a line, indicating the number of minutes it takes for the worm to climb out of the well.<br>", sample_in:"10 2 1\n20 3 1\n0 0 0", sample_out:"17\n19", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:6286, vtotal_submit:11208, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"East Central North America 2002", author:"", tag:["TEST"]}
{pid:1050, vid:1050, oj:"hdu", title:"Moving Tables", desc:"The famous ACM (Advanced Computer Maker) Company has rented a floor of a building whose shape is in the following figure. <br><br><center><img src=data/images/1050-1.gif></center><br><br>The floor has 200 rooms each on the north side and south side along the corridor. Recently the Company made a plan to reform its system. The reform includes moving a lot of tables between rooms. Because the corridor is narrow and all the tables are big, only one table can pass through the corridor. Some plan is needed to make the moving efficient. The manager figured out the following plan: Moving a table from a room to another room can be done within 10 minutes. When moving a table from room i to room j, the part of the corridor between the front of room i and the front of room j is used. So, during each 10 minutes, several moving between two rooms not sharing the same part of the corridor will be done simultaneously. To make it clear the manager illustrated the possible cases and impossible cases of simultaneous moving. <br><br><center><img src=data/images/1050-2.gif></center><br><br>For each room, at most one table will be either moved in or moved out. Now, the manager seeks out a method to minimize the time to move all the tables. Your job is to write a program to solve the manager’s problem.<br>", input:"The input consists of T test cases. The number of test cases ) (T is given in the first line of the input. Each test case begins with a line containing an integer N , 1&lt;=N&lt;=200 , that represents the number of tables to move. Each of the following N lines contains two positive integers s and t, representing that a table is to move from room number s to room number t (each room number appears at most once in the N lines). From the N+3-rd line, the remaining test cases are listed in the same manner as above.<br>", output:"The output should contain the minimum time in minutes to complete the moving, one per line.<br>", sample_in:"3 \n4 \n10 20 \n30 40 \n50 60 \n70 80 \n2 \n1 3 \n2 200 \n3 \n10 100 \n20 80 \n30 50 ", sample_out:"10\n20\n30", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4003, vtotal_submit:16979, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2001, Taejon (South Korea)", author:"", tag:["TEST"]}
{pid:1051, vid:1051, oj:"hdu", title:"Wooden Sticks", desc:"There is a pile of n wooden sticks. The length and weight of each stick are known in advance. The sticks are to be processed by a woodworking machine in one by one fashion. It needs some time, called setup time, for the machine to prepare processing a stick. The setup times are associated with cleaning operations and changing tools and shapes in the machine. The setup times of the woodworking machine are given as follows: <br><br>(a) The setup time for the first wooden stick is 1 minute. <br>(b) Right after processing a stick of length l and weight w , the machine will need no setup time for a stick of length l\' and weight w\' if l&lt;=l\' and w&lt;=w\'. Otherwise, it will need 1 minute for setup. <br><br>You are to find the minimum setup time to process a given pile of n wooden sticks. For example, if you have five sticks whose pairs of length and weight are (4,9), (5,2), (2,1), (3,5), and (1,4), then the minimum setup time should be 2 minutes since there is a sequence of pairs (1,4), (3,5), (4,9), (2,1), (5,2).<br>", input:"The input consists of T test cases. The number of test cases (T) is given in the first line of the input file. Each test case consists of two lines: The first line has an integer n , 1&lt;=n&lt;=5000, that represents the number of wooden sticks in the test case, and the second line contains n 2 positive integers l1, w1, l2, w2, ..., ln, wn, each of magnitude at most 10000 , where li and wi are the length and weight of the i th wooden stick, respectively. The 2n integers are delimited by one or more spaces.<br>", output:"The output should contain the minimum setup time in minutes, one per line.<br>", sample_in:"3 \n5 \n4 9 5 2 2 1 3 5 1 4 \n3 \n2 2 1 1 2 2 \n3 \n1 3 2 2 3 1", sample_out:"2\n1\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2881, vtotal_submit:10275, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2001, Taejon (South Korea)", author:"", tag:["TEST"]}
{pid:1052, vid:1052, oj:"hdu", title:"Tian Ji -- The Horse Racing", desc:"Here is a famous story in Chinese history.<br><br>&quot;That was about 2300 years ago. General Tian Ji was a high official in the country Qi. He likes to play horse racing with the king and others.&quot;<br><br>&quot;Both of Tian and the king have three horses in different classes, namely, regular, plus, and super. The rule is to have three rounds in a match; each of the horses must be used in one round. The winner of a single round takes two hundred silver dollars from the loser.&quot;<br><br>&quot;Being the most powerful man in the country, the king has so nice horses that in each class his horse is better than Tian\'s. As a result, each time the king takes six hundred silver dollars from Tian.&quot;<br><br>&quot;Tian Ji was not happy about that, until he met Sun Bin, one of the most famous generals in Chinese history. Using a little trick due to Sun, Tian Ji brought home two hundred silver dollars and such a grace in the next match.&quot;<br><br>&quot;It was a rather simple trick. Using his regular class horse race against the super class from the king, they will certainly lose that round. But then his plus beat the king\'s regular, and his super beat the king\'s plus. What a simple trick. And how do you think of Tian Ji, the high ranked official in China?&quot;<br><br><img src=data/images/1052-1.gif><br><br>Were Tian Ji lives in nowadays, he will certainly laugh at himself. Even more, were he sitting in the ACM contest right now, he may discover that the horse racing problem can be simply viewed as finding the maximum matching in a bipartite graph. Draw Tian\'s horses on one side, and the king\'s horses on the other. Whenever one of Tian\'s horses can beat one from the king, we draw an edge between them, meaning we wish to establish this pair. Then, the problem of winning as many rounds as possible is just to find the maximum matching in this graph. If there are ties, the problem becomes more complicated, he needs to assign weights 0, 1, or -1 to all the possible edges, and find a maximum weighted perfect matching...<br><br>However, the horse racing problem is a very special case of bipartite matching. The graph is decided by the speed of the horses --- a vertex of higher speed always beat a vertex of lower speed. In this case, the weighted bipartite matching algorithm is a too advanced tool to deal with the problem.<br><br>In this problem, you are asked to write a program to solve this special case of matching problem.<br>", input:"The input consists of up to 50 test cases. Each case starts with a positive integer n (n &lt;= 1000) on the first line, which is the number of horses on each side. The next n integers on the second line are the speeds of Tian’s horses. Then the next n integers on the third line are the speeds of the king’s horses. The input ends with a line that has a single 0 after the last test case.<br>", output:"For each input case, output a line containing a single number, which is the maximum money Tian Ji will get, in silver dollars.<br>", sample_in:"3\n92 83 71\n95 87 74\n2\n20 20\n20 20\n2\n20 19\n22 18\n0", sample_out:"200\n0\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2973, vtotal_submit:16165, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2004 Asia Regional Shanghai", author:"", tag:["TEST"]}
{pid:1053, vid:1053, oj:"hdu", title:"Entropy", desc:"An entropy encoder is a data encoding method that achieves lossless data compression by encoding a message with “wasted” or “extra” information removed. In other words, entropy encoding removes information that was not necessary in the first place to accurately encode the message. A high degree of entropy implies a message with a great deal of wasted information; english text encoded in ASCII is an example of a message type that has very high entropy. Already compressed messages, such as JPEG graphics or ZIP archives, have very little entropy and do not benefit from further attempts at entropy encoding.<br><br>English text encoded in ASCII has a high degree of entropy because all characters are encoded using the same number of bits, eight. It is a known fact that the letters E, L, N, R, S and T occur at a considerably higher frequency than do most other letters in english text. If a way could be found to encode just these letters with four bits, then the new encoding would be smaller, would contain all the original information, and would have less entropy. ASCII uses a fixed number of bits for a reason, however: it’s easy, since one is always dealing with a fixed number of bits to represent each possible glyph or character. How would an encoding scheme that used four bits for the above letters be able to distinguish between the four-bit codes and eight-bit codes? This seemingly difficult problem is solved using what is known as a “prefix-free variable-length” encoding.<br><br>In such an encoding, any number of bits can be used to represent any glyph, and glyphs not present in the message are simply not encoded. However, in order to be able to recover the information, no bit pattern that encodes a glyph is allowed to be the prefix of any other encoding bit pattern. This allows the encoded bitstream to be read bit by bit, and whenever a set of bits is encountered that represents a glyph, that glyph can be decoded. If the prefix-free constraint was not enforced, then such a decoding would be impossible.<br><br>Consider the text “AAAAABCD”. Using ASCII, encoding this would require 64 bits. If, instead, we encode “A” with the bit pattern “00”, “B” with “01”, “C” with “10”, and “D” with “11” then we can encode this text in only 16 bits; the resulting bit pattern would be “0000000000011011”. This is still a fixed-length encoding, however; we’re using two bits per glyph instead of eight. Since the glyph “A” occurs with greater frequency, could we do better by encoding it with fewer bits? In fact we can, but in order to maintain a prefix-free encoding, some of the other bit patterns will become longer than two bits. An optimal encoding is to encode “A” with “0”, “B” with “10”, “C” with “110”, and “D” with “111”. (This is clearly not the only optimal encoding, as it is obvious that the encodings for B, C and D could be interchanged freely for any given encoding without increasing the size of the final encoded message.) Using this encoding, the message encodes in only 13 bits to “0000010110111”, a compression ratio of 4.9 to 1 (that is, each bit in the final encoded message represents as much information as did 4.9 bits in the original encoding). Read through this bit pattern from left to right and you’ll see that the prefix-free encoding makes it simple to decode this into the original text even though the codes have varying bit lengths.<br><br>As a second example, consider the text “THE CAT IN THE HAT”. In this text, the letter “T” and the space character both occur with the highest frequency, so they will clearly have the shortest encoding bit patterns in an optimal encoding. The letters “C”, “I’ and “N” only occur once, however, so they will have the longest codes.<br><br>There are many possible sets of prefix-free variable-length bit patterns that would yield the optimal encoding, that is, that would allow the text to be encoded in the fewest number of bits. One such optimal encoding is to encode spaces with “00”, “A” with “100”, “C” with “1110”, “E” with “1111”, “H” with “110”, “I” with “1010”, “N” with “1011” and “T” with “01”. The optimal encoding therefore requires only 51 bits compared to the 144 that would be necessary to encode the message with 8-bit ASCII encoding, a compression ratio of 2.8 to 1.<br>", input:"The input file will contain a list of text strings, one per line. The text strings will consist only of uppercase alphanumeric characters and underscores (which are used in place of spaces). The end of the input will be signalled by a line containing only the word “END” as the text string. This line should not be processed.<br>", output:"For each text string in the input, output the length in bits of the 8-bit ASCII encoding, the length in bits of an optimal prefix-free variable-length encoding, and the compression ratio accurate to one decimal point.<br>", sample_in:"AAAAABCD\nTHE_CAT_IN_THE_HAT\nEND", sample_out:"64 13 4.9\n144 51 2.8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:901, vtotal_submit:3567, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Greater New York 2000", author:"", tag:["TEST"]}
{pid:1054, vid:1054, oj:"hdu", title:"Strategic Game", desc:"Bob enjoys playing computer games, especially strategic games, but sometimes he cannot find the solution fast enough and then he is very sad. Now he has the following problem. He must defend a medieval city, the roads of which form a tree. He has to put the minimum number of soldiers on the nodes so that they can observe all the edges. Can you help him?<br><br>Your program should find the minimum number of soldiers that Bob has to put for a given tree.<br><br>The input file contains several data sets in text format. Each data set represents a tree with the following description:<br><br>the number of nodes<br>the description of each node in the following format<br>node_identifier:(number_of_roads) node_identifier1 node_identifier2 ... node_identifier<br>or<br>node_identifier:(0)<br><br>The node identifiers are integer numbers between 0 and n-1, for n nodes (0 &lt; n &lt;= 1500). Every edge appears only once in the input data.<br><br>For example for the tree: <br><br><img src=data/images/1054-1.gif> <br><br>the solution is one soldier ( at the node 1).<br><br>The output should be printed on the standard output. For each given input data set, print one integer number in a single line that gives the result (the minimum number of soldiers). An example is given in the following table:<br>", input:"", output:"", sample_in:"4\n0:(1) 1\n1:(2) 2 3\n2:(0)\n3:(0)\n5\n3:(3) 1 4 2\n1:(1) 0\n2:(0)\n0:(0)\n4:(0)", sample_out:"1\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1173, vtotal_submit:4420, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"Southeastern Europe 2000", author:"", tag:["TEST"]}
{pid:1055, vid:1055, oj:"hdu", title:"Color a Tree", desc:"Bob is very interested in the data structure of a tree. A tree is a directed graph in which a special node is singled out, called the &quot;root&quot; of the tree, and there is a unique path from the root to each of the other nodes. <br><br>Bob intends to color all the nodes of a tree with a pen. A tree has N nodes, these nodes are numbered 1, 2, ..., N. Suppose coloring a node takes 1 unit of time, and after finishing coloring one node, he is allowed to color another. Additionally, he is allowed to color a node only when its father node has been colored. Obviously, Bob is only allowed to color the root in the first try. <br><br>Each node has a “coloring cost factor”, Ci. The coloring cost of each node depends both on Ci and the time at which Bob finishes the coloring of this node. At the beginning, the time is set to 0. If the finishing time of coloring node i is Fi, then the coloring cost of node i is Ci * Fi. <br><br>For example, a tree with five nodes is shown in Figure-1. The coloring cost factors of each node are 1, 2, 1, 2 and 4. Bob can color the tree in the order 1, 3, 5, 2, 4, with the minimum total coloring cost of 33.<br><br><img src=data/images/1055-1.jpg><br><br>Given a tree and the coloring cost factor of each node, please help Bob to find the minimum possible total coloring cost for coloring all the nodes.<br>", input:"The input consists of several test cases. The first line of each case contains two integers N and R (1 &lt;= N &lt;= 1000, 1 &lt;= R &lt;= N), where N is the number of nodes in the tree and R is the node number of the root node. The second line contains N integers, the i-th of which is Ci (1 &lt;= Ci &lt;= 500), the coloring cost factor of node i. Each of the next N-1 lines contains two space-separated node numbers V1 and V2, which are the endpoints of an edge in the tree, denoting that V1 is the father node of V2. No edge will be listed twice, and all edges will be listed. <br><br>A test case of N = 0 and R = 0 indicates the end of input, and should not be processed. <br>", output:"For each test case, output a line containing the minimum total coloring cost required for Bob to color all the nodes.<br>", sample_in:"5 1\n1 2 1 2 4\n1 2\n1 3\n2 4\n3 5\n0 0", sample_out:"33", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:241, vtotal_submit:925, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2004, Beijing (Mainland China)", author:"", tag:["TEST"]}
{pid:1056, vid:1056, oj:"hdu", title:"HangOver", desc:"How far can you make a stack of cards overhang a table? If you have one card, you can create a maximum overhang of half a card length. (We\'re assuming that the cards must be perpendicular to the table.) With two cards you can make the top card overhang the bottom one by half a card length, and the bottom one overhang the table by a third of a card length, for a total maximum overhang of 1/2 + 1/3 = 5/6 card lengths. In general you can make n cards overhang by 1/2 + 1/3 + 1/4 + ... + 1/(n + 1) card lengths, where the top card overhangs the second by 1/2, the second overhangs tha third by 1/3, the third overhangs the fourth by 1/4, etc., and the bottom card overhangs the table by 1/(n + 1). This is illustrated in the figure below.<br><br><img src=data/images/1056-1.gif> <br><br>The input consists of one or more test cases, followed by a line containing the number 0.00 that signals the end of the input. Each test case is a single line containing a positive floating-point number c whose value is at least 0.01 and at most 5.20; c will contain exactly three digits.<br><br>For each test case, output the minimum number of cards necessary to achieve an overhang of at least c card lengths. Use the exact output format shown in the examples.<br>", input:"", output:"", sample_in:"1.00\n3.71\n0.04\n5.19\n0.00", sample_out:"3 card(s)\n61 card(s)\n1 card(s)\n273 card(s)", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2985, vtotal_submit:8666, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 2001", author:"", tag:["TEST"]}
{pid:1057, vid:1057, oj:"hdu", title:"A New Growth Industry", desc:"<img src=data/images/1057-1.gif><br><br>A biologist experimenting with DNA modification of bacteria has found a way to make bacterial colonies sensitive to the <br>surrounding population density. By changing the DNA, he is able to “program” the bacteria to respond to the varying densities in their immediate neighborhood. <br><br>The culture dish is a square, divided into 400 smaller squares (20x20). Population in each small square is measured on a four point scale (from 0 to 3). The DNA information is represented as an array D, indexed from 0 to 15, of integer values and is interpreted as follows: <br><br>In any given culture dish square, let K be the sum of that square\'s density and the densities of the four squares immediately to the left, right, above and below that square (squares outside the dish are considered to have density 0). Then, by the next day, that dish square\'s density will change by D[K] (which may be a positive, negative, or zero value). The total density cannot, however, exceed 3 nor drop below 0. <br><br>Now, clearly, some DNA programs cause all the bacteria to die off (e.g., [-3, -3, …, -3]). Others result in immediate population explosions (e.g., [3,3,3, …, 3]), and others are just plain boring (e.g., [0, 0, … 0]). The biologist is interested in how some of the less obvious DNA programs might behave. <br><br>Write a program to simulate the culture growth, reading in the number of days to be simulated, the DNA rules, and the initial population densities of the dish.<br>", input:"Input to this program consists of three parts: <br><br>1. The first line will contain a single integer denoting the number of days to be simulated. <br><br>2. The second line will contain the DNA rule D as 16 integer values, ordered from D[0] to D[15], separated from one another by one or more blanks. Each integer will be in the range -3…3, inclusive. <br><br>3. The remaining twenty lines of input will describe the initial population density in the culture dish. Each line describes one row of squares in the culture dish, and will contain 20 integers in the range 0…3, separated from one another by 1 or more blanks. <br>", output:"The program will produce exactly 20 lines of output, describing the population densities in the culture dish at the end of the simulation. Each line represents a row of squares in the culture dish, and will consist of 20 characters, plus the usual end-of-line terminator. <br><br>Each character will represent the population density at a single dish square, as follows: <br><br><img src=data/images/1057-2.gif><br><br>No other characters may appear in the output. <br>", sample_in:"1\n\n2 \n0 1 1 1 2 1 0 -1 -1 -1 -2 -2 -3 -3 -3 -3 \n3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0", sample_out:"##!................. \n#!.................. \n!................... \n.................... \n.................... \n.................... \n.................... \n.........!.......... \n........!#!......... \n.......!#X#!........ \n........!#!......... \n.........!.......... \n.................... \n.................... \n.................... \n.................... \n.................... \n.................... \n.................... \n....................", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:374, vtotal_submit:1158, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Atlantic USA 2001", author:"", tag:["TEST"]}
{pid:1058, vid:1058, oj:"hdu", title:"Humble Numbers", desc:"A number whose only prime factors are 2,3,5 or 7 is called a humble number. The sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 24, 25, 27, ... shows the first 20 humble numbers. <br><br>Write a program to find and print the nth element in this sequence<br>", input:"The input consists of one or more test cases. Each test case consists of one integer n with 1 &lt;= n &lt;= 5842. Input is terminated by a value of zero (0) for n.<br>", output:"For each test case, print one line saying &quot;The nth humble number is number.&quot;. Depending on the value of n, the correct suffix &quot;st&quot;, &quot;nd&quot;, &quot;rd&quot;, or &quot;th&quot; for the ordinal number nth has to be used like it is shown in the sample output.<br>", sample_in:"1\n2\n3\n4\n11\n12\n13\n21\n22\n23\n100\n1000\n5842\n0", sample_out:"The 1st humble number is 1.\nThe 2nd humble number is 2.\nThe 3rd humble number is 3.\nThe 4th humble number is 4.\nThe 11th humble number is 12.\nThe 12th humble number is 14.\nThe 13th humble number is 15.\nThe 21st humble number is 28.\nThe 22nd humble number is 30.\nThe 23rd humble number is 32.\nThe 100th humble number is 450.\nThe 1000th humble number is 385875.\nThe 5842nd humble number is 2000000000.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4417, vtotal_submit:14878, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 1996", author:"", tag:["TEST"]}
{pid:1059, vid:1059, oj:"hdu", title:"Dividing", desc:"Marsha and Bill own a collection of marbles. They want to split the collection among themselves so that both receive an equal share of the marbles. This would be easy if all the marbles had the same value, because then they could just split the collection in half. But unfortunately, some of the marbles are larger, or more beautiful than others. So, Marsha and Bill start by assigning a value, a natural number between one and six, to each marble. Now they want to divide the marbles so that each of them gets the same total value. <br>Unfortunately, they realize that it might be impossible to divide the marbles in this way (even if the total value of all marbles is even). For example, if there are one marble of value 1, one of value 3 and two of value 4, then they cannot be split into sets of equal value. So, they ask you to write a program that checks whether there is a fair partition of the marbles.<br>", input:"Each line in the input describes one collection of marbles to be divided. The lines consist of six non-negative integers n1, n2, ..., n6, where ni is the number of marbles of value i. So, the example from above would be described by the input-line ``1 0 1 2 0 0\'\'. The maximum total number of marbles will be 20000. <br><br>The last line of the input file will be ``0 0 0 0 0 0\'\'; do not process this line.<br>", output:"For each colletcion, output ``Collection #k:\'\', where k is the number of the test case, and then either ``Can be divided.\'\' or ``Can\'t be divided.\'\'. <br><br>Output a blank line after each test case.<br>", sample_in:"1 0 1 2 0 0\n1 0 0 0 1 1\n0 0 0 0 0 0", sample_out:"Collection #1:\nCan\'t be divided.\n\nCollection #2:\nCan be divided.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2137, vtotal_submit:14481, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central European Regional Contest 1999", author:"", tag:["TEST"]}
{pid:1060, vid:1060, oj:"hdu", title:"Leftmost Digit", desc:"Given a positive integer N, you should output the leftmost digit of N^N.<br>", input:"The input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow.<br>Each test case contains a single positive integer N(1&lt;=N&lt;=1,000,000,000).<br>", output:"For each test case, you should output the leftmost digit of N^N.<br>", sample_in:"2\n3\n4", sample_out:"2\n2\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nIn the first case, 3 * 3 * 3 = 27, so the leftmost digit is 2.\nIn the second case, 4 * 4 * 4 * 4 = 256, so the leftmost digit is 2.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3518, vtotal_submit:11937, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1061, vid:1061, oj:"hdu", title:"Rightmost Digit", desc:"Given a positive integer N, you should output the most right digit of N^N.<br>", input:"The input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow.<br>Each test case contains a single positive integer N(1&lt;=N&lt;=1,000,000,000).<br>", output:"For each test case, you should output the rightmost digit of N^N.<br>", sample_in:"2\n3\n4", sample_out:"7\n6\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nIn the first case, 3 * 3 * 3 = 27, so the rightmost digit is 7.\nIn the second case, 4 * 4 * 4 * 4 = 256, so the rightmost digit is 6.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:7972, vtotal_submit:28764, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1062, vid:1062, oj:"hdu", title:"Text Reverse", desc:"Ignatius likes to write words in reverse way. Given a single line of text which is written by Ignatius, you should reverse all the words and then output them.<br>", input:"The input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow.<br>Each test case contains a single line with several words. There will be at most 1000 characters in a line.<br>", output:"For each test case, you should output the text which is processed.<br>", sample_in:"3\nolleh !dlrow\nm\'I morf .udh\nI ekil .mca", sample_out:"hello world!\nI\'m from hdu.\nI like acm.\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nRemember to use getchar() to read \'\\n\' after the interger T, then you may use gets() to read a line and process it.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4569, vtotal_submit:14973, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1063, vid:1063, oj:"hdu", title:"Exponentiation", desc:"Problems involving the computation of exact values of very large magnitude and precision are common. For example, the computation of the national debt is a taxing experience for many computer systems. <br><br>This problem requires that you write a program to compute the exact value of R<sup>n</sup> where R is a real number ( 0.0 &lt; R &lt; 99.999 ) and n is an integer such that 0 &lt; n &lt;= 25. <br>", input:"The input will consist of a set of pairs of values for R and n. The R value will occupy columns 1 through 6, and the n value will be in columns 8 and 9.<br>", output:"The output will consist of one line for each line of input giving the exact value of R^n. Leading zeros should be suppressed in the output. Insignificant trailing zeros must not be printed. Don\'t print the decimal point if the result is an integer.<br>", sample_in:"95.123 12\n0.4321 20\n5.1234 15\n6.7592  9\n98.999 10\n1.0100 12", sample_out:"548815620517731830194541.899025343415715973535967221869852721\n.00000005148554641076956121994511276767154838481760200726351203835429763013462401\n43992025569.928573701266488041146654993318703707511666295476720493953024\n29448126.764121021618164430206909037173276672\n90429072743629540498.107596019456651774561044010001\n1.126825030131969720661201", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1348, vtotal_submit:6247, special_status:0, time_limit:500, mem_limit:32768, hint:"", source:"East Central North America 1988", author:"", tag:["TEST"]}
{pid:1064, vid:1064, oj:"hdu", title:"Financial Management", desc:"Larry graduated this year and finally has a job. He’s making a lot of money, but somehow never seems to have enough. Larry has decided that he needs to grab hold of his financial portfolio and solve his financing problems. The first step is to figure out what’s been going on with his money. Larry has his bank account statements and wants to see how much money he has. Help Larry by writing a program to take his closing balance from each of the past twelve months and calculate his average account balance.<br>", input:"The input will be twelve lines. Each line will contain the closing balance of his bank account for a particular month. Each number will be positive and displayed to the penny. No dollar sign will be included.<br>", output:"The output will be a single number, the average (mean) of the closing balances for the twelve months. It will be rounded to the nearest penny, preceded immediately by a dollar sign, and followed by the end-of-line. There will be no other spaces or characters in the output.<br>", sample_in:"100.00 \n489.12 \n12454.12 \n1234.101_237_63fed94cf0cc6be \n823.05 \n109.20 \n5.27 \n1542.25 \n839.18 \n83.99 \n1295.01 \n1.75", sample_out:"$1581.42", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4754, vtotal_submit:8393, special_status:0, time_limit:200, mem_limit:32768, hint:"", source:"Mid-Atlantic USA 2001", author:"", tag:["TEST"]}
{pid:1065, vid:1065, oj:"hdu", title:"I Think I Need a Houseboat", desc:"<img src=data/images/1065-1.gif><br><br>Fred Mapper is considering purchasing some land in Louisiana to build his house on. In the process of investigating the land, he learned that the state of Louisiana is actually shrinking by 50 square miles each year, due to erosion caused by the Mississippi River. Since Fred is hoping to live in this house the rest of his life, he needs to know if his land is going to be lost to erosion. <br><br>After doing more research, Fred has learned that the land that is being lost forms a semicircle. This semicircle is part of a circle centered at (0,0), with the line that bisects the circle being the X axis. Locations below the X axis are in the water. The semicircle has an area of 0 at the beginning of year 1. (Semicircle illustrated in the Figure.) <br><br><img src=data/images/1065-2.gif><br>", input:"The first line of input will be a positive integer indicating how many data sets will be included (N). <br><br>Each of the next N lines will contain the X and Y Cartesian coordinates of the land Fred is considering. These will be floating point numbers measured in miles. The Y coordinate will be non-negative. (0,0) will not be given.<br>", output:"For each data set, a single line of output should appear. This line should take the form of: <br><br>“Property N: This property will begin eroding in year Z.” <br><br>Where N is the data set (counting from 1), and Z is the first year (start from 1) this property will be within the semicircle AT THE END OF YEAR Z. Z must be an integer. <br><br>After the last data set, this should print out “END OF OUTPUT.” <br><br>Notes: <br><br>1. No property will appear exactly on the semicircle boundary: it will either be inside or outside. <br><br>2. This problem will be judged automatically. Your answer must match exactly, including the capitalization, punctuation, and white-space. This includes the periods at the ends of the lines. <br><br>3. All locations are given in miles.<br>", sample_in:"2 \n1.0 1.0 \n25.0 0.0", sample_out:"Property 1: This property will begin eroding in year 1. \nProperty 2: This property will begin eroding in year 20. \nEND OF OUTPUT. ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2033, vtotal_submit:8850, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Atlantic USA 2001", author:"", tag:["TEST"]}
{pid:1066, vid:1066, oj:"hdu", title:"Last non-zero Digit in N!", desc:"The expression N!, read as &quot;N factorial,&quot; denotes the product of the first N positive integers, where N is nonnegative. So, for example, <br>N N! <br>0 1 <br>1 1 <br>2 2 <br>3 6 <br>4 24 <br>5 120 <br>10 3628800 <br><br>For this problem, you are to write a program that can compute the last non-zero digit of the factorial for N. For example, if your program is asked to compute the last nonzero digit of 5!, your program should produce &quot;2&quot; because 5! = 120, and 2 is the last nonzero digit of 120. <br>", input:"Input to the program is a series of nonnegative integers, each on its own line with no other letters, digits or spaces. For each integer N, you should read the value and compute the last nonzero digit of N!.<br>", output:"For each integer input, the program should print exactly one line of output containing the single last non-zero digit of N!.<br>", sample_in:"1 \n2 \n26 \n125 \n3125 \n9999", sample_out:"1\n2\n4\n8\n2\n8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1074, vtotal_submit:5663, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Central USA 1997", author:"", tag:["TEST"]}
{pid:1067, vid:1067, oj:"hdu", title:"Gap", desc:"Let\'s play a card game called Gap. <br>You have 28 cards labeled with two-digit numbers. The first digit (from 1 to 4) represents the suit of the card, and the second digit (from 1 to 7) represents the value of the card.<br><br>First, you shu2e the cards and lay them face up on the table in four rows of seven cards, leaving a space of one card at the extreme left of each row. The following shows an example of initial layout.<br><br><img src=data/images/1067-1.gif><br><br>Next, you remove all cards of value 1, and put them in the open space at the left end of the rows: &quot;11&quot; to the top row, &quot;21&quot; to the next, and so on.<br><br>Now you have 28 cards and four spaces, called gaps, in four rows and eight columns. You start moving cards from this layout.<br><br><img src=data/images/1067-2.gif><br><br>At each move, you choose one of the four gaps and fill it with the successor of the left neighbor of the gap. The successor of a card is the next card in the same suit, when it exists. For instance the successor of &quot;42&quot; is &quot;43&quot;, and &quot;27&quot; has no successor.<br><br>In the above layout, you can move &quot;43&quot; to the gap at the right of &quot;42&quot;, or &quot;36&quot; to the gap at the right of &quot;35&quot;. If you move &quot;43&quot;, a new gap is generated to the right of &quot;16&quot;. You cannot move any card to the right of a card of value 7, nor to the right of a gap.<br><br>The goal of the game is, by choosing clever moves, to make four ascending sequences of the same suit, as follows.<br><br><img src=data/images/1067-3.gif><br><br>Your task is to find the minimum number of moves to reach the goal layout.<br>", input:"The input starts with a line containing the number of initial layouts that follow.<br><br>Each layout consists of five lines - a blank line and four lines which represent initial layouts of four rows. Each row has seven two-digit numbers which correspond to the cards.<br>", output:"For each initial layout, produce a line with the minimum number of moves to reach the goal layout. Note that this number should not include the initial four moves of the cards of value 1. If there is no move sequence from the initial layout to the goal layout, produce &quot;-1&quot;.<br>", sample_in:"4\n\n12 13 14 15 16 17 21\n22 23 24 25 26 27 31\n32 33 34 35 36 37 41\n42 43 44 45 46 47 11\n\n26 31 13 44 21 24 42\n17 45 23 25 41 36 11\n46 34 14 12 37 32 47\n16 43 27 35 22 33 15\n\n17 12 16 13 15 14 11\n27 22 26 23 25 24 21\n37 32 36 33 35 34 31\n47 42 46 43 45 44 41\n\n27 14 22 35 32 46 33\n13 17 36 24 44 21 15\n43 16 45 47 23 11 26\n25 37 41 34 42 12 31", sample_out:"0\n33\n60\n-1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:167, vtotal_submit:518, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"Asia 2003（Aizu Japan）", author:"", tag:["TEST"]}
{pid:1068, vid:1068, oj:"hdu", title:"Girls and Boys", desc:"the second year of the university somebody started a study on the romantic relations between the students. The relation “romantically involved” is defined between one girl and one boy. For the study reasons it is necessary to find out the maximum set satisfying the condition: there are no two students in the set who have been “romantically involved”. The result of the program is the number of students in such a set.<br><br>The input contains several data sets in text format. Each data set represents one set of subjects of the study, with the following description:<br><br>the number of students<br>the description of each student, in the following format<br>student_identifier:(number_of_romantic_relations) student_identifier1 student_identifier2 student_identifier3 ...<br>or<br>student_identifier:(0)<br><br>The student_identifier is an integer number between 0 and n-1, for n subjects.<br>For each given data set, the program should write to standard output a line containing the result.<br>", input:"", output:"", sample_in:"7\n0: (3) 4 5 6\n1: (2) 4 6\n2: (0)\n3: (0)\n4: (2) 0 1\n5: (1) 0\n6: (2) 0 1\n3\n0: (2) 1 2\n1: (1) 0\n2: (1) 0", sample_out:"5\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1768, vtotal_submit:6486, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"Southeastern Europe 2000", author:"", tag:["TEST"]}
{pid:1069, vid:1069, oj:"hdu", title:"Monkey and Banana", desc:"A group of researchers are designing an experiment to test the IQ of a monkey. They will hang a banana at the roof of a building, and at the mean time, provide the monkey with some blocks. If the monkey is clever enough, it shall be able to reach the banana by placing one block on the top another to build a tower and climb up to get its favorite food.<br><br>The researchers have n types of blocks, and an unlimited supply of blocks of each type. Each type-i block was a rectangular solid with linear dimensions (xi, yi, zi). A block could be reoriented so that any two of its three dimensions determined the dimensions of the base and the other dimension was the height. <br><br>They want to make sure that the tallest tower possible by stacking blocks can reach the roof. The problem is that, in building a tower, one block could only be placed on top of another block as long as the two base dimensions of the upper block were both strictly smaller than the corresponding base dimensions of the lower block because there has to be some space for the monkey to step on. This meant, for example, that blocks oriented to have equal-sized bases couldn\'t be stacked. <br><br>Your job is to write a program that determines the height of the tallest tower the monkey can build with a given set of blocks.<br>", input:"The input file will contain one or more test cases. The first line of each test case contains an integer n,<br>representing the number of different blocks in the following data set. The maximum value for n is 30.<br>Each of the next n lines contains three integers representing the values xi, yi and zi.<br>Input is terminated by a value of zero (0) for n.<br>", output:"For each test case, print one line containing the case number (they are numbered sequentially starting from 1) and the height of the tallest possible tower in the format &quot;Case case: maximum height = height&quot;.<br>", sample_in:"1\n10 20 30\n2\n6 8 10\n5 5 5\n7\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n5\n31 41 59\n26 53 58\n97 93 23\n84 62 64\n33 83 27\n0", sample_out:"Case 1: maximum height = 40\nCase 2: maximum height = 21\nCase 3: maximum height = 28\nCase 4: maximum height = 342", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2386, vtotal_submit:6577, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 1996", author:"", tag:["TEST"]}
{pid:1070, vid:1070, oj:"hdu", title:"Milk", desc:"Ignatius drinks milk everyday, now he is in the supermarket and he wants to choose a bottle of milk. There are many kinds of milk in the supermarket, so Ignatius wants to know which kind of milk is the cheapest.<br><br>Here are some rules:<br>1. Ignatius will never drink the milk which is produced 6 days ago or earlier. That means if the milk is produced 2005-1-1, Ignatius will never drink this bottle after 2005-1-6(inclusive).<br>2. Ignatius drinks 200mL milk everyday.<br>3. If the milk left in the bottle is less than 200mL, Ignatius will throw it away.<br>4. All the milk in the supermarket is just produced today.<br><br>Note that Ignatius only wants to buy one bottle of milk, so if the volumn of a bottle is smaller than 200mL, you should ignore it.<br>Given some information of milk, your task is to tell Ignatius which milk is the cheapest.<br>", input:"The input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow.<br>Each test case starts with a single integer N(1&lt;=N&lt;=100) which is the number of kinds of milk. Then N lines follow, each line contains a string S(the length will at most 100 characters) which indicate the brand of milk, then two integers for the brand: P(Yuan) which is the price of a bottle, V(mL) which is the volume of a bottle.<br>", output:"For each test case, you should output the brand of the milk which is the cheapest. If there are more than one cheapest brand, you should output the one which has the largest volume.<br>", sample_in:"2\n2\nYili 10 500\nMengniu 20 1000\n4\nYili 10 500\nMengniu 20 1000\nGuangming 1 199\nYanpai 40 10000", sample_out:"Mengniu\nMengniu\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>In the first case, milk Yili can be drunk for 2 days, it costs 10 Yuan. Milk Mengniu can be drunk for 5 days, it costs 20 Yuan. So Mengniu is the cheapest.In the second case,\nmilk Guangming should be ignored. Milk Yanpai can be drunk for 5 days, but it costs 40 Yuan. So Mengniu is the cheapest.</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2400, vtotal_submit:12273, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1071, vid:1071, oj:"hdu", title:"The area", desc:"Ignatius bought a land last week, but he didn\'t know the area of the land because the land is enclosed by a parabola and a straight line. The picture below shows the area. Now given all the intersectant points shows in the picture, can you tell Ignatius the area of the land?<br><br>Note: The point P1 in the picture is the vertex of the parabola.<br><br><center><img src=data/images/1071_1.bmp></center><br>", input:"The input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow.<br>Each test case contains three intersectant points which shows in the picture, they are given in the order of P1, P2, P3. Each point is described by two floating-point numbers X and Y(0.0&lt;=X,Y&lt;=1000.0).<br>", output:"For each test case, you should output the area of the land, the result should be rounded to 2 decimal places.<br>", sample_in:"2\n5.000000 5.000000\n0.000000 0.000000\n10.000000 0.000000\n10.000000 10.000000\n1.000000 1.000000\n14.000000 8.222222", sample_out:"33.33\n40.69\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nFor float may be not accurate enough, please use double instead of float.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3975, vtotal_submit:6889, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1072, vid:1072, oj:"hdu", title:"Nightmare", desc:"Ignatius had a nightmare last night. He found himself in a labyrinth with a time bomb on him. The labyrinth has an exit, Ignatius should get out of the labyrinth before the bomb explodes. The initial exploding time of the bomb is set to 6 minutes. To prevent the bomb from exploding by shake, Ignatius had to move slowly, that is to move from one area to the nearest area(that is, if Ignatius stands on (x,y) now, he could only on (x+1,y), (x-1,y), (x,y+1), or (x,y-1) in the next minute) takes him 1 minute. Some area in the labyrinth contains a Bomb-Reset-Equipment. They could reset the exploding time to 6 minutes.<br><br>Given the layout of the labyrinth and Ignatius\' start position, please tell Ignatius whether he could get out of the labyrinth, if he could, output the minimum time that he has to use to find the exit of the labyrinth, else output -1.<br><br>Here are some rules:<br>1. We can assume the labyrinth is a 2 array.<br>2. Each minute, Ignatius could only get to one of the nearest area, and he should not walk out of the border, of course he could not walk on a wall, too.<br>3. If Ignatius get to the exit when the exploding time turns to 0, he can\'t get out of the labyrinth.<br>4. If Ignatius get to the area which contains Bomb-Rest-Equipment when the exploding time turns to 0, he can\'t use the equipment to reset the bomb.<br>5. A Bomb-Reset-Equipment can be used as many times as you wish, if it is needed, Ignatius can get to any areas in the labyrinth as many times as you wish.<br>6. The time to reset the exploding time can be ignore, in other words, if Ignatius get to an area which contain Bomb-Rest-Equipment, and the exploding time is larger than 0, the exploding time would be reset to 6.<br>", input:"The input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow.<br>Each test case starts with two integers N and M(1&lt;=N,Mm=8) which indicate the size of the labyrinth. Then N lines follow, each line contains M integers. The array indicates the layout of the labyrinth.<br>There are five integers which indicate the different type of area in the labyrinth:<br>0: The area is a wall, Ignatius should not walk on it.<br>1: The area contains nothing, Ignatius can walk on it.<br>2: Ignatius\' start position, Ignatius starts his escape from this position.<br>3: The exit of the labyrinth, Ignatius\' target position.<br>4: The area contains a Bomb-Reset-Equipment, Ignatius can delay the exploding time by walking to these areas.<br>", output:"For each test case, if Ignatius can get out of the labyrinth, you should output the minimum time he needs, else you should just output -1.<br>", sample_in:"3\n3 3\n2 1 1\n1 1 0\n1 1 3\n4 8\n2 1 1 0 1 1 1 0\n1 0 4 1 1 0 4 1\n1 0 0 0 0 0 0 1\n1 1 1 4 1 1 1 3\n5 8\n1 2 1 1 1 1 1 4 \n1 0 0 0 1 0 0 1 \n1 4 1 0 1 1 0 1 \n1 0 0 0 0 3 0 1 \n1 1 4 1 1 1 1 1 ", sample_out:"4\n-1\n13", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1906, vtotal_submit:6230, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1073, vid:1073, oj:"hdu", title:"Online Judge", desc:"Ignatius is building an Online Judge, now he has worked out all the problems except the Judge System. The system has to read data from correct output file and user\'s result file, then the system compare the two files. If the two files are absolutly same, then the Judge System return &quot;Accepted&quot;, else if the only differences between the two files are spaces(\' \'), tabs(\'\\t\'), or enters(\'\\n\'), the Judge System should return &quot;Presentation Error&quot;, else the system will return &quot;Wrong Answer&quot;.<br><br>Given the data of correct output file and the data of user\'s result file, your task is to determine which result the Judge System will return.<br>", input:"The input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow.<br>Each test case has two parts, the data of correct output file and the data of the user\'s result file. Both of them are starts with a single line contains a string &quot;START&quot; and end with a single line contains a string &quot;END&quot;, these two strings are not the data. In other words, the data is between the two strings. The data will at most 5000 characters.<br>", output:"For each test cases, you should output the the result Judge System should return.<br>", sample_in:"4\nSTART\n1 + 2 = 3\nEND\nSTART\n1+2=3\nEND\nSTART\n1 + 2 = 3\nEND\nSTART\n1 + 2 = 3\n\nEND\nSTART\n1 + 2 = 3\nEND\nSTART\n1 + 2 = 4\nEND\nSTART\n1 + 2 = 3\nEND\nSTART\n1	+	2	=	3\nEND", sample_out:"Presentation Error\nPresentation Error\nWrong Answer\nPresentation Error", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1306, vtotal_submit:4656, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1074, vid:1074, oj:"hdu", title:"Doing Homework", desc:"Ignatius has just come back school from the 30th ACM/ICPC. Now he has a lot of homework to do. Every teacher gives him a deadline of handing in the homework. If Ignatius hands in the homework after the deadline, the teacher will reduce his score of the final test, 1 day for 1 point. And as you know, doing homework always takes a long time. So Ignatius wants you to help him to arrange the order of doing homework to minimize the reduced score.", input:"The input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow.<br>Each test case start with a positive integer N(1&lt;=N&lt;=15) which indicate the number of homework. Then N lines follow. Each line contains a string S(the subject\'s name, each string will at most has 100 characters) and two integers D(the deadline of the subject), C(how many days will it take Ignatius to finish this subject\'s homework). <br><br>Note: All the subject names are given in the alphabet increasing order. So you may process the problem much easier.<br>", output:"For each test case, you should output the smallest total reduced score, then give out the order of the subjects, one subject in a line. If there are more than one orders, you should output the alphabet smallest one.<br>", sample_in:"2\n3\nComputer 3 3\nEnglish 20 1\nMath 3 2\n3\nComputer 3 3\nEnglish 6 3\nMath 6 3", sample_out:"2\nComputer\nMath\nEnglish\n3\nComputer\nEnglish\nMath\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nIn the second test case, both Computer->English->Math and Computer->Math->English leads to reduce 3 points, but the \nword \"English\" appears earlier than the word \"Math\", so we choose the first order. That is so-called alphabet order.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1138, vtotal_submit:4589, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1075, vid:1075, oj:"hdu", title:"What Are You Talking About", desc:"Ignatius is so lucky that he met a Martian yesterday. But he didn\'t know the language the Martians use. The Martian gives him a history book of Mars and a dictionary when it leaves. Now Ignatius want to translate the history book into English. Can you help him?<br>", input:"The problem has only one test case, the test case consists of two parts, the dictionary part and the book part. The dictionary part starts with a single line contains a string &quot;START&quot;, this string should be ignored, then some lines follow, each line contains two strings, the first one is a word in English, the second one is the corresponding word in Martian\'s language. A line with a single string &quot;END&quot; indicates the end of the directory part, and this string should be ignored. The book part starts with a single line contains a string &quot;START&quot;, this string should be ignored, then an article written in Martian\'s language. You should translate the article into English with the dictionary. If you find the word in the dictionary you should translate it and write the new word into your translation, if you can\'t find the word in the dictionary you do not have to translate it, and just copy the old word to your translation. Space(\' \'), tab(\'\\t\'), enter(\'\\n\') and all the punctuation should not be translated. A line with a single string &quot;END&quot; indicates the end of the book part, and that\'s also the end of the input. All the words are in the lowercase, and each word will contain at most 10 characters, and each line will contain at most 3000 characters.<br>", output:"In this problem, you have to output the translation of the history book.<br>", sample_in:"START\nfrom fiwo\nhello difh\nmars riwosf\nearth fnnvk\nlike fiiwj\nEND\nSTART\ndifh, i\'m fiwo riwosf.\ni fiiwj fnnvk!\nEND", sample_out:"hello, i\'m from mars.\ni like earth!\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nHuge input, scanf is recommended.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2029, vtotal_submit:11733, special_status:0, time_limit:5000, mem_limit:204800, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1076, vid:1076, oj:"hdu", title:"An Easy Task", desc:"Ignatius was born in a leap year, so he want to know when he could hold his birthday party. Can you tell him?<br><br>Given a positive integers Y which indicate the start year, and a positive integer N, your task is to tell the Nth leap year from year Y.<br><br>Note: if year Y is a leap year, then the 1st leap year is year Y.<br>", input:"The input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow.<br>Each test case contains two positive integers Y and N(1&lt;=N&lt;=10000).<br>", output:"For each test case, you should output the Nth leap year from year Y.<br>", sample_in:"3\n2005 25\n1855 12\n2004 10000", sample_out:"2108\n1904\n43236\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nWe call year Y a leap year only if (Y%4==0 && Y%100!=0) or Y%400==0.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:7038, vtotal_submit:12919, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1077, vid:1077, oj:"hdu", title:"Catching Fish", desc:"Ignatius likes catching fish very much. He has a fishnet whose shape is a circle of radius one. Now he is about to use his fishnet to catch fish. All the fish are in the lake, and we assume all the fish will not move when Ignatius catching them. Now Ignatius wants to know how many fish he can catch by using his fishnet once. We assume that the fish can be regard as a point. So now the problem is how many points can be enclosed by a circle of radius one.<br><br>Note: If a fish is just on the border of the fishnet, it is also caught by Ignatius.<br>", input:"The input contains several test cases. The first line of the input is a single integer T which is the number of test cases. T test cases follow.<br>Each test case starts with a positive integer N(1&lt;=N&lt;=300) which indicate the number of fish in the lake. Then N lines follow. Each line contains two floating-point number X and Y (0.0&lt;=X,Y&lt;=10.0). You may assume no two fish will at the same point, and no two fish are closer than 0.0001, no two fish in a test case are approximately at a distance of 2.0. In other words, if the distance between the fish and the centre of the fishnet is smaller 1.0001, we say the fish is also caught.<br>", output:"For each test case, you should output the maximum number of fish Ignatius can catch by using his fishnet once.<br>", sample_in:"4\n3\n6.47634 7.69628\n5.16828 4.79915\n6.69533 6.20378\n6\n7.15296 4.08328\n6.50827 2.69466\n5.91219 3.86661\n5.29853 4.16097\n6.10838 3.46039\n6.34060 2.41599\n8\n7.90650 4.01746\n4.10998 4.18354\n4.67289 4.01887\n6.33885 4.28388\n4.98106 3.82728\n5.12379 5.16473\n7.84664 4.67693\n4.02776 3.87990\n20\n6.65128 5.47490\n6.42743 6.26189\n6.35864 4.61611\n6.59020 4.54228\n4.43967 5.70059\n4.38226 5.70536\n5.50755 6.18163\n7.41971 6.13668\n6.71936 3.04496\n5.61832 4.23857\n5.99424 4.29328\n5.60961 4.32998\n6.82242 5.79683\n5.44693 3.82724\n6.70906 3.65736\n7.89087 5.68000\n6.23300 4.59530\n5.92401 4.92329\n6.24168 3.81389\n6.22671 3.62210", sample_out:"2\n5\n5\n11", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:276, vtotal_submit:1140, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1078, vid:1078, oj:"hdu", title:"FatMouse and Cheese", desc:"FatMouse has stored some cheese in a city. The city can be considered as a square grid of dimension n: each grid location is labelled (p,q) where 0 &lt;= p &lt; n and 0 &lt;= q &lt; n. At each grid location Fatmouse has hid between 0 and 100 blocks of cheese in a hole. Now he\'s going to enjoy his favorite food.<br><br>FatMouse begins by standing at location (0,0). He eats up the cheese where he stands and then runs either horizontally or vertically to another location. The problem is that there is a super Cat named Top Killer sitting near his hole, so each time he can run at most k locations to get into the hole before being caught by Top Killer. What is worse -- after eating up the cheese at one location, FatMouse gets fatter. So in order to gain enough energy for his next run, he has to run to a location which have more blocks of cheese than those that were at the current hole.<br><br>Given n, k, and the number of blocks of cheese at each grid location, compute the maximum amount of cheese FatMouse can eat before being unable to move. <br>", input:"There are several test cases. Each test case consists of <br><br>a line containing two integers between 1 and 100: n and k <br>n lines, each with n numbers: the first line contains the number of blocks of cheese at locations (0,0) (0,1) ... (0,n-1); the next line contains the number of blocks of cheese at locations (1,0), (1,1), ... (1,n-1), and so on. <br>The input ends with a pair of -1\'s. <br>", output:"For each test case output in a line the single integer giving the number of blocks of cheese collected. <br>", sample_in:"3 1\n1 2 5\n10 11 6\n12 12 7\n-1 -1", sample_out:"37", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1185, vtotal_submit:4247, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Zhejiang University Training Contest 2001", author:"", tag:["TEST"]}
{pid:1079, vid:1079, oj:"hdu", title:"Calendar Game", desc:"Adam and Eve enter this year’s ACM International Collegiate Programming Contest. Last night, they played the Calendar Game, in celebration of this contest. This game consists of the dates from January 1, 1900 to November 4, 2001, the contest day. The game starts by randomly choosing a date from this interval. Then, the players, Adam and Eve, make moves in their turn with Adam moving first: Adam, Eve, Adam, Eve, etc. There is only one rule for moves and it is simple: from a current date, a player in his/her turn can move either to the next calendar date or the same day of the next month. When the next month does not have the same day, the player moves only to the next calendar date. For example, from December 19, 1924, you can move either to December 20, 1924, the next calendar date, or January 19, 1925, the same day of the next month. From January 31 2001, however, you can move only to February 1, 2001, because February 31, 2001 is invalid. <br><br>A player wins the game when he/she exactly reaches the date of November 4, 2001. If a player moves to a date after November 4, 2001, he/she looses the game. <br><br>Write a program that decides whether, given an initial date, Adam, the first mover, has a winning strategy. <br><br>For this game, you need to identify leap years, where February has 29 days. In the Gregorian calendar, leap years occur in years exactly divisible by four. So, 1993, 1994, and 1995 are not leap years, while 1992 and 1996 are leap years. Additionally, the years ending with 00 are leap years only if they are divisible by 400. So, 1700, 1800, 1900, 2100, and 2200 are not leap years, while 1600, 2000, and 2400 are leap years.<br>", input:"The input consists of T test cases. The number of test cases (T) is given in the first line of the input. Each test case is written in a line and corresponds to an initial date. The three integers in a line, YYYY MM DD, represent the date of the DD-th day of MM-th month in the year of YYYY. Remember that initial dates are randomly chosen from the interval between January 1, 1900 and November 4, 2001. <br>", output:"Print exactly one line for each test case. The line should contain the answer &quot;YES&quot; or &quot;NO&quot; to the question of whether Adam has a winning strategy against Eve. Since we have T test cases, your program should output totally T lines of &quot;YES&quot; or &quot;NO&quot;. <br>", sample_in:"3 \n2001 11 3 \n2001 11 2 \n2001 10 3 ", sample_out:"YES \nNO \nNO ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:975, vtotal_submit:2332, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2001, Taejon (South Korea)", author:"", tag:["TEST"]}
{pid:1080, vid:1080, oj:"hdu", title:"Human Gene Functions", desc:"It is well known that a human gene can be considered as a sequence, consisting of four nucleotides, which are simply denoted by four letters, A, C, G, and T. Biologists have been interested in identifying human genes and determining their functions, because these can be used to diagnose human diseases and to design new drugs for them. <br><br>A human gene can be identified through a series of time-consuming biological experiments, often with the help of computer programs. Once a sequence of a gene is obtained, the next job is to determine its function. One of the methods for biologists to use in determining the function of a new gene sequence that they have just identified is to search a database with the new gene as a query. The database to be searched stores many gene sequences and their functions – many researchers have been submitting their genes and functions to the database and the database is freely accessible through the Internet. <br><br>A database search will return a list of gene sequences from the database that are similar to the query gene. Biologists assume that sequence similarity often implies functional similarity. So, the function of the new gene might be one of the functions that the genes from the list have. To exactly determine which one is the right one another series of biological experiments will be needed. <br><br>Your job is to make a program that compares two genes and determines their similarity as explained below. Your program may be used as a part of the database search if you can provide an efficient one. <br><br>Given two genes AGTGATG and GTTAG, how similar are they? One of the methods to measure the similarity of two genes is called alignment. In an alignment, spaces are inserted, if necessary, in appropriate positions of the genes to make them equally long and score the resulting genes according to a scoring matrix. <br><br>For example, one space is inserted into AGTGATG to result in AGTGAT-G, and three spaces are inserted into GTTAG to result in –GT--TAG. A space is denoted by a minus sign (-). The two genes are now of equal length. These two strings are aligned: <br><br>AGTGAT-G <br>-GT--TAG <br><br>In this alignment, there are four matches, namely, G in the second position, T in the third, T in the sixth, and G in the eighth. Each pair of aligned characters is assigned a score according to the following scoring matrix.<br><center><img src=data/images/1080_1.gif></center> <br>* denotes that a space-space match is not allowed. The score of the alignment above is (-3)+5+5+(-2)+(-3)+5+(-3)+5=9. <br><br>Of course, many other alignments are possible. One is shown below (a different number of spaces are inserted into different positions): <br><br>AGTGATG <br>-GTTA-G <br><br>This alignment gives a score of (-3)+5+5+(-2)+5+(-1) +5=14. So, this one is better than the previous one. As a matter of fact, this one is optimal since no other alignment can have a higher score. So, it is said that the similarity of the two genes is 14.<br>", input:"The input consists of T test cases. The number of test cases ) (T is given in the first line of the input. Each test case consists of two lines: each line contains an integer, the length of a gene, followed by a gene sequence. The length of each gene sequence is at least one and does not exceed 100. <br>", output:"The output should print the similarity of each test case, one per line. <br>", sample_in:"2 \n7 AGTGATG \n5 GTTAG \n7 AGCTATT \n9 AGCTTTAAA ", sample_out:"14 \n21 ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:947, vtotal_submit:2056, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2001, Taejon (South Korea)", author:"", tag:["TEST"]}
{pid:1081, vid:1081, oj:"hdu", title:"To The Max", desc:"Given a two-dimensional array of positive and negative integers, a sub-rectangle is any contiguous sub-array of size 1 x 1 or greater located within the whole array. The sum of a rectangle is the sum of all the elements in that rectangle. In this problem the sub-rectangle with the largest sum is referred to as the maximal sub-rectangle.<br><br>As an example, the maximal sub-rectangle of the array:<br><br>0 -2 -7 0<br>9 2 -6 2<br>-4 1 -4 1<br>-1 8 0 -2<br><br>is in the lower left corner:<br><br>9 2<br>-4 1<br>-1 8<br><br>and has a sum of 15.<br>", input:"The input consists of an N x N array of integers. The input begins with a single positive integer N on a line by itself, indicating the size of the square two-dimensional array. This is followed by N 2 integers separated by whitespace (spaces and newlines). These are the N 2 integers of the array, presented in row-major order. That is, all numbers in the first row, left to right, then all numbers in the second row, left to right, etc. N may be as large as 100. The numbers in the array will be in the range [-127,127].<br>", output:"Output the sum of the maximal sub-rectangle.<br>", sample_in:"4\n0 -2 -7 0 9 2 -6 2\n-4 1 -4 1 -1\n8 0 -2", sample_out:"15", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2433, vtotal_submit:7227, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Greater New York 2001", author:"", tag:["TEST"]}
{pid:1082, vid:1082, oj:"hdu", title:"Matrix Chain Multiplication", desc:"Matrix multiplication problem is a typical example of dynamical programming. <br><br>Suppose you have to evaluate an expression like A*B*C*D*E where A,B,C,D and E are matrices. Since matrix multiplication is associative, the order in which multiplications are performed is arbitrary. However, the number of elementary multiplications needed strongly depends on the evaluation order you choose.<br>For example, let A be a 50*10 matrix, B a 10*20 matrix and C a 20*5 matrix.<br>There are two different strategies to compute A*B*C, namely (A*B)*C and A*(B*C).<br>The first one takes 15000 elementary multiplications, but the second one only 3500. <br><br>Your job is to write a program that determines the number of elementary multiplications needed for a given evaluation strategy. <br>", input:"Input consists of two parts: a list of matrices and a list of expressions.<br>The first line of the input file contains one integer n (1 &lt;= n &lt;= 26), representing the number of matrices in the first part. The next n lines each contain one capital letter, specifying the name of the matrix, and two integers, specifying the number of rows and columns of the matrix. <br>The second part of the input file strictly adheres to the following syntax (given in EBNF): <br><br>SecondPart = Line { Line } &lt;EOF&gt;<br>Line       = Expression &lt;CR&gt;<br>Expression = Matrix | &quot;(&quot; Expression Expression &quot;)&quot;<br>Matrix     = &quot;A&quot; | &quot;B&quot; | &quot;C&quot; | ... | &quot;X&quot; | &quot;Y&quot; | &quot;Z&quot;<br>", output:"For each expression found in the second part of the input file, print one line containing the word &quot;error&quot; if evaluation of the expression leads to an error due to non-matching matrices. Otherwise print one line containing the number of elementary multiplications needed to evaluate the expression in the way specified by the parentheses. <br>", sample_in:"9\nA 50 10\nB 10 20\nC 20 5\nD 30 35\nE 35 15\nF 15 5\nG 5 10\nH 10 20\nI 20 25\nA\nB\nC\n(AA)\n(AB)\n(AC)\n(A(BC))\n((AB)C)\n(((((DE)F)G)H)I)\n(D(E(F(G(HI)))))\n((D(EF))((GH)I))", sample_out:"0\n0\n0\nerror\n10000\nerror\n3500\n15000\n40500\n47500\n15125", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:577, vtotal_submit:987, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 1996", author:"", tag:["TEST"]}
{pid:1083, vid:1083, oj:"hdu", title:"Courses", desc:"Consider a group of N students and P courses. Each student visits zero, one or more than one courses. Your task is to determine whether it is possible to form a committee of exactly P students that satisfies simultaneously the conditions:<br><br>. every student in the committee represents a different course (a student can represent a course if he/she visits that course)<br><br>. each course has a representative in the committee<br><br>Your program should read sets of data from a text file. The first line of the input file contains the number of the data sets. Each data set is presented in the following format:<br><br>P N<br>Count1 Student1 1 Student1 2 ... Student1 Count1<br>Count2 Student2 1 Student2 2 ... Student2 Count2<br>...... <br>CountP StudentP 1 StudentP 2 ... StudentP CountP<br><br>The first line in each data set contains two positive integers separated by one blank: P (1 &lt;= P &lt;= 100) - the number of courses and N (1 &lt;= N &lt;= 300) - the number of students. The next P lines describe in sequence of the courses . from course 1 to course P, each line describing a course. The description of course i is a line that starts with an integer Count i (0 &lt;= Count i &lt;= N) representing the number of students visiting course i. Next, after a blank, you\'ll find the Count i students, visiting the course, each two consecutive separated by one blank. Students are numbered with the positive integers from 1 to N.<br><br>There are no blank lines between consecutive sets of data. Input data are correct.<br><br>The result of the program is on the standard output. For each input data set the program prints on a single line &quot;YES&quot; if it is possible to form a committee and &quot;NO&quot; otherwise. There should not be any leading blanks at the start of the line.<br><br>An example of program input and output:", input:"", output:"", sample_in:"2\n3 3\n3 1 2 3\n2 1 2\n1 1\n3 3\n2 1 3\n2 1 3\n1 1", sample_out:"YES\nNO ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1008, vtotal_submit:3179, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"Southeastern Europe 2000", author:"", tag:["TEST"]}
{pid:1084, vid:1084, oj:"hdu", title:"What Is Your Grade?", desc:"“Point, point, life of student!”<br>This is a ballad（歌谣）well known in colleges, and you must care about your score in this exam too. How many points can you get? Now, I told you the rules which are used in this course.<br>There are 5 problems in this final exam. And I will give you 100 points if you can solve all 5 problems; of course, it is fairly difficulty for many of you. If you can solve 4 problems, you can also get a high score 95 or 90 (you can get the former(前者) only when your rank is in the first half of all students who solve 4 problems). Analogically（以此类推）, you can get 85、80、75、70、65、60. But you will not pass this exam if you solve nothing problem, and I will mark your score with 50.<br>Note, only 1 student will get the score 95 when 3 students have solved 4 problems.<br>I wish you all can pass the exam! <br>Come on!<br>", input:"Input contains multiple test cases. Each test case contains an integer N (1&lt;=N&lt;=100, the number of students) in a line first, and then N lines follow. Each line contains P (0&lt;=P&lt;=5 number of problems that have been solved) and T（consumed time）. You can assume that all data are different when 0&lt;p.<br>A test case starting with a negative integer terminates the input and this test case should not to be processed.<br>", output:"Output the scores of N students in N lines for each case, and there is a blank line after each case.<br>", sample_in:"4\n5 06:30:17\n4 07:31:27\n4 08:12:12\n4 05:23:13\n1\n5 06:30:17\n-1", sample_out:"100\n90\n90\n95\n\n100", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1906, vtotal_submit:7689, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1085, vid:1085, oj:"hdu", title:"Holding Bin-Laden Captive!", desc:"We all know that Bin-Laden is a notorious terrorist, and he has disappeared for a long time. But recently, it is reported that he hides in Hang Zhou of China! <br>“Oh, God! How terrible! ”<br><br><center><img src=data/images/1085_1.jpg></center><br><br>Don’t be so afraid, guys. Although he hides in a cave of Hang Zhou, he dares not to go out. Laden is so bored recent years that he fling himself into some math problems, and he said that if anyone can solve his problem, he will give himself up! <br>Ha-ha! Obviously, Laden is too proud of his intelligence! But, what is his problem?<br>“Given some Chinese Coins (硬币) (three kinds-- 1, 2, 5), and their number is num_1, num_2 and num_5 respectively, please output the minimum value that you cannot pay with given coins.”<br>You, super ACMer, should solve the problem easily, and don’t forget to take $25000000 from Bush!<br>", input:"Input contains multiple test cases. Each test case contains 3 positive integers num_1, num_2 and num_5 (0&lt;=num_i&lt;=1000). A test case containing 0 0 0 terminates the input and this test case is not to be processed.<br>", output:"Output the minimum positive value that one cannot pay with given coins, one line for one case.<br>", sample_in:"1 1 3\n0 0 0", sample_out:"4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3770, vtotal_submit:13289, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1086, vid:1086, oj:"hdu", title:"You can Solve a Geometry Problem too", desc:"Many geometry（几何）problems were designed in the ACM/ICPC. And now, I also prepare a geometry problem for this final exam. According to the experience of many ACMers, geometry problems are always much trouble, but this problem is very easy, after all we are now attending an exam, not a contest :)<br>Give you N (1&lt;=N&lt;=100) segments（线段）, please output the number of all intersections（交点）. You should count repeatedly if M (M&gt;2) segments intersect at the same point.<br><br>Note:<br>You can assume that two segments would not intersect at more than one point. <br>", input:"Input contains multiple test cases. Each test case contains a integer N (1=N&lt;=100) in a line first, and then N lines follow. Each line describes one segment with four float values x1, y1, x2, y2 which are coordinates of the segment’s ending. <br>A test case starting with 0 terminates the input and this test case is not to be processed.<br>", output:"For each case, print the number of intersections, and one line one case.<br>", sample_in:"2\n0.00 0.00 1.00 1.00\n0.00 1.00 1.00 0.00\n3\n0.00 0.00 1.00 1.00\n0.00 1.00 1.00 0.000\n0.00 0.00 1.00 0.00\n0", sample_out:"1\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2132, vtotal_submit:6469, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1087, vid:1087, oj:"hdu", title:"Super Jumping! Jumping! Jumping!", desc:"Nowadays, a kind of chess game called “Super Jumping! Jumping! Jumping!” is very popular in HDU. Maybe you are a good boy, and know little about this game, so I introduce it to you now.<br><br><center><img src=data/images/1087-1.jpg></center><br><br>The game can be played by two or more than two players. It consists of a chessboard（棋盘）and some chessmen（棋子）, and all chessmen are marked by a positive integer or “start” or “end”. The player starts from start-point and must jumps into end-point finally. In the course of jumping, the player will visit the chessmen in the path, but everyone must jumps from one chessman to another absolutely bigger (you can assume start-point is a minimum and end-point is a maximum.). And all players cannot go backwards. One jumping can go from a chessman to next, also can go across many chessmen, and even you can straightly get to end-point from start-point. Of course you get zero point in this situation. A player is a winner if and only if he can get a bigger score according to his jumping solution. Note that your score comes from the sum of value on the chessmen in you jumping path.<br>Your task is to output the maximum value according to the given chessmen list.<br>", input:"Input contains multiple test cases. Each test case is described in a line as follow:<br>N value_1 value_2 …value_N <br>It is guarantied that N is not more than 1000 and all value_i are in the range of 32-int.<br>A test case starting with 0 terminates the input and this test case is not to be processed.<br>", output:"For each case, print the maximum according to rules, and one line one case.<br>", sample_in:"3 1 3 2\n4 1 2 3 4\n4 3 3 2 1\n0", sample_out:"4\n10\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5531, vtotal_submit:19465, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1088, vid:1088, oj:"hdu", title:"Write a simple HTML Browser", desc:"If you ever tried to read a html document on a Macintosh, you know how hard it is if no Netscape is installed. <br>Now, who can forget to install a HTML browser? This is very easy because most of the times you don\'t need one on a MAC because there is a Acrobate Reader which is native to MAC. But if you ever need one, what do you do? <br>Your task is to write a small html-browser. It should only display the content of the input-file and knows only the html commands (tags) &lt;br&gt; which is a linebreak and &lt;hr&gt; which is a horizontal ruler. Then you should treat all tabulators, spaces and newlines as one space and display the resulting text with no more than 80 characters on a line.<br>", input:"The input consists of a text you should display. This text consists of words and HTML tags separated by one or more spaces, tabulators or newlines. <br>A word is a sequence of letters, numbers and punctuation. For example, &quot;abc,123&quot; is one word, but &quot;abc, 123&quot; are two words, namely &quot;abc,&quot; and &quot;123&quot;. A word is always shorter than 81 characters and does not contain any \'&lt;\' or \'&gt;\'. All HTML tags are either &lt;br&gt; or &lt;hr&gt;.<br>", output:"You should display the the resulting text using this rules: <br>&nbsp;&nbsp;. If you read a word in the input and the resulting line does not get longer than 80 chars, print it, else print it on a new line. <br>&nbsp;&nbsp;. If you read a &lt;br&gt; in the input, start a new line. <br>&nbsp;&nbsp;. If you read a &lt;hr&gt; in the input, start a new line unless you already are at the beginning of a line, display 80 characters of \'-\' and start a new line (again). <br>The last line is ended by a newline character.<br>", sample_in:"Hallo, dies ist eine \nziemlich lange Zeile, die in Html\naber nicht umgebrochen wird.\n&lt;br>\nZwei &lt;br> &lt;br> produzieren zwei Newlines. \nEs gibt auch noch das tag &lt;hr> was einen Trenner darstellt.\nZwei &lt;hr> &lt;hr> produzieren zwei Horizontal Rulers.\nAchtung       mehrere Leerzeichen irritieren\n\nHtml genauso wenig wie\n\n\nmehrere Leerzeilen.", sample_out:"Hallo, dies ist eine ziemlich lange Zeile, die in Html aber nicht umgebrochen\nwird.\nZwei\n\nproduzieren zwei Newlines. Es gibt auch noch das tag\n--------------------------------------------------------------------------------\nwas einen Trenner darstellt. Zwei\n--------------------------------------------------------------------------------\n--------------------------------------------------------------------------------\nproduzieren zwei Horizontal Rulers. Achtung mehrere Leerzeichen irritieren Html\ngenauso wenig wie mehrere Leerzeilen.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1334, vtotal_submit:6600, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 1999", author:"", tag:["TEST"]}
{pid:1089, vid:1089, oj:"hdu", title:"A+B for Input-Output Practice (I)", desc:"Your task is to Calculate a + b.<br>Too easy?! Of course! I specially designed the problem for acm beginners.  <br>You must have found that some problems have the same titles with this one, yes, all these problems were designed for the same aim. <br>", input:"The input will consist of a series of pairs of integers a and b, separated by a space, one pair of integers per line. <br>", output:"For each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input. <br>", sample_in:"1 5\n10 20", sample_out:"6\n30", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:32171, vtotal_submit:73165, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1090, vid:1090, oj:"hdu", title:"A+B for Input-Output Practice (II)", desc:"Your task is to Calculate a + b.<br>", input:"Input contains an integer N in the first line, and then N lines follow. Each line consists of a pair of integers a and b, separated by a space, one pair of integers per line. <br>", output:"For each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input. <br>", sample_in:"2\n1 5\n10 20", sample_out:"6\n30", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:29802, vtotal_submit:55334, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1091, vid:1091, oj:"hdu", title:"A+B for Input-Output Practice (III)", desc:"Your task is to Calculate a + b.", input:"Input contains multiple test cases. Each test case contains a pair of integers a and b, one pair of integers per line. A test case containing 0 0 terminates the input and this test case is not to be processed.<br>", output:"For each pair of input integers a and b you should output the sum of a and b in one line, and with one line of output for each line in input. <br>", sample_in:"1 5\n10 20\n0 0", sample_out:"6\n30", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:28025, vtotal_submit:65099, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1092, vid:1092, oj:"hdu", title:"A+B for Input-Output Practice (IV)", desc:"Your task is to Calculate the sum of some integers.<br>", input:"Input contains multiple test cases. Each test case contains a integer N, and then N integers follow in the same line. A test case starting with 0 terminates the input and this test case is not to be processed.<br>", output:"For each group of input integers you should output their sum in one line, and with one line of output for each line in input. <br>", sample_in:"4 1 2 3 4\n5 1 2 3 4 5\n0 ", sample_out:"10\n15", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:26016, vtotal_submit:58092, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1093, vid:1093, oj:"hdu", title:"A+B for Input-Output Practice (V)", desc:"Your task is to calculate the sum of some integers.<br>", input:"Input contains an integer N in the first line, and then N lines follow. Each line starts with a integer M, and then M integers follow in the same line. <br>", output:"For each group of input integers you should output their sum in one line, and with one line of output for each line in input. <br>", sample_in:"2\n4 1 2 3 4\n5 1 2 3 4 5", sample_out:"10\n15", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:24537, vtotal_submit:42928, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1094, vid:1094, oj:"hdu", title:"A+B for Input-Output Practice (VI)", desc:"Your task is to calculate the sum of some integers.<br>", input:"Input contains multiple test cases, and one case one line. Each case starts with an integer N, and then N integers follow in the same line. <br>", output:"For each test case you should output the sum of N integers in one line, and with one line of output for each line in input. <br>", sample_in:"4 1 2 3 4\n5 1 2 3 4 5", sample_out:"10\n15", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:23480, vtotal_submit:40243, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1095, vid:1095, oj:"hdu", title:"A+B for Input-Output Practice (VII)", desc:"Your task is to Calculate a + b.<br>", input:"The input will consist of a series of pairs of integers a and b, separated by a space, one pair of integers per line. <br>", output:"For each pair of input integers a and b you should output the sum of a and b, and followed by a blank line. <br>", sample_in:"1 5\n10 20", sample_out:"6\n\n30\n ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:23139, vtotal_submit:39705, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1096, vid:1096, oj:"hdu", title:"A+B for Input-Output Practice (VIII)", desc:"Your task is to calculate the sum of some integers.<br>", input:"Input contains an integer N in the first line, and then N lines follow. Each line starts with a integer M, and then M integers follow in the same line. <br>", output:"For each group of input integers you should output their sum in one line, and you must note that there is a blank line between outputs.<br>", sample_in:"3\n4 1 2 3 4\n5 1 2 3 4 5\n3 1 2 3", sample_out:"10\n\n15\n\n6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:21993, vtotal_submit:84931, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1097, vid:1097, oj:"hdu", title:"A hard puzzle", desc:"lcy gives a hard puzzle to feng5166,lwg,JGShining and Ignatius:  gave a and b,how to know the a^b.everybody objects to this BT problem,so lcy makes the problem easier than begin.<br>this puzzle describes that: gave a and b,how to know the a^b\'s the last digit number.But everybody is too lazy to slove this problem,so they remit to you who is wise.<br>", input:"There are mutiple test cases. Each test cases consists of two numbers a and b(0&lt;a,b&lt;=2^30)<br>", output:"For each test case, you should output the a^b\'s  last digit number.<br>", sample_in:"7 66\n8 800", sample_out:"9\n6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:7813, vtotal_submit:26872, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"eddy", tag:["TEST"]}
{pid:1098, vid:1098, oj:"hdu", title:"Ignatius\'s puzzle", desc:"Ignatius is poor at math,he falls across a puzzle problem,so he has no choice but to appeal to Eddy. this problem describes that:f(x)=5*x^13+13*x^5+k*a*x,input a nonegative integer k(k&lt;10000),to find the minimal nonegative integer a,make the arbitrary integer x ,65|f(x)if<br>no exists that a,then print &quot;no&quot;.<br><br>", input:"The input contains several test cases. Each test case consists of a nonegative integer k, More details in the Sample Input.<br>", output:"The output contains a string &quot;no&quot;,if you can\'t find a,or you should output a line contains the a.More details in the Sample Output.<br>", sample_in:"11\n100\n9999", sample_out:"22\nno\n43", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3363, vtotal_submit:5725, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"eddy", tag:["TEST"]}
{pid:1099, vid:1099, oj:"hdu", title:"Lottery ", desc:"Eddy\'s company publishes a kind of lottery.This set of lottery which are numbered 1 to n, and a set of one of each is required for a prize .With one number per lottery, how many lottery on average are required to make a complete set of n coupons?<br>", input:"Input consists of a sequence of lines each containing a single positive integer n, 1&lt;=n&lt;=22, giving the size of the set of coupons.", output:"For each input line, output the average number of lottery required to collect the complete set of n coupons. If the answer is an integer number, output the number. If the answer is not integer, then output the integer part of the answer followed by a space and then by the proper fraction in the format shown below. The fractional part should be irreducible. There should be no trailing spaces in any line of ouput. ", sample_in:"2\n5\n17", sample_out:"3 \n   5\n11 --\n   12\n   340463\n58 ------\n   720720", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:885, vtotal_submit:2222, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"eddy", tag:["TEST"]}
{pid:1100, vid:1100, oj:"hdu", title:"Trees Made to Order", desc:"We can number binary trees using the following scheme: <br>The empty tree is numbered 0.<br>The single-node tree is numbered 1.<br>All binary trees having m nodes have numbers less than all those having m+1 nodes.<br>Any binary tree having m nodes with left and right subtrees L and R is numbered n such that all trees having m nodes numbered &gt; n have either<br>  Left subtrees numbered higher than L, or<br>  A left subtree = L and a right subtree numbered higher than R.<br><br>The first 10 binary trees and tree number 20 in this sequence are shown below:<br><br><center><img src=data/images/1100-1.gif></center><br><br>Your job for this problem is to output a binary tree when given its order number.<br>", input:"Input consists of multiple problem instances. Each instance consists of a single integer n, where 1 &lt;= n &lt;= 500,000,000. A value of n = 0 terminates input. (Note that this means you will never have to output the empty tree.)<br>", output:"For each problem instance, you should output one line containing the tree corresponding to the order number for that instance. To print out the tree, use the following scheme:<br><br>A tree with no children should be output as X.<br>A tree with left and right subtrees L and R should be output as (L\')X(R\'), where L\' and R\' are the representations of L and R.<br>  If L is empty, just output X(R\').<br>  If R is empty, just output (L\')X.<br>", sample_in:"1\n20\n31117532\n0", sample_out:"X\n((X)X(X))X\n(X(X(((X(X))X(X))X(X))))X(((X((X)X((X)X)))X)X)", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:325, vtotal_submit:691, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"East Central North America 2001", author:"", tag:["TEST"]}
{pid:1101, vid:1101, oj:"hdu", title:"The Parallel Challenge Ballgame", desc:"Before the ACM/ICPC world final 2005, there is a competition called “The Parallel Challenge Ballgame”. The Parallel Challenge ballgame gives each team a chance to pit their programming skills against those of other teams in a fast-moving parallel-programming game of skill, treachery, and hazard avoidance. Each team will write a single C++ class named MyPlayer which defines the characteristics of a “player”. The MyPlayer class will be instantiated five times in the environment, making up a five-player team, which will then compete in a series of Parallel Challenge ballgames running on an IBM Power Architecture Blue Gene supercomputer – the world’s fastest computer.<br><br>A Parallel Challenge ballgame is played on a rectangular filed. The filed is surrounded by a wall; balls will bounce off the walls if they run into it. The rule of bouncing is the same as light (In figure 1，angle 1 equals angle 2). Near the edges of the fields are a number of goals where points can be scored. Goals are rectangular areas lying near the edges of the field but within the field boundaries. When the game starts there are a number of balls placed at random locations on the field. A player can move to a ball, pick it up, and throw (of course, it is not football, why not use hand?) it. At the start of each game there are also a number of “nets” distributed at various locations on the edges of the field. A player can move to and pick up one of these nets, and can then use them to “trap” players on other teams by throwing the net on top of them. Once a player is trapped beneath a net, that player cannot do anything more in the game until a teammate comes and lifts the net from the trapped player. A player may “tackle” another player, normally in an attempt to dislodge a ball being carried by the other player (although it is also legal to tackle a player who is not carrying a ball).<br><img src=data/images/1101-1.jpg><br>The objective of each team is to write their MyPlayer class so that their players (the five instances of the class) operate in a coordinated fashion, taking advantage of the various ways to score points while at the same time avoiding both hazards on the game filed and impediments thrown at them by players from other teams. The winner of a game is the team whose players score the largest total number of points.<br>&nbsp;&nbsp;There are many ways to score points:<br>&nbsp;&nbsp;(1)&nbsp;&nbsp;Successful Tackle (tackle not caught by Referees)<br>&nbsp;&nbsp;(2)&nbsp;&nbsp;Opponent’s Failed Tackle<br>&nbsp;&nbsp;(3)&nbsp;&nbsp;Throwing a net on one or more opponents<br>&nbsp;&nbsp;(4)&nbsp;&nbsp;Lifting a net off a teammate<br>And of course, the normal approach: (5) Carry or throw the balls into goals. This is also the easiest way to score points. In order to get more chance to make a ball into the goal, it is better to throw a ball to a goal once you get it. The ball may be blocked by other player, but the probability is low, because a thrown ball moves at the maximum speed allowed in the game, and the player can not catch up with it. So the only way it is blocked is that some player is just on the direction, which the ball moves. And because the ball will bounce off the wall when it hits the wall, it is not necessary to throw a ball straight to a goal (see figure 2). But the more times the ball bounces off the wall, the higher probability that other player will head off it. So we only consider the ball bounces off the wall no more than once.<br><img src=data/images/1101-2.jpg><br>Here is our problem. Given the range of the field, the position of the ball and the goals, the size of the goals, your task is to calculate how many percents of the direction that the team can score points through method (5).<br>", input:"In the first line of input, there is an integer t, which is the number of test cases and followed by the data for the test cases. The first line of each test case contains four integers: x1, y1, x2, y2, and (x1, y1) and (x2, y2) (-1000 &lt;= x1, y1, x2, y2 &lt;= 1000) are the coordinates of the diagonally points of the field. In the next line, there are two integers x and y, and (x, y) is the coordinate of the ball. The third line of each test case contains an integer n (0 &lt;= n &lt;= 100), which is the number of the goals. In next n lines, each line contains four integers: xi1, yi1, xi2, yi2, and (xi1, yi1) and (xi2, yi2) are the coordinates of the diagonally points of the i-th goal. You may assume the goals and the ball are inside the field. And if a ball move into or on the boundaries of a goal, the team scores points.<br>", output:"The output contains one line per test case containing a number, which is described above and followed a “%”. The number should be rounded up to two decimal digits. See the Sample Output to know the exact format. <br>", sample_in:"1\n100 100 -100 -100 \n0 0\n1\n10 10 -10 20", sample_out:"28.34%", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4, vtotal_submit:217, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"daofeng@poj", tag:["TEST"]}
{pid:1102, vid:1102, oj:"hdu", title:"Constructing Roads", desc:"There are N villages, which are numbered from 1 to N, and you should build some roads such that every two villages can connect to each other. We say two village A and B are connected, if and only if there is a road between A and B, or there exists a village C such that there is a road between A and C, and C and B are connected. <br><br>We know that there are already some roads between some villages and your job is the build some roads such that all the villages are connect and the length of all the roads built is minimum.<br>", input:"The first line is an integer N (3 &lt;= N &lt;= 100), which is the number of villages. Then come N lines, the i-th of which contains N integers, and the j-th of these N integers is the distance (the distance should be an integer within [1, 1000]) between village i and village j.<br><br>Then there is an integer Q (0 &lt;= Q &lt;= N * (N + 1) / 2). Then come Q lines, each line contains two integers a and b (1 &lt;= a &lt; b &lt;= N), which means the road between village a and village b has been built.<br>", output:"You should output a line contains an integer, which is the length of all the roads to be built such that all the villages are connected, and this value is minimum. <br>", sample_in:"3\n0 990 692\n990 0 179\n692 179 0\n1\n1 2", sample_out:"179", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2705, vtotal_submit:12181, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"kicc", author:"", tag:["TEST"]}
{pid:1103, vid:1103, oj:"hdu", title:"Flo\'s Restaurant", desc:"Sick and tired of pushing paper in the dreary bleary-eyed world of finance, Flo ditched her desk job and built her own restaurant.<br><br>In the small restaurant, there are several two-seat tables, four-seat tables and six-seat tables. A single diner or a group of two diners should be arranged to a two-seat table, a group of three or four diners should be arranged to a four-seat table, and a group of five or six diners should be arranged to a six-seat table.<br><br>Flo’s restaurant serves delicious food, and many people like to eat here. Every day when lunch time comes, the restaurant is usually full of diners. If there is no suitable table for a new coming group of diners, they have to wait until some suitable table is free and there isn’t an earlier arrival group waiting for the same kind of tables. Kind Flo will tell them how long they will get their seat, and if it’s longer than half an hour, they will leave for another restaurant.<br><br>Now given the list of coming diners in a day, please calculate how many diners take their food in Flo’s restaurant. You may assume it takes half an hour for every diner from taking a seat to leaving the restaurant.<br>", input:"There are several test cases. The first line of each case contains there positive integers separated by blanks, A, B and C (A, B, C &gt;0, A + B + C &lt;= 100), which are the number of two-seat tables, the number of four-seat tables and the number of six-seat tables respectively. From the second line, there is a list of coming groups of diners, each line of which contains two integers, T and N (0 &lt; N &lt;= 6), representing the arrival time and the number of diners of each group. The arrival time T is denoted by HH:MM, and fixed between 08:00 and 22:00 (the restaurant closes at 23:00). The list is sorted by the arrival time of each group in an ascending order, and you may assume that no groups arrive at the same time. Each test case is ended by a line of “#”.<br><br>A test case with A = B = C = 0 ends the input, and should not be processed.<br>", output:"For each test case, you should output an integer, the total number of diners who take their food in Flo’s restaurant, in a separated line.<br>", sample_in:"1 1 1\n10:40 1\n10:50 2\n11:00 4\n#\n1 1 1\n10:40 1\n10:50 2\n11:00 2\n#\n1 2 1\n10:30 1\n10:40 3\n10:50 2\n11:00 1\n11:20 5\n#\n0 0 0", sample_out:"7\n3\n12", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:243, vtotal_submit:1073, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Alcyone", tag:["TEST"]}
{pid:1104, vid:1104, oj:"hdu", title:"Remainder", desc:"Coco is a clever boy, who is good at mathematics. However, he is puzzled by a difficult mathematics problem. The problem is: Given three integers N, K and M, N may adds (‘+’) M, subtract (‘-‘) M, multiples (‘*’) M or modulus (‘%’) M (The definition of ‘%’ is given below), and the result will be restored in N. Continue the process above, can you make a situation that “[(the initial value of N) + 1] % K” is equal to “(the current value of N) % K”? If you can, find the minimum steps and what you should do in each step. Please help poor Coco to solve this problem. <br><br>You should know that if a = b * q + r (q &gt; 0 and 0 &lt;= r &lt; q), then we have a % q = r.<br>", input:"There are multiple cases. Each case contains three integers N, K and M (-1000 &lt;= N &lt;= 1000, 1 &lt; K &lt;= 1000, 0 &lt; M &lt;= 1000) in a single line.<br> <br>The input is terminated with three 0s. This test case is not to be processed.<br>", output:"For each case, if there is no solution, just print 0. Otherwise, on the first line of the output print the minimum number of steps to make “[(the initial value of N) + 1] % K” is equal to “(the final value of N) % K”. The second line print the operations to do in each step, which consist of ‘+’, ‘-‘, ‘*’ and ‘%’. If there are more than one solution, print the minimum one. (Here we define ‘+’ &lt; ‘-‘ &lt; ‘*’ &lt; ‘%’. And if A = a1a2...ak and B = b1b2...bk are both solutions, we say A &lt; B, if and only if there exists a P such that for i = 1, ..., P-1, ai = bi, and for i = P, ai &lt; bi)<br>", sample_in:"2 2 2\n-1 12 10\n0 0 0", sample_out:"0\n2\n*+", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:360, vtotal_submit:2583, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"", author:"Wang Yijie", tag:["TEST"]}
{pid:1105, vid:1105, oj:"hdu", title:"The Wolves and the Sheep", desc:"Nalim, Ocis and Remmarguts are playing on grass, and they feel very hungry now. As baby wolves, they decide to capture a little sheep to eat. Fortunately, they immediately discover a sheep roaming around the grass. However, what they found is the queen of the sheep ---- Mmxl, who has extraordinary speed that can compare with the wolves, and is very clever! Can you judge whether the baby wolves will capture Mmxl!<br><br>There are some rules to follow:<br>The grass field is a rectangular area that consist of R * C grids. And some obstacles like stones or trees exist. The actions of the baby wolves and Mmxl are taken in rounds. In each round, baby wolves take actions first, and then Mmxl follows. In the baby wolves’ turn, the three wolves will make a decision, and choose one of them to move (a move means moving from a grid to a neighboring grid). There must be a wolf to move, unless none of them can move. In the Mmxl\'s turn, she will always move. If she cannot move, she is captured. Baby wolves and Mmxl cannot move to the grids on which there are obstacles, and they are always on different grids. Baby wolves will never get out of the rectangular area. Once Mmxl gets away from the grass, she is never captured. <br><br>You should notice that the only situation that Mmxl is captured is that she cannot move, but is not that in wolves’ turn, some wolf is in the neighboring grid of Mmxl’s.<br>", input:"Input contains multiple test cases. Each test case starts with two numbers R and C (1 &lt;= R, C &lt;= 10) in one line. Then R lines follow, each line has C characters, which describes the grass field. A \'.\' denotes an empty grid, an \'X\' denotes an obstacle, a \'W\' denotes a baby wolf, and a \'S\' denotes the Mmxl. There are exactly three \'W\' and one \'S\'. Every test case will be followed by a blank line.<br>", output:"There is only one line for each test case. If lovely Mmxl will not be captured in finity rounds, print &quot;Lucky Mmxl is safe:)&quot;. If the wicked baby wolves are able to capture Mmxl, print &quot;Poor Mmxl is in danger:(&quot;.<br>", sample_in:"3 5\nXXW.X\nXWSWX\nXXX.X\n \n4 5\nXXWXX\nXWSWX\nXX.XX\nXX.XX\n \n7 6\nXXXXXX\nXWWW.X\nX....X\nX....X\nX....X\nX...SX\nXXXXXX\n \n7 7\nXXXXXXX\nXWWW..X\nX.....X\nX..X..X\nX.....X\nX....SX\nXXXXXXX\n \n7 7\nXXXXXXX\nXWWW..X\nX.....X\nX..XX.X\nX.....X\nX....SX\nXXXXXXX\n \n10 10\nWWW.......\n..........\n..........\n..........\n..........\n.....S....\n..........\n..........\n..........\n..........\n \n9 9\nXXXXXXXXX\nX...X...X\nXW.....WX\nX.X...X.X\nX..X.X..X\nX...S...X\nXXXXXXXXX\nXWXXXXXXX\nXXXXXXXXX\n \n9 9\nXXXXXXXXX\nX.......X\nXW.....WX\nX.X...X.X\nX..X.X..X\nX...S...X\nXXXXXXXXX\nXWXXXXXXX\nXXXXXXXXX\n \n9 9\nXXXXXXXXX\n....X....\nXW.....WX\nX.X...X.X\nX..X.X..X\nX...S...X\nXXXXXXXXX\nXWXXXXXXX\nXXXXXXXXX\n \n3 3\nWX.\nXSX\nWXW", sample_out:"Lucky Mmxl is safe:)\nLucky Mmxl is safe:)\nPoor Mmxl is in danger:(\nLucky Mmxl is safe:)\nPoor Mmxl is in danger:(\nLucky Mmxl is safe:)\nPoor Mmxl is in danger:(\nLucky Mmxl is safe:)\nLucky Mmxl is safe:)\nPoor Mmxl is in danger:(", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:14, vtotal_submit:189, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"", author:"CHEN Shixi （xreborner）", tag:["TEST"]}
{pid:1106, vid:1106, oj:"hdu", title:"排序", desc:"输入一行数字，如果我们把这行数字中的‘5’都看成空格，那么就得到一行用空格分割的若干非负整数（可能有些整数以‘0’开头，这些头部的‘0’应该被忽略掉，除非这个整数就是由若干个‘0’组成的，这时这个整数就是0）。<br><br>你的任务是：对这些分割得到的整数，依从小到大的顺序排序输出。<br><br>", input:"输入包含多组测试用例，每组输入数据只有一行数字（数字之间没有空格），这行数字的长度不大于1000。&nbsp;&nbsp;<br><br>输入数据保证：分割得到的非负整数不会大于100000000；输入数据不可能全由‘5’组成。<br>", output:"对于每个测试用例，输出分割得到的整数排序的结果，相邻的两个整数之间用一个空格分开，每组输出占一行。<br>", sample_in:"0051231232050775", sample_out:"0 77 12312320", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:6451, vtotal_submit:30881, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"POJ", author:"", tag:["TEST"]}
{pid:1107, vid:1107, oj:"hdu", title:"武林", desc:"在一个有12行12列的方形的武林世界里，少林、武当和峨嵋三派的弟子们在为独霸武林而互相厮杀。武林世界的第一行的一列格子的坐标是(1, 1)，第一行第二列坐标是(1, 2)……右下角的坐标为(12, 12)。如图：<br><center><img src=data/images/1107-1.jpg></center><br>少林派弟子总是在同一列回不停地行走。先往下走，走到头不能再走时就往上走，再到头则又往下走……比如，(1, 1) -&gt; (2, 1) -&gt; (3, 1)。<br>武当派弟子总是在同一行来回不停地行走。先往右走，走到头不能再走时就往左走，再到头则又往右走……比如，(2, 1) -&gt; (2, 2) -&gt; (2, 3)。<br>峨嵋派弟子总是在右下-左上方向来回不停走，先往右下方走，走到头不能再走时就往左上方走，再到头则又往右下方走……比如，(1, 1) -&gt; (2, 2) -&gt; (3, 3)。峨嵋弟子如果位于(1,12)或(12,1)，那当然只能永远不动。<br><br>每次走动，每个弟子必须，而且只能移动一个格子。<br>每名弟子有内力、武艺、和生命力三种属性。这三种属性的取值范围都是大于等于0，小于等于100。<br><br>当有两名不同门派的弟子进入同一个格子时，一定会发生一次战斗，而且也只有在这种情况下，才会发生战斗。（同派弟子之间当然不会自相残杀；一个格子里三派弟子都有时，大家都会因为害怕别人渔翁得利而不敢出手；而多名同门派弟子也不会联手对付敌人，因为这有悖于武林中崇尚的单打独斗精神，会被人耻笑）<br><br>一次战斗的结果将可能导致参战双方生命力发生变化，计算方法为：<br><br>战后生命力 = 战前生命力 - 对方攻击力<br><br>而不同门派的弟子攻击力计算方法不同：<br><br>少林派攻击力 = (0.5 * 内力 + 0.5 * 武艺) * (战前生命力 + 10) / 100<br>武当派攻击力 = (0.8 * 内力 + 0.2 * 武艺) * (战前生命力 + 10) / 100<br>峨嵋派攻击力 = (0.2 * 内力 + 0.8 * 武艺) * (战前生命力 + 10) / 100<br><br>对攻击力的计算过程为浮点运算，最终结果去掉小数点后部分取整，使得攻击力总是整数。<br>一次战斗结束后，生命力变为小于或等于0的弟子，被视为“战死”，会从武林中消失。<br>两名不同门派的弟子相遇时，只发生一次战斗。<br><br>初始状态下，不存在生命值小于或等于0的弟子，而且一个格子里有可能同时有多个弟子。<br>一系列战斗从初始状态就可能爆发，全部战斗结束后，仍然活着的弟子才开始一齐走到下一个格子。总之，不停地战斗－行走－战斗－行走……所有弟子都需等战斗结束后，才一齐走到下一个格子。<br>你需要做的是，从一个初始状态，算出经过N步（N &lt; 1000）后的状态。所有的弟子先进行完全部战斗（当然也可能没有任何战斗发生），然后再一齐走到下一个格子，这称为一步。<br>所有弟子总数不会超过1000。<br>", input:"第一行是测试数据的组数，随后是各组测试数据。<br>每组数据第一行是行走步数 N。<br>接下来的若干行，每行描述一名弟子的位置及其各项参数。描述弟子时，格式为“弟子代号 行号 列号 内力 武艺 生命力”。弟子代号就是一个字母：<br>‘S’ 代表少林派弟子<br>‘W’ 代表武当派弟子<br>‘E’ 代表峨嵋派弟子<br><br>比如：<br>W 10 2 10 3 10<br>表示第10行第2列有一名武当派弟子，他的内力是 10，武艺是3，生命力是10。<br><br>每组测试数据以一个结束标志行结尾。结束标志行只含有一个字符’0’。<br>", output:"针对每组测试数据，您的输出应该是4行，前3行每行是用空格分隔的两个整数，前一个是某派弟子总数，后一个是本派所有弟子生命力之和。规定第1行代表少林派，第2行代表武当派，第3行代表峨嵋派。第4行是 “***”表示结束。<br>", sample_in:"2\n1\nS 1 2 20 20 20\nW 2 1 20 20 20\n0\n2\nS 1 2 20 20 20\nW 2 1 20 20 20\nE 12 12 20 20 100\n0", sample_out:"1 20\n1 20\n0 0\n***\n1 14\n1 14\n1 100\n***", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:438, vtotal_submit:2424, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"POJ", author:"", tag:["TEST"]}
{pid:1108, vid:1108, oj:"hdu", title:"最小公倍数", desc:"给定两个正整数，计算这两个数的最小公倍数。", input:"输入包含多组测试数据，每组只有一行，包括两个不大于1000的正整数.", output:"对于每个测试用例，给出这两个数的最小公倍数，每个实例输出一行。<br>", sample_in:"10 14", sample_out:"70", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:13520, vtotal_submit:30122, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"POJ", author:"", tag:["TEST"]}
{pid:1109, vid:1109, oj:"hdu", title:"Run Away", desc:"One of the traps we will encounter in the Pyramid is located in the Large Room. A lot of small holes are drilled into the floor. They look completely harmless at the first sight. But when activated, they start to throw out very hot java, uh ... pardon, lava. Unfortunately, all known paths to the Center Room (where the Sarcophagus is) contain a trigger that activates the trap. The ACM were not able to avoid that. But they have carefully monitored the positions of all the holes. So it is important to find the place in the Large Room that has the maximal distance from all the holes. This place is the safest in the entire room and the archaeologist has to hide there.<br>", input:"The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing three integers X, Y, M separated by space. The numbers satisfy conditions: 1 &lt;= X,Y &lt;=10000, 1 &lt;= M &lt;= 1000. The numbers X and Yindicate the dimensions of the Large Room which has a rectangular shape. The number M stands for the number of holes. Then exactly M lines follow, each containing two integer numbers Ui and Vi (0 &lt;= Ui &lt;= X, 0 &lt;= Vi &lt;= Y) indicating the coordinates of one hole. There may be several holes at the same position.<br>", output:"Print exactly one line for each test case. The line should contain the sentence &quot;The safest point is (P, Q).&quot; where P and Qare the coordinates of the point in the room that has the maximum distance from the nearest hole, rounded to the nearest number with exactly one digit after the decimal point (0.05 rounds up to 0.1). <br>", sample_in:"3\n1000 50 1\n10 10\n100 100 4\n10 10\n10 90\n90 10\n90 90\n3000 3000 4\n1200 85\n63 2500\n2700 2650 \n2990 100", sample_out:"The safest point is (1000.0, 50.0).\nThe safest point is (50.0, 50.0).\nThe safest point is (1433.0, 1669.8).", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:85, vtotal_submit:408, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"Central Europe 1999", author:"", tag:["TEST"]}
{pid:1110, vid:1110, oj:"hdu", title:"Equipment Box", desc:"There is a large room in the Pyramid called Room-of-No-Return. Its floor is covered by rectangular tiles of equal size. The name of the room was chosen because of the very high number of traps and mechanisms in it. The ACM group has spent several years studying the secret plan of this room. It has made a clever plan to avoid all the traps. A specially trained mechanic was sent to deactivate the most feared trap called Shattered Bones. After deactivating the trap the mechanic had to escape from the room. It is very important to step on the center of the tiles only; he must not touch the edges. One wrong step and a large rock falls from the ceiling squashing the mechanic like a pancake. After deactivating the trap, he realized a horrible thing: the ACM plan did not take his equipment box into consideration. The box must be laid onto the ground because the mechanic must have both hands free to prevent contact with other traps. But when the box is laid on the ground, it could touch the line separating the tiles. And this is the main problem you are to solve. <br>", input:"The input consists of T test cases. The number of them (T) is given on the first line of the input. Each test case consists of a single line. The line contains exactly four integer numbers separated by spaces: A, B, X and Y. A and Bindicate the dimensions of the tiles, X and Y are the dimensions of the equipment box (1 &lt;= A, B, X, Y &lt;= 50000). <br>", output:"Your task is to determine whether it is possible to put the box on a single tile -- that is, if the whole box fits on a single tile without touching its border. If so, you are to print one line with the sentence &quot;Escape is possible.&quot;. Otherwise print the sentence &quot;Box cannot be dropped.&quot;. <br>", sample_in:"2\n10 10 8 8\n8 8 10 10", sample_out:"Escape is possible.\nBox cannot be dropped.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:203, vtotal_submit:1314, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Central Europe 1999", author:"", tag:["TEST"]}
{pid:1111, vid:1111, oj:"hdu", title:"Secret Code", desc:"The Sarcophagus itself is locked by a secret numerical code. When somebody wants to open it, he must know the code and set it exactly on the top of the Sarcophagus. A very intricate mechanism then opens the cover. If an incorrect code is entered, the tickets inside would catch fire immediately and they would have been lost forever. The code (consisting of up to 100 integers) was hidden in the Alexandrian Library but unfortunately, as you probably know, the library burned down completely. <br><br>But an almost unknown archaeologist has obtained a copy of the code something during the 18th century. He was afraid that the code could get to the ``wrong people\'\' so he has encoded the numbers in a very special way. He took a random complex number B that was greater (in absolute value) than any of the encoded numbers. Then he counted the numbers as the digits of the system with basis B. That means the sequence of numbers an, an-1, ..., a1, a0 was encoded as the number X = a0 + a1B + a2B2 + ...+ anBn. <br><br>Your goal is to decrypt the secret code, i.e. to express a given number X in the number system to the base B. In other words, given the numbers X and Byou are to determine the ``digit\'\' a0 through an. <br>", input:"The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case consists of one single line containing four integer numbers Xr, Xi, Br, Bi (|Xr|,|Xi| &lt;= 1000000, |Br|,|Bi| &lt;= 16). These numbers indicate the real and complex components of numbers X and B, i.e. X = Xr + i.Xi, B = Br + i.Bi. B is the basis of the system (|B| &gt; 1), X is the number you have to express. <br>", output:"Your program must output a single line for each test case. The line should contain the ``digits\'\' an, an-1, ..., a1, a0, separated by commas. The following conditions must be satisfied: <br>for all i in {0, 1, 2, ...n}: 0 &lt;= ai &lt; |B| <br>X = a0 + a1B + a2B2 + ...+ anBn <br>if n &gt; 0 then an &lt;&gt; 0 <br>n &lt;= 100 <br>If there are no numbers meeting these criteria, output the sentence &quot;The code cannot be decrypted.&quot;. If there are more possibilities, print any of them. <br>", sample_in:"4\n-935 2475 -11 -15\n1 0 -3 -2\n93 16 3 2\n191 -192 11 -12", sample_out:"8,11,18\n1\nThe code cannot be decrypted.\n16,15", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:41, vtotal_submit:413, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Central Europe 1999", author:"", tag:["TEST"]}
{pid:1112, vid:1112, oj:"hdu", title:"The Proper Key", desc:"Many people think that Tetris was invented by two Russian programmers. But that is not the whole truth. The idea of the game is very old -- even the Egyptians had something similar. But they did not use it as a game. Instead, it was used as a very complicated lock. The lock was made of wood and consisted of a large number of square fields, laid out in regular rows and columns. Each field was either completely filled with wood, or empty. The key for this lock was two-dimensional and it was made by joining square parts of the same size as the fields of the lock. So they had a 2D lock and 2D key that could be inserted into the lock from the top. The key was designed so that it was not possible to move it upwards. It could only fall down and it could slide sideways -- exactly like in a Tetris game. The only difference is that the key could not be rotated. Rotation in Tetris is really a Russian invention. <br><br>The entry gate into the Pyramid has such a lock. The ACM archaeologists have found several keys and one of them belongs to the lock with a very high probability. Now they need to try them out and find which one to use. Because it is too time-consuming to try all of them, it is better to begin with those keys that may be inserted deeper into the lock. Your program should be able to determine how deep a given key can be inserted into a given lock. <br>", input:"The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing two integers R and C (1 &lt;= R,C &lt;= 100) indicating the key size. Then exactly R rows follow, each containing C characters. Each character is either a hash mark (#) or a period (.). A hash mark represents one square field made of wood; a period is an empty field. The wooden fields are always connected, i.e. the whole key is made of one piece. Moreover, the key remains connected even if we cut off arbitrary number of rows from its top. There is always at least one non-empty field in the top-most and bottom-most rows and the left-most and right-most columns. <br>After the key description, there is a line containing two integers D and W (1 &lt;= D &lt;= 10000, 1 &lt;= W &lt;= 1000). The number W is the lock width, and D is its depth. The next D lines contain W characters each. The character may be either a hash mark (representing the wood) or a period (the free space). <br>", output:"Your program should print one line of output for each test case. The line should contain the statement &quot;The key falls to depth X.&quot;. Replace X with the maximum depth to which the key can be inserted by moving it down and sliding it to the left or right only. The depth is measured as the distance between the bottom side of the key and the top side of the lock. If it is possible to move the key through the whole lock and take it away at the bottom side, output the sentence &quot;The key can fall through.&quot;. <br>", sample_in:"4\n2 4\n#.##\n###.\n3 6\n#....#\n#....#\n#..###\n2 3\n##.\n.##\n2 7\n#.#.#.#\n.#.#.#.\n1 1\n#\n1 10\n###....###\n3 2\n##\n.#\n.#\n1 5\n#.#.#", sample_out:"The key falls to depth 2.\nThe key falls to depth 0.\nThe key can fall through.\nThe key falls to depth 2.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:40, vtotal_submit:204, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Central Europe 1999", author:"", tag:["TEST"]}
{pid:1113, vid:1113, oj:"hdu", title:"Word Amalgamation", desc:"In millions of newspapers across the United States there is a word game called Jumble. The object of this game is to solve a riddle, but in order to find the letters that appear in the answer it is necessary to unscramble four words. Your task is to write a program that can unscramble words. <br>", input:"The input contains four parts: <br><br>1. a dictionary, which consists of at least one and at most 100 words, one per line; <br>2. a line containing XXXXXX, which signals the end of the dictionary; <br>3. one or more scrambled `words\' that you must unscramble, each on a line by itself; and <br>4. another line containing XXXXXX, which signals the end of the file.<br><br>All words, including both dictionary words and scrambled words, consist only of lowercase English letters and will be at least one and at most six characters long. (Note that the sentinel XXXXXX contains uppercase X\'s.) The dictionary is not necessarily in sorted order, but each word in the dictionary is unique. <br>", output:"For each scrambled word in the input, output an alphabetical list of all dictionary words that can be formed by rearranging the letters in the scrambled word. Each word in this list must appear on a line by itself. If the list is empty (because no dictionary words can be formed), output the line ``NOT A VALID WORD&quot; instead. In either case, output a line containing six asterisks to signal the end of the list.<br>", sample_in:"tarp\ngiven\nscore\nrefund\nonly\ntrap\nwork\nearn\ncourse\npepper\npart\nXXXXXX\nresco\nnfudre\naptr\nsett\noresuc\nXXXXXX", sample_out:"score\n******\nrefund\n******\npart\ntarp\ntrap\n******\nNOT A VALID WORD\n******\ncourse\n******", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:958, vtotal_submit:2361, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 1998", author:"", tag:["TEST"]}
{pid:1114, vid:1114, oj:"hdu", title:"Piggy-Bank", desc:"Before ACM can do anything, a budget must be prepared and the necessary financial support obtained. The main income for this action comes from Irreversibly Bound Money (IBM). The idea behind is simple. Whenever some ACM member has any small money, he takes all the coins and throws them into a piggy-bank. You know that this process is irreversible, the coins cannot be removed without breaking the pig. After a sufficiently long time, there should be enough cash in the piggy-bank to pay everything that needs to be paid. <br><br>But there is a big problem with piggy-banks. It is not possible to determine how much money is inside. So we might break the pig into pieces only to find out that there is not enough money. Clearly, we want to avoid this unpleasant situation. The only possibility is to weigh the piggy-bank and try to guess how many coins are inside. Assume that we are able to determine the weight of the pig exactly and that we know the weights of all coins of a given currency. Then there is some minimum amount of money in the piggy-bank that we can guarantee. Your task is to find out this worst case and determine the minimum amount of cash inside the piggy-bank. We need your help. No more prematurely broken pigs! <br>", input:"The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing two integers E and F. They indicate the weight of an empty pig and of the pig filled with coins. Both weights are given in grams. No pig will weigh more than 10 kg, that means 1 &lt;= E &lt;= F &lt;= 10000. On the second line of each test case, there is an integer number N (1 &lt;= N &lt;= 500) that gives the number of various coins used in the given currency. Following this are exactly N lines, each specifying one coin type. These lines contain two integers each, Pand W (1 &lt;= P &lt;= 50000, 1 &lt;= W &lt;=10000). P is the value of the coin in monetary units, W is it\'s weight in grams. <br>", output:"Print exactly one line of output for each test case. The line must contain the sentence &quot;The minimum amount of money in the piggy-bank is X.&quot; where X is the minimum amount of money that can be achieved using coins with the given total weight. If the weight cannot be reached exactly, print a line &quot;This is impossible.&quot;. <br>", sample_in:"3\n10 110\n2\n1 1\n30 50\n10 110\n2\n1 1\n50 30\n1 6\n2\n10 3\n20 4", sample_out:"The minimum amount of money in the piggy-bank is 60.\nThe minimum amount of money in the piggy-bank is 100.\nThis is impossible.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2878, vtotal_submit:9683, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Central Europe 1999", author:"", tag:["TEST"]}
{pid:1115, vid:1115, oj:"hdu", title:"Lifting the Stone", desc:"There are many secret openings in the floor which are covered by a big heavy stone. When the stone is lifted up, a special mechanism detects this and activates poisoned arrows that are shot near the opening. The only possibility is to lift the stone very slowly and carefully. The ACM team must connect a rope to the stone and then lift it using a pulley. Moreover, the stone must be lifted all at once; no side can rise before another. So it is very important to find the centre of gravity and connect the rope exactly to that point. The stone has a polygonal shape and its height is the same throughout the whole polygonal area. Your task is to find the centre of gravity for the given polygon. <br>", input:"The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing a single integer N (3 &lt;= N &lt;= 1000000) indicating the number of points that form the polygon. This is followed by N lines, each containing two integers Xi and Yi (|Xi|, |Yi| &lt;= 20000). These numbers are the coordinates of the i-th point. When we connect the points in the given order, we get a polygon. You may assume that the edges never touch each other (except the neighboring ones) and that they never cross. The area of the polygon is never zero, i.e. it cannot collapse into a single line. <br>", output:"Print exactly one line for each test case. The line should contain exactly two numbers separated by one space. These numbers are the coordinates of the centre of gravity. Round the coordinates to the nearest number with exactly two digits after the decimal point (0.005 rounds up to 0.01). Note that the centre of gravity may be outside the polygon, if its shape is not convex. If there is such a case in the input data, print the centre anyway. <br>", sample_in:"2\n4\n5 0\n0 5\n-5 0\n0 -5\n4\n1 1\n11 1\n11 11\n1 11", sample_out:"0.00 0.00\n6.00 6.00", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1281, vtotal_submit:4840, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Central Europe 1999", author:"", tag:["TEST"]}
{pid:1116, vid:1116, oj:"hdu", title:"Play on Words", desc:"Some of the secret doors contain a very interesting word puzzle. The team of archaeologists has to solve it to open that doors. Because there is no other way to open the doors, the puzzle is very important for us. <br><br>There is a large number of magnetic plates on every door. Every plate has one word written on it. The plates must be arranged into a sequence in such a way that every word begins with the same letter as the previous word ends. For example, the word ``acm\'\' can be followed by the word ``motorola\'\'. Your task is to write a computer program that will read the list of words and determine whether it is possible to arrange all of the plates in a sequence (according to the given rule) and consequently to open the door. <br>", input:"The input consists of T test cases. The number of them (T) is given on the first line of the input file. Each test case begins with a line containing a single integer number Nthat indicates the number of plates (1 &lt;= N &lt;= 100000). Then exactly Nlines follow, each containing a single word. Each word contains at least two and at most 1000 lowercase characters, that means only letters \'a\' through \'z\' will appear in the word. The same word may appear several times in the list. <br>", output:"Your program has to determine whether it is possible to arrange all the plates in a sequence such that the first letter of each word is equal to the last letter of the previous word. All the plates from the list must be used, each exactly once. The words mentioned several times must be used that number of times. <br>If there exists such an ordering of plates, your program should print the sentence &quot;Ordering is possible.&quot;. Otherwise, output the sentence &quot;The door cannot be opened.&quot;. <br>", sample_in:"3\n2\nacm\nibm\n3\nacm\nmalform\nmouse\n2\nok\nok", sample_out:"The door cannot be opened.\nOrdering is possible.\nThe door cannot be opened.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:980, vtotal_submit:4760, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"Central Europe 1999", author:"", tag:["TEST"]}
{pid:1117, vid:1117, oj:"hdu", title:"Booklet Printing", desc:"When printing out a document, normally the first page is printed first, then the second, then the third, and so on until the end. However, when creating a fold-over booklet, the order of printing must be altered. A fold-over booklet has four pages per sheet, with two on the front and two on the back. When you stack all the sheets in order, then fold the booklet in half, the pages appear in the correct order as in a regular book. <br>For example, a 4-page booklet would print on 1 sheet of paper: the front will contain page 4 then page 1, and the back will contain page 2 then page 3. <br><br>Front          Back<br>-------------  -------------<br>|     |     |  |     |     |<br>|  4  |  1  |  |  2  |  3  |<br>|     |     |  |     |     |<br>-------------  -------------<br><br>Your task is to write a program that takes as input the number of pages to be printed, then generates the printing order. <br>", input:"The input contains one or more test cases, followed by a line containing the number 0 that indicates the end of the file. <br><br>Each test case consists of a positive integer n on a line by itself, where n is the number of pages to be printed; n will not exceed 100. <br>", output:"For each test case, output a report indicating which pages should be printed on each sheet, exactly as shown in the example. If the desired number of pages does not completely fill up a sheet, then print the word Blank in place of a number. If the front or back of a sheet is entirely blank, do not generate output for that side of the sheet.<br><br>Output must be in ascending order by sheet, front first, then back.<br>", sample_in:"1\n14\n4\n0", sample_out:"Printing order for 1 pages:\nSheet 1, front: Blank, 1\nPrinting order for 14 pages:\nSheet 1, front: Blank, 1\nSheet 1, back : 2, Blank\nSheet 2, front: 14, 3\nSheet 2, back : 4, 13\nSheet 3, front: 12, 5\nSheet 3, back : 6, 11\nSheet 4, front: 10, 7\nSheet 4, back : 8, 9\nPrinting order for 4 pages:\nSheet 1, front: 4, 1\nSheet 1, back : 2, 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:257, vtotal_submit:542, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 1998", author:"", tag:["TEST"]}
No Such Problem Called HDU 1118.<br>
{pid:1119, vid:1119, oj:"hdu", title:"Simple Algorithmetics", desc:"One part of the new WAP portal is also a calculator computing expressions with very long numbers. To make the output look better, the result is formated the same way as is it usually used with manual calculations. <br>Your task is to write the core part of this calculator. Given two numbers and the requested operation, you are to compute the result and print it in the form specified below. With addition and subtraction, the numbers are written below each other. Multiplication is a little bit more complex: first of all, we make a partial result for every digit of one of the numbers, and then sum the results together.<br>", input:"There is a single positive integer T on the first line of input. It stands for the number of expressions to follow. Each expression consists of a single line containing a positive integer number, an operator (one of +, - and *) and the second positive integer number. Every number has at most 500 digits. There are no spaces on the line. If the operation is subtraction, the second number is always lower than the first one. No number will begin with zero.<br>", output:"For each expression, print two lines with two given numbers, the second number below the first one, last digits (representing unities) must be aligned in the same column. Put the operator right in front of the first digit of the second number. After the second number, there must be a horizontal line made of dashes (-). <br><br>For each addition or subtraction, put the result right below the horizontal line, with last digit aligned to the last digit of both operands. <br><br>For each multiplication, multiply the first number by each digit of the second number. Put the partial results one below the other, starting with the product of the last digit of the second number. Each partial result should be aligned with the corresponding digit. That means the last digit of the partial product must be in the same column as the digit of the second number. No product may begin with any additional zeros. If a particular digit is zero, the product has exactly one digit -- zero. If the second number has more than one digit, print another horizontal line under the partial results, and then print the sum of them. <br><br>There must be minimal number of spaces on the beginning of lines, with respect to other constraints. The horizontal line is always as long as necessary to reach the left and right end of both numbers (and operators) right below and above it. That means it begins in the same column where the leftmost digit or operator of that two lines (one below and one above) is. It ends in the column where is the rightmost digit of that two numbers. The line can be neither longer nor shorter than specified. <br><br>Print one blank line after each test case, including the last one.<br>", sample_in:"4\n12345+67890\n324-111\n325*4405\n1234*4", sample_out:" 12345\n+67890\n------\n 80235\n\n 324\n-111\n----\n 213\n\n    325\n  *4405\n  -----\n   1625\n     0\n 1300\n1300\n-------\n1431625\n\n1234\n  *4\n----\n4936", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:73, vtotal_submit:511, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"Central Europe 2000", author:"", tag:["TEST"]}
{pid:1120, vid:1120, oj:"hdu", title:"The Bulk", desc:"ACM uses a new special technology of building its transceiver stations. This technology is called Modular Cuboid Architecture (MCA) and is covered by a patent of Lego company. All parts of the transceiver are shipped in unit blocks that have the form of cubes of exactly the same size. The cubes can be then connected to each other. The MCA is modular architecture, that means we can select preferred transceiver configuration and buy only those components we need. <br>The cubes must be always connected &quot;face-to-face&quot;, i.e. the whole side of one cube is connected to the whole side of another cube. One cube can be thus connected to at most six other units. The resulting equipment, consisting of unit cubes is called The Bulk in the communication technology slang. <br><br>Sometimes, an old and unneeded bulk is condemned, put into a storage place, and replaced with a new one. It was recently found that ACM has many of such old bulks that just occupy space and are no longer needed. The director has decided that all such bulks must be disassembled to single pieces to save some space. Unfortunately, there is no documentation for the old bulks and nobody knows the exact number of pieces that form them. You are to write a computer program that takes the bulk description and computes the number of unit cubes. <br><br>Each bulk is described by its faces (sides). A special X-ray based machine was constructed that is able to localise all faces of the bulk in the space, even the inner faces, because the bulk can be partially hollow (it can contain empty spaces inside). But any bulk must be connected (i.e. it cannot drop into two pieces) and composed of whole unit cubes.<br>", input:"There is a single positive integer T on the first line of input. It stands for the number of bulks to follow. Each bulk description begins with a line containing single positive integer F, 6 &lt;= F &lt;= 250, stating the number of faces. Then there are F lines, each containing one face description. All faces of the bulk are always listed, in any order. Any face may be divided into several distinct parts and described like if it was more faces. Faces do not overlap. Every face has one inner side and one outer side. No side can be &quot;partially inner and partially outer&quot;. <br><br>Each face is described on a single line. The line begins with an integer number P stating the number of points that determine the face, 4 &lt;= P &lt;= 200. Then there are 3 x P numbers, coordinates of the points. Each point is described by three coordinates X,Y,Z (0 &lt;= X, Y, Z &lt;= 1000) separated by spaces. The points are separated from each other and from the number P by two space characters. These additional spaces were added to make the input more human readable. The face can be constructed by connecting the points in the specified order, plus connecting the last point with the first one. <br><br>The face is always composed of &quot;unit squares&quot;, that means every edge runs either in X, Y or Z-axis direction. If we take any two neighbouring points X1, Y1, Z1 and X2, Y2, Z2, then the points will always differ in exactly one of the three coordinates. I.e. it is either X1 &lt;&gt; X2, or Y1 &lt;&gt; Y2, or Z1 &lt;&gt; Z2, other two coordinates are the same. Every face lies in an orthogonal plane, i.e. exactly one coordinate is always the same for all points of the face. The face outline will never touch nor cross itself.<br>", output:"Your program must print a single line for every test case. The line must contain the sentence The bulk is composed of V units., where V is the volume of the bulk.<br>", sample_in:"2\n12\n4 10 10 10 10 10 20 10 20 20 10 20 10\n4 20 10 10 20 10 20 20 20 20 20 20 10\n4 10 10 10 10 10 20 20 10 20 20 10 10\n4 10 20 10 10 20 20 20 20 20 20 20 10\n4 10 10 10 10 20 10 20 20 10 20 10 10\n5 10 10 20 10 20 20 20 20 20 20 15 20 20 10 20\n4 14 14 14 14 14 16 14 16 16 14 16 14\n4 16 14 14 16 14 16 16 16 16 16 16 14\n4 14 14 14 14 14 16 16 14 16 16 14 14\n4 14 16 14 14 16 16 16 16 16 16 16 14\n4 14 14 14 14 16 14 16 16 14 16 14 14\n4 14 14 16 14 16 16 16 16 16 16 14 16\n12\n4 20 20 30 20 30 30 30 30 30 30 20 30\n4 10 10 10 10 40 10 40 40 10 40 10 10\n6 10 10 20 20 10 20 20 30 20 30 30 20 30 40 20 10 40 20\n6 20 10 20 20 20 20 30 20 20 30 40 20 40 40 20 40 10 20\n4 10 10 10 40 10 10 40 10 20 10 10 20\n4 10 40 10 40 40 10 40 40 20 10 40 20\n4 20 20 20 30 20 20 30 20 30 20 20 30\n4 20 30 20 30 30 20 30 30 30 20 30 30\n4 10 10 10 10 40 10 10 40 20 10 10 20\n4 40 10 10 40 40 10 40 40 20 40 10 20\n4 20 20 20 20 30 20 20 30 30 20 20 30\n4 30 20 20 30 30 20 30 30 30 30 20 30", sample_out:"The bulk is composed of 992 units.\nThe bulk is composed of 10000 units.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:99, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"Central Europe 2000", author:"", tag:["TEST"]}
{pid:1121, vid:1121, oj:"hdu", title:"Complete the Sequence", desc:"You probably know those quizzes in Sunday magazines: given the sequence 1, 2, 3, 4, 5, what is the next number? Sometimes it is very easy to answer, sometimes it could be pretty hard. Because these &quot;sequence problems&quot; are very popular, ACM wants to implement them into the &quot;Free Time&quot; section of their new WAP portal. <br>ACM programmers have noticed that some of the quizzes can be solved by describing the sequence by polynomials. For example, the sequence 1, 2, 3, 4, 5 can be easily understood as a trivial polynomial. The next number is 6. But even more complex sequences, like 1, 2, 4, 7, 11, can be described by a polynomial. In this case, 1/2.n^2-1/2.n+1 can be used. Note that even if the members of the sequence are integers, polynomial coefficients may be any real numbers. <br><br>Polynomial is an expression in the following form: <br><br><br>P(n) = aD.n^D+aD-1.n^D-1+...+a1.n+a0 <br><br><br>. If aD &lt;&gt; 0, the number D is called a degree of the polynomial. Note that constant function P(n) = C can be considered as polynomial of degree 0, and the zero function P(n) = 0 is usually defined to have degree -1.<br>", input:"There is a single positive integer T on the first line of input. It stands for the number of test cases to follow. Each test case consists of two lines. First line of each test case contains two integer numbers S and C separated by a single space, 1 &lt;= S &lt; 100, 1 &lt;= C &lt; 100, (S+C) &lt;= 100. The first number, S, stands for the length of the given sequence, the second number, C is the amount of numbers you are to find to complete the sequence. <br><br>The second line of each test case contains S integer numbers X1, X2, ... XS separated by a space. These numbers form the given sequence. The sequence can always be described by a polynomial P(n) such that for every i, Xi = P(i). Among these polynomials, we can find the polynomial Pmin with the lowest possible degree. This polynomial should be used for completing the sequence.<br>", output:"For every test case, your program must print a single line containing C integer numbers, separated by a space. These numbers are the values completing the sequence according to the polynomial of the lowest possible degree. In other words, you are to print values Pmin(S+1), Pmin(S+2), .... Pmin(S+C). <br><br>It is guaranteed that the results Pmin(S+i) will be non-negative and will fit into the standard integer type.<br>", sample_in:"4\n6 3\n1 2 3 4 5 6\n8 2\n1 2 4 7 11 16 22 29\n10 2\n1 1 1 1 1 1 1 1 1 2\n1 10\n3", sample_out:"7 8 9\n37 46\n11 56\n3 3 3 3 3 3 3 3 3 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:116, vtotal_submit:241, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Central Europe 2000", author:"", tag:["TEST"]}
{pid:1122, vid:1122, oj:"hdu", title:"Direct Visibility", desc:"Building the GSM network is a very expensive and complex task. Moreover, after the Base Transceiver Stations (BTS) are built and working, we need to perform many various measurements to determine the state of the network, and propose effective improvements to be made. <br>The ACM technicians have a special equipment for measuring the strength of electro-magnetic fields, the transceivers\' power and quality of the signal. This equipment is packed into a huge knapsack and the technician must move with it from one BTS to another. Unfortunately, the knapsack have not enough memory for storing all of the measured values. It has a small cache only, that can store values for several seconds. Then the values must be transmitted to the BTS by an infrared connection (IRDA). The IRDA needs direct visibility between the technician and the BTS. <br><br>Your task is to find the path between two neighbouring BTSes such that at least one of those BTSes is always visible.<br>", input:"There is a single positive integer T on the first line of input. It stands for the number of test cases to follow. Each test case consists of a town description. For simplicity, a town is modelled as a rectangular grid of P x Q square fields. Each field is exactly 1 metre wide. For each field, a non-negative integer Zi,j is given, representing the height of the terrain in that place, in metres. That means the town model is made of cubes, each of them being either solid or empty. There are no &quot;half solid&quot; cubes. <br><br>The first line of each test case contains two integer numbers P and Q, separated by a single space, 1 &lt;= P, Q &lt;= 200. Then there are P lines each containing Q integer numbers separated by a space. These numbers are Zi,j, where 1 &lt;= i &lt;= P, 1 &lt;= j &lt;= Q and 0 &lt;= Zi,j &lt;= 5000. After the terrain description, there are four numbers R1, C1, R2, C2 on the last line of each test case. These numbers represent position of two BTSes, 1 &lt;= R1, R2 &lt;= P, 1 &lt;= C1, C2 &lt;= Q. The first coordinate (R) determines the row of the town, the second coordinate determines the column. <br><br>The technician is moving in steps (steps stands for Standard Technician\'s Elementary Positional Shift). Each step is made between two neighbouring square fields. That means the step is always in North, South, West or East direction. It is not possible to move diagonally. The step between two fields A and B (step from A to B) is allowed only if the height of the terrain in the field B is not very different from the height in the field A. The technician can climb at most 1 metre up or descend at most 3 metres down in a single step. <br><br>At the end of each step, at least one of the two BTSes must be visible. However, there can be some point &quot;in the middle of the step&quot; where no BTS is visible. This is OK and the data is handled by the cache. The BTS is considered visible, if there is a direct visibility between the unit cube just above the terrain on the BTSes coordinates and the cube just above the terrain on the square field, where the technician is. Direct visibility between two cubes means that the line connecting the centres of the two cubes does not intersect any solid cube. However, the line can touch any number of solid cubes. In other words, consider both the BTS and the technician being points exactly half metre above the surface and in the centre of the appropriate square field. <br><br>Note that the IRDA beam can go between two cubes that touch each other by their edge, although there is no space between them. It is because such a beam touches both of these two cubes but does not intersect any of them. See the last test case of the sample input for an example of such a situation.<br>", output:"You are to find the shortest possible path meeting the above criteria. All steps must be done between neighbouring fields, the terrain must not elevate or descend too much, and at the end of each step, at least one BTS must be visible. <br><br>For each test case, print one line containing the sentence The shortest path is M steps long., where M is the number of steps that must be made. If there is no such path, output the sentence Mission impossible!. <br>", sample_in:"4\n5 5\n8 7 6 5 4\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n1 1 5 1\n5 8\n2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n9 9 9 9 9 9 9 2\n2 2 2 2 2 2 2 2\n1 2 5 1\n5 8\n2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n2 2 2 2 2 2 2 2\n9 9 9 9 9 9 9 2\n2 2 2 2 2 2 2 2\n1 5 5 1\n6 12\n5 5 5 5 1 5 5 5 5 5 5 5\n5 5 5 5 1 5 5 5 5 5 5 5\n5 5 5 5 9 5 5 5 5 5 5 5\n5 9 1 5 5 5 5 5 5 5 5 5\n5 5 9 5 5 5 5 5 5 5 5 5\n5 5 9 5 5 5 5 5 5 5 5 5\n6 1 3 12", sample_out:"The shortest path is 10 steps long.\nMission impossible!\nThe shortest path is 14 steps long.\nThe shortest path is 18 steps long.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:129, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"Central Europe 2000", author:"", tag:["TEST"]}
{pid:1123, vid:1123, oj:"hdu", title:"Complicated Expressions", desc:"The most important activity of ACM is the GSM network. As the mobile phone operator, ACM must build its own transmitting stations. It is very important to compute the exact behaviour of electro-magnetic waves. Unfortunately, prediction of electro-magnetic fields is a very complex task and the formulas describing them are very long and hard-to-read. For example, below are the Maxwell\'s Equations describing the basic laws of electrical engineering. <br><br><center><img src=data/images/1123_1.jpg></center><br><br>ACM has designed its own computer system that can make some field computations and produce results in the form of mathematic expressions. Unfortunately, by generating the expression in several steps, there are always some unneeded parentheses inside the expression. Your task is to take these partial results and make them &quot;nice&quot; by removing all unnecessary parentheses.<br>", input:"There is a single positive integer T on the first line of input. It stands for the number of expressions to follow. Each expression consists of a single line containing only lowercase letters, operators (+, -, *, /) and parentheses (( and )). The letters are variables that can have any value, operators and parentheses have their usual meaning. Multiplication and division have higher priority then subtraction and addition. All operations with the same priority are computed from left to right (operators are left-associative). There are no spaces inside the expressions. No input line contains more than 250 characters.<br>", output:"Print a single line for every expression. The line must contain the same expression with unneeded parentheses removed. You must remove as many parentheses as possible without changing the semantics of the expression. The semantics of the expression is considered the same if and only if any of the following conditions hold: <br><br>&nbsp;&nbsp;. The ordering of operations remains the same. That means &quot;(a+b)+c&quot; is the same as &quot;a+b+c&quot;, and &quot;a+(b/c)&quot; is the same as &quot;a+b/c&quot;. <br>&nbsp;&nbsp;. The order of some operations is swapped but the result remains unchanged with respect to the addition and multiplication associativity. That means &quot;a+(b+c)&quot; and &quot;(a+b)+c&quot; are the same. We can also combine addition with subtraction and multiplication with division, if the subtraction or division is the second operation. For example, &quot;a+(b-c)&quot; is the same as &quot;a+b-c&quot;. <br><br>You cannot use any other laws, namely you cannot swap left and right operands and you cannot replace &quot;a-(b-c)&quot; with &quot;a-b+c&quot;.<br>", sample_in:"8\n(a+(b*c))\n((a+b)*c)\n(a*(b*c))\n(a*(b/c)*d)\n((a/(b/c))/d)\n((x))\n(a+b)-(c-d)-(e/f)\n(a+b)+(c-d)-(e+f)", sample_out:"a+b*c\n(a+b)*c\na*b*c\na*b/c*d\na/(b/c)/d\nx\na+b-(c-d)-e/f\na+b+c-d-(e+f)", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:37, vtotal_submit:157, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Central Europe 2000", author:"", tag:["TEST"]}
{pid:1124, vid:1124, oj:"hdu", title:"Factorial", desc:"The most important part of a GSM network is so called Base Transceiver Station (BTS). These transceivers form the areas called cells (this term gave the name to the cellular phone) and every phone connects to the BTS with the strongest signal (in a little simplified view). Of course, BTSes need some attention and technicians need to check their function periodically. <br>ACM technicians faced a very interesting problem recently. Given a set of BTSes to visit, they needed to find the shortest path to visit all of the given points and return back to the central company building. Programmers have spent several months studying this problem but with no results. They were unable to find the solution fast enough. After a long time, one of the programmers found this problem in a conference article. Unfortunately, he found that the problem is so called &quot;Travelling Salesman Problem&quot; and it is very hard to solve. If we have N BTSes to be visited, we can visit them in any order, giving us N! possibilities to examine. The function expressing that number is called factorial and can be computed as a product 1.2.3.4....N. The number is very high even for a relatively small N. <br><br>The programmers understood they had no chance to solve the problem. But because they have already received the research grant from the government, they needed to continue with their studies and produce at least some results. So they started to study behaviour of the factorial function. <br><br>For example, they defined the function Z. For any positive integer N, Z(N) is the number of zeros at the end of the decimal form of number N!. They noticed that this function never decreases. If we have two numbers N1&lt;N2, then Z(N1) &lt;= Z(N2). It is because we can never &quot;lose&quot; any trailing zero by multiplying by any positive number. We can only get new and new zeros. The function Z is very interesting, so we need a computer program that can determine its value efficiently.<br>", input:"There is a single positive integer T on the first line of input. It stands for the number of numbers to follow. Then there is T lines, each containing exactly one positive integer number N, 1 &lt;= N &lt;= 1000000000. <br>", output:"For every number N, output a single line containing the single non-negative integer Z(N).<br>", sample_in:"6\n3\n60\n100\n1024\n23456\n8735373", sample_out:"0\n14\n24\n253\n5861\n2183837", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1284, vtotal_submit:2542, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Central Europe 2000", author:"", tag:["TEST"]}
No Such Problem Called HDU 1125.<br>
No Such Problem Called HDU 1126.<br>
No Such Problem Called HDU 1127.<br>
{pid:1128, vid:1128, oj:"hdu", title:"Self Numbers", desc:"In 1949 the Indian mathematician D.R. Kaprekar discovered a class of numbers called self-numbers. For any positive integer n, define d(n) to be n plus the sum of the digits of n. (The d stands for digitadition, a term coined by Kaprekar.) For example, d(75) = 75 + 7 + 5 = 87. Given any positive integer n as a starting point, you can construct the infinite increasing sequence of integers n, d(n), d(d(n)), d(d(d(n))), .... For example, if you start with 33, the next number is 33 + 3 + 3 = 39, the next is 39 + 3 + 9 = 51, the next is 51 + 5 + 1 = 57, and so you generate the sequence <br>33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...<br><br>The number n is called a generator of d(n). In the sequence above, 33 is a generator of 39, 39 is a generator of 51, 51 is a generator of 57, and so on. Some numbers have more than one generator: for example, 101 has two generators, 91 and 100. A number with no generators is a self-number. There are thirteen self-numbers less than 100: 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, and 97. <br><br><br>Write a program to output all positive self-numbers less than or equal 1000000 in increasing order, one per line. <br>", input:"", output:"", sample_in:"1\n3\n5\n7\n9\n20\n31\n42\n53\n64\n|\n| &lt;-- a lot more numbers\n|\n9903\n9914\n9925\n9927\n9938\n9949\n9960\n9971\n9982\n9993\n|\n|\n|", sample_out:"", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1878, vtotal_submit:5762, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"Mid-Central USA 1998", author:"", tag:["TEST"]}
{pid:1129, vid:1129, oj:"hdu", title:"Do the Untwist", desc:"Cryptography deals with methods of secret communication that transform a message (the plaintext) into a disguised form (the ciphertext) so that no one seeing the ciphertext will be able to figure out the plaintext except the intended recipient. Transforming the plaintext to the ciphertext is encryption; transforming the ciphertext to the plaintext is decryption. Twisting is a simple encryption method that requires that the sender and recipient both agree on a secret key k, which is a positive integer. <br><br>The twisting method uses four arrays: plaintext and ciphertext are arrays of characters, and plaincode and ciphercode are arrays of integers. All arrays are of length n, where n is the length of the message to be encrypted. Arrays are origin zero, so the elements are numbered from 0 to n - 1. For this problem all messages will contain only lowercase letters, the period, and the underscore (representing a space). <br><br>The message to be encrypted is stored in plaintext. Given a key k, the encryption method works as follows. First convert the letters in plaintext to integer codes in plaincode according to the following rule: \'_\' = 0, \'a\' = 1, \'b\' = 2, ..., \'z\' = 26, and \'.\' = 27. Next, convert each code in plaincode to an encrypted code in ciphercode according to the following formula: for all i from 0 to n - 1, <br><br>ciphercode[i] = (plaincode[ki mod n] - i) mod 28.<br>(Here x mod y is the positive remainder when x is divided by y. For example, 3 mod 7 = 3, 22 mod 8 = 6, and -1 mod 28 = 27. You can use the C \'%\' operator or Pascal \'mod\' operator to compute this as long as you add y if the result is negative.) Finally, convert the codes in ciphercode back to letters in ciphertext according to the rule listed above. The final twisted message is in ciphertext. Twisting the message cat using the key 5 yields the following: <br><br><br>Array 0 1 2 <br>plaintext \'c\' \'a\' \'t\' <br>plaincode 3 1 20 <br>ciphercode 3 19 27 <br>ciphertext \'c\' \'s\' \'.\' <br><br>Your task is to write a program that can untwist messages, i.e., convert the ciphertext back to the original plaintext given the key k. For example, given the key 5 and ciphertext \'cs.\', your program must output the plaintext \'cat\'. <br><br>The input file contains one or more test cases, followed by a line containing only the number 0 that signals the end of the file. Each test case is on a line by itself and consists of the key k, a space, and then a twisted message containing at least one and at most 70 characters. The key k will be a positive integer not greater than 300. For each test case, output the untwisted message on a line by itself. <br><br>Note: you can assume that untwisting a message always yields a unique result. (For those of you with some knowledge of basic number theory or abstract algebra, this will be the case provided that the greatest common divisor of the key k and length n is 1, which it will be for all test cases.) <br>", input:"", output:"", sample_in:"5 cs.\n101 thqqxw.lui.qswer\n3 b_ylxmhzjsys.virpbkr\n0", sample_out:"cat\nthis_is_a_secret\nbeware._dogs_barking", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:528, vtotal_submit:940, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Zhejiang University Local Contest 2001", author:"", tag:["TEST"]}
{pid:1130, vid:1130, oj:"hdu", title:"How Many Trees?", desc:"A binary search tree is a binary tree with root k such that any node v reachable from its left has label (v) &lt;label (k) and any node w reachable from its right has label (w) &gt; label (k). It is a search structure which can find a node with label x in O(n log n) average time, where n is the size of the tree (number of vertices). <br><br>Given a number n, can you tell how many different binary search trees may be constructed with a set of numbers of size n such that each element of the set will be associated to the label of exactly one node in a binary search tree? <br>", input:"The input will contain a number 1 &lt;= i &lt;= 100 per line representing the number of elements of the set.<br>", output:" You have to print a line in the output for each entry with the answer to the previous question.<br>", sample_in:"1\n2\n3", sample_out:"1\n2\n5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1197, vtotal_submit:2592, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1131, vid:1131, oj:"hdu", title:"Count the Trees  ", desc:"Another common social inability is known as ACM (Abnormally Compulsive Meditation). This psychological disorder is somewhat common among programmers. It can be described as the temporary (although frequent) loss of the faculty of speech when the whole power of the brain is applied to something extremely interesting or challenging. <br>Juan is a very gifted programmer, and has a severe case of ACM (he even participated in an ACM world championship a few months ago). Lately, his loved ones are worried about him, because he has found a new exciting problem to exercise his intellectual powers, and he has been speechless for several weeks now. The problem is the determination of the number of different labeled binary trees that can be built using exactly n different elements. <br><br>For example, given one element A, just one binary tree can be formed (using A as the root of the tree). With two elements, A and B, four different binary trees can be created, as shown in the figure. <br><img src=data/images/1131_1.jpg><br>If you are able to provide a solution for this problem, Juan will be able to talk again, and his friends and family will be forever grateful. <br><br>", input:"The input will consist of several input cases, one per line. Each input case will be specified by the number n ( 1 ≤ n ≤ 100 ) of different elements that must be used to form the trees. A number 0 will mark the end of input and is not to be processed. <br>", output:"For each input case print the number of binary trees that can be built using the n elements, followed by a newline character. <br>", sample_in:"1\n2\n10\n25\n0", sample_out:"1\n4\n60949324800\n75414671852339208296275849248768000000", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:699, vtotal_submit:1370, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
No Such Problem Called HDU 1132.<br>
{pid:1133, vid:1133, oj:"hdu", title:"Buy the Ticket", desc:"The &quot;Harry Potter and the Goblet of Fire&quot; will be on show in the next few days. As a crazy fan of Harry Potter, you will go to the cinema and have the first sight, won’t you?<br><br>Suppose the cinema only has one ticket-office and the price for per-ticket is 50 dollars. The queue for buying the tickets is consisted of m + n persons (m persons each only has the 50-dollar bill and n persons each only has the 100-dollar bill).<br><br>Now the problem for you is to calculate the number of different ways of the queue that the buying process won\'t be stopped from the first person till the last person. <br>Note: initially the ticket-office has no money. <br><br>The buying process will be stopped on the occasion that the ticket-office has no 50-dollar bill but the first person of the queue only has the 100-dollar bill.<br>", input:"The input file contains several test cases. Each test case is made up of two integer numbers: m and n. It is terminated by m = n = 0. Otherwise, m, n &lt;=100.<br>", output:"For each test case, first print the test number (counting from 1) in one line, then output the number of different ways in another line.<br>", sample_in:"3 0\n3 1\n3 3\n0 0", sample_out:"Test #1:\n6\nTest #2:\n18\nTest #3:\n180", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1188, vtotal_submit:4016, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"HUANG, Ninghai", tag:["TEST"]}
{pid:1134, vid:1134, oj:"hdu", title:"Game of Connections", desc:"This is a small but ancient game. You are supposed to write down the numbers 1, 2, 3, ... , 2n - 1, 2n consecutively in clockwise order on the ground to form a circle, and then, to draw some straight line segments to connect them into number pairs. Every number must be connected to exactly one another. And, no two segments are allowed to intersect.<br><br>It\'s still a simple game, isn\'t it? But after you\'ve written down the 2n numbers, can you tell me in how many different ways can you connect the numbers into pairs? Life is harder, right?<br>", input:"Each line of the input file will be a single positive number n, except the last line, which is a number -1. You may assume that 1 &lt;= n &lt;= 100.<br>", output:"For each n, print in a single line the number of ways to connect the 2n numbers into pairs.<br>", sample_in:"2\n3\n-1", sample_out:"2\n5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1245, vtotal_submit:2806, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2004, Shanghai (Mainland China), Preliminary", author:"", tag:["TEST"]}
No Such Problem Called HDU 1135.<br>
No Such Problem Called HDU 1136.<br>
No Such Problem Called HDU 1137.<br>
No Such Problem Called HDU 1138.<br>
No Such Problem Called HDU 1139.<br>
{pid:1140, vid:1140, oj:"hdu", title:"War on Weather", desc:"After an unprovoked hurricane attack on the south shore, Glorious Warrior has declared war on weather. The first salvo in this campaign will be a coordinated pre-emptive attack on as many tropical depressions as possible. GW reckons that the attack will neutralize the tropical depressions before they become storms, and dissuade others from forming. <br>GW has at his disposal k space-to-earth killer satellites at various locations in space. m tropical depressions are known to exist at various locations on the earth\'s surface. Each satellite can attack any number of targets on the earth provided there is line of sight between the satellite and each target. How many different targets can be hit? <br>", input:"The input consists of several test cases. Each case begins with a line containing integers 0 &lt; k, m &amp;le 100 as defined above. k lines follow, each giving x,y,z - the location in space of a satellite at the scheduled time of attack. m lines then follow, each giving x,y,z - the location of a target tropical depression. Assume the earth is a sphere centred at (0,0,0) with circumference 40,000 km. All targets will be on the surface of the earth (within 10-9 km) and all satellites will be at least 50 km above the surface. A line containing 0 0 follows the last test case. <br>", output:"For each test case, output a line giving the total number of targets that can be hit. If a particular target falls within 10-8 km of the boundary between being within line-of-sight and not, it may be counted either way. (That is, you need not consider rounding error so long as it does not exceed 10-8 km.) <br>", sample_in:"3 2\n-10.82404031 -1594.10929753 -6239.77925152\n692.58497298 -5291.64700245 4116.92402298\n3006.49210582 2844.61925179 5274.03201053\n2151.03635167 2255.29684503 5551.13972186\n-1000.08700886 -4770.25497971 4095.48127333\n3 4\n0 0 6466.197723676\n0 6466.197723676 0\n6466.197723676 0 0\n6366.197723676 0 0\n6365.197723676 112.833485488 0\n0 0 6366.197723676\n0 -6366.197723676 0\n0 0", sample_out:"2\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:140, vtotal_submit:298, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.09.24", author:"", tag:["TEST"]}
{pid:1141, vid:1141, oj:"hdu", title:"Factstone Benchmark", desc:"Amtel has announced that it will release a 128-bit computer chip by 2010, a 256-bit computer by 2020, and so on, continuing its strategy of doubling the word-size every ten years. (Amtel released a 64-bit computer in 2000, a 32-bit computer in 1990, a 16-bit computer in 1980, an 8-bit computer in 1970, and a 4-bit computer, its first, in 1960.) <br>Amtel will use a new benchmark - the Factstone - to advertise the vastly improved capacity of its new chips. The Factstone rating is defined to be the largest integer n such that n! can be represented as an unsigned integer in a computer word. <br><br>Given a year 1960 ≤ y ≤ 2160, what will be the Factstone rating of Amtel\'s most recently released chip? <br><br>There are several test cases. For each test case, there is one line of input containing y. A line containing 0 follows the last test case. For each test case, output a line giving the Factstone rating. <br>", input:"", output:"", sample_in:"1960\n1981\n0", sample_out:"3\n8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:706, vtotal_submit:1500, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.09.24", author:"", tag:["TEST"]}
{pid:1142, vid:1142, oj:"hdu", title:"A Walk Through the Forest", desc:"Jimmy experiences a lot of stress at work these days, especially since his accident made working difficult. To relax after a hard day, he likes to walk home. To make things even nicer, his office is on one side of a forest, and his house is on the other. A nice walk through the forest, seeing the birds and chipmunks is quite enjoyable. <br>The forest is beautiful, and Jimmy wants to take a different route everyday. He also wants to get home before dark, so he always takes a path to make progress towards his house. He considers taking a path from A to B to be progress if there exists a route from B to his home that is shorter than any possible route from A. Calculate how many different routes through the forest Jimmy might take. <br>", input:"Input contains several test cases followed by a line containing 0. Jimmy has numbered each intersection or joining of paths starting with 1. His office is numbered 1, and his house is numbered 2. The first line of each test case gives the number of intersections N, 1 &lt; N ≤ 1000, and the number of paths M. The following M lines each contain a pair of intersections a b and an integer distance 1 ≤ d ≤ 1000000 indicating a path of length d between intersection a and a different intersection b. Jimmy may walk a path any direction he chooses. There is at most one path between any pair of intersections. <br>", output:"For each test case, output a single integer indicating the number of different routes through the forest. You may assume that this number does not exceed 2147483647<br>", sample_in:"5 6\n1 3 2\n1 4 2\n3 4 3\n1 5 12\n4 2 34\n5 2 24\n7 8\n1 3 1\n1 4 1\n3 7 1\n7 4 1\n7 5 1\n6 7 1\n5 2 1\n6 2 1\n0", sample_out:"2\n4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1134, vtotal_submit:5088, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.09.24", author:"", tag:["TEST"]}
{pid:1143, vid:1143, oj:"hdu", title:"Tri Tiling", desc:"In how many ways can you tile a 3xn rectangle with 2x1 dominoes? Here is a sample tiling of a 3x12 rectangle.<br><br><img src=data/images/1143-1.jpg><br>", input:"Input consists of several test cases followed by a line containing -1. Each test case is a line containing an integer 0 ≤ n ≤ 30. <br>", output:"For each test case, output one integer number giving the number of possible tilings. <br>", sample_in:"2\n8\n12\n-1", sample_out:"3\n153\n2131", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:841, vtotal_submit:1783, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.09.24", author:"", tag:["TEST"]}
{pid:1144, vid:1144, oj:"hdu", title:"Prerequisites?", desc:"Freddie the frosh has chosen to take k courses. To meet the degree requirements, he must take courses from each of several categories. Can you assure Freddie that he will graduate, based on his course selection? <br>", input:"Input consists of several test cases. For each case, the first line of input contains 1 ≤ k ≤ 100, the number of courses Freddie has chosen, and 0 ≤ m ≤ 100, the number of categories. One or more lines follow containing k 4-digit integers follow; each is the number of a course selected by Freddie. Each category is represented by a line containing 1 ≤ c ≤ 100, the number of courses in the category, 0 ≤ r ≤ c, the minimum number of courses from the category that must be taken, and the c course numbers in the category. Each course number is a 4-digit integer. The same course may fulfil several category requirements. Freddie\'s selections, and the course numbers in any particular category, are distinct. A line containing 0 follows the last test case.<br>", output:"For each test case, output a line containing &quot;yes&quot; if Freddie\'s course selection meets the degree requirements; otherwise output &quot;no.&quot; <br>", sample_in:"3 2\n0123 9876 2222\n2 1 8888 2222\n3 2 9876 2222 7654 \n3 2\n0123 9876 2222\n2 2 8888 2222\n3 2 7654 9876 2222\n0", sample_out:"yes\nno", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:443, vtotal_submit:845, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.09.24", author:"", tag:["TEST"]}
{pid:1145, vid:1145, oj:"hdu", title:"So you want to be a 2n-aire?", desc:"The player starts with a prize of $1, and is asked a sequence of n questions. For each question, he may <br>quit and keep his prize. <br>answer the question. If wrong, he quits with nothing. If correct, the prize is doubled, and he continues with the next question. <br>After the last question, he quits with his prize. The player wants to maximize his expected prize. <br>Once each question is asked, the player is able to assess the probability p that he will be able to answer it. For each question, we assume that p is a random variable uniformly distributed over the range t .. 1. <br>", input:"Input is a number of lines, each with two numbers: an integer 1 ≤ n ≤ 30, and a real 0 ≤ t ≤ 1. Input is terminated by a line containing 0 0. This line should not be processed.<br>", output:"For each input n and t, print the player\'s expected prize, if he plays the best strategy. Output should be rounded to three fractional digits.<br>", sample_in:"1 0.5\n1 0.3\n2 0.6\n24 0.25\n0 0", sample_out:"1.500\n1.357\n2.560\n230.138", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:141, vtotal_submit:229, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.09.17", author:"", tag:["TEST"]}
{pid:1146, vid:1146, oj:"hdu", title:"Ferry Loading III", desc:"Before bridges were common, ferries were used to transport cars across rivers. River ferries, unlike their larger cousins, run on a guide line and are powered by the river\'s current. Cars drive onto the ferry from one end, the ferry crosses the river, and the cars exit from the other end of the ferry. <br>There is a ferry across the river that can take n cars across the river in t minutes and return in t minutes. A car may arrive at either river bank to be transported by the ferry to the opposite bank. The ferry travels continuously back and forth between the banks so long it is carrying a car or there is at least one car waiting at either bank. Whenever the ferry arrives at one of the banks, it unloads its cargo and loads up to n cars that are waiting to cross. If there are more than n, those that have been waiting the longest are loaded. If there are no cars waiting on either bank, the ferry waits until one arrives, loads it (if it arrives on the same bank of the ferry), and crosses the river. At what time does each car reach the other side of the river? <br>", input:"The first line of input contains c, the number of test cases. Each test case begins with n, t, m. m lines follow, each giving the arrival time for a car (in minutes since the beginning of the day), and the bank at which the car arrives (&quot;left&quot; or &quot;right&quot;). For each test case, output one line per car, in the same order as the input, giving the time at which that car is unloaded at the opposite bank. Output an empty line between cases.<br>", output:"You may assume that 0 &lt; n, t, m ≤ 10000. The arrival times for each test case are strictly increasing. The ferry is initially on the left bank. Loading and unloading time may be considered to be 0.<br>", sample_in:"2\n2 10 10\n0 left\n10 left\n20 left\n30 left\n40 left\n50 left\n60 left\n70 left\n80 left\n90 left\n2 10 3\n10 right\n25 left\n40 left", sample_out:"10\n30\n30\n50\n50\n70\n70\n90\n90\n110\n\n30\n40\n60", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:46, vtotal_submit:275, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.09.17", author:"", tag:["TEST"]}
{pid:1147, vid:1147, oj:"hdu", title:"Pick-up sticks", desc:"Stan has n sticks of various length. He throws them one at a time on the floor in a random way. After finishing throwing, Stan tries to find the top sticks, that is these sticks such that there is no stick on top of them. Stan has noticed that the last thrown stick is always on top but he wants to know all the sticks that are on top. Stan sticks are very, very thin such that their thickness can be neglected.<br><img src=data/images/1147-1.jpg>", input:"Input consists of a number of cases. The data for each case start with 1 ≤ n ≤ 100000, the number of sticks for this case. The following n lines contain four numbers each, these numbers are the planar coordinates of the endpoints of one stick. The sticks are listed in the order in which Stan has thrown them. You may assume that there are no more than 1000 top sticks. The input is ended by the case with n=0. This case should not be processed. <br>", output:"For each input case, print one line of output listing the top sticks in the format given in the sample. The top sticks should be listed in order in which they were thrown. <br>The picture to the right below illustrates the first case from input.<br>", sample_in:"5\n1 1 4 2\n2 3 3 1\n1 -2.0 8 4\n1 4 8 2\n3 3 6 -2.0\n3\n0 0 1 1\n1 0 2 1\n2 0 3 1\n0", sample_out:"Top sticks: 2, 4, 5.\nTop sticks: 1, 2, 3.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:460, vtotal_submit:1842, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.09.17", author:"", tag:["TEST"]}
{pid:1148, vid:1148, oj:"hdu", title:"Rock-Paper-Scissors Tournament", desc:"Rock-Paper-Scissors is game for two players, A and B, who each choose, independently of the other, one of rock, paper, or scissors. A player chosing paper wins over a player chosing rock; a player chosing scissors wins over a player chosing paper; a player chosing rock wins over a player chosing scissors. A player chosing the same thing as the other player neither wins nor loses. <br>A tournament has been organized in which each of n players plays k rock-scissors-paper games with each of the other players - k games in total. Your job is to compute the win average for each player, defined as w / (w + l) where w is the number of games won, and l is the number of games lost, by the player. <br>", input:"Input consists of several test cases. The first line of input for each case contains 1 ≤ n ≤ 100 1 ≤ k ≤ 100 as defined above. For each game, a line follows containing p1, m1, p2, m2. 1 ≤ p1 ≤ n and 1 ≤ p2 ≤ n are distinct integers identifying two players; m1 and m2 are their respective moves (&quot;rock&quot;, &quot;scissors&quot;, or &quot;paper&quot;). A line containing 0 follows the last test case. <br>", output:"Output one line each for player 1, player 2, and so on, through player n, giving the player\'s win average rounded to three decimal places. If the win average is undefined, output &quot;-&quot;. Output an empty line between cases. <br>", sample_in:"2 4\n1 rock 2 paper\n1 scissors 2 paper\n1 rock 2 rock\n2 rock 1 scissors\n2 1\n1 rock 2 paper\n0", sample_out:"0.333\n0.667\n\n0.000\n1.000", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:358, vtotal_submit:1380, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.09.17", author:"", tag:["TEST"]}
{pid:1149, vid:1149, oj:"hdu", title:"Structural Equivalence", desc:"In programming language design circles, there has been much debate about the merits of &quot;structural equivalence&quot; vs. &quot;name equivalence&quot; for type matching. Pascal purports to have &quot;name equivalence&quot;, but it doesn\'t; C purports to have structural equivalence, but it doesn\'t. Algol 68, the Latin of programming languages, has pure structural equivalence. <br>A simplified syntax for an Algol 68 type definition is as follows: <br><br>   type_def -&gt; type T = type_expr<br>   type_expr -&gt; T | int | real | char | struct ( field_defs )<br>   field_defs -&gt; T | field_defs T<br><br>In this syntax, T is a programmer-defined type name (in this problem, for simplicity, a single upper case letter). Plain text symbols appear literally in the input, and zero or more spaces may appear where there are spaces in the syntax. <br><br>Algol 68 type equivalence say that two types are equivalent if they are the same primitive type or they are both structures containing equivalent types in the same order. <br>", input:"Input consists of several test cases. Each test case is a sequence of Algol 68 definitions, as described above, one per line. A line containing &quot;-&quot; separates test cases. A line containing &quot;--&quot; follows the last test case. <br>", output:"The output for each case will consist of several lines; each line should contain a list of type names, all of which represent equivalent types. Each type name should appear on exactly one line of output, and the number of output lines should be minimized. The names in each list should be in alphabetical order; the lines of output should also be in alphabetical order. Output an empty line between test cases. <br>", sample_in:"type A = int\ntype B = A\ntype C = int\ntype X = struct(A B)\ntype Y = struct(B A)\ntype Z = struct(A Z)\ntype S = struct(A S)\ntype W = struct(B R)\ntype R = struct(C W)\n--", sample_out:"A B C\nR S W Z\nX Y", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8, vtotal_submit:25, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.09.17", author:"", tag:["TEST"]}
{pid:1150, vid:1150, oj:"hdu", title:"Machine Schedule", desc:"As we all know, machine scheduling is a very classical problem in computer science and has been studied for a very long history. Scheduling problems differ widely in the nature of the constraints that must be satisfied and the type of schedule desired. Here we consider a 2-machine scheduling problem.<br><br>There are two machines A and B. Machine A has n kinds of working modes, which is called mode_0, mode_1, …, mode_n-1, likewise machine B has m kinds of working modes, mode_0, mode_1, … , mode_m-1. At the beginning they are both work at mode_0.<br><br>For k jobs given, each of them can be processed in either one of the two machines in particular mode. For example, job 0 can either be processed in machine A at mode_3 or in machine B at mode_4, job 1 can either be processed in machine A at mode_2 or in machine B at mode_4, and so on. Thus, for job i, the constraint can be represent as a triple (i, x, y), which means it can be processed either in machine A at mode_x, or in machine B at mode_y.<br><br>Obviously, to accomplish all the jobs, we need to change the machine\'s working mode from time to time, but unfortunately, the machine\'s working mode can only be changed by restarting it manually. By changing the sequence of the jobs and assigning each job to a suitable machine, please write a program to minimize the times of restarting machines. <br>", input:"The input file for this program consists of several configurations. The first line of one configuration contains three positive integers: n, m (n, m &lt; 100) and k (k &lt; 1000). The following k lines give the constrains of the k jobs, each line is a triple: i, x, y.<br><br>The input will be terminated by a line containing a single zero.<br>", output:"The output should be one integer per line, which means the minimal times of restarting machine.<br>", sample_in:"5 5 10\n0 1 1\n1 1 2\n2 1 3\n3 1 4\n4 2 1\n5 2 2\n6 2 3\n7 2 4\n8 3 3\n9 4 3\n0", sample_out:"3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1564, vtotal_submit:5027, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2002, Beijing (Mainland China)", author:"", tag:["TEST"]}
{pid:1151, vid:1151, oj:"hdu", title:"Air Raid", desc:"Consider a town where all the streets are one-way and each street leads from one intersection to another. It is also known that starting from an intersection and walking through town\'s streets you can never reach the same intersection i.e. the town\'s streets form no cycles.<br><br>With these assumptions your task is to write a program that finds the minimum number of paratroopers that can descend on the town and visit all the intersections of this town in such a way that more than one paratrooper visits no intersection. Each paratrooper lands at an intersection and can visit other intersections following the town streets. There are no restrictions about the starting intersection for each paratrooper.<br>", input:"Your program should read sets of data. The first line of the input file contains the number of the data sets. Each data set specifies the structure of a town and has the format:<br><br>no_of_intersections<br>no_of_streets<br>S1 E1<br>S2 E2<br>......<br>Sno_of_streets Eno_of_streets<br><br>The first line of each data set contains a positive integer no_of_intersections (greater than 0 and less or equal to 120), which is the number of intersections in the town. The second line contains a positive integer no_of_streets, which is the number of streets in the town. The next no_of_streets lines, one for each street in the town, are randomly ordered and represent the town\'s streets. The line corresponding to street k (k &lt;= no_of_streets) consists of two positive integers, separated by one blank: Sk (1 &lt;= Sk &lt;= no_of_intersections) - the number of the intersection that is the start of the street, and Ek (1 &lt;= Ek &lt;= no_of_intersections) - the number of the intersection that is the end of the street. Intersections are represented by integers from 1 to no_of_intersections.<br><br>There are no blank lines between consecutive sets of data. Input data are correct.<br>", output:"The result of the program is on standard output. For each input data set the program prints on a single line, starting from the beginning of the line, one integer: the minimum number of paratroopers required to visit all the intersections in the town.<br>", sample_in:"2\n4\n3\n3 4\n1 3\n2 3\n3\n3\n1 3\n1 2\n2 3", sample_out:"2\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1321, vtotal_submit:2802, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2002, Dhaka (Bengal)", author:"", tag:["TEST"]}
{pid:1152, vid:1152, oj:"hdu", title:"Brownie Points I", desc:" Stan and Ollie play the game of Odd Brownie Points. Some brownie points are located in the plane, at integer coordinates. Stan plays first and places a vertical line in the plane. The line must go through a brownie point and may cross many (with the same x-coordinate). Then Ollie places a horizontal line that must cross a brownie point already crossed by the vertical line. <br>Those lines divide the plane into four quadrants. The quadrant containing points with arbitrarily large positive coordinates is the top-right quadrant. <br><br>The players score according to the number of brownie points in the quadrants. If a brownie point is crossed by a line, it doesn\'t count. Stan gets a point for each (uncrossed) brownie point in the top-right and bottom-left quadrants. Ollie gets a point for each (uncrossed) brownie point in the top-left and bottom-right quadrants. <br><br>Your task is to compute the scores of Stan and Ollie given the point through which they draw their lines. <br>", input:"Input contains a number of test cases. The data of each test case appear on a sequence of input lines. The first line of each test case contains a positive odd integer 1 &lt; n &lt; 200000 which is the number of brownie points. Each of the following n lines contains two integers, the horizontal (x) and vertical (y) coordinates of a brownie point. No two brownie points occupy the same place. The input ends with a line containing 0 (instead of the n of a test). <br>", output:"For each test case of input, print a line with two numbers separated by a single space. The first number is Stan\'s score, the second is the score of Ollie when their lines cross the point whose coordinates are given at the center of the input sequence of points for this case. <br>", sample_in:"11\n3 2\n3 3\n3 4\n3 6\n2 -2\n1 -3\n0 0\n-3 -3\n-3 -2\n-3 -4\n3 -7\n0", sample_out:"6 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:227, vtotal_submit:429, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.06.11", author:"", tag:["TEST"]}
{pid:1153, vid:1153, oj:"hdu", title:"Magic Bitstrings ", desc:"A bitstring, whose length is one less than a prime, might be magic. 1001 is one such string. In order to see the magic in the string let us append a non-bit x to it, regard the new thingy as a cyclic string, and make this square matrix of bits <br><br>each bit   1001   <br>every 2nd bit   0110   <br>every 3rd bit   0110   <br>every 4th bit   1001   <br><br>This matrix has the same number of rows as the length of the original bitstring. The m-th row of the matrix has every m-th bit of the original string starting with the m-th bit. Because the enlarged thingy has prime length, the appended x never gets used. <br><br>If each row of the matrix is either the original bitstring or its complement, the original bitstring is magic. <br><br>Each line of input (except last) contains a prime number p ≤ 100000. The last line contains 0 and this line should not be processed. For each prime number from the input produce one line of output containing the lexicographically smallest, non-constant magic bitstring of length p-1, if such a string exists, otherwise output Impossible. <br>", input:"", output:"", sample_in:"5\n3\n17\n47\n2\n79\n0", sample_out:"0110\n01\n0010111001110100\n0000100001101010001101100100111010100111101111\nImpossible\n001001100001011010000001001111001110101010100011000011011111101001011110011011", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:87, vtotal_submit:182, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.06.11", author:"", tag:["TEST"]}
{pid:1154, vid:1154, oj:"hdu", title:"Cutting a Polygon", desc:"Given is a simple but not necessarily convex polygon. Given is also a line in the plane. If the polygon is cut along the line then we may get several smaller polygons. Your task is to find the length of the cut, that is the total length of the segments in the intersection of the line and the polygon. <br>", input:"Input consists of a number of cases. The data of each case appears on a number of input lines, the first of which contains two non negative integers n and m giving the number of the vertices of the polygon and the number of cutting lines to consider, 3 ≤ n ≤ 1000. The following n lines contain coordinates of the vertices of the polygon; each line contains the x and y coordinates of a vertex. The vertices are given either in clockwise or counterclockwise order. Each of the following m lines of input contains four numbers; these are x and y coordinates of the two points defining the cutting line. If a vertex of the polygon is closer than 10e-8 to the cutting line then we consider that the vertex lies on the cutting line. <br>Input is terminated by a line with n and m equal to 0. <br><img src=data/images/1154-1.jpg><br>", output:"For each cutting line, print the total length of the segments in the intersection of the line and the polygon defined for this test case, with 3 digits after the decimal point. Note: the perimiter of a polygon belongs the polygon. <br>The picture above illustrates the first cutting line for the polygon from the sample. <br>", sample_in:"9 5\n0 0\n0 2\n1 1\n2 2\n3 1\n4 2\n5 1\n6 2\n6 0\n-1 2 7.5 1\n0 1 6 1\n0 1.5 6 1.5\n0 2 6 1\n0 0 0 2\n0 0", sample_out:"2.798\n6.000\n3.000\n2.954\n2.000", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:71, vtotal_submit:461, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.06.11", author:"", tag:["TEST"]}
{pid:1155, vid:1155, oj:"hdu", title:"Bungee Jumping", desc:"Once again, James Bond is fleeing from some evil people who want to see him dead. Fortunately, he has left a bungee rope on a nearby highway bridge which he can use to escape from his enemies. His plan is to attach one end of the rope to the bridge, the other end of the rope to his body and jump off the bridge. At the moment he reaches the ground, he will cut the rope, jump into his car and be gone. <br><br>Unfortunately, he had not had enough time to calculate whether the bungee rope has the right length, so it is not clear at all what is going to happen when he jumps off the bridge. There are three possible scenarios: <br>The rope is too short (or too strong), and James Bond will never reach the ground. <br>The rope is too long (or too weak), and James Bond will be going too fast when he touches the ground. Even for a special agent, this can be very dangerous. You may assume that if he collides at a speed of more than 10 m/s, he will not survive the impact. <br>The rope\'s length and strength are good. James Bond touches the ground at a comfortable speed and can escape. <br>As his employer, you would like to know whether James Bond survives or whether you should place a job ad for the soon-to-be vacant position in the local newspaper. Your physicists claim that: <br>The force with which James is pulled towards the earth is <br>9.81 * w, <br>where w is his weight in kilograms and 9.81 is the Earth acceleration in meters over squared seconds. <br>Mr. Bond falls freely until the rope tautens. Then the force with which the bungee rope pulls him back into the sky depends on the current length of the rope and is <br>k * Δl, <br>where Δl is the difference between the rope\'s current length and its nominal, unexpanded length, and k is a rope-specific constant. <br>Given the rope\'s strength k, the nominal length of the rope l in meters, the height of the bridge s in meters, and James Bond\'s body weight w, you have to determine what is going to happen to our hero. For all your calculations, you may assume that James Bond is a point at the end of the rope and the rope has no mass. You may further assume that k, l, s, and w are non-negative and that s &lt; 200.<br><br>The input contains several test cases, one test case per line. Each test case consists of four floating-point numbers (k, l, s, and w) that describe the situation. Depending on what is going to happen, your program must print &quot;Stuck in the air.&quot;, &quot;Killed by the impact.&quot;, or &quot;James Bond survives.&quot;. Input is terminated by a line containing four 0s, this line should not be processed. ", input:"", output:"", sample_in:"350 20 30 75\n375 20 30 75\n400 20 30 75\n425 20 30 75\n450 20 30 75\n400 20 30 50\n400 20 30 80\n400 20 30 85\n0 0 0 0", sample_out:"Killed by the impact.\nJames Bond survives. \nJames Bond survives. \nJames Bond survives. \nStuck in the air.\nStuck in the air.\nJames Bond survives. \nKilled by the impact.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:208, vtotal_submit:617, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.06.11", author:"", tag:["TEST"]}
{pid:1156, vid:1156, oj:"hdu", title:"Brownie Points II", desc:" Stan and Ollie play the game of Odd Brownie Points. Some brownie points are located in the plane, at integer coordinates. Stan plays first and places a vertical line in the plane. The line must go through a brownie point and may cross many (with the same x-coordinate). Then Ollie places a horizontal line that must cross a brownie point already crossed by the vertical line. <br>Those lines divide the plane into four quadrants. The quadrant containing points with arbitrarily large positive coordinates is the top-right quadrant. <br><br>The players score according to the number of brownie points in the quadrants. If a brownie point is crossed by a line, it doesn\'t count. Stan gets a point for each (uncrossed) brownie point in the top-right and bottom-left quadrants. Ollie gets a point for each (uncrossed) brownie point in the top-left and bottom-right quadrants. <br><br>Stan and Ollie each try to maximize his own score. When Stan plays, he considers the responses, and chooses a line which maximizes his smallest-possible score. <br>", input:"Input contains a number of test cases. The data of each test case appear on a sequence of input lines. The first line of each test case contains a positive odd integer 1 &lt; n &lt; 200000 which is the number of brownie points. Each of the following n lines contains two integers, the horizontal (x) and vertical (y) coordinates of a brownie point. No two brownie points occupy the same place. The input ends with a line containing 0 (instead of the n of a test). <br>", output:"For each input test, print a line of output in the format shown below. The first number is the largest score which Stan can assure for himself. The remaining numbers are the possible (high) scores of Ollie, in increasing order.", sample_in:"11\n3 2\n3 3\n3 4\n3 6\n2 -2\n1 -3\n0 0\n-3 -3\n-3 -2\n-3 -4\n3 -7\n0", sample_out:"Stan: 7; Ollie: 2 3;", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:53, vtotal_submit:184, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.06.11", author:"", tag:["TEST"]}
{pid:1157, vid:1157, oj:"hdu", title:"Who\'s in the Middle", desc:"FJ is surveying his herd to find the most average cow. He wants to know how much milk this \'median\' cow gives: half of the cows give as much or more than the median; half give as much or less. <br><br>Given an odd number of cows N (1 &lt;= N &lt; 10,000) and their milk output (1..1,000,000), find the median amount of milk given such that at least half the cows give the same amount of milk or more and at least half give the same or less.<br>", input:"* Line 1: A single integer N <br><br>* Lines 2..N+1: Each line contains a single integer that is the milk output of one cow.<br>", output:"* Line 1: A single integer that is the median milk output.<br>", sample_in:"5\n2\n4\n1\n3\n5", sample_out:"3\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div> \nINPUT DETAILS: \n\nFive cows with milk outputs of 1..5 \n\nOUTPUT DETAILS: \n\n1 and 2 are below 3; 4 and 5 are above 3.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3082, vtotal_submit:7787, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"USACO 2004 November", author:"", tag:["TEST"]}
{pid:1158, vid:1158, oj:"hdu", title:"Employment Planning", desc:"A project manager wants to determine the number of the workers needed in every month. He does know the minimal number of the workers needed in each month. When he hires or fires a worker, there will be some extra cost. Once a worker is hired, he will get the salary even if he is not working. The manager knows the costs of hiring a worker, firing a worker, and the salary of a worker. Then the manager will confront such a problem: how many workers he will hire or fire each month in order to keep the lowest total cost of the project. <br>", input:"The input may contain several data sets. Each data set contains three lines. First line contains the months of the project planed to use which is no more than 12. The second line contains the cost of hiring a worker, the amount of the salary, the cost of firing a worker. The third line contains several numbers, which represent the minimal number of the workers needed each month. The input is terminated by line containing a single \'0\'.<br>", output:"The output contains one line. The minimal total cost of the project.<br>", sample_in:"3 \n4 5 6\n10 9 11\n0", sample_out:"199", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:968, vtotal_submit:3315, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 1997, Shanghai (Mainland China)", author:"", tag:["TEST"]}
{pid:1159, vid:1159, oj:"hdu", title:"Common Subsequence", desc:"A subsequence of a given sequence is the given sequence with some elements (possible none) left out. Given a sequence X = &lt;x1, x2, ..., xm&gt; another sequence Z = &lt;z1, z2, ..., zk&gt; is a subsequence of X if there exists a strictly increasing sequence &lt;i1, i2, ..., ik&gt; of indices of X such that for all j = 1,2,...,k, xij = zj. For example, Z = &lt;a, b, f, c&gt; is a subsequence of X = &lt;a, b, c, f, b, c&gt; with index sequence &lt;1, 2, 4, 6&gt;. Given two sequences X and Y the problem is to find the length of the maximum-length common subsequence of X and Y. <br>The program input is from a text file. Each data set in the file contains two strings representing the given sequences. The sequences are separated by any number of white spaces. The input data are correct. For each set of data the program prints on the standard output the length of the maximum-length common subsequence from the beginning of a separate line. <br>", input:"", output:"", sample_in:"abcfbc abfcab\nprogramming contest \nabcd mnp", sample_out:"4\n2\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5267, vtotal_submit:20290, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southeastern Europe 2003", author:"", tag:["TEST"]}
{pid:1160, vid:1160, oj:"hdu", title:"FatMouse\'s Speed", desc:"FatMouse believes that the fatter a mouse is, the faster it runs. To disprove this, you want to take the data on a collection of mice and put as large a subset of this data as possible into a sequence so that the weights are increasing, but the speeds are decreasing.<br>", input:"Input contains data for a bunch of mice, one mouse per line, terminated by end of file.<br><br>The data for a particular mouse will consist of a pair of integers: the first representing its size in grams and the second representing its speed in centimeters per second. Both integers are between 1 and 10000. The data in each test case will contain information for at most 1000 mice.<br><br>Two mice may have the same weight, the same speed, or even the same weight and speed. <br>", output:"Your program should output a sequence of lines of data; the first line should contain a number n; the remaining n lines should each contain a single positive integer (each one representing a mouse). If these n integers are m[1], m[2],..., m[n] then it must be the case that <br><br>   W[m[1]] &lt; W[m[2]] &lt; ... &lt; W[m[n]]<br><br>and <br><br>   S[m[1]] &gt; S[m[2]] &gt; ... &gt; S[m[n]]<br><br>In order for the answer to be correct, n should be as large as possible.<br>All inequalities are strict: weights must be strictly increasing, and speeds must be strictly decreasing. There may be many correct outputs for a given input, your program only needs to find one. <br>", sample_in:"6008 1300\n6000 2100\n500 2000\n1000 4000\n1100 3000\n6000 2000\n8000 1400\n6000 1200\n2000 1900", sample_out:"4\n4\n5\n9\n7", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2323, vtotal_submit:8124, special_status:1, time_limit:1000, mem_limit:32768, hint:"", source:"Zhejiang University Training Contest 2001", author:"", tag:["TEST"]}
{pid:1161, vid:1161, oj:"hdu", title:"Eddy\'s mistakes", desc:"Eddy usually writes  articles ,but he likes mixing the English letter uses, for example &quot;computer science&quot; is written frequently &quot;coMpUtEr scIeNce&quot; by him, this mistakes lets Eddy\'s English teacher be extremely discontentment.Now please you to write a procedure to be able in the Bob article English letter to turn completely the small letter. <br>", input:"The input contains several test cases.each line consists a test case，Expressed Eddy writes in an article , by letter, blank space,numeral as well as each kind of punctuation<br>composition, the writing length does not surpass 1000 characters.<br>", output:"For each test case, you should output an only line, after namely the result of transforms the lowercase letter.<br>", sample_in:"weLcOmE tO HDOj Acm 2005!", sample_out:"welcome to hdoj acm 2005!", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3334, vtotal_submit:6771, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"eddy", tag:["TEST"]}
{pid:1162, vid:1162, oj:"hdu", title:"Eddy\'s picture", desc:"Eddy begins to like  painting pictures recently ,he is sure of himself to become a painter.Every day Eddy draws pictures in his small room,  and he usually  puts out his newest pictures to let his friends appreciate. but the result it can be imagined, the friends are not interested in his picture.Eddy feels very puzzled,in order to change all friends \'s view to his technical of painting  pictures ,so Eddy creates a problem for the his friends of you.<br>Problem descriptions as follows: Given you some coordinates pionts on a drawing paper, every point links with the ink with the straight line, causes all points finally  to link in the same place. How many distants does your duty discover the shortest length which the ink draws?<br>", input:"The first line contains 0 &lt; n &lt;= 100, the number of point. For each point, a line follows; each following line contains two real numbers indicating the (x,y) coordinates of the point. <br><br>Input contains multiple test cases. Process to the end of file.<br>", output:"Your program prints a single real number to two decimal places: the minimum total length of ink lines that can connect all the points. <br>", sample_in:"3\n1.0 1.0\n2.0 2.0\n2.0 4.0", sample_out:"3.41", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2102, vtotal_submit:6003, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"eddy", tag:["TEST"]}
{pid:1163, vid:1163, oj:"hdu", title:"Eddy\'s digital Roots", desc:"The digital root of a positive integer is found by summing the digits of the integer. If the resulting value is a single digit then that digit is the digital root. If the resulting value contains two or more digits, those digits are summed and the process is repeated. This is continued as long as necessary to obtain a single digit.<br><br>For example, consider the positive integer 24. Adding the 2 and the 4 yields a value of 6. Since 6 is a single digit, 6 is the digital root of 24. Now consider the positive integer 39. Adding the 3 and the 9 yields 12. Since 12 is not a single digit, the process must be repeated. Adding the 1 and the 2 yeilds 3, a single digit and also the digital root of 39.<br><br>The Eddy\'s easy problem is that : give you the n,want you to find the n^n\'s digital Roots.<br>", input:"The input file will contain a list of positive integers n, one per line. The end of the input will be indicated by an integer value of zero. Notice:For each integer in the input n(n&lt;10000).<br>", output:"Output n^n\'s digital root on a separate line of the output.<br>", sample_in:"2\n4\n0", sample_out:"4\n4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1812, vtotal_submit:3971, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"eddy", tag:["TEST"]}
{pid:1164, vid:1164, oj:"hdu", title:"Eddy\'s research I", desc:"Eddy\'s interest is very extensive, recently  he is interested in prime number. Eddy discover the  all number owned can be divided into the multiply of prime number, but  he can\'t  write program, so Eddy has to ask intelligent you to help him, he asks you to write a program which can do the number to divided into the multiply of prime number factor .<br><br>", input:"The input will contain a number 1 &lt; x&lt;= 65535 per line representing the number of elements of the set.<br>", output:"You have to print a line in the output for each entry with the answer to the previous question.<br>", sample_in:"11\n9412", sample_out:"11\n2*2*13*181", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2717, vtotal_submit:5727, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"eddy", tag:["TEST"]}
{pid:1165, vid:1165, oj:"hdu", title:"Eddy\'s research II", desc:"As is known, Ackermann function plays an important role in the sphere of theoretical computer science. However, in the other hand, the dramatic fast increasing pace of the function caused the value of Ackermann function hard to calcuate.<br><br>Ackermann function can be defined recursively as follows:<br><img src=data/images/1165-1.jpg><br><br>Now Eddy Gives you two numbers: m and n, your task is to compute the value of A(m,n) .This is so easy problem,If you slove this problem,you will receive a prize(Eddy will invite you to hdu restaurant to have supper).<br>", input:"Each line of the input will have two integers, namely m, n, where 0 &lt; m &lt; =3.<br>Note that when m&lt;3, n can be any integer less than 1000000, while m=3, the value of n is restricted within 24. <br>Input is terminated by end of file.<br> ", output:"For each value of m,n, print out the value of A(m,n).<br>", sample_in:"1 3\n2 4", sample_out:"5\n11", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:843, vtotal_submit:2787, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"", author:"eddy", tag:["TEST"]}
{pid:1166, vid:1166, oj:"hdu", title:"敌兵布阵", desc:" C国的死对头A国这段时间正在进行军事演习，所以C国间谍头子Derek和他手下Tidy又开始忙乎了。A国在海岸线沿直线布置了N个工兵营地,Derek和Tidy的任务就是要监视这些工兵营地的活动情况。由于采取了某种先进的监测手段，所以每个工兵营地的人数C国都掌握的一清二楚,每个工兵营地的人数都有可能发生变动，可能增加或减少若干人手,但这些都逃不过C国的监视。<br>中央情报局要研究敌人究竟演习什么战术,所以Tidy要随时向Derek汇报某一段连续的工兵营地一共有多少人,例如Derek问:“Tidy,马上汇报第3个营地到第10个营地共有多少人!”Tidy就要马上开始计算这一段的总人数并汇报。但敌兵营地的人数经常变动，而Derek每次询问的段都不一样，所以Tidy不得不每次都一个一个营地的去数，很快就精疲力尽了，Derek对Tidy的计算速度越来越不满:&quot;你个死肥仔，算得这么慢，我炒你鱿鱼!”Tidy想：“你自己来算算看，这可真是一项累人的工作!我恨不得你炒我鱿鱼呢!”无奈之下，Tidy只好打电话向计算机专家Windbreaker求救,Windbreaker说：“死肥仔，叫你平时做多点acm题和看多点算法书，现在尝到苦果了吧!”Tidy说：&quot;我知错了。。。&quot;但Windbreaker已经挂掉电话了。Tidy很苦恼，这么算他真的会崩溃的，聪明的读者，你能写个程序帮他完成这项工作吗？不过如果你的程序效率不够高的话，Tidy还是会受到Derek的责骂的.<br>", input:"第一行一个整数T，表示有T组数据。<br>每组数据第一行一个正整数N（N&lt;=50000）,表示敌人有N个工兵营地，接下来有N个正整数,第i个正整数ai代表第i个工兵营地里开始时有ai个人（1&lt;=ai&lt;=50）。<br>接下来每行有一条命令，命令有4种形式：<br>(1) Add  i j,i和j为正整数,表示第i个营地增加j个人（j不超过30）<br>(2)Sub i j  ,i和j为正整数,表示第i个营地减少j个人（j不超过30）;<br>(3)Query i j ,i和j为正整数,i&lt;=j，表示询问第i到第j个营地的总人数;<br>(4)End  表示结束，这条命令在每组数据最后出现;<br>  每组数据最多有40000条命令<br>", output:"对第i组数据,首先输出“Case i:”和回车,<br>对于每个Query询问，输出一个整数并回车,表示询问的段中的总人数,这个数保持在int以内。<br>", sample_in:"1\n10\n1 2 3 4 5 6 7 8 9 10\nQuery 1 3\nAdd 3 6\nQuery 2 7\nSub 10 2\nAdd 6 3\nQuery 3 10\nEnd ", sample_out:"Case 1:\n6\n33\n59", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5858, vtotal_submit:34943, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Windbreaker", tag:["TEST"]}
No Such Problem Called HDU 1167.<br>
No Such Problem Called HDU 1168.<br>
No Such Problem Called HDU 1169.<br>
{pid:1170, vid:1170, oj:"hdu", title:"Balloon Comes!", desc:"The contest starts now! How excited it is to see balloons floating around. You, one of the best programmers in HDU, can get a very beautiful balloon if only you have solved the very very very... easy problem.<br>Give you an operator (+,-,*, / --denoting addition, subtraction, multiplication, division respectively) and two positive integers, your task is to output the result. <br>Is it very easy? <br>Come on, guy! PLMM will send you a beautiful Balloon right now!<br>Good Luck!<br>", input:"Input contains multiple test cases. The first line of the input is a single integer T (0&lt;T&lt;1000) which is the number of test cases. T test cases follow. Each test case contains a char C (+,-,*, /) and two integers A and B(0&lt;A,B&lt;10000).Of course, we all know that A and B are operands and C is an operator. <br>", output:"For each case, print the operation result. The result should be rounded to 2 decimal places If and only if it is not an integer.<br>", sample_in:"4\n+ 1 2\n- 1 2\n* 1 2\n/ 1 2", sample_out:"3\n-1\n2\n0.50", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5301, vtotal_submit:18400, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1171, vid:1171, oj:"hdu", title:"Big Event in HDU", desc:"Nowadays, we all know that Computer College is the biggest department in HDU. But, maybe you don\'t know that Computer College had ever been split into Computer College and Software College in 2002.<br>The splitting is absolutely a big event in HDU! At the same time, it is a trouble thing too. All facilities must go halves. First, all facilities are assessed, and two facilities are thought to be same if they have the same value. It is assumed that there is N (0&lt;N&lt;1000) kinds of facilities (different value, different kinds).<br>", input:"Input contains multiple test cases. Each test case starts with a number N (0 &lt; N &lt;= 50 -- the total number of different facilities). The next N lines contain an integer V (0&lt;V&lt;=50 --value of facility) and an integer M (0&lt;M&lt;=100 --corresponding number of the facilities) each. You can assume that all V are different.<br>A test case starting with a negative integer terminates input and this test case is not to be processed.<br>", output:"For each case, print one line containing two integers A and B which denote the value of Computer College and Software College will get respectively. A and B should be as equal as possible. At the same time, you should guarantee that A is not less than B.<br>", sample_in:"2\n10 1\n20 1\n3\n10 1 \n20 2\n30 1\n-1", sample_out:"20 10\n40 40", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3216, vtotal_submit:20581, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1172, vid:1172, oj:"hdu", title:"猜数字", desc:"猜数字游戏是gameboy最喜欢的游戏之一。游戏的规则是这样的：计算机随机产生一个四位数，然后玩家猜这个四位数是什么。每猜一个数，计算机都会告诉玩家猜对几个数字，其中有几个数字在正确的位置上。<br>比如计算机随机产生的数字为1122。如果玩家猜1234,因为1,2这两个数字同时存在于这两个数中，而且1在这两个数中的位置是相同的，所以计算机会告诉玩家猜对了2个数字，其中一个在正确的位置。如果玩家猜1111,那么计算机会告诉他猜对2个数字，有2个在正确的位置。<br>现在给你一段gameboy与计算机的对话过程，你的任务是根据这段对话确定这个四位数是什么。<br>", input:"输入数据有多组。每组的第一行为一个正整数N(1&lt;=N&lt;=100)，表示在这段对话中共有N次问答。在接下来的N行中，每行三个整数A,B,C。gameboy猜这个四位数为A，然后计算机回答猜对了B个数字，其中C个在正确的位置上。当N=0时，输入数据结束。<br>", output:"每组输入数据对应一行输出。如果根据这段对话能确定这个四位数，则输出这个四位数，若不能，则输出&quot;Not sure&quot;。<br>", sample_in:"6\n4815 2 1\n5716 1 0\n7842 1 0\n4901 0 0\n8585 3 3\n8555 3 2\n2\n4815 0 0\n2999 3 3\n0", sample_out:"3585\nNot sure", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1014, vtotal_submit:2351, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"", author:"lwg", tag:["TEST"]}
{pid:1173, vid:1173, oj:"hdu", title:"采矿", desc:"某天gameboy玩魔兽RPG。有一个任务是在一个富含金矿的圆形小岛上建一个基地，以最快的速度采集完这个小岛上的所有金矿。这个小岛上有n(0&lt;n&lt;1000000)个金矿，每个金矿的矿藏量是相等的。而且这个小岛的地势非常平坦，所以基地可以建在小岛的任何位置，每个金矿的采矿速度只跟矿藏到基地的路程长度有关。为了不让这个任务太无聊，游戏设计者对这个小岛施了个“魔法”，规定矿工在小岛上只能正南正北正西正东走。也就是说矿工不能斜着在岛上走。<br><br>这个小岛在一个二维直角坐标系中描述。<br><br>你的任务就是帮gameboy找一个建造基地的位置，使矿工能以最快的速度采完所有矿。<br>", input:"输入数据有多组。每组数据的第一行是一个正整数n(0&lt;n&lt;1000000),表示小岛上有n个金矿。在接下来的n行中，每行有两个实数x,y，表示其中一个金矿的坐标。n=0表示输入数据结束。<br>", output:"每一组输入数据对应一行输出，输出两个实数x，y（保留小数点后两位），也就是你找到的建造基地的位置坐标。如果坐标不唯一，可以任选一个输出。<br>", sample_in:"4\n1.0 1.0\n3.0 1.0\n3.0 3.0\n1.0 3.0\n0", sample_out:"2.00 2.00", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:620, vtotal_submit:2189, special_status:1, time_limit:5000, mem_limit:32768, hint:"", source:"lwg", author:"", tag:["TEST"]}
{pid:1174, vid:1174, oj:"hdu", title:"爆头", desc:"gameboy是一个CS高手，他最喜欢的就是扮演警察，手持M4爆土匪的头。也许这里有人没玩过CS，有必要介绍一下“爆头”这个术语：所谓爆头，就是子弹直接命中对方的头部，以秒杀敌人。<br><br>现在用一个三维的直角坐标系来描述游戏中的三维空间（水平面为xoy平面，z轴正方向是上方）。假设游戏中角色的头是一个标准的球。告诉你土匪的身高，头部半径，所站位置的坐标；gameboy所控警察的身高，头部半径，所站位置的坐标，以及枪头所指方向的单位向量。gameboy所控警察所握的是M4，抢瞄准时枪膛中的子弹跟视线基本同线，我们忽略它们的距离，就当成同线。由于土匪手持AK47,所以他是很嚣张地正立着。而警察手持M4，正在瞄准，由于瞄准时身体微弯，视线从头心出发，他头部的实际高度比正立时低10%。<br><br>你的任务就是，计算gameboy在这一刻扣下扳机，能否爆土匪的头。注意：这里忽略子弹的直径和重力作用，也就是说子弹是无限小的，弹道是一条笔直的射线，警察与土匪间没有障碍物。并且只要子弹擦到头部，哪怕是边缘，也算爆头。<br>", input:"测试数据的第一行有一个正整数T，表示有T组测试数据。每组数据的第一行有五个实数，h1,r1,x1,y1,z1，分别表示土匪的身高，头部半径以及所站的位置。第二行有八个实数，h2,r2,x2,y2,z2,x3,y3,z3，分别表示警察的身高，头部半径，所站位置，以及枪头所指方向的方向向量。<br>", output:"每一组输入数据对应一行输出。如果能爆土匪的头，输出&quot;YES&quot;,否则输出&quot;NO&quot;。<br>", sample_in:"2\n1.62 0.1 10.0 10.0 10.0\n1.80 0.09 0.0 0.0 0.0 1.0 1.0 1.0\n1.62 0.1 0.0 0.0 0.0\n1.80 0.09 10.0 10.0 10.0 -1.0 -1.0 -1.0", sample_out:"YES\nYES", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:496, vtotal_submit:1458, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lwg", tag:["TEST"]}
{pid:1175, vid:1175, oj:"hdu", title:"连连看", desc:"“连连看”相信很多人都玩过。没玩过也没关系，下面我给大家介绍一下游戏规则：在一个棋盘中，放了很多的棋子。如果某两个相同的棋子，可以通过一条线连起来（这条线不能经过其它棋子），而且线的转折次数不超过两次，那么这两个棋子就可以在棋盘上消去。不好意思，由于我以前没有玩过连连看，咨询了同学的意见，连线不能从外面绕过去的，但事实上这是错的。现在已经酿成大祸，就只能将错就错了，连线不能从外围绕过。<br>玩家鼠标先后点击两块棋子，试图将他们消去，然后游戏的后台判断这两个方格能不能消去。现在你的任务就是写这个后台程序。<br>", input:"输入数据有多组。每组数据的第一行有两个正整数n,m(0&lt;n&lt;=1000,0&lt;m&lt;1000)，分别表示棋盘的行数与列数。在接下来的n行中，每行有m个非负整数描述棋盘的方格分布。0表示这个位置没有棋子，正整数表示棋子的类型。接下来的一行是一个正整数q(0&lt;q&lt;50)，表示下面有q次询问。在接下来的q行里，每行有四个正整数x1,y1,x2,y2,表示询问第x1行y1列的棋子与第x2行y2列的棋子能不能消去。n=0,m=0时，输入结束。<br>注意：询问之间无先后关系，都是针对当前状态的！<br>", output:"每一组输入数据对应一行输出。如果能消去则输出&quot;YES&quot;,不能则输出&quot;NO&quot;。<br>", sample_in:"3 4\n1 2 3 4\n0 0 0 0\n4 3 2 1\n4\n1 1 3 4\n1 1 2 4\n1 1 3 3\n2 1 2 4\n3 4\n0 1 4 3\n0 2 4 1\n0 0 0 0\n2\n1 1 2 4\n1 3 2 3\n0 0", sample_out:"YES\nNO\nNO\nNO\nNO\nYES", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1805, vtotal_submit:16043, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"", author:"lwg", tag:["TEST"]}
{pid:1176, vid:1176, oj:"hdu", title:"免费馅饼", desc:"都说天上不会掉馅饼，但有一天gameboy正走在回家的小径上，忽然天上掉下大把大把的馅饼。说来gameboy的人品实在是太好了，这馅饼别处都不掉，就掉落在他身旁的10米范围内。馅饼如果掉在了地上当然就不能吃了，所以gameboy马上卸下身上的背包去接。但由于小径两侧都不能站人，所以他只能在小径上接。由于gameboy平时老呆在房间里玩游戏，虽然在游戏中是个身手敏捷的高手，但在现实中运动神经特别迟钝，每秒种只有在移动不超过一米的范围内接住坠落的馅饼。现在给这条小径如图标上坐标：<br><center><img src=data/images/1176_1.jpg></center><br>为了使问题简化，假设在接下来的一段时间里，馅饼都掉落在0-10这11个位置。开始时gameboy站在5这个位置，因此在第一秒，他只能接到4,5,6这三个位置中其中一个位置上的馅饼。问gameboy最多可能接到多少个馅饼？（假设他的背包可以容纳无穷多个馅饼）<br>", input:"输入数据有多组。每组数据的第一行为以正整数n(0&lt;n&lt;100000)，表示有n个馅饼掉在这条小径上。在结下来的n行中，每行有两个整数x,T(0&lt;T&lt;100000),表示在第T秒有一个馅饼掉在x点上。同一秒钟在同一点上可能掉下多个馅饼。n=0时输入结束。<br>", output:"每一组输入数据对应一行输出。输出一个整数m，表示gameboy最多可能接到m个馅饼。<br>提示：本题的输入数据量比较大，建议用scanf读入，用cin可能会超时。<br><br>", sample_in:"6\n5 1\n4 1\n6 1\n7 2\n7 2\n8 3\n0", sample_out:"4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4333, vtotal_submit:22035, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lwg", tag:["TEST"]}
{pid:1177, vid:1177, oj:"hdu", title:"\"Accepted today?\"", desc:"Do you remember a sentence &quot;Accepted today?&quot; Yes, the sentence is mentioned frequently in lcy\'s course &quot;ACM Programming&quot;!<br>The contest is still in progress this moment. How excited it is! You, smart programmer, must have AC some problems today. &quot;Can I get copper medal, silver medal, or even golden medal?&quot; Oh, ha-ha! You must be considering this question. And now, the last problem of this contest comes.<br>Give you all submitting data in the contest, and tell you the number of golden medals, silver medals and copper medals; your task is to output someone\'s contest result.<br>Easy? Of course! I t is the reason that I designed the problem.<br>When you have completed this contest, please remember that sentence〃 Accepted today?〃兒<br>", input:"Input contains multiple test cases. Each test case starts with five numbers N (4 =&lt; N &lt;= 130 -- the total number of attendees), G, S, C (1&lt;=G&lt;=S&lt;=C&lt;N --G, S, C denoting the number of golden medals, silver medals and copper medals respectively) and M (0&lt;M&lt;=N). The next N lines contain an integer P (1&lt;=P&lt;=8 --number of problems that have been solved by someone) and a time T(for example,&quot;02:45:17&quot;, meaning 2 hours and 45 minutes and 17 seconds consumed according to contest rules) each. You can assume that all submit data are different.<br>A test case starting with 0 0 0 0 0 terminates input and this test case should not to be processed.<br>", output:"For each case, print a sentence in a line, and it must be one of these sentences:<br>Accepted today? I\'ve got a golden medal :)<br>Accepted today? I\'ve got a silver medal :)<br>Accepted today? I\'ve got a copper medal :)<br>Accepted today? I\'ve got an honor mentioned :)<br><br>Note: <br>You will get an honor mentioned if you can\'t get copper medal, silver medal or golden medal.<br>", sample_in:"10 1 2 3 6\n2 02:45:17\n2 02:49:01\n2 03:17:58\n2 03:21:29\n4 07:55:48\n3 04:25:42\n3 06:57:39\n2 02:05:02\n2 02:16:45\n2 02:41:37\n0 0 0 0 0", sample_out:"Accepted today? I\'ve got a silver medal :)", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:821, vtotal_submit:2137, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1178, vid:1178, oj:"hdu", title:"Heritage from father", desc:"Famous Harry Potter,who seemd to be a normal and poor boy,is actually a wizard.Everything changed when he had his birthday of ten years old.A huge man called \'Hagrid\' found Harry and lead him to a new world full of magic power. <br>If you\'ve read this story,you probably know that Harry\'s parents had left him a lot of gold coins.Hagrid lead Harry to Gringotts(the bank hold up by Goblins). And they stepped into the room which stored the fortune from his father.Harry was astonishing ,coz there were piles of gold coins. <br>The way of packing these coins by Goblins was really special.Only one coin was on the top,and three coins consisted an triangle were on the next lower layer.The third layer has six coins which were also consisted an triangle,and so on.On the ith layer there was an triangle have i coins each edge(totally i*(i+1)/2).The whole heap seemed just like a pyramid.Goblin still knew the total num of the layers,so it\'s up you to help Harry to figure out the sum of all the coins.<br>", input:"The input will consist of some cases,each case takes a line with only one integer N(0&lt;N&lt;2^31).It ends with a single 0.<br>", output:"对于每个输入的N,输出一行,采用科学记数法来计算金币的总数(保留三位有效数字)<br>", sample_in:"1\n3\n0", sample_out:"1.00E0\n1.00E1\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nwhen N=1 ,There is 1 gold coins. \nwhen N=3 ,There is 1+3+6=10 gold coins.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1332, vtotal_submit:4724, special_status:0, time_limit:1000, mem_limit:65535, hint:"", source:"Gardon-DYGG Contest 1", author:"", tag:["TEST"]}
{pid:1179, vid:1179, oj:"hdu", title:"Ollivanders: Makers of Fine Wands since 382 BC.", desc:"In Diagon Alley ,there is only one Wand-seller,peeling gold letters over the door read Ollivanders: Makers of Fine Wands since 382 BC.A single wand lay on a faded purple cushion in the dusty window. <br>A tinkling bell rang somewhere in the depths of the shop as they stepped inside.It was a tiny place,empty execpt for a single spindly chair which Hagrid sat on to wait.Harry felt strangely as though he had entered a very strict library;he swallowd a log of new questions which had just occurred to him and looked instead at the thousands of narrow boxes piled neatly right up to the ceiling.For some reason,the back of his neck prickled.The very dust and silence in here seemed to tingle with some secret magic. <br>\'Good afternoon,\'said a soft voice.Harry jumped.Hagrid must have jumped,too,because there was a loud crunching noise and he got quickly off the spindly chair. <br>An old man was standing before them, his wide pale eyes shining like moons through the gloom of the shop. <br>\'Hello,\' said Harry awkwardly. <br>\'Ah yes,\' said the man. \'Yes,yes. I thought I\'d be seeing you soon,Harry Potter.\'It wasn\'t a question.You have your mother\'s eyes. It seems only yesterday she was in here herself,buying her first wand. Ten and a quarter inches long, swishy, made of willow. Nice wand for charm work.\' <br>Mor Ollivander moved closer to Harry.Harry wished he would blink.Those sivery eyes were a bit creepy. <br>\'Your father, on the other hand, favoured a mahogany wand.Eleven inches.Pliable.A little more power and excellent for transfiguration.Well ,I say your father favoured it - it\'s really the wand that choosed the wizard, of cource.\' <br><br>Yes, some wands fit some wizards ,as we all know.But what Harry doesn\'t know is Ollivander have met a big trouble.That\'s more than twenty years ago,When Harry\'s father James Potter was still a student in Hogwarts.He went Diagon Alley to buy new books,passing by Ollivander\'s shop.Ollivander was crazy for a problem:He was too busy to choose most suitable wand for every wizard.Even more,there are too many customer that day.Though Ollivader knew every wand\'s favourite,he could not choose as many wizards as possible to get the wands. So James Potter,a very clever man ,gave him a magic disk with your program ,to help him sell wands as many as possible. <br><br>Please notice: one wand can only be sold to one wizard, and one wizard can only buy one wand,too. <br>", input:"There are several cases. For each case, there is two integers N and M in the first line,which mean there is N wizards and M wands(0 &lt; N &lt;= M &lt;= 100).<br>Then M lines contain the choices of each wand.The first integer in i+1th line is Ki,and after these there are Ki integers Bi,j which are the wizards who fit that wand. (0&lt;=Ki&lt;=N,1&lt;=Bi,j&lt;=N)<br>", output:"Only one integer,shows how many wands Ollivander can sell.<br>", sample_in:"3 4\n3 1 2 3\n1 1\n1 1\n0", sample_out:"2\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nWand 1 fits everyone, Wand 2,3 only fit the first wizard,and Wand 4 does not fit anyone.So Ollivanders can sell two wands:\nsell Wand 1 to Wizard 2 and Wand 2 to Wizard 1,or sell Wand 1 to Wizard 3 and Wand 3 to Wizard 1 ,or some other cases. But \nhe cannot sell 3 wands because no 3 wands just fit 3 wizards.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:299, vtotal_submit:719, special_status:0, time_limit:1000, mem_limit:65536, hint:"", source:"Gardon-DYGG Contest 1", author:"", tag:["TEST"]}
{pid:1180, vid:1180, oj:"hdu", title:"诡异的楼梯", desc:"Hogwarts正式开学以后,Harry发现在Hogwarts里,某些楼梯并不是静止不动的，相反,他们每隔一分钟就变动一次方向. <br>比如下面的例子里,一开始楼梯在竖直方向,一分钟以后它移动到了水平方向,再过一分钟它又回到了竖直方向.Harry发现对他来说很难找到能使得他最快到达目的地的路线,这时Ron(Harry最好的朋友)告诉Harry正好有一个魔法道具可以帮助他寻找这样的路线,而那个魔法道具上的咒语,正是由你纂写的. <br>", input:"测试数据有多组，每组的表述如下：<br>第一行有两个数,M和N,接下来是一个M行N列的地图,\'*\'表示障碍物,\'.\'表示走廊,\'|\'或者\'-\'表示一个楼梯,并且标明了它在一开始时所处的位置:\'|\'表示的楼梯在最开始是竖直方向,\'-\'表示的楼梯在一开始是水平方向.地图中还有一个\'S\'是起点,\'T\'是目标,0&lt;=M,N&lt;=20,地图中不会出现两个相连的梯子.Harry每秒只能停留在\'.\'或\'S\'和\'T\'所标记的格子内.<br>", output:"只有一行,包含一个数T,表示到达目标的最短时间. <br>注意:Harry只能每次走到相邻的格子而不能斜走,每移动一次恰好为一分钟,并且Harry登上楼梯并经过楼梯到达对面的整个过程只需要一分钟,Harry从来不在楼梯上停留.并且每次楼梯都恰好在Harry移动完毕以后才改变方向.<br>", sample_in:"5 5\n**..T\n**.*.\n..|..\n.*.*.\nS....", sample_out:"7\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\n地图如下：\n<img src=\'data/images/C6-1003.gif\'>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1151, vtotal_submit:7775, special_status:0, time_limit:1000, mem_limit:65536, hint:"", source:"Gardon-DYGG Contest 1", author:"", tag:["TEST"]}
{pid:1181, vid:1181, oj:"hdu", title:"变形课", desc:"呃......变形课上Harry碰到了一点小麻烦,因为他并不像Hermione那样能够记住所有的咒语而随意的将一个棒球变成刺猬什么的,但是他发现了变形咒语的一个统一规律:如果咒语是以a开头b结尾的一个单词,那么它的作用就恰好是使A物体变成B物体. <br>Harry已经将他所会的所有咒语都列成了一个表,他想让你帮忙计算一下他是否能完成老师的作业,将一个B(ball)变成一个M(Mouse),你知道,如果他自己不能完成的话,他就只好向Hermione请教,并且被迫听一大堆好好学习的道理.<br>", input:"测试数据有多组。每组有多行，每行一个单词,仅包括小写字母,是Harry所会的所有咒语.数字0表示一组输入结束.<br>", output:"如果Harry可以完成他的作业,就输出&quot;Yes.&quot;,否则就输出&quot;No.&quot;(不要忽略了句号)<br>", sample_in:"so\nsoon\nriver\ngoes\nthem\ngot\nmoon\nbegin\nbig\n0", sample_out:"Yes.\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nHarry 可以念这个咒语:\"big-got-them\".", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2562, vtotal_submit:11635, special_status:0, time_limit:1000, mem_limit:65536, hint:"", source:"Gardon-DYGG Contest 1", author:"", tag:["TEST"]}
{pid:1182, vid:1182, oj:"hdu", title:"Chessmen", desc:"You know, Harry, Ron, and Hermione thought they had found some Snape\'s cabal. They tried to tail after Snape until they went into a strange room. <br>The room was so dark they couldn\'t see anything at all. But as they stepped into it, light suddenly flooded the room to reveal an astonishing sight. <br>They were standingon the edge of a huge chessboard, behind the black chessmen, which were all taller than they were and carved from what looked like black stone. Facing them, way across the room, were the white pieces. Harry, Ron and Hermione shivered slightly - the towering white chessmen had no faces. <br>\'Now what do we do?\' harry whispered. <br>\'It\'s obvious, isn\'t it?\' said Ron. \'We\'ve got to play our way across the room.\' <br>Behind the white pieces they could see another door. <br>\'How?\' said Hermione nervously. <br>\'I think,\' said Ron, \'we\'re going to have to be chessmen.\' <br>He walked up to a black knight and put his hand out to touch the knight\'s horse. At once, the stone sprang to life. The horse pawed the ground and the knight turned his helmeted head to look down at Ron. <br>\'Do we - er - have to join you to get across?\' <br>The black knight nodded. Ron turned to the other two. <br>\'This wants thinking about ...\' he said. \'I suppose we\'ve got to take the place of the back pieces ...\' <br>Harry and Hermione stayed quiet, watching Ron think. Finally he said, \'Now, don\'t be offended or anything, but neither of you are that good at chess -\' <br>\'We\'re not offended,\' said Harry quickly. \'Just tell us what to do.\' <br>\'Well, Harry, you take the place of that bishop, and Hermione, you go next to him instead of that castle.\' <br>\'What about you?\' <br>\'I\'m going to be a knight,\' said Ron. <br>The chessmen seemed to have been listening, because at these words a knight, a bishop and a castle turned there backs on the white pieces and walked off the board leaving three empty squares which Harry, Ron and Hermione took. <br>\'White always plays first in chess,\' said Ron,peering across the board. \'Yes ... look ...\' <br>A white pawn had moved forward two squares. <br><br><br>Now Ron decided to direct the black pieces, but he met a trouble. All the chessmen were so tall that he can\'t know the whole board. He must memorize the board all by himself if you don\'t help him. Could you write a magic for him? <br>", input:"The input will contain several chess manuals. Each one is in the format as sample input. <br>O-O and O-O-O will not appear. <br>Notice that black side may haven\'t a move in the last turn. <br>The input will always be correct,and end of -1.<br>", output:"Print the chessboard in FEN. <br>(see also the Hint)<br>", sample_in:"0 Pe2-e4 pd7-d5\n1 Pd2-d3 pf7-f5\n2 Pf2-f3 pe7-e6\n3 Pe4xd5 pe6xd5\n4 Pc2-c4 pd5xc4\n5 Pd3xc4 qd8-e7\n6 Ng1-e2", sample_out:"rnb1kbnr/ppp1q1pp/8/5p2/2P5/5P2/PP2N1PP/RNBQKB1R\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nIn the FEN (Forsyth-Edwards Notation), a chessboard is described as follows: \nThe Board-Content is specified starting with the top row and ending with the bottom row. \nCharacter / is used to separate data of adjacent rows. \nEach row is specified from left to right. \nWhite pieces are identified by uppercase piece letters: PNBRQK. \nBlack pieces are identified by lowercase piece letters: pnbrqk. \nEmpty squares are represented by the numbers one through eight. \nA number used represents the count of contiguous empty squares along a row. \nEach row\'s sum of numbers and characters must equal 8. \nFor example: \n<i><b>5k1r/2q3p1/p3p2p/1B3p1Q/n4P2/6P1/bbP2N1P/1K1RR3</b></i>\nis the FEN notation description of the following chessboard: \n<center><img src=\'data/images/C6-1005.gif\'></center>\nThe chessboard of the beginning of a chess game is described in FEN as: \n<i><b>rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR</b></i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:39, vtotal_submit:202, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Gardon-DYGG Contest 1", author:"", tag:["TEST"]}
{pid:1183, vid:1183, oj:"hdu", title:"Not magic,but logic.", desc:"He(Harry) pulled open the next door, both of them hardly daring to look at what came next - but there was nothing very frightening in here, just a table with seven differently shaped bottles standing on it in a line. <br>\'Snape\'s,\' said Harry. \'What do we have to do?\' <br>They stepped over the threshold and immediately a fire sprang up beind them in the doorway. It wasn\'t ordinary fire either; it was purple. At the same instant, black flames shot up in the doorway leading onwards.They were trapped. <br>\'Look!\' Hermione seized a roll of paper lying next to the bottles. Harry looked over her shoulder to read it: <br><br><br>  Danger lies before you, while safety lies behind,<br><br>  Two of us will help you, whichever you would find,<br><br>  One among us seven will let you move ahead,<br><br>  Another will transport the drinker back instead,<br><br>  Some among our number hold only nettle wine,<br><br>  And others are killers, waiting hidden in line.<br><br>  Choose, unless you wish to stay here for evermore,<br><br>  To help you in your choice, we give you these clues:<br> <br><br><br>Now,they must make a choice, could you help them? <br>However, we call the bottle who can take you ahead A,and the bottle who can take you back is named B.<br>", input:"The first line of the input is three integer N,M,P. It means there is N bottles of wine, M bottles of poison and P clues.(0&lt;=N,M&lt;=100,0&lt;P&lt;=1000) <br>Next P line would be one of these four: <br><br>No. i from left/right is safe/dangrous . <br>All wine/poison have a wine/poison on the left/right . <br>The A/B have a wine/poison/A/B on the left and a wine/poison/A/B on the right . <br>No. i from left/right cannot take you back/ahead .<br>", output:"Output will have only one line: <br>If you are sure where A and B is, just tell Harry their number from left. <br>If you aren\'t sure, you only can say: \'God help them.\' <br>If you find that\'s impossible, just say: \'That\'s impossible.\'<br>", sample_in:"2 4 6 \nAll wine have a poison on the left . \nThe B have a poison on the left and a poison on the right . \nThe A have a wine on the left and a poison on the right . \nNo. 4 from right is safe . \nNo. 4 from left is safe . \nNo. 2 from right cannot take you back .", sample_out:"5 2\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Both PBPWAPPW and PBPWAPWP are possible solutions,where \'P\' means poison and \'W\' means wine.But however,we know where A and B are.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:27, special_status:0, time_limit:1000, mem_limit:65536, hint:"", source:"Gardon-DYGG Contest 1", author:"", tag:["TEST"]}
No Such Problem Called HDU 1184.<br>
No Such Problem Called HDU 1185.<br>
No Such Problem Called HDU 1186.<br>
No Such Problem Called HDU 1187.<br>
No Such Problem Called HDU 1188.<br>
No Such Problem Called HDU 1189.<br>
No Such Problem Called HDU 1190.<br>
No Such Problem Called HDU 1191.<br>
No Such Problem Called HDU 1192.<br>
No Such Problem Called HDU 1193.<br>
{pid:1194, vid:1194, oj:"hdu", title:"Beat the Spread!", desc:"Superbowl Sunday is nearly here. In order to pass the time waiting for the half-time commercials and wardrobe malfunctions, the local hackers have organized a betting pool on the game. Members place their bets on the sum of the two final scores, or on the absolute difference between the two scores.<br><br>Given the winning numbers for each type of bet, can you deduce the final scores?<br>", input:"The first line of input contains n, the number of test cases. n lines follow, each representing a test case. Each test case gives s and d, non-negative integers representing the sum and (absolute) difference between the two final scores.<br>", output:"For each test case, output a line giving the two final scores, largest first. If there are no such scores, output a line containing &quot;impossible&quot;. Recall that football scores are always non-negative integers.<br>", sample_in:"2\n40 20\n20 40", sample_out:"30 10\nimpossible", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1940, vtotal_submit:4082, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2005.02.05", author:"", tag:["TEST"]}
{pid:1195, vid:1195, oj:"hdu", title:"Open the Lock", desc:"Now an emergent task for you is to open a password lock. The password is consisted of four digits. Each digit is numbered from 1 to 9. <br>Each time, you can add or minus 1 to any digit. When add 1 to \'9\', the digit will change to be \'1\' and when minus 1 to \'1\', the digit will change to be \'9\'. You can also exchange the digit with its neighbor. Each action will take one step.<br><br>Now your task is to use minimal steps to open the lock.<br><br>Note: The leftmost digit is not the neighbor of the rightmost digit.<br>", input:"The input file begins with an integer T, indicating the number of test cases. <br><br>Each test case begins with a four digit N, indicating the initial state of the password lock. Then followed a line with anotther four dight M, indicating the password which can open the lock. There is one blank line after each test case.<br>", output:"For each test case, print the minimal steps in one line.<br>", sample_in:"2\n1234\n2144\n\n1111\n9999", sample_out:"2\n4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:986, vtotal_submit:3561, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Zhejiang University Local Contest 2005", author:"", tag:["TEST"]}
{pid:1196, vid:1196, oj:"hdu", title:"Lowest Bit", desc:"Given an positive integer A (1 &lt;= A &lt;= 100), output the lowest bit of A.<br><br>For example, given A = 26, we can write A in binary form as 11010, so the lowest bit of A is 10, so the output should be 2.<br><br>Another example goes like this: given A = 88, we can write A in binary form as 1011000, so the lowest bit of A is 1000, so the output should be 8.<br>", input:"Each line of input contains only an integer A (1 &lt;= A &lt;= 100). A line containing &quot;0&quot; indicates the end of input, and this line is not a part of the input data.<br>", output:"For each A in the input, output a line containing only its lowest bit.<br>", sample_in:"26\n88\n0", sample_out:"2\n8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4245, vtotal_submit:7154, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Zhejiang University Local Contest 2005", author:"", tag:["TEST"]}
{pid:1197, vid:1197, oj:"hdu", title:"Specialized Four-Digit Numbers", desc:"Find and list all four-digit numbers in decimal notation that have the property that the sum of its four digits equals the sum of its digits when represented in hexadecimal (base 16) notation and also equals the sum of its digits when represented in duodecimal (base 12) notation.<br><br>For example, the number 2991 has the sum of (decimal) digits 2+9+9+1 = 21. Since 2991 = 1*1728 + 8*144 + 9*12 + 3, its duodecimal representation is 1893(12), and these digits also sum up to 21. But in hexadecimal 2991 is BAF16, and 11+10+15 = 36, so 2991 should be rejected by your program.<br><br>The next number (2992), however, has digits that sum to 22 in all three representations (including BB016), so 2992 should be on the listed output. (We don\'t want decimal numbers with fewer than four digits - excluding leading zeroes - so that 2992 is the first correct answer.)<br>", input:"There is no input for this problem.<br>", output:"Your output is to be 2992 and all larger four-digit numbers that satisfy the requirements (in strictly increasing order), each on a separate line with no leading or trailing blanks, ending with a new-line character. There are to be no blank lines in the output. The first few lines of the output are shown below.<br>", sample_in:"There is no input for this problem.", sample_out:"2992\n2993\n2994\n2995\n2996\n2997\n2998\n2999", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2167, vtotal_submit:3299, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Pacific Northwest 2004", author:"", tag:["TEST"]}
{pid:1198, vid:1198, oj:"hdu", title:"Farm Irrigation", desc:"Benny has a spacious farm land to irrigate. The farm land is a rectangle, and is divided into a lot of samll squares. Water pipes are placed in these squares. Different square has a different type of pipe. There are 11 types of pipes, which is marked from A to K, as Figure 1 shows.<br><br><center><img src=data/images/1121-1.gif></center><br><center>Figure 1</center><br><br>Benny has a map of his farm, which is an array of marks denoting the distribution of water pipes over the whole farm. For example, if he has a map <br><br>ADC<br>FJK<br>IHE<br><br>then the water pipes are distributed like <br><br><center><img src=data/images/1121-2.gif></center><br><center>Figure 2</center><br><br>Several wellsprings are found in the center of some squares, so water can flow along the pipes from one square to another. If water flow crosses one square, the whole farm land in this square is irrigated and will have a good harvest in autumn. <br><br>Now Benny wants to know at least how many wellsprings should be found to have the whole farm land irrigated. Can you help him? <br><br>Note: In the above example, at least 3 wellsprings are needed, as those red points in Figure 2 show.<br>", input:"There are several test cases! In each test case, the first line contains 2 integers M and N, then M lines follow. In each of these lines, there are N characters, in the range of \'A\' to \'K\', denoting the type of water pipe over the corresponding square. A negative M or N denotes the end of input, else you can assume 1 &lt;= M, N &lt;= 50.<br>", output:"For each test case, output in one line the least number of wellsprings needed.<br>", sample_in:"2 2\nDK\nHF\n\n3 3\nADC\nFJK\nIHE\n\n-1 -1", sample_out:"2\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1376, vtotal_submit:4744, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Zhejiang University Local Contest 2005", author:"", tag:["TEST"]}
{pid:1199, vid:1199, oj:"hdu", title:"Color the Ball", desc:"There are infinite balls in a line (numbered 1 2 3 ....), and initially all of them are paint black. Now Jim use a brush paint the balls, every time give two integers a b and follow by a char \'w\' or \'b\', \'w\' denotes the ball from a to b are painted white, \'b\' denotes that be painted black. You are ask to find the longest white ball sequence.<br>", input:"First line is an integer N (&lt;=2000), the times Jim paint, next N line contain a b c, c can be \'w\' and \'b\'.<br><br>There are multiple cases, process to the end of file.<br>", output:"Two integers the left end of the longest white ball sequence and the right end of longest white ball sequence (If more than one output the small number one). All the input are less than 2^31-1. If no such sequence exists, output &quot;Oh, my god&quot;.<br>", sample_in:"3\n1 4 w\n8 11 w\n3 5 b", sample_out:"8 11", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:528, vtotal_submit:4028, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ZOJ Monthly, February 2005", author:"", tag:["TEST"]}
{pid:1200, vid:1200, oj:"hdu", title:"To and Fro", desc:"Mo and Larry have devised a way of encrypting messages. They first decide secretly on the number of columns and write the message (letters only) down the columns, padding with extra random letters so as to make a rectangular array of letters. For example, if the message is “There’s no place like home on a snowy night” and there are five columns, Mo would write down<br><br>t o i o y<br>h p k n n<br>e l e a i<br>r a h s g<br>e c o n h<br>s e m o t<br>n l e w x<br><br><br>Note that Mo includes only letters and writes them all in lower case. In this example, Mo used the character ‘x’ to pad the message out to make a rectangle, although he could have used any letter.<br><br>Mo then sends the message to Larry by writing the letters in each row, alternating left-to-right and right-to-left. So, the above would be encrypted as<br><br>toioynnkpheleaigshareconhtomesnlewx<br><br>Your job is to recover for Larry the original message (along with any extra padding letters) from the encrypted one.<br>", input:"There will be multiple input sets. Input for each set will consist of two lines. The first line will contain an integer in the range 2. . . 20 indicating the number of columns used. The next line is a string of up to 200 lower case letters. The last input set is followed by a line containing a single 0, indicating end of input.<br>", output:"Each input set should generate one line of output, giving the original plaintext message, with no spaces.<br>", sample_in:"5\ntoioynnkpheleaigshareconhtomesnlewx\n3\nttyohhieneesiaabss\n0", sample_out:"theresnoplacelikehomeonasnowynightx\nthisistheeasyoneab", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2571, vtotal_submit:4252, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"East Central North America 2004", author:"", tag:["TEST"]}
{pid:1201, vid:1201, oj:"hdu", title:"18岁生日", desc:"Gardon的18岁生日就要到了，他当然很开心，可是他突然想到一个问题，是不是每个人从出生开始，到达18岁生日时所经过的天数都是一样的呢？似乎并不全都是这样，所以他想请你帮忙计算一下他和他的几个朋友从出生到达18岁生日所经过的总天数，让他好来比较一下。<br>", input:"一个数T，后面T行每行有一个日期，格式是YYYY-MM-DD。如我的生日是1988-03-07。<br>", output:"T行，每行一个数，表示此人从出生到18岁生日所经过的天数。如果这个人没有18岁生日，就输出-1。<br>", sample_in:"1\n1988-03-07", sample_out:"6574", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4299, vtotal_submit:16685, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Gardon-DYGG Contest 2", author:"", tag:["TEST"]}
{pid:1202, vid:1202, oj:"hdu", title:"The calculation of GPA", desc:"每学期的期末，大家都会忙于计算自己的平均成绩，这个成绩对于评奖学金是直接有关的。国外大学都是计算GPA(grade point average) 又称GPR(grade point ratio)，即成绩点数与学分的加权平均值来代表一个学生的成绩的。那么如何来计算GPA呢？ <br><br>一般大学采用之计分法 <br><br>A90 - 100 4 点 <br>B80 - 89 3 点 <br>C70 - 79 2 点 <br>D60 - 69 1 点 <br>E0 - 59 0 点 <br><br>例如：某位学生修习三门课，其课目、学分及成绩分别为： <br>英文：三学分、92 分；化学：五学分、80 分；数学：二学分、60分，则GPA的算法如下： <br><br>科目&nbsp;学分&nbsp;分数&nbsp;点数&nbsp;分数×点数&nbsp;<br>英文&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;92&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12<br>化学&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;80&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;15<br>数学&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;60&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2<br>合计&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;29 <br>29/10=2.9 <br>2.9即为某生的GPA <br>下面有请你写一个用于计算GPA的程序。<br>", input:"包含多组数据，每组数据的第一行有一个数N，接下来N行每行表示一门成绩。每行有两个实型的数 s,p，s表示这门课的学分,p表示该学生的成绩（百分制）。如果p=-1则说明该学生这门课缺考，是不应该计算在内的。<br>", output:"对每组数据输出一行，表示该学生的GPA，保留两位小数。如果GPA不存在，输出-1。<br>", sample_in:"3\n3 92\n5 80\n2 60", sample_out:"2.90", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3112, vtotal_submit:17403, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Gardon-DYGG Contest 2", author:"", tag:["TEST"]}
{pid:1203, vid:1203, oj:"hdu", title:"I NEED A OFFER!", desc:"Speakless很早就想出国，现在他已经考完了所有需要的考试，准备了所有要准备的材料，于是，便需要去申请学校了。要申请国外的任何大学，你都要交纳一定的申请费用，这可是很惊人的。Speakless没有多少钱，总共只攒了n万美元。他将在m个学校中选择若干的（当然要在他的经济承受范围内）。每个学校都有不同的申请费用a（万美元），并且Speakless估计了他得到这个学校offer的可能性b。不同学校之间是否得到offer不会互相影响。“I NEED A OFFER”，他大叫一声。帮帮这个可怜的人吧，帮助他计算一下，他可以收到至少一份offer的最大概率。（如果Speakless选择了多个学校，得到任意一个学校的offer都可以）。<br>", input:"输入有若干组数据，每组数据的第一行有两个正整数n,m(0&lt;=n&lt;=10000,0&lt;=m&lt;=10000) <br>后面的m行，每行都有两个数据ai(整型),bi(实型)分别表示第i个学校的申请费用和可能拿到offer的概率。 <br>输入的最后有两个0。<br>", output:"每组数据都对应一个输出，表示Speakless可能得到至少一份offer的最大概率。用百分数表示，精确到小数点后一位。<br>", sample_in:"10 3\n4 0.1\n4 0.2\n5 0.3\n0 0", sample_out:"44.0%\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nYou should use printf(\"%%\") to print a \'%\'.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3331, vtotal_submit:14253, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Gardon-DYGG Contest 2", author:"", tag:["TEST"]}
{pid:1204, vid:1204, oj:"hdu", title:"糖果大战", desc:"生日Party结束的那天晚上，剩下了一些糖果，Gandon想把所有的都统统拿走，Speakless于是说：“可以是可以，不过我们来玩24点，你不是已经拿到了一些糖果了吗？这样，如果谁赢一局，就拿走对方一颗糖，直到拿完对方所有的糖为止。”如果谁能算出来而对方算不出来，谁就赢，但是如果双方都能算出或者都不能，就算平局，不会有任何糖果的得失。 <br>Speakless是个喜欢提前想问题的人，既然他发起了这场糖果大战，就自然很想赢啦（不然可就要精光了-_-）。现在他需要你的帮忙，给你他每局赢的概率和Gardon每局赢的概率，请你给出他可能获得这场大战胜利的概率。<br>", input:"每行有四个数，Speakless手上的糖果数N、Gardon手上的糖果数M(0&lt;=N,M&lt;=50)、一局Speakless能解答出来的概率p、一个问题Gardon能解答出来的概率q(0&lt;=p,q&lt;=1)。<br>", output:"每行一个数，表示Speakless能赢的概率（用百分比计算，保留到小数点后2位）。<br>", sample_in:"50 50 0.5 0.5\n10 10 0.51 0.5\n50 50 0.51 0.5", sample_out:"0.50\n0.60\n0.88", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:413, vtotal_submit:1792, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Gardon-DYGG Contest 2", author:"", tag:["TEST"]}
{pid:1205, vid:1205, oj:"hdu", title:"吃糖果", desc:"HOHO，终于从Speakless手上赢走了所有的糖果，是Gardon吃糖果时有个特殊的癖好，就是不喜欢将一样的糖果放在一起吃，喜欢先吃一种，下一次吃另一种，这样；可是Gardon不知道是否存在一种吃糖果的顺序使得他能把所有糖果都吃完？请你写个程序帮忙计算一下。<br>", input:"第一行有一个整数T，接下来T组数据，每组数据占2行，第一行是一个整数N（0&lt;N&lt;=1000000)，第二行是N个数，表示N种糖果的数目Mi(0&lt;Mi&lt;=1000000)。<br>", output:"对于每组数据，输出一行，包含一个&quot;Yes&quot;或者&quot;No&quot;。<br>", sample_in:"2\n3\n4 1 1\n5\n5 4 3 2 1", sample_out:"No\nYes\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nPlease use function scanf", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3856, vtotal_submit:20646, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"Gardon-DYGG Contest 2", author:"", tag:["TEST"]}
{pid:1206, vid:1206, oj:"hdu", title:"劲乐团", desc:"劲乐团是这样一个游戏：当游戏开始时，一边播放背景音乐，一边从上至下不断随着音乐掉落Note。（Note是音乐游戏的术语）当该Note掉落至最底部时，则按下对应的键就可以击中该Note并得分。击中的时间越准确得分越高。准确击中可以得到一个COOL，时间稍微有些偏差可以得到一个GOOD。偏差更多或者未击中得到MISS。一个COOL可以得10分，一个GOOD可以得5分。（注意：如果当某一个键被推迟或提前按下时，该位置正好有另一个Note，那么被响应的将是出现较早的那个音符。） <br>Gardon是劲乐团的高手，正常情况下他可以顺利完成任何难度的歌曲。因此他想让游戏变的更富有挑战性，他决定使用五个手指来弹七个按键的歌曲。这就意味着他的手必须来回移动来击中七个位置的音符。 <br>正常情况下，Gardon采用键盘上的A、S、D、F、J、K、L七个键来对应七个位置，现在Gardon并不打算更改它，只是他用左手的三个手指来操纵ASDF四个键，右手的两个手指操作JKL三个键。 <br>Gardon反应时间的最短间隔被称做一个Tick，一个Tick内，他可以按下一些键，也可以将手指移动，也可以在移动一些手指的同时按下另一些键。但是：正在被移动的手指不能按下任何键，不论是移动的起始点还是终点。恰好，劲乐团对于按键准确程度的判断也是以Tick为单位：正好在该Tick时击中得到COOL，早或者晚一个Tick都将得到GOOD。 <br>游戏一开始时，Gardon的手可以放在任意位置，比如图中的示例，Gardon的手可以放在1、3、4、5、6五个键上，在第四个音符按下的同时将第二个手指从键3上移动到键2上，并完成后面的内容。 <br>注意：不能将手移开，也不能变换手指的顺序，就是说：手指1只能放在键位1、2上，手指2只能放在键位2、3上，手指3只能放在键位3、4上，并且不同的手指不能放在一个键上。一次可以将数个手指同时移动，例如当分别放在1 2 3 5 6的时候，可以同时移动，分别到1 3 4 6 7位置上。并且左手手指不能放到5、6、7位置，右手手指不能放到1、2、3、4位置。 <br>现在Gardon面临了这样一个问题：因为有的时候Note太多或者太复杂，他很难使用五个手指打出全部的COOL，所以他想请你帮忙写个程序，来计算下对于一首歌曲，他最多可以拿到多少分，让他好有个目标来进行练习。<br><br><center><img src=data/images/C7-1006-1.jpg></center><br>", input:"输入包含多组数据，每组数据表示了一首歌曲的所有Note的信息，这些信息是Gardon从劲乐团的游戏文件中得到的。信息的格式是这样的： <br>第一行里有两个整数N和M，N表示了整个歌曲的长度（单位是Tick），M表示了所有Note的数目。（N&lt;=10000000，M&lt;=2821) <br>接下来M行每行有两个数 Ti和Pi表示了一个Note的信息。Ti是该Note到达底部的时间（单位是Tick），Pi是该Note的位置（1&lt;=Ti&lt;=N，1&lt;=Pi&lt;=7）。输入已经按照Ti排序，没有Ti和Pi都相同的两个Note。 <br>注意：游戏开始前(&lt;0)和结束后(&gt;N)时按键无效。<br>", output:"对于输入的每组数据，只有一个数字，表示Gardon能拿到的最高分数。<br>", sample_in:"7 9\n1 6\n2 5\n3 3\n4 1\n5 2\n6 1\n7 4\n7 5\n7 7", sample_out:"90\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\n就是图中的示例。一开始手放在1、3、4、5、6上，在按下5位置的音符的同时将6位置的手指移到7位置，在按下1位置音符的同时将3位置\n的手指移到2位置，这样所有的Note都能打出COOL，一共是90分。", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:73, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"Gardon-DYGG Contest 2", author:"", tag:["TEST"]}
{pid:1207, vid:1207, oj:"hdu", title:"汉诺塔II", desc:"经典的汉诺塔问题经常作为一个递归的经典例题存在。可能有人并不知道汉诺塔问题的典故。汉诺塔来源于印度传说的一个故事，上帝创造世界时作了三根金刚石柱子，在一根柱子上从下往上按大小顺序摞着64片黄金圆盘。上帝命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一回只能移动一个圆盘。有预言说，这件事完成时宇宙会在一瞬间闪电式毁灭。也有人相信婆罗门至今仍在一刻不停地搬动着圆盘。恩，当然这个传说并不可信，如今汉诺塔更多的是作为一个玩具存在。Gardon就收到了一个汉诺塔玩具作为生日礼物。 <br>　　Gardon是个怕麻烦的人（恩，就是爱偷懒的人），很显然将64个圆盘逐一搬动直到所有的盘子都到达第三个柱子上很困难，所以Gardon决定作个小弊，他又找来了一根一模一样的柱子，通过这个柱子来更快的把所有的盘子移到第三个柱子上。下面的问题就是：当Gardon在一次游戏中使用了N个盘子时，他需要多少次移动才能把他们都移到第三个柱子上？很显然，在没有第四个柱子时，问题的解是2^N-1，但现在有了这个柱子的帮助，又该是多少呢？<br>", input:"包含多组数据，每个数据一行，是盘子的数目N(1&lt;=N&lt;=64)。<br>", output:"对于每组数据，输出一个数，到达目标需要的最少的移动数。<br>", sample_in:"1\n3\n12", sample_out:"1\n5\n81", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1589, vtotal_submit:4332, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Gardon-DYGG Contest 2", author:"", tag:["TEST"]}
{pid:1208, vid:1208, oj:"hdu", title:"Pascal\'s Travels ", desc:"An n x n game board is populated with integers, one nonnegative integer per square. The goal is to travel along any legitimate path from the upper left corner to the lower right corner of the board. The integer in any one square dictates how large a step away from that location must be. If the step size would advance travel off the game board, then a step in that particular direction is forbidden. All steps must be either to the right or toward the bottom. Note that a 0 is a dead end which prevents any further progress. <br><br><br>Consider the 4 x 4 board shown in Figure 1, where the solid circle identifies the start position and the dashed circle identifies the target. Figure 2 shows the three paths from the start to the target, with the irrelevant numbers in each removed. <br><br><center><img src=data/images/1208-1.jpg> </center><br><center>Figure 1 </center><br><center><img src=data/images/1208-2.jpg></center><br><center> Figure 2</center>", input:"The input contains data for one to thirty boards, followed by a final line containing only the integer -1. The data for a board starts with a line containing a single positive integer n, 4 &lt;= n &lt;= 34, which is the number of rows in this board. This is followed by n rows of data. Each row contains n single digits, 0-9, with no spaces between them.<br>", output:"The output consists of one line for each board, containing a single integer, which is the number of paths from the upper left corner to the lower right corner. There will be fewer than 2^63 paths for any board. <br>", sample_in:"4\n2331\n1213\n1231\n3110\n4\n3332\n1213\n1232\n2120\n5\n11101\n01111\n11111\n11101\n11101\n-1", sample_out:"3\n0\n7\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nBrute force methods examining every path will likely exceed the allotted time limit. \n64-bit integer values are available as \"__int64\" values using the Visual C/C++ or \"long long\" values \nusing GNU C/C++ or \"int64\" values using Free Pascal compilers. ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:521, vtotal_submit:1519, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 2005", author:"", tag:["TEST"]}
{pid:1209, vid:1209, oj:"hdu", title:"Clock", desc:"There is an analog clock with two hands: an hour hand and a minute hand. The two hands form an angle. The angle is measured as the smallest angle between the two hands. The angle between the two hands has a measure that is greater than or equal to 0 and less than or equal to 180 degrees.<br><br>Given a sequence of five distinct times written in the format hh : mm , where hh are two digits representing full hours (00 &lt;= hh &lt;= 23) and mm are two digits representing minutes (00 &lt;= mm &lt;= 59) , you are to write a program that finds the median, that is, the third element of the sorted sequence of times in a nondecreasing order of their associated angles. Ties are broken in such a way that an earlier time precedes a later time.<br><br>For example, suppose you are given a sequence (06:05, 07:10, 03:00, 21:00, 12:55) of times. Because the sorted sequence is (12:55, 03:00, 21:00, 06:05, 07:10), you are to report 21:00.<br>", input:"The input consists of T test cases. The number of test cases (T) is given on the first line of the input file. Each test case is given on a single line, which contains a sequence of five distinct times, where times are given in the format hh : mm and are separated by a single space.<br>", output:"Print exactly one line for each test case. The line is to contain the median in the format hh : mm of the times given. The following shows sample input and output for three test cases.<br>", sample_in:"3\n00:00 01:00 02:00 03:00 04:00\n06:05 07:10 03:00 21:00 12:55\n11:05 12:05 13:05 14:05 15:05", sample_out:"02:00\n21:00\n14:05", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:951, vtotal_submit:4040, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2003（Seoul）", author:"", tag:["TEST"]}
{pid:1210, vid:1210, oj:"hdu", title:"Eddy\'s 洗牌问题", desc:"Eddy是个ACMer,他不仅喜欢做ACM题,而且对于纸牌也有一定的研究,他在无聊时研究发现,如果他有2N张牌，编号为1,2,3..n,n+1,..2n。这也是最初的牌的顺序。通过一次洗牌可以把牌的序列变为n+1,1,n+2,2,n+3,3,n+4,4..2n,n。那么可以证明，对于任意自然数N，都可以在经过M次洗牌后第一次重新得到初始的顺序。编程对于小于100000的自然数N，求出M的值。<br>", input:"每行一个整数N", output:"输出与之对应的M", sample_in:"20\n1", sample_out:"20\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1703, vtotal_submit:2999, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM省赛集训队选拔赛之热身赛", author:"", tag:["TEST"]}
{pid:1211, vid:1211, oj:"hdu", title:"RSA", desc:"RSA is one of the most powerful methods to encrypt data. The RSA algorithm is described as follow:<br><br>&gt; choose two large prime integer p, q<br>&gt; calculate n = p × q, calculate F(n) = (p - 1) × (q - 1)<br>&gt; choose an integer e(1 &lt; e &lt; F(n)), making gcd(e, F(n)) = 1, e will be the public key<br>&gt; calculate d, making d × e mod F(n) = 1 mod F(n), and d will be the private key<br><br>You can encrypt data with this method :<br><br>C = E(m) = m<sup><b><i>e</i></b></sup> mod n<br><br>When you want to decrypt data, use this method :<br><br>M = D(c) = c<sup><b><i>d</i></b></sup> mod n<br><br>Here, c is an integer ASCII value of a letter of cryptograph and m is an integer ASCII value of a letter of plain text.<br><br>Now given p, q, e and some cryptograph, your task is to &quot;translate&quot; the cryptograph into plain text.<br>", input:"Each case will begin with four integers p, q, e, l followed by a line of cryptograph. The integers p, q, e, l will be in the range of 32-bit integer. The cryptograph consists of l integers separated by blanks. <br>", output:"For each case, output the plain text in a single line. You may assume that the correct result of plain text are visual ASCII letters, you should output them as visualable letters with no blank between them.<br>", sample_in:"101 103 7 11\n7716 7746 7497 126 8486 4708 7746 623 7298 7357 3239", sample_out:"I-LOVE-ACM.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:664, vtotal_submit:1230, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM省赛集训队选拔赛之热身赛", author:"", tag:["TEST"]}
{pid:1212, vid:1212, oj:"hdu", title:"Big Number", desc:"As we know, Big Number is always troublesome. But it\'s really important in our ACM. And today, your task is to write a program to calculate A mod B.<br><br>To make the problem easier, I promise that B will be smaller than 100000.<br><br>Is it too hard? No, I work it out in 10 minutes, and my program contains less than 25 lines.<br>", input:"The input contains several test cases. Each test case consists of two positive integers A and B. The length of A will not exceed 1000, and B will be smaller than 100000. Process to the end of file.<br>", output:"For each test case, you have to ouput the result of A mod B.<br>", sample_in:"2 3\n12 7\n152455856554521 3250", sample_out:"2\n5\n1521", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2416, vtotal_submit:4230, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM省赛集训队选拔赛之热身赛", author:"", tag:["TEST"]}
{pid:1213, vid:1213, oj:"hdu", title:"How Many Tables", desc:"Today is Ignatius\' birthday. He invites a lot of friends. Now it\'s dinner time. Ignatius wants to know how many tables he needs at least. You have to notice that not all the friends know each other, and all the friends do not want to stay with strangers.<br><br>One important rule for this problem is that if I tell you A knows B, and B knows C, that means A, B, C know each other, so they can stay in one table.<br><br>For example: If I tell you A knows B, B knows C, and D knows E, so A, B, C can stay in one table, and D, E have to stay in the other one. So Ignatius needs 2 tables at least.<br>", input:"The input starts with an integer T(1&lt;=T&lt;=25) which indicate the number of test cases. Then T test cases follow. Each test case starts with two integers N and M(1&lt;=N,M&lt;=1000). N indicates the number of friends, the friends are marked from 1 to N. Then M lines follow. Each line consists of two integers A and B(A!=B), that means friend A and friend B know each other. There will be a blank line between two cases.<br>", output:"For each test case, just output how many tables Ignatius needs at least. Do NOT print any blanks.<br>", sample_in:"2\n5 3\n1 2\n2 3\n4 5\n\n5 1\n2 5", sample_out:"2\n4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3193, vtotal_submit:10932, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM省赛集训队选拔赛之热身赛", author:"", tag:["TEST"]}
{pid:1214, vid:1214, oj:"hdu", title:"圆桌会议", desc:"HDU ACM集训队的队员在暑假集训时经常要讨论自己在做题中遇到的问题.每当面临自己解决不了的问题时,他们就会围坐在一张圆形的桌子旁进行交流,经过大家的讨论后一般没有解决不了的问题,这也只有HDU ACM集训队特有的圆桌会议,有一天你也可以进来体会一下哦:),在一天在讨论的时候,Eddy想出了一个极为古怪的想法,如果他们在每一分钟内,一对相邻的两个ACM队员交换一下位子,那么要多少时间才能得到与原始状态相反的座位顺序呢?(即对于每个队员，原先在他左面的队员后来在他右面，原先在他右面的队员在他左面),这当然难不倒其他的聪明的其他队友们,马上就把这个古怪的问题给解决了,你知道是怎么解决的吗?<br>", input:"对于给定数目N(1&lt;=N&lt;=32767)，表示有N个人,求要多少时间才能得到与原始状态相反的座位顺序(reverse)即对于每个人，原先在他左面的人后来在他右面，原先在他右面的人在他左面。<br>", output:"对每个数据输出一行，表示需要的时间(以分钟为单位)<br>", sample_in:"4\n5\n6", sample_out:"2\n4\n6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1614, vtotal_submit:2713, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM省赛集训队选拔赛之热身赛", author:"", tag:["TEST"]}
{pid:1215, vid:1215, oj:"hdu", title:"七夕节", desc:"七夕节那天,月老来到数字王国,他在城门上贴了一张告示,并且和数字王国的人们说:&quot;你们想知道你们的另一半是谁吗?那就按照告示上的方法去找吧!&quot;<br>人们纷纷来到告示前,都想知道谁才是自己的另一半.告示如下:<br><br><center><img src=data/images/C8-1006-1.jpg></center><br><br>数字N的因子就是所有比N小又能被N整除的所有正整数,如12的因子有1,2,3,4,6.<br>你想知道你的另一半吗?<br>", input:"输入数据的第一行是一个数字T(1&lt;=T&lt;=500000),它表明测试数据的组数.然后是T组测试数据,每组测试数据只有一个数字N(1&lt;=N&lt;=500000).<br>", output:"对于每组测试数据,请输出一个代表输入数据N的另一半的编号.<br>", sample_in:"3\n2\n10\n20", sample_out:"1\n8\n22", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5213, vtotal_submit:26341, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM省赛集训队选拔赛之热身赛", author:"", tag:["TEST"]}
{pid:1216, vid:1216, oj:"hdu", title:"Assistance Required", desc:"After the 1997/1998 Southwestern European Regional Contest (which was held in Ulm) a large contest party took place. The organization team invented a special mode of choosing those participants that were to assist with washing the dirty dishes. The contestants would line up in a queue, one behind the other. Each contestant got a number starting with 2 for the first one, 3 for the second one, 4 for the third one, and so on, consecutively. <br>The first contestant in the queue was asked for his number (which was 2). He was freed from the washing up and could party on, but every second contestant behind him had to go to the kitchen (those with numbers 4, 6, 8, etc). Then the next contestant in the remaining queue had to tell his number. He answered 3 and was freed from assisting, but every third contestant behind him was to help (those with numbers 9, 15, 21, etc). The next in the remaining queue had number 5 and was free, but every fifth contestant behind him was selected (those with numbers 19, 35, 49, etc). The next had number 7 and was free, but every seventh behind him had to assist, and so on. <br><br>Let us call the number of a contestant who does not need to assist with washing up a lucky number. Continuing the selection scheme, the lucky numbers are the ordered sequence 2, 3, 5, 7, 11, 13, 17, etc. Find out the lucky numbers to be prepared for the next contest party. <br>", input:"The input contains several test cases. Each test case consists of an integer n. You may assume that 1 &lt;= n &lt;= 3000. A zero follows the input for the last test case. <br>", output:"For each test case specified by n output on a single line the n-th lucky number. <br>", sample_in:"1\n2\n10\n20\n0", sample_out:"2\n3\n29\n83", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:440, vtotal_submit:1114, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 2002", author:"", tag:["TEST"]}
{pid:1217, vid:1217, oj:"hdu", title:"Arbitrage", desc:"Arbitrage is the use of discrepancies in currency exchange rates to transform one unit of a currency into more than one unit of the same currency. For example, suppose that 1 US Dollar buys 0.5 British pound, 1 British pound buys 10.0 French francs, and 1 French franc buys 0.21 US dollar. Then, by converting currencies, a clever trader can start with 1 US dollar and buy 0.5 * 10.0 * 0.21 = 1.05 US dollars, making a profit of 5 percent. <br><br>Your job is to write a program that takes a list of currency exchange rates as input and then determines whether arbitrage is possible or not.<br>", input:"The input file will contain one or more test cases. Om the first line of each test case there is an integer n (1&lt;=n&lt;=30), representing the number of different currencies. The next n lines each contain the name of one currency. Within a name no spaces will appear. The next line contains one integer m, representing the length of the table to follow. The last m lines each contain the name ci of a source currency, a real number rij which represents the exchange rate from ci to cj and a name cj of the destination currency. Exchanges which do not appear in the table are impossible.<br>Test cases are separated from each other by a blank line. Input is terminated by a value of zero (0) for n. <br>", output:"For each test case, print one line telling whether arbitrage is possible or not in the format &quot;Case case: Yes&quot; respectively &quot;Case case: No&quot;. <br>", sample_in:"3\nUSDollar\nBritishPound\nFrenchFranc\n3\nUSDollar 0.5 BritishPound\nBritishPound 10.0 FrenchFranc\nFrenchFranc 0.21 USDollar\n\n3\nUSDollar\nBritishPound\nFrenchFranc\n6\nUSDollar 0.5 BritishPound\nUSDollar 4.9 FrenchFranc\nBritishPound 10.0 FrenchFranc\nBritishPound 1.99 USDollar\nFrenchFranc 0.09 BritishPound\nFrenchFranc 0.19 USDollar\n\n0", sample_out:"Case 1: Yes\nCase 2: No", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1100, vtotal_submit:3792, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 1996", author:"", tag:["TEST"]}
{pid:1218, vid:1218, oj:"hdu", title:"Blurred Vision", desc:"Aliasing is the stair-step effect achieved when attempting to represent a smooth curve using a finite number of discrete pixels. Of course, all computer displays consist of a finite number of pixels, and many strategies have been devised to smooth the jagged edges with varying degrees of success.<br><br>Boudreaux and Thibodeaux are writing video game rendering software for the next big first-person shooter, and they don\'t know much about any of the progress made in the field of anti-aliasing. Therefore, they\'ve decided to use a very simplistic (and visually unappealing) method to smooth the ragged edges. Unfortunately, it blurs the entire image, but at least it gets rid of those jaggies!<br><br>Normally, the game displays in m x n pixels, but they perform an extra anti-aliasing step that converts that image into an (m - 1) x (n - 1) image. Nobody will notice a pixel missing from each dimension, and they can calculate the new pixels by averaging squares of 4 pixels from the original image (and rounding down). For example, the images below represent the original image (left) and the anti-aliased image (right) using numbers to represent varying shades of black and white.<br>4  4  4  0  <br>4  4  0  0  <br>4  0  0  0  <br>0  0  0  0  <br><br>4  3  1  <br>3  1  0  <br>1  0  0  <br> <br>", input:"Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.<br><br>A single data set has 3 components:<br><br>Start line - A single line: <br>         START R C<br>      <br>where R and C are integers (2 ≤ (R,C) ≤ 9) indicating the number of rows and columns in the input image described by this data set. <br>Original Image - A series of R lines, each of which contains C integers from 0 to 9 inclusive. These integers represent the grayscale value of a pixel in the original image and will not be separated by spaces. <br>End line - A single line: <br>         END<br>      <br>After the last data set, there will be a single line: <br><br>   ENDOFINPUT<br>", output:"The output will be the anti-aliased image, which will be R - 1 rows, each with C - 1 integer pixel values. Each pixel in the output will be generated by averaging (and rounding down) the grayscale pixel values of the corresponding square of four pixels in the Original Image.<br>", sample_in:"START 2 2\n00\n00\nEND\nSTART 2 9\n012345678\n012345678\nEND\nSTART 4 4\n4440\n4400\n4000\n0000\nEND\nSTART 9 9\n900000009\n090000090\n009000900\n000909000\n000090000\n000909000\n009000900\n090000090\n900000009\nEND\nENDOFINPUT", sample_out:"0\n01234567\n431\n310\n100\n42000024\n24200242\n02422420\n00244200\n00244200\n02422420\n24200242\n42000024", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:277, vtotal_submit:401, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Central USA 2003", author:"", tag:["TEST"]}
{pid:1219, vid:1219, oj:"hdu", title:"AC Me", desc:"Ignatius is doing his homework now. The teacher gives him some articles and asks him to tell how many times each letter appears.<br><br>It\'s really easy, isn\'t it? So come on and AC ME.<br>", input:"Each article consists of just one line, and all the letters are in lowercase. You just have to count the number of each letter, so do not pay attention to other characters. The length of article is at most 100000. Process to the end of file.<br><br>Note: the problem has multi-cases, and you may use &quot;while(gets(buf)){...}&quot; to process to the end of file.<br>", output:"For each article, you have to tell how many times each letter appears. The output format is like &quot;X:N&quot;. <br><br>Output a blank line after each test case. More details in sample output.<br>", sample_in:"hello, this is my first acm contest!\nwork hard for hdu acm.", sample_out:"a:1\nb:0\nc:2\nd:0\ne:2\nf:1\ng:0\nh:2\ni:3\nj:0\nk:0\nl:2\nm:2\nn:1\no:2\np:0\nq:0\nr:1\ns:4\nt:4\nu:0\nv:0\nw:0\nx:0\ny:1\nz:0\n\na:2\nb:0\nc:1\nd:2\ne:0\nf:1\ng:0\nh:2\ni:0\nj:0\nk:1\nl:0\nm:1\nn:0\no:2\np:0\nq:0\nr:3\ns:0\nt:0\nu:1\nv:0\nw:1\nx:0\ny:0\nz:0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3856, vtotal_submit:10986, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭州电子科技大学第三届程序设计大赛", author:"", tag:["TEST"]}
{pid:1220, vid:1220, oj:"hdu", title:"Cube", desc:"Cowl is good at solving math problems. One day a friend asked him such a question: You are given a cube whose edge length is N, it is cut by the planes that was paralleled to its side planes into N * N * N unit cubes. Two unit cubes may have no common points or two common points or four common points. Your job is to calculate how many pairs of unit cubes that have no more than two common points.<br><br>Process to the end of file.<br>", input:"There will be many test cases. Each test case will only give the edge length N of a cube in one line. N is a positive integer(1&lt;=N&lt;=30).<br>", output:"For each test case, you should output the number of pairs that was described above in one line.<br>", sample_in:"1\n2\n3", sample_out:"0\n16\n297\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nThe results will not exceed int type.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:828, vtotal_submit:1200, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭州电子科技大学第三届程序设计大赛", author:"", tag:["TEST"]}
{pid:1221, vid:1221, oj:"hdu", title:"Rectangle and Circle", desc:"Given a rectangle and a circle in the coordinate system(two edges of the rectangle are parallel with the X-axis, and the other two are parallel with the Y-axis), you have to tell if their borders intersect.<br><br>Note: we call them intersect even if they are just tangent. The circle is located by its centre and radius, and the rectangle is located by one of its diagonal.<br><br><center><img src=data/images/C9-1003-1.jpg></center><br>", input:"The first line of input is a positive integer P which indicates the number of test cases. Then P test cases follow. Each test cases consists of seven real numbers, they are X,Y,R,X1,Y1,X2,Y2. That means the centre of a circle is (X,Y) and the radius of the circle is R, and one of the rectangle\'s diagonal is (X1,Y1)-(X2,Y2).<br>", output:"For each test case, if the rectangle and the circle intersects, just output &quot;YES&quot; in a single line, or you should output &quot;NO&quot; in a single line.<br>", sample_in:"2\n1 1 1 1 2 4 3\n1 1 1 1 3 4 4.5", sample_out:"YES\nNO", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:449, vtotal_submit:2312, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭州电子科技大学第三届程序设计大赛", author:"", tag:["TEST"]}
{pid:1222, vid:1222, oj:"hdu", title:"Wolf and Rabbit", desc:"There is a hill with n holes around. The holes are signed from 0 to n-1.<br><br><center><img src=data/images/C9-1004-1.jpg></center><br><br>A rabbit must hide in one of the holes. A wolf searches the rabbit in anticlockwise order. The first hole he get into is the one signed with 0. Then he will get into the hole every m holes. For example, m=2 and n=6, the wolf will get into the holes which are signed 0,2,4,0. If the rabbit hides in the hole which signed 1,3 or 5, she will survive. So we call these holes the safe holes.<br>", input:"The input starts with a positive integer P which indicates the number of test cases. Then on the following P lines,each line consists 2 positive integer m and n(0&lt;m,n&lt;2147483648).<br>", output:"For each input m n, if safe holes exist, you should output &quot;YES&quot;, else output &quot;NO&quot; in a single line.<br>", sample_in:"2\n1 2\n2 2", sample_out:"NO\nYES", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1878, vtotal_submit:4641, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭州电子科技大学第三届程序设计大赛", author:"", tag:["TEST"]}
{pid:1223, vid:1223, oj:"hdu", title:"Order Count", desc:"If we connect 3 numbers with &quot;&lt;&quot; and &quot;=&quot;, there are 13 cases:<br> 1) A=B=C<br> 2) A=B&lt;C<br> 3) A&lt;B=C<br> 4) A&lt;B&lt;C<br> 5) A&lt;C&lt;B<br> 6) A=C&lt;B<br> 7) B&lt;A=C<br> 8) B&lt;A&lt;C<br> 9) B&lt;C&lt;A<br>10) B=C&lt;A<br>11) C&lt;A=B<br>12) C&lt;A&lt;B<br>13) C&lt;B&lt;A<br><br>If we connect n numbers with &quot;&lt;&quot; and &quot;=&quot;, how many cases then?<br>", input:"The input starts with a positive integer P(0&lt;P&lt;1000) which indicates the number of test cases. Then on the following P lines, each line consists of a positive integer n(1&lt;=n&lt;=50) which indicates the amount of numbers to be connected.<br>", output:"For each input n, you should output the amount of cases in a single line.<br>", sample_in:"2\n1\n3", sample_out:"1\n13\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nHuge input, scanf is recommended.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:187, vtotal_submit:621, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭州电子科技大学第三届程序设计大赛", author:"", tag:["TEST"]}
{pid:1224, vid:1224, oj:"hdu", title:"Free DIY Tour", desc:"Weiwei is a software engineer of ShiningSoft. He has just excellently fulfilled a software project with his fellow workers. His boss is so satisfied with their job that he decide to provide them a free tour around the world. It\'s a good chance to relax themselves. To most of them, it\'s the first time to go abroad so they decide to make a collective tour.<br><br>The tour company shows them a new kind of tour circuit - DIY circuit. Each circuit contains some cities which can be selected by tourists themselves. According to the company\'s statistic, each city has its own interesting point. For instance, Paris has its interesting point of 90, New York has its interesting point of 70, ect. Not any two cities in the world have straight flight so the tour company provide a map to tell its tourists whether they can got a straight flight between any two cities on the map. In order to fly back, the company has made it impossible to make a circle-flight on the half way, using the cities on the map. That is, they marked each city on the map with one number, a city with higher number has no straight flight to a city with lower number. <br><br>Note: Weiwei always starts from Hangzhou(in this problem, we assume Hangzhou is always the first city and also the last city, so we mark Hangzhou both <b>1</b> and <b>N+1</b>), and its interesting point is always 0.<br><br>Now as the leader of the team, Weiwei wants to make a tour as interesting as possible. If you were Weiwei, how did you DIY it?<br>", input:"The input will contain several cases. The first line is an integer T which suggests the number of cases. Then T cases follows.<br>Each case will begin with an integer N(2 ≤ N ≤ 100) which is the number of cities on the map.<br>Then N integers follows, representing the interesting point list of the cities.<br>And then it is an integer M followed by M pairs of integers [Ai, Bi] (1 ≤ i ≤  M). Each pair of [Ai, Bi] indicates that a straight flight is available from City Ai to City Bi.<br>", output:"For each case, your task is to output the maximal summation of interesting points Weiwei and his fellow workers can get through optimal DIYing and the optimal circuit. The format is as the sample. You may assume that there is only one optimal circuit. <br><br>Output a blank line between two cases.<br>", sample_in:"2\n3\n0 70 90\n4\n1 2\n1 3\n2 4\n3 4\n3\n0 90 70\n4\n1 2\n1 3\n2 4\n3 4", sample_out:"CASE 1#\npoints : 90\ncircuit : 1->3->1\n\nCASE 2#\npoints : 90\ncircuit : 1->2->1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:690, vtotal_submit:3321, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭州电子科技大学第三届程序设计大赛", author:"", tag:["TEST"]}
{pid:1225, vid:1225, oj:"hdu", title:"Football Score", desc:"Football is one of the greatest games in the world. Lots of people like to play football. After one season of matches, the header has to calculate the last scores of every team. He is too lazy that he doesn\'t want to calculate, so he asks you to write a program for him to solve the problem.<br><br>Here are the rules:<br>1 Every team has to match with all the other teams.<br>2 Every two teams have to match for two times,one at home and one away.<br>3 In one match, the winner will get 3 points, the loser will get 0 point. If it is draw, both of them will get 1 point.<br>", input:"The input consists of many test cases. In each case, there will be a number N in the first line which means the number of teams. Followed by N * (N – 1)lines. Each line stands for a match between two teams. The format is: &quot;Team1 VS Team2 p:q&quot;, p stands for the balls that Team1 has kicked in and q stands for the balls that Team2 has kicked in. p and q are not greater than 9.<br><br>Process to the end of file.<br>", output:"For each test case, output the teams and their scores in descending order. One line a team, the format is: &quot;TeamX scores&quot;. If two teams get the same score, the one with high net goals will be ahead, which net goal means the difference between the total balls that the team kicked in and the total balls that the team lost. IE: if one team kicked in 30 balls and lost 40 balls, then the net goal is 30 – 40 = -10. If two teams have the same score and the same net goal, the one whose kicked in balls is bigger will be ahead. If two teams have the same score and the same net goal and the same kicked in balls, they will be outputed in alphabetic order.<br><br>Output a blank line after each test case.<br>", sample_in:"3\nManchester VS Portsmouth 3:0\nLiverpool VS Manchester 1:1\nLiverpool VS Portsmouth 0:0\nPortsmouth VS Manchester 1:1\nManchester VS Liverpool 2:1\nLiverpool VS Portsmouth 1:2", sample_out:"Manchester 8\nPortsmouth 5\nLiverpool 2\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nHuge input, scanf is recommended.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:523, vtotal_submit:2458, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭州电子科技大学第三届程序设计大赛", author:"", tag:["TEST"]}
{pid:1226, vid:1226, oj:"hdu", title:"超级密码", desc:"Ignatius花了一个星期的时间终于找到了传说中的宝藏,宝藏被放在一个房间里,房间的门用密码锁起来了,在门旁边的墙上有一些关于密码的提示信息:<br>密码是一个C进制的数,并且只能由给定的M个数字构成,同时密码是一个给定十进制整数N(0&lt;=N&lt;=5000)的正整数倍(如果存在多个满足条件的数,那么最小的那个就是密码),如果这样的密码存在,那么当你输入它以后门将打开,如果不存在这样的密码......那就把门炸了吧.<br><br>注意:由于宝藏的历史久远,当时的系统最多只能保存500位密码.因此如果得到的密码长度大于500也不能用来开启房门,这种情况也被认为密码不存在.<br>", input:"输入数据的第一行是一个整数T(1&lt;=T&lt;=300),表示测试数据的数量.每组测试数据的第一行是两个整数N(0&lt;=N&lt;=5000)和C(2&lt;=C&lt;=16),其中N表示的是题目描述中的给定十进制整数,C是密码的进制数.测试数据的第二行是一个整数M(1&lt;=M&lt;=16),它表示构成密码的数字的数量,然后是M个数字用来表示构成密码的数字.两个测试数据之间会有一个空行隔开.<br><br>注意:在给出的M个数字中,如果存在超过10的数,我们约定用A来表示10,B来表示11,C来表示12,D来表示13,E来表示14,F来表示15.我保证输入数据都是合法的.<br>", output:"对于每组测试数据,如果存在要求的密码,则输出该密码,如果密码不存在,则输出&quot;give me the bomb please&quot;.<br><br>注意:构成密码的数字不一定全部都要用上;密码有可能非常长,不要试图用一个整型变量来保存密码;我保证密码最高位不为0(除非密码本身就是0).<br>", sample_in:"3\n22 10\n3\n7 0 1\n\n2 10\n1\n1\n\n25 16\n3\nA B C", sample_out:"110\ngive me the bomb please\nCCB\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nHuge input, scanf is recommended.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:364, vtotal_submit:2086, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"杭州电子科技大学第三届程序设计大赛", author:"", tag:["TEST"]}
{pid:1227, vid:1227, oj:"hdu", title:"Fast Food", desc:"The fastfood chain McBurger owns several restaurants along a highway. Recently, they have decided to build several depots along the highway, each one located at a restaurant and supplying several of the restaurants with the needed ingredients. Naturally, these depots should be placed so that the average distance between a restaurant and its assigned depot is minimized. You are to write a program that computes the optimal positions and assignments of the depots. <br><br>To make this more precise, the management of McBurger has issued the following specification: You will be given the positions of n restaurants along the highway as n integers d1 &lt; d2 &lt; ... &lt; dn (these are the distances measured from the company\'s headquarter, which happens to be at the same highway). Furthermore, a number k (k &lt;= n) will be given, the number of depots to be built. <br><br>The k depots will be built at the locations of k different restaurants. Each restaurant will be assigned to the closest depot, from which it will then receive its supplies. To minimize shipping costs, the total distance sum, defined as<br><br><center><img src=data/images/1227-1.gif></center><br><br>must be as small as possible.<br><br>Write a program that computes the positions of the k depots, such that the total distance sum is minimized. <br>", input:"The input file contains several descriptions of fastfood chains. Each description starts with a line containing the two integers n and k. n and k will satisfy 1 &lt;= n &lt;= 200, 1 &lt;= k &lt;= 30, k &lt;= n. Following this will n lines containing one integer each, giving the positions di of the restaurants, ordered increasingly.<br><br>The input file will end with a case starting with n = k = 0. This case should not be processed. <br>", output:"For each chain, first output the number of the chain. Then output a line containing the total distance sum. <br><br>Output a blank line after each test case.<br>", sample_in:"6 3\n5\n6\n12\n19\n20\n27\n0 0", sample_out:"Chain 1\nTotal distance sum = 8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:570, vtotal_submit:1901, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southwestern Europe 1998", author:"", tag:["TEST"]}
{pid:1228, vid:1228, oj:"hdu", title:"A + B", desc:"读入两个小于100的正整数A和B,计算A+B.<br>需要注意的是:A和B的每一位数字由对应的英文单词给出.<br>", input:"测试输入包含若干测试用例,每个测试用例占一行,格式为&quot;A + B =&quot;,相邻两字符串有一个空格间隔.当A和B同时为0时输入结束,相应的结果不要输出. <br>", output:"对每个测试用例输出1行,即A+B的值.<br>", sample_in:"one + two =\nthree four + five six =\nzero seven + eight nine =\nzero + zero =", sample_out:"3\n90\n96", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5044, vtotal_submit:11175, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2005年", author:"", tag:["TEST"]}
{pid:1229, vid:1229, oj:"hdu", title:"还是A+B", desc:"读入两个小于10000的正整数A和B，计算A+B。需要注意的是：如果A和B的末尾K（不超过8）位数字相同，请直接输出-1。<br>", input:"测试输入包含若干测试用例，每个测试用例占一行，格式为&quot;A B K&quot;，相邻两数字有一个空格间隔。当A和B同时为0时输入结束，相应的结果不要输出。<br>", output:"对每个测试用例输出1行，即A+B的值或者是-1。<br>", sample_in:"1 2 1\n11 21 1\n108 8 2\n36 64 3\n0 0 1", sample_out:"3\n-1\n-1\n100", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5905, vtotal_submit:14970, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2006年", author:"", tag:["TEST"]}
{pid:1230, vid:1230, oj:"hdu", title:"火星A+B", desc:"读入两个不超过25位的火星正整数A和B，计算A+B。需要注意的是：在火星上，整数不是单一进制的，第n位的进制就是第n个素数。例如：地球上的10进制数2，在火星上记为“1,0”，因为火星个位数是2进制的；地球上的10进制数38，在火星上记为“1,1,1,0”，因为火星个位数是2进制的，十位数是3进制的，百位数是5进制的，千位数是7进制的……<br>", input:"测试输入包含若干测试用例，每个测试用例占一行，包含两个火星正整数A和B，火星整数的相邻两位数用逗号分隔，A和B之间有一个空格间隔。当A或B为0时输入结束，相应的结果不要输出。<br>", output:"对每个测试用例输出1行，即火星表示法的A+B的值。<br>", sample_in:"1,0 2,1\n4,2,0 1,2,0\n1 10,6,4,2,1\n0 0", sample_out:"1,0,1\n1,1,1,0\n1,0,0,0,0,0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2230, vtotal_submit:9953, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2006年", author:"", tag:["TEST"]}
{pid:1231, vid:1231, oj:"hdu", title:"最大连续子序列", desc:"给定K个整数的序列{ N1, N2, ..., NK }，其任意连续子序列可表示为{ Ni, Ni+1, ..., <br>Nj }，其中 1 &lt;= i &lt;= j &lt;= K。最大连续子序列是所有连续子序列中元素和最大的一个， <br>例如给定序列{ -2, 11, -4, 13, -5, -2 }，其最大连续子序列为{ 11, -4, 13 }，最大和 <br>为20。 <br>在今年的数据结构考卷中，要求编写程序得到最大和，现在增加一个要求，即还需要输出该 <br>子序列的第一个和最后一个元素。<br>", input:"测试输入包含若干测试用例，每个测试用例占2行，第1行给出正整数K( &lt; 10000 )，第2行给出K个整数，中间用空格分隔。当K为0时，输入结束，该用例不被处理。<br>", output:"对每个测试用例，在1行里输出最大和、最大连续子序列的第一个和最后一个元 <br>素，中间用空格分隔。如果最大连续子序列不唯一，则输出序号i和j最小的那个（如输入样例的第2、3组）。若所有K个元素都是负数，则定义其最大和为0，输出整个序列的首尾元素。 <br>", sample_in:"6\n-2 11 -4 13 -5 -2\n10\n-10 1 2 3 4 -5 -23 3 7 -21\n6\n5 -8 3 2 5 0\n1\n10\n3\n-1 -5 -2\n3\n-1 0 -2\n0", sample_out:"20 11 13\n10 1 4\n10 3 5\n10 10 10\n0 -1 -2\n0 0 0\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nHuge input, scanf is recommended.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4676, vtotal_submit:16864, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2005年", author:"", tag:["TEST"]}
{pid:1232, vid:1232, oj:"hdu", title:"畅通工程", desc:"某省调查城镇交通状况，得到现有城镇道路统计表，表中列出了每条道路直接连通的城镇。省政府“畅通工程”的目标是使全省任何两个城镇间都可以实现交通（但不一定有直接的道路相连，只要互相间接通过道路可达即可）。问最少还需要建设多少条道路？ <br>", input:"测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是城镇数目N ( &lt; 1000 )和道路数目M；随后的M行对应M条道路，每行给出一对正整数，分别是该条道路直接连通的两个城镇的编号。为简单起见，城镇从1到N编号。 <br>注意:两个城市之间可以有多条道路相通,也就是说<br>3 3<br>1 2<br>1 2<br>2 1<br>这种输入也是合法的<br>当N为0时，输入结束，该用例不被处理。 <br>", output:"对每个测试用例，在1行里输出最少还需要建设的道路数目。 <br>", sample_in:"4 2\n1 3\n4 3\n3 3\n1 2\n1 3\n2 3\n5 2\n1 2\n3 5\n999 0\n0", sample_out:"1\n0\n2\n998\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nHuge input, scanf is recommended.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:6994, vtotal_submit:25596, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2005年", author:"", tag:["TEST"]}
{pid:1233, vid:1233, oj:"hdu", title:"还是畅通工程", desc:"某省调查乡村交通状况，得到的统计表中列出了任意两村庄间的距离。省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可），并要求铺设的公路总长度为最小。请计算最小的公路总长度。<br>", input:"测试输入包含若干测试用例。每个测试用例的第1行给出村庄数目N ( &lt; 100 )；随后的N(N-1)/2行对应村庄间的距离，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间的距离。为简单起见，村庄从1到N编号。<br>当N为0时，输入结束，该用例不被处理。<br>", output:"对每个测试用例，在1行里输出最小的公路总长度。<br>", sample_in:"3\n1 2 1\n1 3 2\n2 3 4\n4\n1 2 1\n1 3 4\n1 4 1\n2 3 3\n2 4 2\n3 4 5\n0", sample_out:"3\n5\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nHuge input, scanf is recommended.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4983, vtotal_submit:22168, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2006年", author:"", tag:["TEST"]}
{pid:1234, vid:1234, oj:"hdu", title:"开门人和关门人", desc:"每天第一个到机房的人要把门打开，最后一个离开的人要把门关好。现有一堆杂乱的机房签 <br>到、签离记录，请根据记录找出当天开门和关门的人。 <br>", input:"测试输入的第一行给出记录的总天数N ( &gt; 0 )。下面列出了N天的记录。 <br>每天的记录在第一行给出记录的条目数M ( &gt; 0 )，下面是M行，每行的格式为 <br><br>证件号码 签到时间 签离时间 <br><br>其中时间按“小时:分钟:秒钟”（各占2位）给出，证件号码是长度不超过15的字符串。<br>", output:"对每一天的记录输出1行，即当天开门和关门人的证件号码，中间用1空格分隔。 <br>注意：在裁判的标准测试输入中，所有记录保证完整，每个人的签到时间在签离时间之前， <br>且没有多人同时签到或者签离的情况。 <br>", sample_in:"3\n1\nME3021112225321 00:00:00 23:59:59\n2\nEE301218 08:05:35 20:56:35\nMA301134 12:35:45 21:40:42\n3\nCS301111 15:30:28 17:00:10\nSC3021234 08:00:00 11:25:25\nCS301133 21:45:00 21:58:40", sample_out:"ME3021112225321 ME3021112225321\nEE301218 MA301134\nSC3021234 CS301133", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3938, vtotal_submit:9971, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2005年", author:"", tag:["TEST"]}
{pid:1235, vid:1235, oj:"hdu", title:"统计同成绩学生人数", desc:"读入N名学生的成绩，将获得某一给定分数的学生人数输出。<br>", input:"测试输入包含若干测试用例，每个测试用例的格式为<br><br><br>  第1行：N<br>  第2行：N名学生的成绩，相邻两数字用一个空格间隔。<br>  第3行：给定分数<br><br>当读到N=0时输入结束。其中N不超过1000，成绩分数为（包含）0到100之间的一个整数。<br>", output:"对每个测试用例，将获得给定分数的学生人数输出。<br>", sample_in:"3\n80 60 90\n60\n2\n85 66\n0\n5\n60 75 90 55 75\n75\n0", sample_out:"1\n0\n2\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nHuge input, scanf is recommended.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:6020, vtotal_submit:12665, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2006年", author:"", tag:["TEST"]}
{pid:1236, vid:1236, oj:"hdu", title:"排名", desc:"今天的上机考试虽然有实时的Ranklist，但上面的排名只是根据完成的题数排序，没有考虑 <br>每题的分值，所以并不是最后的排名。给定录取分数线，请你写程序找出最后通过分数线的 <br>考生，并将他们的成绩按降序打印。 <br>", input:"测试输入包含若干场考试的信息。每场考试信息的第1行给出考生人数N ( 0 &lt; N <br>&lt; 1000 )、考题数M ( 0 &lt; M &lt; = 10 )、分数线（正整数）G；第2行排序给出第1题至第M题的正整数分值；以下N行，每行给出一 <br>名考生的准考证号（长度不超过20的字符串）、该生解决的题目总数m、以及这m道题的题号 <br>（题目号由1到M）。 <br>当读入的考生人数为0时，输入结束，该场考试不予处理。 <br>", output:"对每场考试，首先在第1行输出不低于分数线的考生人数n，随后n行按分数从高 <br>到低输出上线考生的考号与分数，其间用1空格分隔。若有多名考生分数相同，则按他们考 <br>号的升序输出。 <br>", sample_in:"4 5 25\n10 10 12 13 15\nCS004 3 5 1 3\nCS003 5 2 4 1 3 5\nCS002 2 1 2\nCS001 3 2 3 5\n1 2 40\n10 30\nCS001 1 2\n2 3 20\n10 10 10\nCS000000000000000001 0\nCS000000000000000002 2 1 2\n0", sample_out:"3\nCS003 60\nCS001 37\nCS004 37\n0\n1\nCS000000000000000002 20\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nHuge input, scanf is recommended.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3589, vtotal_submit:14089, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2005年", author:"", tag:["TEST"]}
{pid:1237, vid:1237, oj:"hdu", title:"简单计算器", desc:"读入一个只包含 +, -, *, / 的非负整数计算表达式，计算该表达式的值。<br>", input:"测试输入包含若干测试用例，每个测试用例占一行，每行不超过200个字符，整数和运算符之间用一个空格分隔。没有非法表达式。当一行中只有0时输入结束，相应的结果不要输出。<br>", output:"对每个测试用例输出1行，即该表达式的值，精确到小数点后2位。<br>", sample_in:"1 + 2\n4 + 2 * 5 - 7 / 11\n0", sample_out:"3.00\n13.36", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2414, vtotal_submit:11470, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2006年", author:"", tag:["TEST"]}
{pid:1238, vid:1238, oj:"hdu", title:"Substrings", desc:"You are given a number of case-sensitive strings of alphabetic characters, find the largest string X, such that either X, or its inverse can be found as a substring of any of the given strings.<br>", input:"The first line of the input file contains a single integer t (1 &lt;= t &lt;= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains a single integer n (1 &lt;= n &lt;= 100), the number of given strings, followed by n lines, each representing one string of minimum length 1 and maximum length 100. There is no extra white space before and after a string. <br>", output:"There should be one line per test case containing the length of the largest string found.<br>", sample_in:"2\n3\nABCD\nBCDFF\nBRCD\n2\nrose\norchid", sample_out:"2\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1902, vtotal_submit:6626, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Asia 2002, Tehran (Iran), Preliminary", tag:["TEST"]}
{pid:1239, vid:1239, oj:"hdu", title:"Calling Extraterrestrial Intelligence Again", desc:"A message from humans to extraterrestrial intelligence was sent through the Arecibo radio telescope in Puerto Rico on the afternoon of Saturday November 16, 1974. The message consisted of 1679 bits and was meant to be translated to a rectangular picture with 23 * 73 pixels. Since both 23 and 73 are prime numbers, 23 * 73 is the unique possible size of the translated rectangular picture each edge of which is longer than 1 pixel. Of course, there was no guarantee that the receivers would try to translate the message to a rectangular picture. Even if they would, they might put the pixels into the rectangle incorrectly. The senders of the Arecibo message were optimistic. <br>We are planning a similar project. Your task in the project is to find the most suitable width and height of the translated rectangular picture. The term &quot;most suitable&quot; is defined as follows. An integer m greater than 4 is given. A positive fraction a / b less than or equal to 1 is also given. The area of the picture should not be greater than m. Both of the width and the height of the translated picture should be prime numbers. The ratio of the width to the height should not be less than a / b nor greater than 1. You should maximize the area of the picture under these constraints.<br><br>In other words, you will receive an integer m and a fraction a / b. It holds that m &gt; 4 and 0 &lt; a / b &lt; 1. You should find the pair of prime numbers p, q such that pq &lt;= m and a / b &lt;= p / q &lt;= 1, and furthermore, the product pq takes the maximum value among such pairs of two prime numbers. You should report p and q as the &quot;most suitable&quot; width and height of the translated picture.<br>", input:"The input is a sequence of at most 2000 triplets of positive integers, delimited by a space character in between. Each line contains a single triplet. The sequence is followed by a triplet of zeros, 0 0 0, which indicated the end of the input and should not be treated as data to be processed.<br><br>The integers of each input triplet are the integer m, the numerator a, and the denominator b described above, in this order. You may assume 4 &lt; m &lt;= 100000 and 1 &lt;= a &lt;= b &lt;= 1000.<br>", output:"The output is a sequence of pairs of positive integers. The i-th output pair corresponds to the i-th input triplet. The integers of each output pair are the width p and the height q described above, in this order.<br><br>Each output line contains a single pair. A space character is put between the integers as a delimiter. No other characters should appear in the output.<br>", sample_in:"5 1 2\n99999 999 999\n1680 5 16\n1970 1 1\n2002 4 11\n0 0 0", sample_out:"2 2\n313 313\n23 73\n43 43\n37 53", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1524, vtotal_submit:4154, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2002, Kanazawa (Japan)", author:"", tag:["TEST"]}
{pid:1240, vid:1240, oj:"hdu", title:"Asteroids!", desc:"You\'re in space.<br>You want to get home.<br>There are asteroids.<br>You don\'t want to hit them.<br>", input:"Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.<br><br>A single data set has 5 components:<br><br>Start line - A single line, &quot;START N&quot;, where 1 &lt;= N &lt;= 10.<br><br>Slice list - A series of N slices. Each slice is an N x N matrix representing a horizontal slice through the asteroid field. Each position in the matrix will be one of two values:<br><br>\'O\' - (the letter &quot;oh&quot;) Empty space<br><br>\'X\' - (upper-case) Asteroid present<br><br>Starting Position - A single line, &quot;A B C&quot;, denoting the &lt;A,B,C&gt; coordinates of your craft\'s starting position. The coordinate values will be integers separated by individual spaces.<br><br>Target Position - A single line, &quot;D E F&quot;, denoting the &lt;D,E,F&gt; coordinates of your target\'s position. The coordinate values will be integers separated by individual spaces.<br><br>End line - A single line, &quot;END&quot;<br><br>The origin of the coordinate system is &lt;0,0,0&gt;. Therefore, each component of each coordinate vector will be an integer between 0 and N-1, inclusive.<br><br>The first coordinate in a set indicates the column. Left column = 0.<br><br>The second coordinate in a set indicates the row. Top row = 0.<br><br>The third coordinate in a set indicates the slice. First slice = 0.<br><br>Both the Starting Position and the Target Position will be in empty space.<br><br>", output:"For each data set, there will be exactly one output set, and there will be no blank lines separating output sets.<br><br>A single output set consists of a single line. If a route exists, the line will be in the format &quot;X Y&quot;, where X is the same as N from the corresponding input data set and Y is the least number of moves necessary to get your ship from the starting position to the target position. If there is no route from the starting position to the target position, the line will be &quot;NO ROUTE&quot; instead.<br><br>A move can only be in one of the six basic directions: up, down, left, right, forward, back. Phrased more precisely, a move will either increment or decrement a single component of your current position vector by 1.<br><br>", sample_in:"START 1\nO\n0 0 0\n0 0 0\nEND\nSTART 3\nXXX\nXXX\nXXX\nOOO\nOOO\nOOO\nXXX\nXXX\nXXX\n0 0 1\n2 2 1\nEND\nSTART 5\nOOOOO\nOOOOO\nOOOOO\nOOOOO\nOOOOO\nOOOOO\nOOOOO\nOOOOO\nOOOOO\nOOOOO\nXXXXX\nXXXXX\nXXXXX\nXXXXX\nXXXXX\nOOOOO\nOOOOO\nOOOOO\nOOOOO\nOOOOO\nOOOOO\nOOOOO\nOOOOO\nOOOOO\nOOOOO\n0 0 0\n4 4 4\nEND", sample_out:"1 0\n3 4\nNO ROUTE", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1327, vtotal_submit:3048, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Central USA 2001", author:"", tag:["TEST"]}
{pid:1241, vid:1241, oj:"hdu", title:"Oil Deposits", desc:"The GeoSurvComp geologic survey company is responsible for detecting underground oil deposits. GeoSurvComp works with one large rectangular region of land at a time, and creates a grid that divides the land into numerous square plots. It then analyzes each plot separately, using sensing equipment to determine whether or not the plot contains oil. A plot containing oil is called a pocket. If two pockets are adjacent, then they are part of the same oil deposit. Oil deposits can be quite large and may contain numerous pockets. Your job is to determine how many different oil deposits are contained in a grid. <br>", input:"The input file contains one or more grids. Each grid begins with a line containing m and n, the number of rows and columns in the grid, separated by a single space. If m = 0 it signals the end of the input; otherwise 1 &lt;= m &lt;= 100 and 1 &lt;= n &lt;= 100. Following this are m lines of n characters each (not counting the end-of-line characters). Each character corresponds to one plot, and is either `*\', representing the absence of oil, or `@\', representing an oil pocket.<br>", output:"For each grid, output the number of distinct oil deposits. Two different pockets are part of the same oil deposit if they are adjacent horizontally, vertically, or diagonally. An oil deposit will not contain more than 100 pockets.<br>", sample_in:"1 1\n*\n3 5\n*@*@*\n**@**\n*@*@*\n1 8\n@@****@*\n5 5 \n****@\n*@@*@\n*@**@\n@@@*@\n@@**@\n0 0 ", sample_out:"0\n1\n2\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3267, vtotal_submit:9563, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 1997", author:"", tag:["TEST"]}
{pid:1242, vid:1242, oj:"hdu", title:"Rescue", desc:"Angel was caught by the MOLIGPY! He was put in prison by Moligpy. The prison is described as a N * M (N, M &lt;= 200) matrix. There are WALLs, ROADs, and GUARDs in the prison.<br><br>Angel\'s friends want to save Angel. Their task is: approach Angel. We assume that &quot;approach Angel&quot; is to get to the position where Angel stays. When there\'s a guard in the grid, we must kill him (or her?) to move into the grid. We assume that we moving up, down, right, left takes us 1 unit time, and killing a guard takes 1 unit time, too. And we are strong enough to kill all the guards.<br><br>You have to calculate the minimal time to approach Angel. (We can move only UP, DOWN, LEFT and RIGHT, to the neighbor grid within bound, of course.)<br>", input:"First line contains two integers stand for N and M.<br><br>Then N lines follows, every line has M characters. &quot;.&quot; stands for road, &quot;a&quot; stands for Angel, and &quot;r&quot; stands for each of Angel\'s friend. <br><br>Process to the end of the file.<br>", output:"For each test case, your program should output a single integer, standing for the minimal time needed. If such a number does no exist, you should output a line containing &quot;Poor ANGEL has to stay in the prison all his life.&quot; <br>", sample_in:"7 8\n#.#####.\n#.a#..r.\n#..#x...\n..#..#.#\n#...##..\n.#......\n........", sample_out:"13", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2587, vtotal_submit:13479, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ZOJ Monthly, October 2003", author:"", tag:["TEST"]}
{pid:1243, vid:1243, oj:"hdu", title:"反恐训练营", desc:"当今国际反恐形势很严峻，特别是美国“9.11事件”以后，国际恐怖势力更是有恃无恐，制造了多起骇人听闻的恐怖事件。基于此，各国都十分担心恐怖势力会对本国社会造成的不稳定，于是纷纷在本国的军队、警察队伍中开展了反恐训练。作为反恐立场坚定的大国，中国也十分重视在人民解放军、武装警察部队、人民警察队伍中反恐训练，还专门成立了反恐特警队。<br><br>炜炜是反恐特警队的一名新队员，现在正在接受培训。这几天刚好是射击训练第二阶段——实弹应变训练的日子，此前的第一阶段里，炜炜经过努力，已经将自己训练成为一个百发百中的神抢手了！这次，他将背着国产最新型12.7mm重型狙击枪进行训练比赛。<br><br>这次训练比赛的规则是这样的：<br><br>1、每个队员从出发点开始，沿着一条唯一的笔直道路跑直到终点，途中不允许往回跑，否则将被取消比赛资格。<br>2、出发前，每个队员的枪膛内都被装了顺序一样的、用小写英文字母标明类型的子弹序列，每位队员被告知这一序列的信息；同时，每位队员也被告知恐怖分子即将出现的序列和类型（同样用小写英文字母标明类型）。<br>3、在跑动的过程中，若发现“恐怖分子”，特警队员可以选择用枪击毙他，来得到写在“恐怖分子”胸前的得分，但是前提是他使用的子弹类型必须和“恐怖分子”类型相同，否则，即使击毙了“恐怖分子”，也得不到分数；当然选择不击毙他也是可以的，这样他不会从那个“恐怖分子”身上得到分数。<br>4、允许特警队员放空枪，这样可以消耗掉型号不对的子弹而不至于杀死“恐怖分子”（当然每个特警队员都不会愚蠢到不装消音装置就放空枪，以至于吓跑“恐怖分子”），等待枪口出现正确型号的子弹击毙他得分。<br><br>这里，我们假定：<br>1、对于每个队员，途中出现恐怖分子的地点、时间、类型也是完全一样的。<br>2、每颗子弹都是质量合格的，都可以发挥杀伤效力<br>3、由于队员各个都是神枪手，一旦他选择了正确的子弹，向目标射击，目标100%被爆头<br>4、每个队员的记忆力超强，能记住所有子弹序列信息和恐怖分子序列信息。<br>5、每个队员体力足够好，能跑完全程，并做他想要做的<br>6、“恐怖分子”是不动的，小范围内不存在多于一个的恐怖分子；<br><br>炜炜需要你的帮助，告诉他如何做，才能得到最高的分数。现在如果告诉你出发时枪膛内子弹的序号和型号、恐怖分子出现的序号和类型，你能告诉炜炜他最多能得到多少分数吗？<br>", input:"输入数据的第一行有一个整数N表示子弹和恐怖分子的类型数。随后的一行是各种恐怖分子类型的一行字母，两个字母之间没有任何字符。接下来的一行是击毙上一行对应位置恐怖分子类型的得分数，每个分数之间恰有一个空格。第三第四行分别表示开始时枪膛内子弹的序列（左边的先打出）和恐怖分子出现的序列（左边的先出现），字母之间都没有任何字符。<br>每个测试数据之间没有空格和空行。你的程序必须通过全部测试数据，才能被判为AC。<br>", output:"对于每一个测试数据，输出炜炜最多能得到的分数。<br>", sample_in:"3\nabc\n1 1 1\nabc\nccc\n3\nabc\n1 1 1\nccc\naba", sample_out:"1\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:355, vtotal_submit:2777, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"JGShining（极光炫影）", tag:["TEST"]}
{pid:1244, vid:1244, oj:"hdu", title:"Max Sum Plus Plus Plus", desc:"给定一个由n个正整数组成的整数序列<br><br>a1 a2 a3 ... an<br><br>求按先后次序在其中取m段长度分别为l1、l2、l3...lm的不交叠的连续整数的和的最大值。<br>", input:"第一行是一个整数n(0 ≤ n ≤ 1000)，n = 0表示输入结束<br>第二行的第一个数是m(1 ≤ m ≤ 20)，<br>第二行接下来有m个整数l1，l2...lm。<br>第三行是n个整数a1, a2, a2 ... an.<br>", output:"输出m段整数和的最大值。<br>", sample_in:"3\n2 1 1\n1 2 3\n4\n2 1 2\n1 2 3 5\n0", sample_out:"5\n10", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:383, vtotal_submit:1144, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"JGShining（极光炫影）", tag:["TEST"]}
{pid:1245, vid:1245, oj:"hdu", title:"Saving James Bond", desc:"This time let us consider the situation in the movie &quot;Live and Let Die&quot; in which James Bond, the world\'s most famous spy, was captured by a group of drug dealers. He was sent to a small piece of land at the center of a lake filled with crocodiles. There he performed the most daring action to escape -- he jumped onto the head of the nearest crocodile! Before the animal realized what was happening, James jumped again onto the next big head... Finally he reached the bank before the last crocodile could bite him (actually the stunt man was caught by the big mouth and barely escaped with his extra thick boot).<br>Assume that the lake is a 100×100 square one. Assume that the center of the lake is at (0,0) and the northeast corner at (50,50). The central island is a disk centered at (0,0) with the diameter of 15. A number of crocodiles are in the lake at various positions. Given the coordinates of each crocodile and the distance that James could jump, you must tell him whether he could escape.If he could,tell him the shortest length he has to jump and the min-steps he has to jump for shortest length.<br>", input:"The input consists of several test cases. Each case starts with a line containing n &lt;= 100, the number of crocodiles, and d &gt; 0, the distance that James could jump. Then one line follows for each crocodile, containing the (x, y) location of the crocodile. Note that x and y are both integers, and no two crocodiles are staying at the same position. <br>", output:"For each test case, if James can escape, output in one line the shortest length he has to jump and the min-steps he has to jump for shortest length. If it is impossible for James to escape that way, simply ouput &quot;can\'t be saved&quot;.<br>", sample_in:"4 10\n17 0\n27 0\n37 0\n45 0\n1 10\n20 30", sample_out:"42.50 5\ncan\'t be saved", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:166, vtotal_submit:1685, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"", author:"weigang Lee", tag:["TEST"]}
{pid:1246, vid:1246, oj:"hdu", title:"自共轭Ferrers图", desc:"Ferrers图是一个自上而下的n层格子，且上层格子数不少于下层格子数。<br><img src=data/images/C11-1004-1.gif><br>如上图所示,图中的虚线称为Ferrers图的虚轴。若将图一绕虚轴旋转180°，即将第一行与第一列对调，将第二行与第二列对调，……，这样所得到的图仍为Ferrers图，如下图所示。<br><img src=data/images/C11-1004-2.gif><br>这两个图称为一对共轭Ferrers图。有一些Ferrers图，沿虚轴转换后的Ferrers图仍为它本身，也就是说这个Ferrers图关于虚轴对称，那么这个Ferrers图称为自共轭Ferrers图。下图便是一个自共轭Ferrers图。<br><img src=data/images/C11-1004-3.gif><br>现在我们的目标是寻找的是大小为n的自共轭Ferrers图的总数。所谓大小为n的自共轭Ferrers图是指由n个方格组成的自共轭Ferrers图。<br>", input:"输入数据有多行，每行为一个正整数n(1&lt;=n&lt;=300)。表示自共轭Ferrers图的大小为n。<br>", output:"对应输入的每一个n，输出一行大小为n的自共轭Ferrers图的总数。<br>", sample_in:"1\n2\n3", sample_out:"1\n0\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:276, vtotal_submit:664, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"weigang Lee", tag:["TEST"]}
{pid:1247, vid:1247, oj:"hdu", title:"Hat’s Words", desc:"A hat’s word is a word in the dictionary that is the concatenation of exactly two other words in the dictionary.<br>You are to find all the hat’s words in a dictionary.<br>", input:"Standard input consists of a number of lowercase words, one per line, in alphabetical order. There will be no more than 50,000 words.<br>Only one case.<br>", output:"Your output should contain all the hat’s words, one per line, in alphabetical order.", sample_in:"a\nahat\nhat\nhatword\nhziee\nword", sample_out:"ahat\nhatword", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1251, vtotal_submit:6426, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"戴帽子的", tag:["TEST"]}
{pid:1248, vid:1248, oj:"hdu", title:"寒冰王座", desc:"不死族的巫妖王发工资拉,死亡骑士拿到一张N元的钞票(记住,只有一张钞票),为了防止自己在战斗中频繁的死掉,他决定给自己买一些道具,于是他来到了地精商店前.<br><br>死亡骑士:&quot;我要买道具!&quot;<br><br>地精商人:&quot;我们这里有三种道具,血瓶150块一个,魔法药200块一个,无敌药水350块一个.&quot;<br><br>死亡骑士:&quot;好的,给我一个血瓶.&quot;<br><br>说完他掏出那张N元的大钞递给地精商人.<br><br>地精商人:&quot;我忘了提醒你了,我们这里没有找客人钱的习惯的,多的钱我们都当小费收了的,嘿嘿.&quot;<br><br>死亡骑士:&quot;......&quot;<br><br>死亡骑士想,与其把钱当小费送个他还不如自己多买一点道具,反正以后都要买的,早点买了放在家里也好,但是要尽量少让他赚小费.<br><br>现在死亡骑士希望你能帮他计算一下,最少他要给地精商人多少小费.", input:"输入数据的第一行是一个整数T(1&lt;=T&lt;=100),代表测试数据的数量.然后是T行测试数据,每个测试数据只包含一个正整数N(1&lt;=N&lt;=10000),N代表死亡骑士手中钞票的面值.<br><br>注意:地精商店只有题中描述的三种道具.<br>", output:"对于每组测试数据,请你输出死亡骑士最少要浪费多少钱给地精商人作为小费.<br>", sample_in:"2\n900\n250", sample_out:"0\n50", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3511, vtotal_submit:9480, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1249, vid:1249, oj:"hdu", title:"三角形", desc:"用N个三角形最多可以把平面分成几个区域?<br>", input:"输入数据的第一行是一个正整数T(1&lt;=T&lt;=10000),表示测试数据的数量.然后是T组测试数据,每组测试数据只包含一个正整数N(1&lt;=N&lt;=10000).", output:"对于每组测试数据,请输出题目中要求的结果.<br>", sample_in:"2\n1\n2", sample_out:"2\n8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2407, vtotal_submit:4191, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1250, vid:1250, oj:"hdu", title:"Hat\'s Fibonacci", desc:"A Fibonacci sequence is calculated by adding the previous two members the sequence, with the first two members being both 1.<br>F(1) = 1, F(2) = 1, F(3) = 1,F(4) = 1,  F(n&gt;4) = F(n - 1) + F(n-2) + F(n-3) + F(n-4)<br>Your task is to take a number as input, and print that Fibonacci number.<br>", input:"Each line will contain an integers. Process to end of file.<br>", output:"For each case, output the result in a line.", sample_in:"100", sample_out:"4203968145672990846840663646\n\n\nNote:\nNo generated Fibonacci number in excess of 2005 digits will be in the test data, ie. F(20) = 66526 has 5 digits.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1408, vtotal_submit:6337, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"戴帽子的", tag:["TEST"]}
{pid:1251, vid:1251, oj:"hdu", title:"统计难题", desc:"Ignatius最近遇到一个难题,老师交给他很多单词(只有小写字母组成,不会有重复的单词出现),现在老师要他统计出以某个字符串为前缀的单词数量(单词本身也是自己的前缀).<br>", input:"输入数据的第一部分是一张单词表,每行一个单词,单词的长度不超过10,它们代表的是老师交给Ignatius统计的单词,一个空行代表单词表的结束.第二部分是一连串的提问,每行一个提问,每个提问都是一个字符串.<br><br>注意:本题只有一组测试数据,处理到文件结束.<br>", output:"对于每个提问,给出以该字符串为前缀的单词的数量.<br>", sample_in:"banana\nband\nbee\nabsolute\nacm\n\nba\nb\nband\nabc", sample_out:"2\n3\n1\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3354, vtotal_submit:15528, special_status:0, time_limit:2000, mem_limit:65535, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1252, vid:1252, oj:"hdu", title:"Hike on a Graph", desc:"&quot;Hike on a Graph&quot; is a game that is played on a board on which an undirected graph is drawn. The graph is complete and has all loops, i.e. for any two locations there is exactly one arrow between them. The arrows are coloured. There are three players, and each of them has a piece. At the beginning of the game, the three pieces are in fixed locations on the graph. In turn, the players may do a move. A move consists of moving one\'s own piece along an arrow to a new location on the board. The following constraint is imposed on this: the piece may only be moved along arrows of the same colour as the arrow between the two opponents\' pieces. <br><br>In the sixties (&quot;make love not war&quot;) a one-person variant of the game emerged. In this variant one person moves all the three pieces, not necessarily one after the other, but of course only one at a time. Goal of this game is to get all pieces onto the same location, using as few moves as possible. Find out the smallest number of moves that is necessary to get all three pieces onto the same location, for a given board layout and starting positions.<br><br><center><img src=data/images/c15-1002-1.gif></center><br>", input:"The input file contains several test cases. Each test case starts with the number n. Input is terminated by n=0. Otherwise, 1&lt;=n&lt;=50. Then follow three integers p1, p2, p3 with 1&lt;=pi&lt;=n denoting the starting locations of the game pieces. The colours of the arrows are given next as a m×m matrix of whitespace-separated lower-case letters. The element mij denotes the colour of the arrow between the locations i and j. Since the graph is undirected, you can assume the matrix to be symmetrical. <br>", output:"For each test case output on a single line the minimum number of moves required to get all three pieces onto the same location, or the word &quot;impossible&quot; if that is not possible for the given board and starting locations.<br>", sample_in:"3 1 2 3\nr b r\nb b b\nr b r\n2 1 2 2\ny g\ng y\n0", sample_out:"2\nimpossible", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:125, vtotal_submit:348, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 2000", author:"", tag:["TEST"]}
{pid:1253, vid:1253, oj:"hdu", title:"胜利大逃亡", desc:"Ignatius被魔王抓走了,有一天魔王出差去了,这可是Ignatius逃亡的好机会.<br><br>魔王住在一个城堡里,城堡是一个A*B*C的立方体,可以被表示成A个B*C的矩阵,刚开始Ignatius被关在(0,0,0)的位置,离开城堡的门在(A-1,B-1,C-1)的位置,现在知道魔王将在T分钟后回到城堡,Ignatius每分钟能从一个坐标走到相邻的六个坐标中的其中一个.现在给你城堡的地图,请你计算出Ignatius能否在魔王回来前离开城堡(只要走到出口就算离开城堡,如果走到出口的时候魔王刚好回来也算逃亡成功),如果可以请输出需要多少分钟才能离开,如果不能则输出-1.<br><br><center><img src=data/images/c15-1003-1.jpg></center><br>", input:"输入数据的第一行是一个正整数K,表明测试数据的数量.每组测试数据的第一行是四个正整数A,B,C和T(1&lt;=A,B,C&lt;=50,1&lt;=T&lt;=1000),它们分别代表城堡的大小和魔王回来的时间.然后是A块输入数据(先是第0块,然后是第1块,第2块......),每块输入数据有B行,每行有C个正整数,代表迷宫的布局,其中0代表路,1代表墙.(如果对输入描述不清楚,可以参考Sample Input中的迷宫描述,它表示的就是上图中的迷宫)<br><br>特别注意:本题的测试数据非常大,请使用scanf输入,我不能保证使用cin能不超时.在本OJ上请使用Visual C++提交.<br>", output:"对于每组测试数据,如果Ignatius能够在魔王回来前离开城堡,那么请输出他最少需要多少分钟,否则输出-1.<br>", sample_in:"1\n3 3 4 20\n0 1 1 1\n0 0 1 1\n0 1 1 1\n1 1 1 1\n1 0 0 1\n0 1 1 1\n0 0 0 0\n0 1 1 0\n0 1 1 0", sample_out:"11", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2314, vtotal_submit:23308, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1254, vid:1254, oj:"hdu", title:"推箱子", desc:"推箱子是一个很经典的游戏.今天我们来玩一个简单版本.在一个M*N的房间里有一个箱子和一个搬运工,搬运工的工作就是把箱子推到指定的位置,注意,搬运工只能推箱子而不能拉箱子,因此如果箱子被推到一个角上(如图2)那么箱子就不能再被移动了,如果箱子被推到一面墙上,那么箱子只能沿着墙移动.<br><br>现在给定房间的结构,箱子的位置,搬运工的位置和箱子要被推去的位置,请你计算出搬运工至少要推动箱子多少格.<br><br><center><img src=data/images/c15-1004-1.jpg></center><br>", input:"输入数据的第一行是一个整数T(1&lt;=T&lt;=20),代表测试数据的数量.然后是T组测试数据,每组测试数据的第一行是两个正整数M,N(2&lt;=M,N&lt;=7),代表房间的大小,然后是一个M行N列的矩阵,代表房间的布局,其中0代表空的地板,1代表墙,2代表箱子的起始位置,3代表箱子要被推去的位置,4代表搬运工的起始位置.<br>", output:"对于每组测试数据,输出搬运工最少需要推动箱子多少格才能帮箱子推到指定位置,如果不能推到指定位置则输出-1.<br>", sample_in:"1\n5 5\n0 3 0 0 0\n1 0 1 4 0\n0 0 1 0 0\n1 0 2 0 0\n0 0 0 0 0", sample_out:"4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:765, vtotal_submit:4502, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L &amp; weigang Lee", tag:["TEST"]}
{pid:1255, vid:1255, oj:"hdu", title:"覆盖的面积", desc:"给定平面上若干矩形,求出被这些矩形覆盖过至少两次的区域的面积.<br><br><center><img src=data/images/c15-1005-1.jpg></center><br>", input:"输入数据的第一行是一个正整数T(1&lt;=T&lt;=100),代表测试数据的数量.每个测试数据的第一行是一个正整数N(1&lt;=N&lt;=1000),代表矩形的数量,然后是N行数据,每一行包含四个浮点数,代表平面上的一个矩形的左上角坐标和右下角坐标,矩形的上下边和X轴平行,左右边和Y轴平行.坐标的范围从0到100000.<br><br>注意:本题的输入数据较多,推荐使用scanf读入数据.<br>", output:"对于每组测试数据,请计算出被这些矩形覆盖过至少两次的区域的面积.结果保留两位小数.<br>", sample_in:"2\n5\n1 1 4 2\n1 3 3 7\n2 1.5 5 4.5\n3.5 1.25 7.5 4\n6 3 10 7\n3\n0 0 1 1\n1 0 2 1\n2 0 3 1", sample_out:"7.63\n0.00", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:742, vtotal_submit:3190, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L &amp; weigang Lee", tag:["TEST"]}
{pid:1256, vid:1256, oj:"hdu", title:"画8", desc:"谁画8画的好,画的快,今后就发的快,学业发达,事业发达,祝大家发,发,发.<br>", input:"输入的第一行为一个整数N,表示后面有N组数据.<br>每组数据中有一个字符和一个整数,字符表示画笔,整数(&gt;=5)表示高度.<br>", output:"画横线总是一个字符粗,竖线随着总高度每增长6而增加1个字符宽.当总高度从5增加到6时,其竖线宽度从1增长到2.下圈高度不小于上圈高度,但应尽量接近上圈高度,且下圈的内径呈正方形.<br>每画一个&quot;8&quot;应空一行,但最前和最后都无空行.<br>", sample_in:"2\nA 7\nB 8", sample_out:"  AA\nAA  AA\nAA  AA\n  AA\nAA  AA\nAA  AA\n  AA\n\n  BBB\nBB   BB\nBB   BB\n  BBB\nBB   BB\nBB   BB\nBB   BB\n  BBB", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1323, vtotal_submit:3653, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙江工业大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1257, vid:1257, oj:"hdu", title:"最少拦截系统", desc:"某国为了防御敌国的导弹袭击,发展出一种导弹拦截系统.但是这种导弹拦截系统有一个缺陷:虽然它的第一发炮弹能够到达任意的高度,但是以后每一发炮弹都不能超过前一发的高度.某天,雷达捕捉到敌国的导弹来袭.由于该系统还在试用阶段,所以只有一套系统,因此有可能不能拦截所有的导弹.<br>怎么办呢?多搞几套系统呗!你说说倒蛮容易,成本呢?成本是个大问题啊.所以俺就到这里来求救了,请帮助计算一下最少需要多少套拦截系统.<br>", input:"输入若干组数据.每组数据包括:导弹总个数(正整数),导弹依此飞来的高度(雷达给出的高度数据是不大于30000的正整数,用空格分隔)<br>", output:"对应每组数据输出拦截所有导弹最少要配备多少套这种导弹拦截系统.<br>", sample_in:"8 389 207 155 300 299 170 158 65", sample_out:"2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3742, vtotal_submit:14995, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙江工业大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1258, vid:1258, oj:"hdu", title:"Sum It Up", desc:"Given a specified total t and a list of n integers, find all distinct sums using numbers from the list that add up to t. For example, if t=4, n=6, and the list is [4,3,2,2,1,1], then there are four different sums that equal 4: 4,3+1,2+2, and 2+1+1.(A number can be used within a sum as many times as it appears in the list, and a single number counts as a sum.) Your job is to solve this problem in general.<br>", input:"The input will contain one or more test cases, one per line. Each test case contains t, the total, followed by n, the number of integers in the list, followed by n integers x1,...,xn. If n=0 it signals the end of the input; otherwise, t will be a positive integer less than 1000, n will be an integer between 1 and 12(inclusive), and x1,...,xn will be positive integers less than 100. All numbers will be separated by exactly one space. The numbers in each list appear in nonincreasing order, and there may be repetitions.<br>", output:"For each test case, first output a line containing \'Sums of\', the total, and a colon. Then output each sum, one per line; if there are no sums, output the line \'NONE\'. The numbers within each sum must appear in nonincreasing order. A number may be repeated in the sum as many times as it was repeated in the original list. The sums themselves must be sorted in decreasing order based on the numbers appearing in the sum. In other words, the sums must be sorted by their first number; sums with the same first number must be sorted by their second number; sums with the same first two numbers must be sorted by their third number; and so on. Within each test case, all sums must be distince; the same sum connot appear twice.<br>", sample_in:"4 6 4 3 2 2 1 1\n5 3 2 1 1\n400 12 50 50 50 50 50 50 25 25 25 25 25 25\n0 0", sample_out:"Sums of 4:\n4\n3+1\n2+2\n2+1+1\nSums of 5:\nNONE\nSums of 400:\n50+50+50+50+50+50+25+25+25+25\n50+50+50+50+50+25+25+25+25+25+25", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1118, vtotal_submit:3481, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙江工业大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1259, vid:1259, oj:"hdu", title:"ZJUTACM", desc:"欢迎参加浙江工业大学第四届程序设计竞赛!<br>但是,请稍等!裁判Joe说了,必须正确回答他的问题,才可以看到PIPI的气球MM,KUKU的气球GG.<br>Joe手上有7张卡片,每张卡片上有一个大写字母,分别是Z,J,U,T,A,C,M.现在他开始表演魔术,每次只交换其中的两张卡片.等表演结束后,请你指出含有字母J的那张卡片.<br>", input:"第一行正整数N(1&lt;=N&lt;=1000)表示其后有N组测试数据.<br>每组测试数据的第一行整数M(0&lt;=M&lt;=1000)表示M次交换操作;第二行有M对整数&lt;x,y&gt;表示交换自上而下,从1开始编号的第x和第y张卡片.开始的时候,自上而下7张卡片为ZJUTACM,即J卡片的位置是2.<br>", output:"对于每组测试数据,输出J卡片的位置.<br>", sample_in:"2\n2\n1 6 5 3\n1\n1 2", sample_out:"2\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1275, vtotal_submit:2602, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙江工业大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1260, vid:1260, oj:"hdu", title:"Tickets", desc:"Jesus, what a great movie! Thousands of people are rushing to the cinema. However, this is really a tuff time for Joe who sells the film tickets. He is wandering when could he go back home as early as possible.<br>A good approach, reducing the total time of tickets selling, is let adjacent people buy tickets together. As the restriction of the Ticket Seller Machine, Joe can sell a single ticket or two adjacent tickets at a time.<br>Since you are the great JESUS, you know exactly how much time needed for every person to buy a single ticket or two tickets for him/her. Could you so kind to tell poor Joe at what time could he go back home as early as possible? If so, I guess Joe would full of appreciation for your help.<br>", input:"There are N(1&lt;=N&lt;=10) different scenarios, each scenario consists of 3 lines:<br>1) An integer K(1&lt;=K&lt;=2000) representing the total number of people;<br>2) K integer numbers(0s&lt;=Si&lt;=25s) representing the time consumed to buy a ticket for each person;<br>3) (K-1) integer numbers(0s&lt;=Di&lt;=50s) representing the time needed for two adjacent people to buy two tickets together.<br>", output:"For every scenario, please tell Joe at what time could he go back home as early as possible. Every day Joe started his work at 08:00:00 am. The format of time is HH:MM:SS am|pm.<br>", sample_in:"2\n2\n20 25\n40\n1\n8", sample_out:"08:00:40 am\n08:00:08 am", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:366, vtotal_submit:861, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙江工业大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1261, vid:1261, oj:"hdu", title:"字串数", desc:"一个A和两个B一共可以组成三种字符串:&quot;ABB&quot;,&quot;BAB&quot;,&quot;BBA&quot;.<br>给定若干字母和它们相应的个数,计算一共可以组成多少个不同的字符串.<br>", input:"每组测试数据分两行,第一行为n(1&lt;=n&lt;=26),表示不同字母的个数,第二行为n个数A1,A2,...,An(1&lt;=Ai&lt;=12),表示每种字母的个数.测试数据以n=0为结束.<br>", output:"对于每一组测试数据,输出一个m,表示一共有多少种字符串.<br>", sample_in:"2\n1 2\n3\n2 2 2\n0", sample_out:"3\n90", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:504, vtotal_submit:2718, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙江工业大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1262, vid:1262, oj:"hdu", title:"寻找素数对", desc:"哥德巴赫猜想大家都知道一点吧.我们现在不是想证明这个结论,而是想在程序语言内部能够表示的数集中,任意取出一个偶数,来寻找两个素数,使得其和等于该偶数.<br>做好了这件实事,就能说明这个猜想是成立的.<br>由于可以有不同的素数对来表示同一个偶数,所以专门要求所寻找的素数对是两个值最相近的.<br>", input:"输入中是一些偶整数M(5&lt;M&lt;=10000).<br>", output:"对于每个偶数,输出两个彼此最接近的素数,其和等于该偶数.<br>", sample_in:"20 30 40", sample_out:"7 13\n13 17\n17 23", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2746, vtotal_submit:7133, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙江工业大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1263, vid:1263, oj:"hdu", title:"水果", desc:"夏天来了~~好开心啊,呵呵,好多好多水果~~<br>Joe经营着一个不大的水果店.他认为生存之道就是经营最受顾客欢迎的水果.现在他想要一份水果销售情况的明细表,这样Joe就可以很容易掌握所有水果的销售情况了.<br>", input:"第一行正整数N(0&lt;N&lt;=10)表示有N组测试数据.<br>每组测试数据的第一行是一个整数M(0&lt;M&lt;=100),表示工有M次成功的交易.其后有M行数据,每行表示一次交易,由水果名称(小写字母组成,长度不超过80),水果产地(小写字母组成,长度不超过80)和交易的水果数目(正整数,不超过100)组成.<br>", output:"对于每一组测试数据,请你输出一份排版格式正确(请分析样本输出)的水果销售情况明细表.这份明细表包括所有水果的产地,名称和销售数目的信息.水果先按产地分类,产地按字母顺序排列;同一产地的水果按照名称排序,名称按字母顺序排序.<br>两组测试数据之间有一个空行.最后一组测试数据之后没有空行.<br>", sample_in:"1\n5\napple shandong 3\npineapple guangdong 1\nsugarcane guangdong 1\npineapple guangdong 3\npineapple guangdong 1", sample_out:"guangdong\n   |----pineapple(5)\n   |----sugarcane(1)\nshandong\n   |----apple(3)", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:794, vtotal_submit:2945, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙江工业大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1264, vid:1264, oj:"hdu", title:"Counting Squares", desc:"Your input is a series of rectangles, one per line. Each rectangle is specified as two points(X,Y) that specify the opposite corners of a rectangle. All coordinates will be integers in the range 0 to 100. For example, the line<br>5 8 7 10<br>specifies the rectangle who\'s corners are(5,8),(7,8),(7,10),(5,10).<br>If drawn on graph paper, that rectangle would cover four squares. Your job is to count the number of unit(i.e.,1*1) squares that are covered by any one of the rectangles given as input. Any square covered  by more than one rectangle should only be counted once.<br>", input:"The input format is a series of lines, each containing 4 integers. Four -1\'s are used to separate problems, and four -2\'s are used to end the last problem. Otherwise, the numbers are the x-ycoordinates of two points that are opposite corners of a rectangle.<br>", output:"Your output should be the number of squares covered by each set of rectangles. Each number should be printed on a separate line.<br>", sample_in:"5 8 7 10\n6 9 7 8\n6 8 8 11\n-1 -1 -1 -1\n0 0 100 100\n50 75 12 90\n39 42 57 73\n-2 -2 -2 -2", sample_out:"8\n10000", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:430, vtotal_submit:1161, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙江工业大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1265, vid:1265, oj:"hdu", title:"Floating Point Presentation", desc:"Do you know IEEE\'s constact of single floating point data? If you are not sure, following is the contract:<br><br><center><img src=data/images/c16-1010-1.jpg></center><br><br>This problem is really simple for you: please convert the real data into the IEEE single floating point data presentation.<br>", input:"There are N(1&lt;=N&lt;=150) real data need to be converted. Real data can be negative, zero, and positive.<br>", output:"For each real data, print the IEEE single floating point data presentation in upper case hexadecimal letters in a single line.<br>", sample_in:"2\n23.85\n-23.85", sample_out:"41BECCCD\nC1BECCCD", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:162, vtotal_submit:395, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙江工业大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1266, vid:1266, oj:"hdu", title:"Reverse Number", desc:"Welcome to 2006\'4 computer college programming contest!<br><br>Specially, I give my best regards to all freshmen! You are the future of HDU ACM! And now, I must tell you that ACM problems are always not so easy, but, except this one... Ha-Ha!<br><br>Give you an integer; your task is to output its reverse number. Here, reverse number is defined as follows:<br>1. The reverse number of a positive integer ending without 0 is general reverse, for example, reverse (12) = 21;<br>2. The reverse number of a negative integer is negative, for example, reverse (-12) = -21;<br>3. The reverse number of an integer ending with 0 is described as example, reverse (1200) = 2100.<br>", input:"Input file contains multiple test cases. There is a positive integer n (n&lt;100) in the first line, which means the number of test cases, and then n 32-bit integers follow.<br>", output:"For each test case, you should output its reverse number, one case per line.<br>", sample_in:"3\n12\n-12\n1200", sample_out:"21\n-21\n2100", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1857, vtotal_submit:4560, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1267, vid:1267, oj:"hdu", title:"下沙的沙子有几粒？", desc:"    2005年11月份，我们学校参加了ACM/ICPC 亚洲赛区成都站的比赛，在这里，我们获得了历史性的突破，尽管只是一枚铜牌，但获奖那一刻的激动，也许将永远铭刻在我们几个人的心头。借此机会,特向去年为参加ACM亚洲赛而艰苦集训了近半年的各位老队员表示感谢。<br>    实际上，除了获奖以外，在这次比赛期间还有一件事也让我们记忆深刻。那是比赛当天等待入场的时候，听到某个学校的一个队员在说：“有个学校的英文名很有意思，叫什么Hangzhou Dianzi University”. 哈哈，看来我们学校的英文名起的非常好，非常吸引人呀。<br>    不过，事情的发展谁也没有料到，随着杭电英文校名的这一次曝光，影响越来越大，很多人开始对杭电英文校名进行研究，不久以后甚至还成立了一个专门的研究机构，叫做“HDU 校名研究会”。并不断有报道说-相-当-多的知名科学家改行，专门对该问题进行研究，学术界称之为“杭电现象”。很多人在国际知名期刊上发表了研究论文，这其中，尤以中国超级女科学家宇春小姐写的一篇研究报告最为著名，报告发表在science上，标题是“杭电为什么这样红？” 文中研究发现：Hangzhou Dianzi University这个校名具有深刻的哲学思想和内涵，她同时提出了一个大胆的猜想：“假定一个字符串由m个H和n个D组成，从左到右扫描该串，如果字符H的累计数总是不小于字符D的累计数,那么，满足条件的字符串总数就恰好和下沙的沙粒一样多。”<br>    这就是当今著名的“宇春猜想”！<br>    虽然还没能从数学上证明这个猜想的正确性，但据说美国方面在小布什的亲自干预下，已经用超级计算机验证了在（1&lt;=n&lt;=m&lt;=1000000000000）时都是正确的。my god! 这是一个多么伟大的猜想！虽然我们以前总说，21世纪是属于中国的，可还是没想这一天来的这么早，自豪ing... + 感动ing...<br>感动和自豪之余，问题也来了，如果已知m和n的值，请计算下沙的沙粒到底有多少。<br><br>Ps: <br>     1. 中国有关方面正在积极行动，着手为宇春小姐申报诺贝尔奖。<br>     2、“宇春猜想”中提到的H和D组成的字符串现在被学术界成为“杭电串串”（“杭电串串”前不久被一个卖羊肉串的注册了商标，现在我校正在积极联系买断，据说卖方的底价是1000万欧元，绝不打折，看来希望不大，sigh...）<br>", input:"    输入数据包含多个测试实例，每个占一行，由两个整数m和n组成，m和 n 分别表示字符串中H和D的个数。由于我们目前所使用的微机和老美的超级计算机没法比，所以题目给定的数据范围是（1&lt;=n&lt;=m&lt;=20）。<br>", output:"    对于每个测试实例，请输出下沙的沙粒到底有多少，计算规则请参考“宇春猜想”，每个实例的输出占一行。<br>", sample_in:"1 1\n3 1", sample_out:"1\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:976, vtotal_submit:2391, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1268, vid:1268, oj:"hdu", title:"积木堆砌的城堡", desc:"一天，小希用积木搭了个城堡，并且照了正面和侧面的照片（前视图和右视图）给Gardon看，让Gardon猜猜她究竟用了多少块积木；Gardon发现从这两张照片上只能看出每一列上最高的地方有多高，但是无法推测出具体的形状（见图1、2），但是好在小希给了Gardon多次机会，所以Gardon只需要知道大概的范围就可以采用“二分查找”法来计算正确的结果。现在Gardon请你帮忙，根据这两张图，计算下最少和最多分别可能是多少块积木组成的，让他可以尽快的回答出小希的问题。 <br><img src=data/images/C20-1003-1.jpg><br>", input:"输入可能包含多组数据。每组数据的第一行分别有两个数：W和L(0&lt;W,L&lt;=100000)，分别表示了该城堡前视图和右视图的宽度，接下来的W行，每行有一个数，第i行表示前视图中第i个位置的高度。同样，接下来的L行表示了该城堡的右视图，每行的一个数字表示了右视图对应位置的高度。 <br>已知城堡最高不会超过5000个积木的高度。<br>", output:"对于每组数据，如果该城堡可能存在，输出两个数M和N(M,N&lt;=10^14)，表示最少可能的积木数和最多可能的积木数。如果该城堡不可能存在，输出&quot;No solution.&quot; <br>注意积木不能悬空摆放。<br>", sample_in:"4 3\n1\n3\n4\n2\n1\n4\n2", sample_out:"10 21", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:33, vtotal_submit:231, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1269, vid:1269, oj:"hdu", title:"迷宫城堡", desc:"为了训练小希的方向感，Gardon建立了一座大城堡，里面有N个房间(N&lt;=10000)和M条通道(M&lt;=100000)，每个通道都是单向的，就是说若称某通道连通了A房间和B房间，只说明可以通过这个通道由A房间到达B房间，但并不说明通过它可以由B房间到达A房间。Gardon需要请你写个程序确认一下是否任意两个房间都是相互连通的，即：对于任意的i和j，至少存在一条路径可以从房间i到房间j，也存在一条路径可以从房间j到房间i。<br>", input:"输入包含多组数据，输入的第一行有两个数：N和M，接下来的M行每行有两个数a和b，表示了一条通道可以从A房间来到B房间。文件最后以两个0结束。<br>", output:"对于输入的每组数据，如果任意两个房间都是相互连接的，输出&quot;Yes&quot;，否则输出&quot;No&quot;。<br>", sample_in:"3 3\n1 2\n2 3\n3 1\n3 3\n1 2\n2 3\n3 2\n0 0", sample_out:"Yes\nNo", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1263, vtotal_submit:5984, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1270, vid:1270, oj:"hdu", title:"小希的数表", desc:"Gardon昨天给小希布置了一道作业，即根据一张由不超过5000的N(3&lt;=N&lt;=100)个正整数组成的数表两两相加得到N*(N-1)/2个和，然后再将它们排序。例如，如果数表里含有四个数1，3，4，9，那么正确答案是4，5，7，10，12，13。小希做完作业以后出去玩了一阵，可是下午回家时发现原来的那张数表不见了，好在她做出的答案还在，你能帮助她根据她的答案计算出原来的数表么？<br>", input:"包含多组数据，每组数据以一个N开头，接下来的一行有按照大小顺序排列的N*(N-1)/2个数，是小希完成的答案。文件最后以一个0结束。 <br>假设输入保证解的存在性和唯一性。<br>", output:"对于每组数据，输出原来的数表。它们也应当是按照顺序排列的。<br>", sample_in:"4\n4 5 7 10 12 13\n4\n5 6 7 8 9 10\n0", sample_out:"1 3 4 9\n2 3 4 6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:173, vtotal_submit:892, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1271, vid:1271, oj:"hdu", title:"整数对", desc:"Gardon和小希玩了一个游戏，Gardon随便想了一个数A（首位不能为0），把它去掉一个数字以后得到另外一个数B，他把A和B的和N告诉了小希，让小希猜想他原来想的数字。不过为了公平起见，如果小希回答的数虽然不是A，但同样能达到那个条件（去掉其中的一个数字得到B，A和B之和是N），一样算小希胜利。而且小希如果能答出多个符合条件的数字，就可以得到额外的糖果。 <br>所以现在小希希望你编写一个程序，来帮助她找到尽可能多的解。 <br>例如，Gardon想的是A=31,B=3 告诉小希N=34， <br>小希除了回答31以外还可以回答27（27+7=34）所以小希可以因此而得到一个额外的糖果。<br>", input:"输入包含多组数据，每组数据一行，包含一个数N(1&lt;=N&lt;=10^9)，文件以0结尾。<br>", output:"对于每个输入的N，输出所有符合要求的解（按照大小顺序排列）如果没有这样的解，输出&quot;No solution.&quot;<br>", sample_in:"34\n152\n21\n0", sample_out:"27 31 32\n126 136 139 141\nNo solution.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:611, vtotal_submit:2412, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1272, vid:1272, oj:"hdu", title:"小希的迷宫", desc:"上次Gardon的迷宫城堡小希玩了很久（见Problem B），现在她也想设计一个迷宫让Gardon来走。但是她设计迷宫的思路不一样，首先她认为所有的通道都应该是双向连通的，就是说如果有一个通道连通了房间A和B，那么既可以通过它从房间A走到房间B，也可以通过它从房间B走到房间A，为了提高难度，小希希望任意两个房间有且仅有一条路径可以相通（除非走了回头路）。小希现在把她的设计图给你，让你帮忙判断她的设计图是否符合她的设计思路。比如下面的例子，前两个是符合条件的，但是最后一个却有两种方法从5到达8。 <br><img src=data/images/C20-1007-1.jpg><br>", input:"输入包含多组数据，每组数据是一个以0 0结尾的整数对列表，表示了一条通道连接的两个房间的编号。房间的编号至少为1，且不超过100000。每两组数据之间有一个空行。 <br>整个文件以两个-1结尾。<br>", output:"对于输入的每一组数据，输出仅包括一行。如果该迷宫符合小希的思路，那么输出&quot;Yes&quot;，否则输出&quot;No&quot;。<br>", sample_in:"6 8  5 3  5 2  6 4\n5 6  0 0\n\n8 1  7 3  6 2  8 9  7 5\n7 4  7 8  7 6  0 0\n\n3 8  6 8  6 4\n5 3  5 6  5 2  0 0\n\n-1 -1", sample_out:"Yes\nYes\nNo", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3446, vtotal_submit:22281, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1273, vid:1273, oj:"hdu", title:"漫步森林", desc:"Gardon和小希每天晚上都喜欢到屋外的森林里散步，设森林里有N块空地，任意两块空地之间都有一条小径相通。他们每次从任意一块空地出发，经过所有的空地后回到原来的空地。 <br>由于他们都喜欢新鲜的旅行，所以他们不希望对任何一条小径经过两次。那么请问，他们最多能保证多少次这种新鲜的旅行呢？ <br>例如（图），当N=5时，他们只能保持两次这样新鲜的旅行。 <br><center><img src=data/images/C20-1008-1.jpg></center>", input:"输入包含多组数据，每组数据占一行，是一个数字 N。(0&lt;N&lt;=1000000000) <br>文件以一个0结束。<br>", output:"对于每个输入的N，输出最多能保证新鲜旅行的次数。<br>", sample_in:"5\n0", sample_out:"2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:896, vtotal_submit:1490, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1274, vid:1274, oj:"hdu", title:"展开字符串", desc:"在纺织CAD系统开发过程中，经常会遇到纱线排列的问题。<br>该问题的描述是这样的：常用纱线的品种一般不会超过25种，所以分别可以用小写字母表示不同的纱线，例如：abc表示三根纱线的排列；重复可以用数字和括号表示，例如：2(abc)表示abcabc；1(a)=1a表示a;2ab表示aab;如果括号前面没有表示重复的数字出现，则就可认为是1被省略了，如：cd(abc)=cd1(abc)=cdabc;这种表示方法非常简单紧凑，也易于理解；但是计算机却不能理解。为了使计算机接受，就必须将简单紧凑的表达方式展开。某ACM队接受了此项任务。现在你就是该ACM队的一员，请你把这个程序编写完成。<br>已知条件：输入的简单紧凑表达方式的长度不超过250个字符；括号前表示重复的数不超过1000；不会出现除了数字、括号、小写字母以外的任何其他字符；不会出现括号不配对等错误的情况（错误处理已由ACM其他队员完成了）。", input:"本题有多个测试数据组，第一行输入的就是数据组数N，接着就是N行表达式，表达式是按照前面介绍的意义书写的。", output:"输出时含有N行，每行对应一个输入的表达式。", sample_in:"2\n1(1a2b1(ab)1c)\n3(ab2(4ab))", sample_out:"abbabc\nabaaaabaaaababaaaabaaaababaaaabaaaab", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:428, vtotal_submit:1244, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VI）", author:"", tag:["TEST"]}
{pid:1275, vid:1275, oj:"hdu", title:"两车追及或相遇问题", desc:"外号叫“猪头三”的小学生在数学课上，经常遇到两车相遇或追及的方程题，经过长时间的练习，他发现了许多规律，然而他不懂计算机，他想请你帮忙编写一个计算机程序，解决他的问题。<br>题目的描述是这样的：甲、乙两地相距L公里，A车的速度为VA公里/小时，B车的速度为VB公里/小时，A车和B车开始时分别在甲、乙两地，现在两车同时从甲、乙两地出发，并且开始计时，两车到达甲、乙两地后返回继续行驶，这样会有许多次追及或相遇的时候，我们假定称追及或相遇的时候为“重合”，请输出“重合”时的时间以及离甲、乙两地较近地的距离。<br>", input:"本题有多个测试数据组，第一行为测试数据组数N，接着是N行数据，每行的数据按顺序分别为实数类型的距离、A车的速度、B车的速度以及整数类型的第几次“重合”的序号数(&lt;=1000)。<br>", output:"Time=xxxx.xxx Dist=xx.xxx输出的精度为精确到小数点后三位。<br>", sample_in:"2\n120.7 90.0 90.0 10\n100.5 80.7 69.3 1", sample_out:"Time=12.741 Dist=60.350\nTime=0.670 Dist=46.431", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:195, vtotal_submit:838, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VI）", author:"", tag:["TEST"]}
{pid:1276, vid:1276, oj:"hdu", title:"士兵队列训练问题", desc:"某部队进行新兵队列训练，将新兵从一开始按顺序依次编号，并排成一行横队，训练的规则如下：从头开始一至二报数，凡报到二的出列，剩下的向小序号方向靠拢，再从头开始进行一至三报数，凡报到三的出列，剩下的向小序号方向靠拢，继续从头开始进行一至二报数。。。，以后从头开始轮流进行一至二报数、一至三报数直到剩下的人数不超过三人为止。<br>", input:"本题有多个测试数据组，第一行为组数N，接着为N行新兵人数，新兵人数不超过5000。<br>", output:"共有N行，分别对应输入的新兵人数，每行输出剩下的新兵最初的编号，编号之间有一个空格。<br>", sample_in:"2\n20\n40", sample_out:"1 7 19\n1 19 37", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1112, vtotal_submit:2974, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VI）", author:"", tag:["TEST"]}
{pid:1277, vid:1277, oj:"hdu", title:"全文检索", desc:"我们大家经常用google检索信息，但是检索信息的程序是很困难编写的；现在请你编写一个简单的全文检索程序。<br>问题的描述是这样的：给定一个信息流文件，信息完全有数字组成，数字个数不超过60000个，但也不少于60个；再给定一个关键字集合，其中关键字个数不超过10000个，每个关键字的信息数字不超过60个，但也不少于5个；两个不同的关键字的前4个数字是不相同的；由于流文件太长，已经把它分成多行；请你编写一个程序检索出有那些关键字在文件中出现过。<br>", input:"第一行是两个整数M，N；M表示数字信息的行数，N表示关键字的个数；接着是M行信息数字，然后是一个空行；再接着是N行关键字；每个关键字的形式是：[Key No. 1] 84336606737854833158。<br>", output:"输出只有一行，如果检索到有关键字出现，则依次输出，但不能重复，中间有空格，形式如：Found key: [Key No. 9] [Key No. 5]；如果没找到，则输出形如：No key can be found !。<br>", sample_in:"20 10\n646371829920732613433350295911348731863560763634906583816269\n637943246892596447991938395877747771811648872332524287543417\n420073458038799863383943942530626367011418831418830378814827\n679789991249141417051280978492595526784382732523080941390128\n848936060512743730770176538411912533308591624872304820548423\n057714962038959390276719431970894771269272915078424294911604\n285668850536322870175463184619212279227080486085232196545993\n274120348544992476883699966392847818898765000210113407285843\n826588950728649155284642040381621412034311030525211673826615\n398392584951483398200573382259746978916038978673319211750951\n759887080899375947416778162964542298155439321112519055818097\n642777682095251801728347934613082147096788006630252328830397\n651057159088107635467760822355648170303701893489665828841446\n069075452303785944262412169703756833446978261465128188378490\n310770144518810438159567647733036073099159346768788307780542\n503526691711872185060586699672220882332373316019934540754940\n773329948050821544112511169610221737386427076709247489217919\n035158663949436676762790541915664544880091332011868983231199\n331629190771638894322709719381139120258155869538381417179544\n000361739177065479939154438487026200359760114591903421347697\n\n[Key No. 1] 934134543994403697353070375063\n[Key No. 2] 261985859328131064098820791211\n[Key No. 3] 306654944587896551585198958148\n[Key No. 4] 338705582224622197932744664740\n[Key No. 5] 619212279227080486085232196545\n[Key No. 6] 333721611669515948347341113196\n[Key No. 7] 558413268297940936497001402385\n[Key No. 8] 212078302886403292548019629313\n[Key No. 9] 877747771811648872332524287543\n[Key No. 10] 488616113330539801137218227609", sample_out:"Found key: [Key No. 9] [Key No. 5]", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:232, vtotal_submit:1126, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VI）", author:"", tag:["TEST"]}
{pid:1278, vid:1278, oj:"hdu", title:"漂亮面料的设计", desc:"现在的CAD技术已经能够很方便地设计出漂亮的面料，如图（b）所示。图（a）是所对应的组织图，它表示纱线的交织规律，经过分析表明：组织规律可以用一个二维矩阵准确描述出来。<br><center><img src=data/images/C21-1005-1.gif></center><br>图（a）的描述矩阵为：<br>0000101111110011000111000110011111101000<br>0001001111100110000111000011001111100100<br>0001011111001100001101100001100111110100<br>0010011110011100001000100001110011110010<br>0110111100111100011000110001111001111011<br>1100111001111000110000011000111100111001<br>1001111011110001110010011100011110111100<br>0001110111100011100111001110001111011100<br>0011110111000011000101000110000111011110<br>0111101110000010001000100010000011101111<br>1111101100000100001000100001000001101111<br>1111011000001100010010010001100000110111<br>1111011000011100110101011001110000110111<br>1110110000111001100000001100111000011011<br>1110110001110011001000100110011100011011<br>1101100011100010000000000010001110001101<br>1001100111000000010000010000000111001100<br>0011000110000100100010001001000011000110<br>0111001100001101000111000101100001100111<br>1110001000011010000101000010110000100011<br>1110011000110000001000100000011000110011<br>1100010001100000001000100000001100010001<br>1000110011000100010010010001000110011000<br>0000100110001000110111011000100011001000<br>0001100100010001100111001100010001001100<br>0001001000100011001111100110001000100100<br>0011001001000010001111100010000100100110<br>0110010010000000011111110000000010010011<br>1110010100000100111111111001000001010011<br>1100100000001101111101111101100000001001<br>1000101000011011111000111110110000101000<br>0001000000110011111010111110011000000100<br>0001010001100011110111011110001100010100<br>0010000011000111110111011111000110000010<br>0110100110001111101111101111100011001011<br>1100000100011111001101100111110001000001<br>1001001000111110011000110011111000100100<br>0000001001111100111000111001111100100000<br>0010010011111101110000011101111110010010<br>0100010111111111110000011111111111010001<br>1000100111111011100010001110111111001000<br>根据行业习惯，1表示黑色格子，0表示白色格子；左下角是起点，最下面一行是第一行，最左面一列是第一列；最上面一行的后一行是第一行，反之，第一行的前面一行是最上面一行，同理，第一列的前一列是最右边一列，最右一列的后一列是第一列。最左边的一列从起点开始依次是：10001100001110000011110011111110001100000，仔细观察后发现，可以用6个分数表示：1/3，2/4，3/5，4/2，7/3，2/5；分子表示1的个数，分母表示0的个数，这样的分数称之为“规则”。第二列从起点开始的规律和第一列的规律正好向上差一行，每一列都有和前一列相差的行数，以后都是类似，只是相差不同而已，由相差的行数可得到一个序列：1，1，2，2，2，2，2，1，1，1，1，1，1，3，1，1，1，2，2，1，-1，-2，-2，-1，-1，-1，-3，-1，-1，-1，-1，-1，-1，-2，-2，-2，-2，-2，-1，-1，负数为向下差；进一步分析表明，可以用14个分数简化之，即：1/2，2/5，1/6，3/1，1/3，2/2，1/1，-1/1，-2/2，-1/3，-3/1，-1/6，-2/5，-1/2；分子表示差的值，分母表示这样的差连续有几个，这样的分数称之为“飞数”，如果这样得到的最后一列和第一列不同，则说明不能生成漂亮面料。现在请你设计一个漂亮的面料。<br>", input:"本题的输入共有5行，第一行是2个整数M，N；第二行是M个整数，表示“规则”的分子；第三行也是M个整数，表示“规则”的分母；其中第二行和第三行是按序对应；第四行是N个整数，表示“飞数”的分子；第五行也是N个整数，表示“飞数”的分母；其中第四行和第五行也是按序对应。输入数据保证生成的矩阵的行和列数不超过200；如果能够生成漂亮面料，则因为最后一列和第一列相同，所以不需输出最后一列；如果不能生成，则输出Can not make beautilful cloth !。<br>", output:"按照前面题目的描述输出有0和1组成的二维矩阵。<br>", sample_in:"6  14\n1  2  3  4  7  2\n3  4  5  2  3  5\n1  2  1  3  1  2  1  -1  -2  -1  -3  -1  -2  -1\n2  5  6  1  3  2  1   1   2   3   1   6   5   2", sample_out:"参见前面的例子。", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:82, vtotal_submit:239, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VI）", author:"", tag:["TEST"]}
{pid:1279, vid:1279, oj:"hdu", title:"验证角谷猜想", desc:"数论中有许多猜想尚未解决，其中有一个被称为“角谷猜想”的问题，该问题在五、六十年代的美国多个著名高校中曾风行一时，这个问题是这样描述的：任何一个大于一的自然数，如果是奇数，则乘以三再加一；如果是偶数，则除以二；得出的结果继续按照前面的规则进行运算，最后必定得到一。现在请你编写一个程序验证他的正确性。", input:"本题有多个测试数据组，第一行为测试数据组数N，接着是N行的正整数。<br>", output:"输出验证“角谷猜想”过程中的奇数，最后得到的1不用输出；每个测试题输出一行；每行中只有两个输出之间才能有一个空格；如果没有这样的输出，则输出：No number can be output !。<br>", sample_in:"4\n5\n9\n16\n11", sample_out:"5\n9 7 11 17 13 5\nNo number can be output !\n11 17 13 5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2412, vtotal_submit:5237, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VI）", author:"", tag:["TEST"]}
{pid:1280, vid:1280, oj:"hdu", title:"前m大的数", desc:"还记得Gardon给小希布置的那个作业么？（上次比赛的1005）其实小希已经找回了原来的那张数表，现在她想确认一下她的答案是否正确，但是整个的答案是很庞大的表，小希只想让你把答案中最大的M个数告诉她就可以了。 <br>给定一个包含N(N&lt;=3000)个正整数的序列，每个数不超过5000，对它们两两相加得到的N*(N-1)/2个和，求出其中前M大的数(M&lt;=1000)并按从大到小的顺序排列。 ", input:"输入可能包含多组数据，其中每组数据包括两行： <br>第一行两个数N和M， <br>第二行N个数，表示该序列。<br><br>", output:"对于输入的每组数据，输出M个数，表示结果。输出应当按照从大到小的顺序排列。", sample_in:"4 4\n1 2 3 4\n4 5\n5 3 6 4", sample_out:"7 6 5 5\n11 10 9 9 8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2107, vtotal_submit:8640, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VI）", author:"", tag:["TEST"]}
{pid:1281, vid:1281, oj:"hdu", title:"棋盘游戏", desc:"小希和Gardon在玩一个游戏：对一个N*M的棋盘，在格子里放尽量多的一些国际象棋里面的“车”，并且使得他们不能互相攻击，这当然很简单，但是Gardon限制了只有某些格子才可以放，小希还是很轻松的解决了这个问题（见下图）注意不能放车的地方不影响车的互相攻击。 <br>所以现在Gardon想让小希来解决一个更难的问题，在保证尽量多的“车”的前提下，棋盘里有些格子是可以避开的，也就是说，不在这些格子上放车，也可以保证尽量多的“车”被放下。但是某些格子若不放子，就无法保证放尽量多的“车”，这样的格子被称做重要点。Gardon想让小希算出有多少个这样的重要点，你能解决这个问题么？<br><center><img src=data/images/C21-1008-1.gif></center>", input:"输入包含多组数据， <br>第一行有三个数N、M、K(1&lt;N,M&lt;=100 1&lt;K&lt;=N*M)，表示了棋盘的高、宽，以及可以放“车”的格子数目。接下来的K行描述了所有格子的信息：每行两个数X和Y，表示了这个格子在棋盘中的位置。<br>", output:"对输入的每组数据，按照如下格式输出： <br>Board T have C important blanks for L chessmen.<br>", sample_in:"3 3 4\n1 2\n1 3\n2 1\n2 2\n3 3 4\n1 2\n1 3\n2 1\n3 2", sample_out:"Board 1 have 0 important blanks for 2 chessmen.\nBoard 2 have 3 important blanks for 3 chessmen.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:783, vtotal_submit:1964, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VI）", author:"", tag:["TEST"]}
{pid:1282, vid:1282, oj:"hdu", title:"回文数猜想", desc:"一个正整数，如果从左向右读（称之为正序数）和从右向左读（称之为倒序数）是一样的，这样的数就叫回文数。任取一个正整数，如果不是回文数，将该数与他的倒序数相加，若其和不是回文数，则重复上述步骤，一直到获得回文数为止。例如：68变成154（68+86），再变成605（154+451），最后变成1111（605+506），而1111是回文数。于是有数学家提出一个猜想：不论开始是什么正整数，在经过有限次正序数和倒序数相加的步骤后，都会得到一个回文数。至今为止还不知道这个猜想是对还是错。现在请你编程序验证之。", input:"每行一个正整数。<br>特别说明：输入的数据保证中间结果小于2^31。", output:"对应每个输入，输出两行，一行是变换的次数，一行是变换的过程。", sample_in:"27228\n37649", sample_out:"3\n27228--->109500--->115401--->219912\n2\n37649--->132322--->355553", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1912, vtotal_submit:3732, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VII）", author:"", tag:["TEST"]}
{pid:1283, vid:1283, oj:"hdu", title:"最简单的计算机", desc:"一个名叫是PigHeadThree的研究组织设计了一台实验用的计算机，命名为PpMm。PpMm只能执行简单的六种命令A，B，C，D，E，F；只有二个内存M1，M2；三个寄存器R1，R2，R3。六种命令的含义如下：<br>&nbsp;&nbsp;命令A：将内存M1的数据装到寄存器R1中；<br>&nbsp;&nbsp;命令B：将内存M2的数据装到寄存器R2中；<br>&nbsp;&nbsp;命令C：将寄存器R3的数据装到内存M1中；<br>&nbsp;&nbsp;命令D：将寄存器R3的数据装到内存M2中；<br>&nbsp;&nbsp;命令E：将寄存器R1中的数据和寄存器R2中的数据相加，结果放到寄存器R3中；<br>&nbsp;&nbsp;命令F：将寄存器R1中的数据和寄存器R2中的数据相减，结果放到寄存器R3中。<br>你的任务是：设计一个程序模拟PpMm的运行。<br>", input:"有若干组，每组有2行，第一行是2个整数，分别表示M1和M2中的初始内容；第二行是一串长度不超过200的由大写字母A到F组成的命令串，命令串的含义如上所述。", output:"对应每一组的输入，输出只有一行，二个整数，分别表示M1，M2的内容；其中M1和M2之间用逗号隔开。<br><br>其他说明：R1，R2，R3的初始值为0，所有中间结果都在-2^31和2^31之间。", sample_in:"100 288\nABECED\n876356 321456\nABECAEDBECAF", sample_out:"388,388\n2717080,1519268", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2041, vtotal_submit:4163, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VII）", author:"", tag:["TEST"]}
{pid:1284, vid:1284, oj:"hdu", title:"钱币兑换问题", desc:"在一个国家仅有1分，2分，3分硬币，将钱N兑换成硬币有很多种兑法。请你编程序计算出共有多少种兑法。", input:"每行只有一个正整数N，N小于32768。", output:"对应每个输入，输出兑换方法数。", sample_in:"2934\n12553", sample_out:"718831\n13137761", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1954, vtotal_submit:4846, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VII）", author:"", tag:["TEST"]}
{pid:1285, vid:1285, oj:"hdu", title:"确定比赛名次", desc:"有N个比赛队（1&lt;=N&lt;=500），编号依次为1，2，3，。。。。，N进行比赛，比赛结束后，裁判委员会要将所有参赛队伍从前往后依次排名，但现在裁判委员会不能直接获得每个队的比赛成绩，只知道每场比赛的结果，即P1赢P2，用P1，P2表示，排名时P1在P2之前。现在请你编程序确定排名。<br>", input:"输入有若干组，每组中的第一行为二个数N（1&lt;=N&lt;=500），M；其中N表示队伍的个数，M表示接着有M行的输入数据。接下来的M行数据中，每行也有两个整数P1，P2表示即P1队赢了P2队。<br>", output:"给出一个符合要求的排名。输出时队伍号之间有空格，最后一名后面没有空格。<br><br>其他说明：符合条件的排名可能不是唯一的，此时要求输出时编号小的队伍在前；输入数据保证是正确的，即输入数据确保一定能有一个符合要求的排名。<br>", sample_in:"4 3\n1 2\n2 3\n4 3", sample_out:"1 2 4 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2157, vtotal_submit:9563, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VII）", author:"", tag:["TEST"]}
{pid:1286, vid:1286, oj:"hdu", title:"找新朋友", desc:"新年快到了，“猪头帮协会”准备搞一个聚会，已经知道现有会员N人，把会员从1到N编号，其中会长的号码是N号，凡是和会长是老朋友的，那么该会员的号码肯定和N有大于1的公约数，否则都是新朋友，现在会长想知道究竟有几个新朋友？请你编程序帮会长计算出来。", input:"第一行是测试数据的组数CN（Case number，1&lt;CN&lt;10000），接着有CN行正整数N（1&lt;n&lt;32768），表示会员人数。", output:"对于每一个N，输出一行新朋友的人数，这样共有CN行输出。<br>", sample_in:"2\n25608\n24027", sample_out:"7680\n16016", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2429, vtotal_submit:6659, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VII）", author:"", tag:["TEST"]}
{pid:1287, vid:1287, oj:"hdu", title:"破译密码", desc:"有个叫“猪头帮”的国家，采用一种简单的文法加密，他们所用的语言里面只有大写字母，没有其他任何字符；现在还知道他们加密的方法是：只用一个大写字母和原文进行异或运算生成密文。请你帮忙解开。", input:"有若干组，每组输入有2行，第一行整数N表示有N个密文，接着一行有N个整数分别表示N个密文。", output:"输出仅有大写字母组成的原文。<br>", sample_in:"30\n17 6 9 8 3 0 1 6 7 4 5 10 11 8 9 14 15 12 13 18 19 16 17 22 23 20 21 26 27 24", sample_out:"SDKJABCDEFGHIJKLMNOPQRSTUVWXYZ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1219, vtotal_submit:3190, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VII）", author:"", tag:["TEST"]}
{pid:1288, vid:1288, oj:"hdu", title:"Hat\'s Tea", desc:"Hat is a member of PG Studio. Hat codes a lot and so he often buys tea at tea vending machine. But the tea vending machine just eat coins and spit out tea, if you feed the machine more coins than the tea’s price and the machine will not spit out your change. <br>Your program will be given numbers and types of coins Hat has and the tea price. The tea vending machine accepts coins of values 1, 5, 10 RMB (Jiao). The program should output which coins Hat has to use paying the tea so that he uses as many coins as possible. <br>", input:"Each line of the input contains four integer numbers separated by a single space describing one situation to solve. The first integer on the line N,  , is the tea price in Jiao. Next four integers ,  , are the numbers of YiJiao (1 Jiao.RMB), WuJiao (5 Jiao.RMB), and ShiJiao (10 Jiao.RMB) in Hat\'s valet. The last line of the input contains four zeros and no output should be generated for it. <br>", output:"For each situation, your program should output one line containing the string &quot; T1 YiJiao, T2 WuJiao, and T3 ShiJiao &quot;, where T1, T2, T3 are the numbers of coins of appropriate values Hat should use to pay the tea while using as many coins as possible. If Hat does not have enough coins to pay the tea exactly, your program should output &quot;Hat cannot buy tea.”.<br>", sample_in:"6653 226 72 352 \n578 5 127 951\n0 0 0 0 ", sample_out:"Hat cannot buy tea.\n3 YiJiao, 115 WuJiao, and 0 ShiJiao", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:162, vtotal_submit:1089, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VII）", author:"", tag:["TEST"]}
{pid:1289, vid:1289, oj:"hdu", title:"Hat’s IEEE", desc:"Your program will be given floating point numbers (32-bit), and calculate<br>exponent and fraction.<br><br>IEEE 754:<br>SEEEEEEEEFFFFFFFFFFFFFFFFFFFFFFF<br><br>S = sign(1) <br>E = exponent(8) <br>F = fraction(23)  <br><br>NOTE: If you donnot know IEEE 754,you can baidu it:)", input:"Each line contains a numbers.<br>", output:"For each case, output a line containing two numbers, e (exponent) and f (fraction), by a single space. Fraction must be rounded to six digits after the decimal point.<br>", sample_in:"6560.91\n-6560.91", sample_out:"12 1.601785\n12 -1.601785\n\n\nNOTE: INTEL CPU", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:140, vtotal_submit:413, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VII）", author:"", tag:["TEST"]}
{pid:1290, vid:1290, oj:"hdu", title:"献给杭电五十周年校庆的礼物", desc:"或许你曾经牢骚满腹<br>或许你依然心怀忧伤<br>或许你近在咫尺<br>或许你我天各一方<br><br>对于每一个学子<br>母校  <br>永远航行在<br>生命的海洋<br><br>今年是我们杭电建校五十周年，这是一个值得祝福的日子。我们该送给母校一个怎样的礼物呢？对于目前的大家来说，最好的礼物当然是省赛中的好成绩，我不能参赛，就送给学校一个DOOM III球形大蛋糕吧，这可是名牌，估计要花掉我半年的银子呢。<br><br>想象着正式校庆那一天，校长亲自操刀，把这个大蛋糕分给各地赶来祝贺的校友们，大家一定很高兴，呵呵，流口水了吧...<br><br>等一等，吃蛋糕之前先考大家一个问题：如果校长大人在蛋糕上切了N刀（校长刀法极好，每一刀都是一个绝对的平面），最多可以把这个球形蛋糕切成几块呢？<br><br>做不出这个题目，没有蛋糕吃的！<br>为-了-母-校-，为-了-蛋-糕-（不是为了DGMM，枫之羽最会浮想联翩...），加-油-！<br>", input:"输入数据包含多个测试实例，每个实例占一行，每行包含一个整数n(1&lt;=n&lt;=1000)，表示切的刀数。<br>", output:"对于每组输入数据，请输出对应的蛋糕块数，每个测试实例输出一行。<br>", sample_in:"1\n2\n3", sample_out:"2\n4\n8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3024, vtotal_submit:6606, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VIII）", author:"", tag:["TEST"]}
{pid:1291, vid:1291, oj:"hdu", title:"Closing Ceremony of Sunny Cup", desc:"The 3rd Zhejiang Provincial Collegiate Programming Contest will be held at Zhejiang University in 05/13/2006. The contest attracts many excellent programmer, of course, including 18 acmers of HDU,They are Lu xiaojun, Wang rongtao,Zhou feng;Gao bo, Li weigang, Xu haidong;Lin le,Lin jie,Li huansen;Mou changqing, Zhou lin, Wang dongdong;Ying qili,Lai li,Weng jianfei;Wang jun,Wang jianxing and Liu qi. <br><br>I don\'t know which team will be champion,but I know that closure will be held at Linshui Hall,which is a very beautiful classroom near the river. <br><br>Now I am thinking a question, supposing attendance is a square number (N^2) and the number of the seat is a square number too( N lines ,and N seats each line), If orgazizer is so bored that they arrange sits according to player\'s height (Supposing all players\' heights are dirrerent). The arranging rules can be described as following:<br>1. A cannot sit at back of B when A is short than B.<br>2. A cannot sit at right of B when A is short than B.<br><br>The question left to you is that: &quot; How many dirrerent arranging styles you can get according to the rules?&quot;<br>", input:"Input file contains multiple test cases, and each test case is described with an integer N(1&lt;=N&lt;=20),you can get its meaning throught problem description.<br>", output:"For each test case ,you should output a result,and one result per line.<br>", sample_in:"2\n3", sample_out:"2\n42", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:31, vtotal_submit:111, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VIII）", author:"", tag:["TEST"]}
{pid:1292, vid:1292, oj:"hdu", title:"\"下沙野骆驼\"ACM夏令营", desc:"大家都知道，杭电计算机学院为了吸引更多的学生参与到程序设计竞赛中去，从2005年秋天，开始举行月赛，并一直坚持到了现在。事实表明，这项措施的效果还是很明显的，现在坚持参加训练的学生比以前有了较大幅度的增长，整体水平也有了较大的提高。<br>为了更好的促进这项竞赛的发展，计算机学院又有了新的计划：准备在每年的暑假举行一个为期半个月的程序设计夏令营活动，活动的全称是“下沙野骆驼ACM夏令营”，准备邀请全球的编程高手共同训练，邀请对象当然少不了HFUT的DYGG，NIT的DGMM，ZJUT的QWDD，如果QH的LTC一定要来，我们也不会嫌弃，虽然他水平比其他人差了些，毕竟是杭州人，要给点面子的，再说，共同进步才是我们的最终目的，呵呵。<br>活动的安排初步定为7项内容，具体是：<br>1、第一天，倒时差（主要照顾欧美的选手）。<br>2、第二天，参观杭电校园，并在参观结束举行有奖竞答，偷偷透露一下，题目我已经设计好了：“杭电校院一共有几棵树？”（正确答案：3897棵），答对的营员奖励雪糕一支（不是哈根达斯，是杭州五丰生产的，民族工业还是要支持的）。<br>3、第三天，参观杭电ACMer的寝室，主要目的是让部分来自资本主义国家的选手看看我们是如何管理学生宿舍的，其中一项重要内容是向全球推广我校首创的“党员模范寝室”。<br>4、第四天，练习赛，题目只有一个：“非著名高校HD一共有教职工num个，分布在X个部门，假设每个部门有y1个正处级领导，y2个副处级领导，y3个付处级调研员，y4个正科级干部，y5个副科级干部，请输出HD的领导人员占教职工总数的比例，结果保留两位小数。”（告诉你，这个题目对于欧美选手来说有个陷阱，最后的结果可能大于100%！这是他们如何也想不到的：)<br>5、第五天~第十三天，算法交流，主要讨论如何求两个数的最小公倍数。<br>6、第十四天，自由组队（每队人数不限，呵呵，注意了），参加“下沙野骆驼杯”程序设计大赛，冠军将获得一匹下沙的野骆驼（我们主场不知道有没有机会...）<br>7、最后一天，篝火晚会，主题：“ACM，你到底爱不爱我？！”，主持人：骆驼王子和他一个普通老同学。<br><br>负责这次夏令营活动的是05级的小师弟Linle（一个打字速度很快，号称仅次于Fe(OH)2的小伙子），他很聪明，也很勤奋，现在他就在思考一个问题，如果一共来了n个同学，按照组队规则，一共会有多少种不同的组队方案呢？<br>", input:"输入数据的第一行是一个整数C（1&lt;C&lt;25），表示测试实例的数目，然后是C行数据，每行一个整数n(0&lt;n&lt;25)，表示营员的人数。<br>", output:"对于每组输入数据，请输出组队的方案数目，每个测试实例占一行。<br>", sample_in:"3\n1\n2\n3", sample_out:"1\n2\n5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:311, vtotal_submit:741, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VIII）", author:"", tag:["TEST"]}
{pid:1293, vid:1293, oj:"hdu", title:"The Number of Paths", desc:"Let f (n) be the number of paths with n steps starting from O (0, 0), with steps of the type (1, 0), or (-1, 0), or (0, 1), and never intersecting themselves. For instance, f (2) =7, as shown in Fig.1. Equivalently, letting E=(1,0),W=(-1,0),N=(0,1), we want the number of words A1A2...An, each Ai either E, W, or N, such that EW and WE never appear as factors.<br><center><img src=data/images/C23-1004-1.jpg></center>", input:"There are multiple cases in this problem and ended by the EOF. In each case, there is only one integer n means the number of steps(1&lt;=n&lt;=1000).", output:"For each test case, there is only one integer means the number of paths.", sample_in:"1\n2", sample_out:"3\n7", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:176, vtotal_submit:461, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VIII）", author:"", tag:["TEST"]}
{pid:1294, vid:1294, oj:"hdu", title:"Rooted Trees Problem", desc:"Give you two definitions tree and rooted tree. An undirected connected graph without cycles is called a tree. A tree is called rooted if it has a distinguished vertex r called the root. Your task is to make a program to calculate the number of rooted trees with n vertices denoted as Tn. The case n=5 is shown in Fig. 1.<br><center><img src=data/images/C23-1005-1.jpg></center>", input:"There are multiple cases in this problem and ended by the EOF. In each case, there is only one integer means n(1&lt;=n&lt;=40) .", output:"For each test case, there is only one integer means Tn.", sample_in:"1\n2\n5", sample_out:"1\n1\n9", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:112, vtotal_submit:493, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VIII）", author:"", tag:["TEST"]}
{pid:1295, vid:1295, oj:"hdu", title:"Move Move Look", desc:"There are two color (white and black) chessmen in a row. The number of white chessman is equal to the number of black chessman. The left half of the row is black chessmen and the right half of the row is white chessmen at first. There are two rules for the game. <br>1.&nbsp;&nbsp;Only two neighbor chessmen (double black, double white or one black and one white) can be moved to vacancy at one time. The new vacancy can be filled by the two new neighbor chessmen. Repeat moving chessmen until all chessmen are interphase with black chessman and white chessman.<br>2.&nbsp;&nbsp;The number of move must be the minimum.<br><br>The case n=3 is shown in Fig. 1. Your task is to get the number of the minimum steps.<br><center><img src=data/images/C23-1006-1.jpg></center>", input:"There are multiple cases in this problem and ended by the EOF. In each case, there is only one integer means the number of black chessmen (the same as white chessmen)  n(3&lt;=n&lt;=1000).", output:"For each test case, there is only one integer means the minimum steps.", sample_in:"3", sample_out:"3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:350, vtotal_submit:653, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VIII）", author:"", tag:["TEST"]}
{pid:1296, vid:1296, oj:"hdu", title:"Polynomial Problem", desc:"We have learned how to obtain the value of a polynomial when we were a middle school student. If f(x) is a polynomial of degree n, we can let<br> <center><img src=data/images/C23-1007-1.gif></center><br>If we have x, we can get f(x) easily. But a computer can not understand the expression like above. So we had better make a program to obtain f(x).<br>", input:"There are multiple cases in this problem and ended by the EOF. In each case, there are two lines. One is an integer means x (0&lt;=x&lt;=10000), the other is an expression means f(x). All coefficients  ai(0&lt;=i&lt;=n,1&lt;=n&lt;=10,-10000&lt;=ai&lt;=10000) are integers. A correct expression maybe likes<br>1003X^5+234X^4-12X^3-2X^2+987X-1000<br>", output:"For each test case, there is only one integer means the value of f(x).", sample_in:"3\n1003X^5+234X^4-12X^3-2X^2+987X-1000", sample_out:"264302\n\n\n\nNotice that the writing habit of polynomial f(x) is usual such as\nX^6+2X^5+3X^4+4X^3+5X^2+6X+7\n-X^7-5X^6+3X^5-5X^4+20X^3+2X^2+3X+9\nX+1\nX^3+1\nX^3\n-X+1 etc. Any results of middle process are in the range from -1000000000 to 1000000000.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:197, vtotal_submit:645, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VIII）", author:"", tag:["TEST"]}
{pid:1297, vid:1297, oj:"hdu", title:"Children’s Queue", desc:"There are many students in PHT School. One day, the headmaster whose name is PigHeader wanted all students stand in a line. He prescribed that girl can not be in single. In other words, either no girl in the queue or more than one girl stands side by side. The case n=4 (n is the number of children) is like<br>FFFF, FFFM, MFFF, FFMM, MFFM, MMFF, MMMM<br>Here F stands for a girl and M stands for a boy. The total number of queue satisfied the headmaster’s needs is 7. Can you make a program to find the total number of queue with n children?<br>", input:"There are multiple cases in this problem and ended by the EOF. In each case, there is only one integer n means the number of children (1&lt;=n&lt;=1000) ", output:"For each test case, there is only one integer means the number of queue satisfied the headmaster’s needs.", sample_in:"1\n2\n3", sample_out:"1\n2\n4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1999, vtotal_submit:9598, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（VIII）", author:"", tag:["TEST"]}
{pid:1298, vid:1298, oj:"hdu", title:"T9", desc:"A while ago it was quite cumbersome to create a message for the Short Message Service (SMS) on a mobile phone. This was because you only have nine keys and the alphabet has more than nine letters, so most characters could only be entered by pressing one key several times. For example, if you wanted to type &quot;hello&quot; you had to press key 4 twice, key 3 twice, key 5 three times, again key 5 three times, and finally key 6 three times. This procedure is very tedious and keeps many people from using the Short Message Service.<br><br>This led manufacturers of mobile phones to try and find an easier way to enter text on a mobile phone. The solution they developed is called T9 text input. The &quot;9&quot; in the name means that you can enter almost arbitrary words with just nine keys and without pressing them more than once per character. The idea of the solution is that you simply start typing the keys without repetition, and the software uses a built-in dictionary to look for the &quot;most probable&quot; word matching the input. For example, to enter &quot;hello&quot; you simply press keys 4, 3, 5, 5, and 6 once. Of course, this could also be the input for the word &quot;gdjjm&quot;, but since this is no sensible English word, it can safely be ignored. By ruling out all other &quot;improbable&quot; solutions and only taking proper English words into account, this method can speed up writing of short messages considerably. Of course, if the word is not in the dictionary (like a name) then it has to be typed in manually using key repetition again.<br><br><center><img src=data/images/1298-1.gif><br>Figure 8: The Number-keys of a mobile phone.</center><br><br>More precisely, with every character typed, the phone will show the most probable combination of characters it has found up to that point. Let us assume that the phone knows about the words &quot;idea&quot; and &quot;hello&quot;, with &quot;idea&quot; occurring more often. Pressing the keys 4, 3, 5, 5, and 6, one after the other, the phone offers you &quot;i&quot;, &quot;id&quot;, then switches to &quot;hel&quot;, &quot;hell&quot;, and finally shows &quot;hello&quot;.<br><br>Write an implementation of the T9 text input which offers the most probable character combination after every keystroke. The probability of a character combination is defined to be the sum of the probabilities of all words in the dictionary that begin with this character combination. For example, if the dictionary contains three words &quot;hell&quot;, &quot;hello&quot;, and &quot;hellfire&quot;, the probability of the character combination &quot;hell&quot; is the sum of the probabilities of these words. If some combinations have the same probability, your program is to select the first one in alphabetic order. The user should also be able to type the beginning of words. For example, if the word &quot;hello&quot; is in the dictionary, the user can also enter the word &quot;he&quot; by pressing the keys 4 and 3 even if this word is not listed in the dictionary.<br>", input:"The first line contains the number of scenarios.<br><br>Each scenario begins with a line containing the number w of distinct words in the dictionary (0&lt;=w&lt;=1000). These words are given in the next w lines. (They are not guaranteed in ascending alphabetic order, although it\'s a dictionary.) Every line starts with the word which is a sequence of lowercase letters from the alphabet without whitespace, followed by a space and an integer p, 1&lt;=p&lt;=100, representing the probability of that word. No word will contain more than 100 letters.<br><br>Following the dictionary, there is a line containing a single integer m. Next follow m lines, each consisting of a sequence of at most 100 decimal digits 2-9, followed by a single 1 meaning &quot;next word&quot;.<br>", output:"The output for each scenario begins with a line containing &quot;Scenario #i:&quot;, where i is the number of the scenario starting at 1.<br><br>For every number sequence s of the scenario, print one line for every keystroke stored in s, except for the 1 at the end. In this line, print the most probable word prefix defined by the probabilities in the dictionary and the T9 selection rules explained above. Whenever none of the words in the dictionary match the given number sequence, print &quot;MANUALLY&quot; instead of a prefix.<br><br>Terminate the output for every number sequence with a blank line, and print an additional blank line at the end of every scenario.<br>", sample_in:"2\n5\nhell 3\nhello 4\nidea 8\nnext 8\nsuper 3\n2\n435561\n43321\n7\nanother 5\ncontest 6\nfollow 3\ngive 13\ninteger 6\nnew 14\nprogram 4\n5\n77647261\n6391\n4681\n26684371\n77771", sample_out:"Scenario #1:\ni\nid\nhel\nhell\nhello\n\ni\nid\nide\nidea\n\n\nScenario #2:\np\npr\npro\nprog\nprogr\nprogra\nprogram\n\nn\nne\nnew\n\ng\nin\nint\n\nc\nco\ncon\ncont\nanoth\nanothe\nanother\n\np\npr\nMANUALLY\nMANUALLY", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:342, vtotal_submit:1386, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Northwestern Europe 2001", author:"", tag:["TEST"]}
{pid:1299, vid:1299, oj:"hdu", title:"Diophantus of Alexandria", desc:"Diophantus of Alexandria was an egypt mathematician living in Alexandria. He was one of the first mathematicians to study equations where variables were restricted to integral values. In honor of him, these equations are commonly called diophantine equations. One of the most famous diophantine equation is x^n + y^n = z^n. Fermat suggested that for n &gt; 2, there are no solutions with positive integral values for x, y and z. A proof of this theorem (called Fermat\'s last theorem) was found only recently by Andrew Wiles.<br><br>Consider the following diophantine equation: <br><br><center>1 / x + 1 / y = 1 / n where x, y, n ∈ N+ (1) </center><br><br>Diophantus is interested in the following question: for a given n, how many distinct solutions (i. e., solutions satisfying x ≤ y) does equation (1) have? For example, for n = 4, there are exactly three distinct solutions: <br><br><center>1 / 5 + 1 / 20 = 1 / 4<br>1 / 6 + 1 / 12 = 1 / 4<br>1 / 8 + 1 / 8 = 1 / 4</center><br><br><br>Clearly, enumerating these solutions can become tedious for bigger values of n. Can you help Diophantus compute the number of distinct solutions for big values of n quickly?<br>", input:"The first line contains the number of scenarios. Each scenario consists of one line containing a single number n (1 ≤ n ≤ 10^9). <br>", output:"The output for every scenario begins with a line containing &quot;Scenario #i:&quot;, where i is the number of the scenario starting at 1. Next, print a single line with the number of distinct solutions of equation (1) for the given value of n. Terminate each scenario with a blank line. <br>", sample_in:"2\n4\n1260", sample_out:"Scenario #1:\n3\n\nScenario #2:\n113", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:482, vtotal_submit:2140, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"TUD Programming Contest 2006", author:"", tag:["TEST"]}
{pid:1300, vid:1300, oj:"hdu", title:"Pearls", desc:"In Pearlania everybody is fond of pearls. One company, called The Royal Pearl, produces a lot of jewelry with pearls in it. The Royal Pearl has its name because it delivers to the royal family of Pearlania. But it also produces bracelets and necklaces for ordinary people. Of course the quality of the pearls for these people is much lower then the quality of pearls for the royal family. In Pearlania pearls are separated into 100 different quality classes. A quality class is identified by the price for one single pearl in that quality class. This price is unique for that quality class and the price is always higher then the price for a pearl in a lower quality class.<br><br>Every month the stock manager of The Royal Pearl prepares a list with the number of pearls needed in each quality class. The pearls are bought on the local pearl market. Each quality class has its own price per pearl, but for every complete deal in a certain quality class one has to pay an extra amount of money equal to ten pearls in that class. This is to prevent tourists from buying just one pearl.<br><br>Also The Royal Pearl is suffering from the slow-down of the global economy. Therefore the company needs to be more efficient. The CFO (chief financial officer) has discovered that he can sometimes save money by buying pearls in a higher quality class than is actually needed. No customer will blame The Royal Pearl for putting better pearls in the bracelets, as long as the prices remain the same.<br><br>For example 5 pearls are needed in the 10 Euro category and 100 pearls are needed in the 20 Euro category. That will normally cost: (5+10)*10 + (100+10)*20 = 2350 Euro.<br><br>Buying all 105 pearls in the 20 Euro category only costs: (5+100+10)*20 = 2300 Euro.<br><br>The problem is that it requires a lot of computing work before the CFO knows how many pearls can best be bought in a higher quality class. You are asked to help The Royal Pearl with a computer program.<br><br>Given a list with the number of pearls and the price per pearl in different quality classes, give the lowest possible price needed to buy everything on the list. Pearls can be bought in the requested, or in a higher quality class, but not in a lower one.<br>", input:"The first line of the input contains the number of test cases. Each test case starts with a line containing the number of categories c (1 &lt;= c &lt;= 100). Then, c lines follow, each with two numbers ai and pi. The first of these numbers is the number of pearls ai needed in a class (1 &lt;= ai &lt;= 1000). The second number is the price per pearl pi in that class (1 &lt;= pi &lt;= 1000). The qualities of the classes (and so the prices) are given in ascending order. All numbers in the input are integers.<br>", output:"For each test case a single line containing a single number: the lowest possible price needed to buy everything on the list.<br>", sample_in:"2\n2\n100 1\n100 2\n3\n1 10\n1 11\n100 12", sample_out:"330\n1344", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:448, vtotal_submit:1285, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Northwestern Europe 2002", author:"", tag:["TEST"]}
{pid:1301, vid:1301, oj:"hdu", title:"Jungle Roads", desc:"  <center><img src=data/images/1301-1.gif></center><br>The Head Elder of the tropical island of Lagrishan has a problem. A burst of foreign aid money was spent on extra roads between villages some years ago. But the jungle overtakes roads relentlessly, so the large road network is too expensive to maintain. The Council of Elders must choose to stop maintaining some roads. The map above on the left shows all the roads in use now and the cost in aacms per month to maintain them. Of course there needs to be some way to get between all the villages on maintained roads, even if the route is not as short as before. The Chief Elder would like to tell the Council of Elders what would be the smallest amount they could spend in aacms per month to maintain roads that would connect all the villages. The villages are labeled A through I in the maps above. The map on the right shows the roads that could be maintained most cheaply, for 216 aacms per month. Your task is to write a program that will solve such problems. <br><br>The input consists of one to 100 data sets, followed by a final line containing only 0. Each data set starts with a line containing only a number n, which is the number of villages, 1 &lt; n &lt; 27, and the villages are labeled with the first n letters of the alphabet, capitalized. Each data set is completed with n-1 lines that start with village labels in alphabetical order. There is no line for the last village. Each line for a village starts with the village label followed by a number, k, of roads from this village to villages with labels later in the alphabet. If k is greater than 0, the line continues with data for each of the k roads. The data for each road is the village label for the other end of the road followed by the monthly maintenance cost in aacms for the road. Maintenance costs will be positive integers less than 100. All data fields in the row are separated by single blanks. The road network will always allow travel between all the villages. The network will never have more than 75 roads. No village will have more than 15 roads going to other villages (before or after in the alphabet). In the sample input below, the first data set goes with the map above. <br><br>The output is one integer per line for each data set: the minimum cost in aacms per month to maintain a road system that connect all the villages. Caution: A brute force solution that examines every possible set of roads will not finish within the one minute time limit. <br>", input:"", output:"", sample_in:"9\nA 2 B 12 I 25\nB 3 C 10 H 40 I 8\nC 2 D 18 G 55\nD 1 E 44\nE 2 F 60 G 38\nF 0\nG 1 H 35\nH 1 I 35\n3\nA 2 B 10 C 40\nB 1 C 20\n0", sample_out:"216\n30", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1983, vtotal_submit:3969, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 2002", author:"", tag:["TEST"]}
{pid:1302, vid:1302, oj:"hdu", title:"The Snail", desc:"A snail is at the bottom of a 6-foot well and wants to climb to the top. The snail can climb 3 feet while the sun is up, but slides down 1 foot at night while sleeping. The snail has a fatigue factor of 10%, which means that on each successive day the snail climbs 10% * 3 = 0.3 feet less than it did the previous day. (The distance lost to fatigue is always 10% of the first day\'s climbing distance.) On what day does the snail leave the well, i.e., what is the first day during which the snail\'s height exceeds 6 feet? (A day consists of a period of sunlight followed by a period of darkness.) As you can see from the following table, the snail leaves the well during the third day. <br><br>Day Initial Height Distance Climbed Height After Climbing Height After Sliding <br>1 0 3 3 2 <br>2 2 2.7 4.7 3.7 <br>3 3.7 2.4 6.1 - <br><br>Your job is to solve this problem in general. Depending on the parameters of the problem, the snail will eventually either leave the well or slide back to the bottom of the well. (In other words, the snail\'s height will exceed the height of the well or become negative.) You must find out which happens first and on what day.<br>", input:"The input file contains one or more test cases, each on a line by itself. Each line contains four integers H, U, D, and F, separated by a single space. If H = 0 it signals the end of the input; otherwise, all four numbers will be between 1 and 100, inclusive. H is the height of the well in feet, U is the distance in feet that the snail can climb during the day, D is the distance in feet that the snail slides down during the night, and F is the fatigue factor expressed as a percentage. The snail never climbs a negative distance. If the fatigue factor drops the snail\'s climbing distance below zero, the snail does not climb at all that day. Regardless of how far the snail climbed, it always slides D feet at night.<br>", output:"For each test case, output a line indicating whether the snail succeeded (left the well) or failed (slid back to the bottom) and on what day. Format the output exactly as shown in the example.<br>", sample_in:"6 3 1 10\n10 2 1 50\n50 5 3 14\n50 6 4 1\n50 6 3 1\n1 1 1 1\n0 0 0 0", sample_out:"success on day 3\nfailure on day 4\nfailure on day 7\nfailure on day 68\nsuccess on day 20\nfailure on day 2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:799, vtotal_submit:1197, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 1997", author:"", tag:["TEST"]}
{pid:1303, vid:1303, oj:"hdu", title:"Doubles", desc:"As part of an arithmetic competency program, your students will be given randomly generated lists of from 2 to 15 unique positive integers and asked to determine how many items in each list are twice some other item in the same list. You will need a program to help you with the grading. This program should be able to scan the lists and output the correct answer for each one. For example, given the list <br>1 4 3 2 9 7 18 22<br><br>your program should answer 3, as 2 is twice 1, 4 is twice 2, and 18 is twice 9. <br>", input:"The input file will consist of one or more lists of numbers. There will be one list of numbers per line. Each list will contain from 2 to 15 unique positive integers. No integer will be larger than 99. Each line will be terminated with the integer 0, which is not considered part of the list. A line with the single number -1 will mark the end of the file. The example input below shows 3 separate lists. Some lists may not contain any doubles.<br>", output:"The output will consist of one line per input list, containing a count of the items that are double some other item.<br>", sample_in:"1 4 3 2 9 7 18 22 0\n2 4 8 10 0\n7 5 11 13 1 3 0\n-1 ", sample_out:"3\n2\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1922, vtotal_submit:3137, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 2003", author:"", tag:["TEST"]}
{pid:1304, vid:1304, oj:"hdu", title:"A Contesting Decision", desc:"Judging a programming contest is hard work, with demanding contestants, tedious decisions, and monotonous work. Not to mention the nutritional problems of spending 12 hours with only donuts, pizza, and soda for food. Still, it can be a lot of fun. <br>Software that automates the judging process is a great help, but the notorious unreliability of some contest software makes people wish that something better were available. You are part of a group trying to develop better, open source, contest management software, based on the principle of modular design.<br><br>Your component is to be used for calculating the scores of programming contest teams and determining a winner. You will be given the results from several teams and must determine the winner.<br><br>Scoring<br><br>There are two components to a team\'s score. The first is the number of problems solved. The second is penalty points, which reflects the amount of time and incorrect submissions made before the problem is solved. For each problem solved correctly, penalty points are charged equal to the time at which the problem was solved plus 20 minutes for each incorrect submission. No penalty points are added for problems that are never solved.<br><br>So if a team solved problem one on their second submission at twenty minutes, they are charged 40 penalty points. If they submit problem 2 three times, but do not solve it, they are charged no penalty points. If they submit problem 3 once and solve it at 120 minutes, they are charged 120 penalty points. Their total score is two problems solved with 160 penalty points.<br><br>The winner is the team that solves the most problems. If teams tie for solving the most problems, then the winner is the team with the fewest penalty points.<br>", input:"For the programming contest your program is judging, there are four problems. You are guaranteed that the input will not result in a tie between teams after counting penalty points.<br><br>Line 1 &lt;nTeams&gt;<br>Line 2-n+1 &lt;Name&gt; &lt;p1Sub&gt; &lt;p1Time&gt; &lt;p2Sub&gt; &lt;p2Time&gt; ... &lt;p4Time&gt;<br><br>The first element on the line is the team name, which contains no whitespace. Following that, for each of the four problems, is the number of times the team submitted a run for that problem and the time at which it was solved correctly (both integers). If a team did not solve a problem, the time will be zero. The number of submissions will be at least one if the problem was solved.<br>", output:"The output consists of a single line listing the name of the team that won, the number of problems they solved, and their penalty points.<br>", sample_in:"4\nStars 2 20 5 0 4 190 3 220\nRockets 5 180 1 0 2 0 3 100\nPenguins 1 15 3 120 1 300 4 0\nMarsupials 9 0 3 100 2 220 3 80", sample_out:"Penguins 3 475", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:384, vtotal_submit:551, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Atlantic USA 2003", author:"", tag:["TEST"]}
{pid:1305, vid:1305, oj:"hdu", title:"Immediate Decodability", desc:"An encoding of a set of symbols is said to be immediately decodable if no code for one symbol is the prefix of a code for another symbol. We will assume for this problem that all codes are in binary, that no two codes within a set of codes are the same, that each code has at least one bit and no more than ten bits, and that each set has at least two codes and no more than eight.<br><br>Examples: Assume an alphabet that has symbols {A, B, C, D}<br><br>The following code is immediately decodable:<br>A:01 B:10 C:0010 D:0000<br><br>but this one is not:<br>A:01 B:10 C:010 D:0000 (Note that A is a prefix of C)<br>", input:"Write a program that accepts as input a series of groups of records from input. Each record in a group contains a collection of zeroes and ones representing a binary code for a different symbol. Each group is followed by a single separator record containing a single 9; the separator records are not part of the group. Each group is independent of other groups; the codes in one group are not related to codes in any other group (that is, each group is to be processed independently).<br>", output:"For each group, your program should determine whether the codes in that group are immediately decodable, and should print a single output line giving the group number and stating whether the group is, or is not, immediately decodable.<br>", sample_in:"01\n10\n0010\n0000\n9\n01\n10\n010\n0000\n9", sample_out:"Set 1 is immediately decodable\nSet 2 is not immediately decodable", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:629, vtotal_submit:1588, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Pacific Northwest 1998", author:"", tag:["TEST"]}
{pid:1306, vid:1306, oj:"hdu", title:"String Matching", desc:"It\'s easy to tell if two words are identical - just check the letters. But how do you tell if two words are almost identical? And how close is &quot;almost&quot;?<br><br>There are lots of techniques for approximate word matching. One is to determine the best substring match, which is the number of common letters when the words are compared letter-byletter.<br><br>The key to this approach is that the words can overlap in any way. For example, consider the words CAPILLARY and MARSUPIAL. One way to compare them is to overlay them: <br><br>CAPILLARY<br>MARSUPIAL<br><br>There is only one common letter (A). Better is the following overlay:<br><br>CAPILLARY<br>&nbsp;&nbsp;&nbsp;MARSUPIAL<br><br>with two common letters (A and R), but the best is:<br><br>&nbsp;&nbsp;CAPILLARY<br>MARSUPIAL <br><br>Which has three common letters (P, I and L).<br><br>The approximation measure appx(word1, word2) for two words is given by:<br><br>     common letters * 2<br>-----------------------------<br>length(word1) + length(word2)<br><br>Thus, for this example, appx(CAPILLARY, MARSUPIAL) = 6 / (9 + 9) = 1/3. Obviously, for any word W appx(W, W) = 1, which is a nice property, while words with no common letters have an appx value of 0.<br>", input:"", output:"", sample_in:"The input for your program will be a series of words, two per line, until the end-of-file flag of -1.\n\nUsing the above technique, you are to calculate appx() for the pair of words on the line and print the result. For example:\n\nCAR CART\nTURKEY CHICKEN\nMONEY POVERTY\nROUGH PESKY\nA A\n-1\n\nThe words will all be uppercase.", sample_out:"Print the value for appx() for each pair as a reduced fraction, like this:\n\nappx(CAR,CART) = 6/7\nappx(TURKEY,CHICKEN) = 4/13\nappx(MONEY,POVERTY) = 1/3\nappx(ROUGH,PESKY) = 0\nappx(A,A) = 1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:345, vtotal_submit:832, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1307, vid:1307, oj:"hdu", title:"N-Credible Mazes", desc:"An n-tersection is defined as a location in n-dimensional space, n being a positive integer, having all non-negative integer coordinates. For example, the location (1,2,3) represents an n-tersection in three dimensional space. Two n-tersections are said to be adjacent if they have the same number of dimensions and their coordinates differ by exactly 1 in a single dimension only. For example, (1,2,3) is adjacent to (0,2,3) and (2,2,3) and (1,2,4), but not to (2,3,3) or (3,2,3) or (1,2). An n-teresting space is defined as a collection of paths between adjacent n-tersections.<br><br>Finally, an n-credible maze is defined as an n-teresting space combined with two specific n-tersections in that space, one of which is identified as the starting n-tersection and the other as the ending n-tersection.<br>", input:"The input file will consist of the descriptions of one or more n-credible mazes. The first line of the description will specify n, the dimension of the n-teresting space. (For this problem, n will not exceed 10, and all coordinate values will be less than 10.) The next line will contain 2n non-negative integers, the first n of which describe the starting n-tersection, least dimension first, and the next n of which describe the ending n-tersection. Next will be a nonnegative number of lines containing 2n non-negative integers each, identifying paths between adjacent n-tersections in the n-teresting space. The list is terminated by a line containing only the value ?. Several such maze descriptions may be present in the file. The end of the input is signalled by space dimension of zero. No further data will follow this terminating zero.<br>", output:"For each maze output it\'s position in the input; e.g. the first maze is &quot;Maze #1&quot;, the second is &quot;Maze #2&quot;, etc. If it is possible to travel through the n-credible maze\'s n-teresting space from the starting n-tersection to the ending n-tersection, also output &quot;can be travelled&quot; on the same line. If such travel is not possible, output &quot;cannot be travelled&quot; instead.<br>", sample_in:"2 \n0 0 2 2\n0 0 0 1\n0 1 0 2\n0 2 1 2\n1 2 2 2\n-1\n3\n1 1 1 1 2 3\n1 1 2 1 1 3\n1 1 3 1 2 3\n1 1 1 1 1 0\n1 1 0 1 0 0\n1 0 0 0 0 0\n-1\n0", sample_out:"Maze #1 can be travelled\nMaze #2 cannot be travelled ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:90, vtotal_submit:178, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 1997, Shanghai (Mainland China)", author:"", tag:["TEST"]}
{pid:1308, vid:1308, oj:"hdu", title:"What Day Is It?", desc:"The calendar now in use evolved from the Romans. Julius Caesar codified a calendar system that came to be known as the Julian calendar. In this system, all months have 31 days, except for April, June, September, and November, which have 30 days, and February, which has 28 days in non-leap years, and 29 days in leap years. Also, in this system, leap years happened every four years. That is because the astronomers of ancient Rome computed the year to be 365.25 days long, so that after every four years, one needed to add an extra day to keep the calendar on track with the seasons. To do this, they added an extra day (February 29) to every year that was a multiple of four. <br><br><br>Julian Rule: <br><br>Every year that is a multiple of 4 is a leap year, i.e. has an extra day (February 29). <br><br>In 1582, Pope Gregory\'s astronomers noticed that the year was not 365.25 days long, but closer to 365.2425. Therefore, the leap year rule would be revised to the following: <br><br><br><br>Gregorian Rule: <br><br>Every year that is a multiple of 4 is a leap year, unless it is a multiple of 100 that is not a multiple of 400. <br><br>To compensate for how the seasons had shifted against the calendar up until that time, the calendar was actually shifted 10 days: the day following October 4, 1582 was declared to be October 15. <br><br><br>England and its empire (including the United States) didn\'t switch to the Gregorian calendar system until 1752, when the day following September 2 was declared to be September 14. (The delay was caused by the poor relationship between Henry VIII and the Pope.) <br><br><br>Write a program that converts dates in the United States using a calendar of the time and outputs weekdays. <br>", input:"The input will be a series of positive integers greater than zero, three integers per line, which represent dates, one date per line. The format for a date is ``month day year&quot; where month is a number between 1 (which indicates January) and 12 (which indicates December), day is a number between 1 and 31, and year is positive number. <br>", output:"The output will be the input date and name of the weekday on which the given date falls in the format shown in the sample. An invalid date or nonexistent date for the calendar used in the United States at the time should generate an error message indicating a invalid date. The input will end with three zeroes<br>", sample_in:"11 15 1997\n1 1 2000\n7 4 1998\n2 11 1732\n9 2 1752\n9 14 1752\n4 33 1997\n0 0 0", sample_out:"November 15, 1997 is a Saturday\nJanuary 1, 2000 is a Saturday\nJuly 4, 1998 is a Saturday\nFebruary 11, 1732 is a Friday\nSeptember 2, 1752 is a Wednesday \nSeptember 14, 1752 is a Thursday\n4/33/1997 is an invalid date.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:238, vtotal_submit:773, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Pacific Northwest 1997", author:"", tag:["TEST"]}
{pid:1309, vid:1309, oj:"hdu", title:"Loansome Car Buyer", desc:"Kara Van and Lee Sabre are lonesome. A few months ago they took out a loan to buy a new car, but now they\'re stuck at home on Saturday night without wheels and without money. You see, there was a wreck and the car was totaled. Their insurance paid $10,000, the current value of the car. The only problem is that they owed the bank $15,000, and the bank wanted payment immediately, since there was no longer a car for collateral. In just a few moments, this unfortunate couple not only lost their car, but lost an additional $5,000 in cash too. <br>What Kara and Lee failed to account for was depreciation, the loss in value as the car ages. Each month the buyer\'s loan payment reduces the amount owed on the car. However, each month, the car also depreciates as it gets older. Your task is to write a program that calculates the first time, measured in months, that a car buyer owes less money than a car is worth. For this problem, depreciation is specified as a percentage of the previous month\'s value.<br>", input:"Input consists of information for several loans. Each loan consists of one line containing the duration in months of the loan, the down payment, the amount of the loan, and the number of depreciation records that follow. All values are nonnegative, with loans being at most 100 months long and car values at most $75,000. Since depreciation is not constant, the varying rates are specified in a series of depreciation records. Each depreciation record consists of one line with a month number and depreciation percentage, which is more than 0 and less than 1. These are in strictly increasing order by month, starting at month 0. Month 0 is the depreciation that applies immediately after driving the car off the lot and is always present in the data. All the other percentages are the amount of depreciation at the end of the corresponding month. Not all months may be listed in the data. If a month is not listed, then the previous depreciation percentage applies. The end of the input is signalled by a negative loan duration - the other three values will be present but indeterminate.<br><br>For simplicity, we will assume a 0% interest loan, thus the car\'s initial value will be the loan amount plus the down payment. It is possible for a car\'s value and amount owed to be positive numbers less than $1.00. Do not round values to a whole number of cents ($7,347.635 should not be rounded to $7,347.64). <br><br>Consider the first example below of borrowing $15,000 for 30 months. As the buyer drives off the lot, he still owes $15,000, but the car has dropped in value by 10% to $13,950. After 4 months, the buyer has made 4 payments, each of $500, and the car has further depreciated 3% in months 1 and 2 and 0.2% in months 3 and 4. At this time, the car is worth $13,073.10528 and the borrower only owes $13,000.<br>", output:"For each loan, the output is the number of complete months before the borrower owes less than the car is worth. Note that English requires plurals (5 months) on all values other than one (1 month).<br>", sample_in:"30 500.0 15000.0 3\n0 .10\n1 .03\n3 .002\n12 500.0 9999.99 2\n0 .05\n2 .1\n60 2400.0 30000.0 3\n0 .2\n1 .05\n12 .025\n-99 0 17000 1", sample_out:"4 months\n1 month\n49 months", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:33, vtotal_submit:120, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 1999", author:"", tag:["TEST"]}
{pid:1310, vid:1310, oj:"hdu", title:"Team Rankings", desc:"It’s preseason and the local newspaper wants to publish a preseason ranking of the teams in the local amateur basketball league. The teams are the Ants, the Buckets, the Cats, the Dribblers, and the Elephants. When Scoop McGee, sports editor of the paper, gets the rankings from the selected local experts down at the hardware store, he’s dismayed to find that there doesn’t appear to be total agreement and so he’s wondering what ranking to publish that would most accurately reflect the rankings he got from the experts. He’s found that finding the median ranking from among all possible rankings is one way to go.<br><br>The median ranking is computed as follows: Given any two rankings, for instance ACDBE and ABCDE, the distance between the two rankings is defined as the total number of pairs of teams that are given different relative orderings. In our example, the pair B, C is given a different ordering by the two rankings. (The first ranking has C above B while the second ranking has the opposite.) The only other pair that the two rankings disagree on is B, D; thus, the distance between these two rankings is 2. The median ranking of a set of rankings is that ranking whose sum of distances to all the given rankings is minimal. (Note we could have more than one median ranking.) The median ranking may or may not be one of the given rankings.<br><br>Suppose there are 4 voters that have given the rankings: ABDCE, BACDE, ABCED and ACBDE. Consider two candidate median rankings ABCDE and CDEAB. The sum of distances from the ranking ABCDE to the four voted rankings is 1 + 1 + 1 + 1 = 4. We’ll call this sum the value of the ranking ABCDE. The value of the ranking CDEAB is 7 + 7 + 7 + 5 = 26.<br><br>It turns out that ABCDE is in fact the median ranking with a value of 4.<br>", input:"There will be multiple input sets. Input for each set is a positive integer n on a line by itself, followed by n lines (n no more than 100), each containing a permutation of the letters A, B, C, D and E, left-justified with no spaces. The final input set is followed by a line containing a 0, indicating end of input.<br>", output:"Output for each input set should be one line of the form:<br><br>ranking is the median ranking with value value.<br><br>Of course ranking should be replaced by the correct ranking and value with the correct value. If there is more than one median ranking, you should output the one which comes first alphabetically.<br>", sample_in:"4\nABDCE\nBACDE\nABCED\nACBDE\n0", sample_out:"ABCDE is the median ranking with value 4.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:51, vtotal_submit:122, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"East Central North America 2004", author:"", tag:["TEST"]}
{pid:1311, vid:1311, oj:"hdu", title:"Relative Relatives", desc:"Today is Ted\'s 100th birthday. A few weeks ago, you were selected by the family to contact all of Ted\'s descendants and organize a surprise party. To make this task easier, you created an age-prioritized list of everyone descended from Ted. Descendants of the same age are listed in dictionary order. <br><br>The only materials you had to aid you were birth certificates. Oddly enough, these birth certificates were not dated. They simply listed the father\'s name, the child\'s name, and the father\'s exact age when the baby was born. <br>", input:"Input to this problem will begin with line containing a single integer n indicating the number of data sets. Each data set will be formatted according to the following description. <br><br>A single data set has 2 components: <br><br>Descendant Count - A line containing a single integer X (where 0 &lt; X &lt; 100) indicating the number of Ted\'s descendants. <br>Birth Certificate List - Data for X birth certificates, with one certificate\'s data per line. Each certificate\'s data will be of the format &quot;FNAME CNAME FAGE&quot; where: <br>FNAME is the father\'s name. <br>CNAME is the child\'s name. <br>FAGE is the integer age of the father on the date of CNAMEs birth. <br>Note: <br><br>Names are unique identifiers of individuals and contain no embedded white space. <br>All of Ted\'s descendants share Ted\'s birthday. Therefore, the age difference between any two is an integer number of years. (For those of you that are really picky, assume they were all born at the exact same hour, minute, second, etc... of their birth year.) <br>You have a birth certificate for all of Ted\'s descendants (a complete collection). ", output:"For each data set, there will be X+1 lines of output. The first will read, &quot;DATASET Y&quot;, where Y is 1 for the first data set, 2 for the second, etc. The subsequent X lines constitute your age-prioritized list of Ted\'s descendants along with their ages using the format &quot;NAME AGE&quot;. Descendants of the same age will be listed in dictionary order. <br>", sample_in:"2\n1\nTed Bill 25\n4\nRay James 40\nJames Beelzebub 17\nRay Mark 75\nTed Ray 20", sample_out:"DATASET 1\nBill 75\nDATASET 2\nRay 80\nJames 40\nBeelzebub 23\nMark 5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:95, vtotal_submit:323, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Central USA 2004", author:"", tag:["TEST"]}
{pid:1312, vid:1312, oj:"hdu", title:"Red and Black", desc:"There is a rectangular room, covered with square tiles. Each tile is colored either red or black. A man is standing on a black tile. From a tile, he can move to one of four adjacent tiles. But he can\'t move on red tiles, he can move only on black tiles.<br><br>Write a program to count the number of black tiles which he can reach by repeating the moves described above. <br>", input:"The input consists of multiple data sets. A data set starts with a line containing two positive integers W and H; W and H are the numbers of tiles in the x- and y- directions, respectively. W and H are not more than 20.<br><br>There are H more lines in the data set, each of which includes W characters. Each character represents the color of a tile as follows.<br><br>\'.\' - a black tile <br>\'#\' - a red tile <br>\'@\' - a man on a black tile(appears exactly once in a data set) <br>", output:"For each data set, your program should output a line which contains the number of tiles he can reach from the initial tile (including itself). <br>", sample_in:"6 9\n....#.\n.....#\n......\n......\n......\n......\n......\n#@...#\n.#..#.\n11 9\n.#.........\n.#.#######.\n.#.#.....#.\n.#.#.###.#.\n.#.#..@#.#.\n.#.#####.#.\n.#.......#.\n.#########.\n...........\n11 6\n..#..#..#..\n..#..#..#..\n..#..#..###\n..#..#..#@.\n..#..#..#..\n..#..#..#..\n7 7\n..#.#..\n..#.#..\n###.###\n...@...\n###.###\n..#.#..\n..#.#..\n0 0", sample_out:"45\n59\n6\n13", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2885, vtotal_submit:7807, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2004, Ehime (Japan), Japan Domestic", author:"", tag:["TEST"]}
{pid:1313, vid:1313, oj:"hdu", title:"Round and Round We Go", desc:"A cyclic number is an integer n digits in length which, when multiplied by any integer from 1 to n, yields a ~{!0~}cycle~{!1~} of the digits of the original number. That is, if you consider the number after the last digit to ~{!0~}wrap around~{!1~} back to the first digit, the sequence of digits in both numbers will be the same, though they may start at different positions.<br><br>For example, the number 142857 is cyclic, as illustrated by the following table: <br><br>142857*1=142857<br><br>142857*2=285714<br><br>142857*3=428571<br><br>142857*4=571428<br><br>142857*5=714285<br><br>142857*6=857142<br><br>Write a program which will determine whether or not numbers are cyclic. The input file is a list of integers from 2 to 60 digits in length. (Note that preceding zeros should not be removed, they are considered part of the number and count in determining n. Thus, ~{!0~}01~{!1~} is a two-digit number, distinct from ~{!0~}1~{!1~} which is a one-digit number.)<br><br>", input:"", output:"For each input integer, write a line in the output indicating whether or not it is cyclic.<br>", sample_in:"142857\n142856\n142858\n01\n0588235294117647", sample_out:"142857 is cyclic\n142856 is not cyclic\n142858 is not cyclic\n01 is not cyclic\n0588235294117647 is cyclic ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:284, vtotal_submit:605, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Greater New York 2001", author:"", tag:["TEST"]}
{pid:1314, vid:1314, oj:"hdu", title:"Numerically Speaking", desc:"A developer of crossword puzzles (and other similar word games) has decided to develop a mapping between every possible word with from one to twenty characters and unique integers. The mapping is very simple, with the ordering being done first by the length of the word, and then alphabetically. Part of the list is shown below. <br>   a          1<br>   b          2<br>   ...<br>   z          26<br>   aa         27<br>   ab         28<br>   ...<br>   snowfall   157,118,051,752<br>   ...<br><br>Your job in this problem is to develop a program which can translate, bidirectionally, between the unique word numbers and the corresponding words. <br>", input:"Input to the program is a list of words and numbers, one per line starting in column one, followed by a line containing a single asterisk in column one. A number will consist only of decimal digits (0 through 9) followed immediately by the end of line (that is, there will be no commas in input numbers). A word will consist of between one and twenty lowercase alphabetic characters (a through z). <br>", output:"The output is to contain a single line for each word or number in the input data. This line is to contain the word starting in column one, followed by an appropriate number of blanks, and the corresponding word number starting in column 23. Word numbers that have more than three digits must be separated by commas at thousands, millions, and so forth. <br>", sample_in:"29697684282993\ntranscendental\n28011622636823854456520\ncomputationally\nzzzzzzzzzzzzzzzzzzzz\n*", sample_out:"elementary            29,697,684,282,993\ntranscendental        51,346,529,199,396,181,750\nprestidigitation      28,011,622,636,823,854,456,520\ncomputationally       232,049,592,627,851,629,097\nzzzzzzzzzzzzzzzzzzzz  20,725,274,851,017,785,518,433,805,270", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:108, vtotal_submit:229, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"North Central North America 1997", author:"", tag:["TEST"]}
{pid:1315, vid:1315, oj:"hdu", title:"Basic", desc:"The programming language Ada has integer constants that look like this: 123, 8#123#, 16#abc#. These constants represent the integers 123, 83 (123 base 8) and 2739 (abc base 16). More precisely, an integer may be a decimal integer given as a sequence of one or more digits less than 10, or it may be an integer to some specific base, given as the base followed by a sequence of one or more digits less than the base enclosed by # symbols. Lower case letters from a through f are used as the digits representing 10 through 15. In Ada, the base, if specified, must be a sequence of decimal digits. For this problem, however, the base may be of any form described above so long as it represents an integer between 2 and 16 inclusive. <br>", input:"The first line of input contains a positive integer n. n lines follow<br>", output:"For each line of input, output a line &quot;yes&quot; if it is a valid integer constant according to the above rules; otherwise output a line containing &quot;no&quot;. Input lines contain no spaces and are between 1 and 80 characters in length. <br>", sample_in:"5\n2#101#\n2#101##123#\n17#abc#\n16#123456789abcdef#\n16#123456789abcdef#123456789abcdef#", sample_out:"yes\nyes\nno\nyes\nno", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:39, vtotal_submit:205, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2003.01.25", author:"", tag:["TEST"]}
{pid:1316, vid:1316, oj:"hdu", title:"How Many Fibs?", desc:"Recall the definition of the Fibonacci numbers: <br>f1 := 1 <br>f2 := 2 <br>fn := fn-1 + fn-2 (n &gt;= 3) <br><br>Given two numbers a and b, calculate how many Fibonacci numbers are in the range [a, b]. <br>", input:"The input contains several test cases. Each test case consists of two non-negative integer numbers a and b. Input is terminated by a = b = 0. Otherwise, a &lt;= b &lt;= 10^100. The numbers a and b are given with no superfluous leading zeros.<br>", output:"For each test case output on a single line the number of Fibonacci numbers fi with a &lt;= fi &lt;= b. <br>", sample_in:"10 100\n1234567890 9876543210\n0 0", sample_out:"5\n4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1005, vtotal_submit:3474, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 2000", author:"", tag:["TEST"]}
{pid:1317, vid:1317, oj:"hdu", title:"XYZZY", desc:"It has recently been discovered how to run open-source software on the Y-Crate gaming device. A number of enterprising designers have developed Advent-style games for deployment on the Y-Crate. Your job is to test a number of these designs to see which are winnable. <br>Each game consists of a set of up to 100 rooms. One of the rooms is the start and one of the rooms is the finish. Each room has an energy value between -100 and +100. One-way doorways interconnect pairs of rooms. <br><br>The player begins in the start room with 100 energy points. She may pass through any doorway that connects the room she is in to another room, thus entering the other room. The energy value of this room is added to the player\'s energy. This process continues until she wins by entering the finish room or dies by running out of energy (or quits in frustration). During her adventure the player may enter the same room several times, receiving its energy each time. <br>", input:"The input consists of several test cases. Each test case begins with n, the number of rooms. The rooms are numbered from 1 (the start room) to n (the finish room). Input for the n rooms follows. The input for each room consists of one or more lines containing: <br><br>the energy value for room i <br>the number of doorways leaving room i <br>a list of the rooms that are reachable by the doorways leaving room i <br>The start and finish rooms will always have enery level 0. A line containing -1 follows the last test case. <br>", output:"In one line for each case, output &quot;winnable&quot; if it is possible for the player to win, otherwise output &quot;hopeless&quot;. <br>", sample_in:"5\n0 1 2\n-60 1 3\n-60 1 4\n20 1 5\n0 0\n5\n0 1 2\n20 1 3\n-60 1 4\n-60 1 5\n0 0\n5\n0 1 2\n21 1 3\n-60 1 4\n-60 1 5\n0 0\n5\n0 1 2\n20 2 1 3\n-60 1 4\n-60 1 5\n0 0\n-1", sample_out:"hopeless\nhopeless\nwinnable\nwinnable", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:286, vtotal_submit:2121, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2003.09.27", author:"", tag:["TEST"]}
{pid:1318, vid:1318, oj:"hdu", title:"Palindromes", desc:"A regular palindrome is a string of numbers or letters that is the same forward as backward. For example, the string &quot;ABCDEDCBA&quot; is a palindrome because it is the same when the string is read from left to right as when the string is read from right to left. <br><br>A mirrored string is a string for which when each of the elements of the string is changed to its reverse (if it has a reverse) and the string is read backwards the result is the same as the original string. For example, the string &quot;3AIAE&quot; is a mirrored string because &quot;A&quot; and &quot;I&quot; are their own reverses, and &quot;3&quot; and &quot;E&quot; are each others\' reverses. <br><br><br>A mirrored palindrome is a string that meets the criteria of a regular palindrome and the criteria of a mirrored string. The string &quot;ATOYOTA&quot; is a mirrored palindrome because if the string is read backwards, the string is the same as the original and because if each of the characters is replaced by its reverse and the result is read backwards, the result is the same as the original string. Of course, &quot;A&quot;, &quot;T&quot;, &quot;O&quot;, and &quot;Y&quot; are all their own reverses. <br><br><br>A list of all valid characters and their reverses is as follows. <br><br><pre><br>Character  Reverse  Character  Reverse  Character  Reverse  <br><br>    A         A         M         M         Y         Y<br><br>    B                   N                   Z         5<br><br>    C                   O         O         1         1<br><br>    D                   P                   2         S<br><br>    E         3         Q                   3         E<br><br>    F                   R                   4<br><br>    G                   S         2         5         Z<br><br>    H         H         T         T         6<br><br>    I         I         U         U         7<br><br>    J         L         V         V         8         8<br><br>    K                   W         W         9<br><br>    L         J         X         X<br></pre><br><br><br>Note that O (zero) and 0 (the letter) are considered the same character and therefore ONLY the letter &quot;0&quot; is a valid character. <br>", input:"Input consists of strings (one per line) each of which will consist of one to twenty valid characters. There will be no invalid characters in any of the strings. Your program should read to the end of file.<br>", output:"For each input string, you should print the string starting in column 1 immediately followed by exactly one of the following strings. <br><br>&quot; -- is not a palindrome.&quot; <br>if the string is not a palindrome and is not a mirrored string <br><br>&quot; -- is a regular palindrome.&quot; <br>if the string is a palindrome and is not a mirrored string <br><br>&quot; -- is a mirrored string.&quot; <br>if the string is not a palindrome and is a mirrored string <br><br>&quot; -- is a mirrored palindrome.&quot; <br>if the string is a palindrome and is a mirrored string <br><br><br>Note that the output line is to include the -\'s and spacing exactly as shown in the table above and demonstrated in the Sample Output below. <br><br>In addition, after each output line, you must print an empty line. <br>", sample_in:"NOTAPALINDROME \nISAPALINILAPASI \n2A3MEAS \nATOYOTA", sample_out:"NOTAPALINDROME -- is not a palindrome.\n\nISAPALINILAPASI -- is a regular palindrome.\n\n2A3MEAS -- is a mirrored string.\n\nATOYOTA -- is a mirrored palindrome.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:168, vtotal_submit:506, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Central USA 1995", author:"", tag:["TEST"]}
{pid:1319, vid:1319, oj:"hdu", title:"Prime Cuts", desc:"A prime number is a counting number (1, 2, 3, ...) that is evenly divisible only by 1 and itself. In this problem you are to write a program that will cut some number of prime numbers from the list of prime numbers between (and including) 1 and N. Your program will read in a number N; determine the list of prime numbers between 1 and N; and print the C*2 prime numbers from the center of the list if there are an even number of prime numbers or (C*2)-1 prime numbers from the center of the list if there are an odd number of prime numbers in the list. <br>", input:"Each input set will be on a line by itself and will consist of 2 numbers. The first number (1 &lt;= N &lt;= 1000) is the maximum number in the complete list of prime numbers between 1 and N. The second number (1 &lt;= C &lt;= N) defines the C*2 prime numbers to be printed from the center of the list if the length of the list is even; or the (C*2)-1 numbers to be printed from the center of the list if the length of the list is odd. <br>", output:"For each input set, you should print the number N beginning in column 1 followed by a space, then by the number C, then by a colon (:), and then by the center numbers from the list of prime numbers as defined above. If the size of the center list exceeds the limits of the list of prime numbers between 1 and N, the list of prime numbers between 1 and N (inclusive) should be printed. Each number from the center of the list should be preceded by exactly one blank. Each line of output should be followed by a blank line. Hence, your output should follow the exact format shown in the sample output. <br>", sample_in:"21 2\n18 2\n18 18\n100 7", sample_out:"21 2: 5 7 11\n\n18 2: 3 5 7 11\n\n18 18: 1 2 3 5 7 11 13 17\n\n100 7: 13 17 19 23 29 31 37 41 43 47 53 59 61 67", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:601, vtotal_submit:1761, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Central USA 1996", author:"", tag:["TEST"]}
{pid:1320, vid:1320, oj:"hdu", title:"Inversion", desc:"  Let { A1,A2,...,An } be a permutation of the set{ 1,2,..., n}. If i &lt; j and Ai &gt; Aj then the pair (Ai,Aj) is called an &quot;inversion&quot; of the permutation. For example, the permutation {3, 1, 4, 2} has three inversions: (3,1), (3,2) and (4,2).<br>  The inversion table B1,B2,...,Bn of the permutation { A1,A2,...,An } is obtained by letting Bj be the number of elements to the left of j that are greater than j. (In other words, Bj is the number of inversions whose second component is j.) For example, the permutation:<br>{ 5,9,1,8,2,6,4,7,3 }<br>has the inversion table<br>2 3 6 4 0 2 2 1 0<br>since there are 2 numbers, 5 and 9, to the left of 1; 3 numbers, 5, 9 and 8, to the left of 2; etc.<br>  Perhaps the most important fact about inversions is Marshall Hall\'s observation that an inversion table uniquely determines the corresponding permutation. So your task is to convert a permutation to its inversion table, or vise versa, to convert from an inversion table to the corresponding permutation.<br>", input:"The input consists of several test cases. Each test case contains two lines.<br>The first line contains a single integer N ( 1 &lt;= N &lt;= 50) which indicates the number of elements in the permutation/invertion table. <br>The second line begins with a single charactor either \'P\', meaning that the next N integers form a permutation, or \'I\', meaning that the next N integers form an inversion table. <br>", output:"For each case of the input output a line of intergers, seperated by a single space (no space at the end of the line). If the input is a permutation, your output will be the corresponding inversion table; if the input is an inversion table, your output will be the corresponding permutation.<br>", sample_in:"9\nP 5 9 1 8 2 6 4 7 3\n9\nI 2 3 6 4 0 2 2 1 0\n0", sample_out:"2 3 6 4 0 2 2 1 0\n5 9 1 8 2 6 4 7 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:243, vtotal_submit:407, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Zhejiang University Local Contest 2002, Preliminary", author:"", tag:["TEST"]}
{pid:1321, vid:1321, oj:"hdu", title:"Reverse Text", desc:"In most languages, text is written from left to right. However, there are other languages where text is read and written from right to left. As a first step towards a program that automatically translates from a left-to-right language into a right-to-left language and back, you are to write a program that changes the direction of a given text. <br>", input:"The input contains several test cases. The first line contains an integer specifying the number of test cases. Each test case consists of a single line of text which contains at most 70 characters. However, the newline character at the end of each line is not considered to be part of the line.<br>", output:"For each test case, print a line containing the characters of the input line in reverse order.<br>", sample_in:"3\nFrankly, I don\'t think we\'ll make much\nmoney out of this scheme.\nmadam I\'m adam", sample_out:"hcum ekam ll\'ew kniht t\'nod I ,ylknarF\n.emehcs siht fo tuo yenom\nmada m\'I madam", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2278, vtotal_submit:4723, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southwestern Europe 1996, Practice", author:"", tag:["TEST"]}
{pid:1322, vid:1322, oj:"hdu", title:"Floppies", desc:"In this age of Internet, on-line connections, instantaneous email, etc., there are still some people who need to work with floppy disks. John is one of those. Every evening he goes home and continues what he has been doing in his office on his private UNIX system. He copies all the files he needs to floppy disks according to the following procedure: <br>1. Put all files in one big SHAR file.<br>2. Compress the file.<br>3. Uuencode it, such that it is split in nice lines of 62 characters each (including the new-line).<br>4. Split it in files of 30,000 lines each (about 1.86Mb).<br>5. Compress each of the files and put it on a floppy by itself.<br><br>So far, this procedure always worked, since 1.86Mb of uuencoded text, after compression, will nicely fit on a 1.44Mb floppy disk.<br><br>Now, given that through compression the size of the SHAR file halves and that uuencoding a compressed file adds 50% to its size (each rounded to the nearest integer number of bytes), we would like to know for a given size of the SHAR file how many floppies John needs.<br>", input:"The input contains several test cases. Each test case consists of a single line containing one integer s (0 &lt;= s &lt;= 1,000,000,000), specifying the size of the SHAR file in bytes.<br><br>The file ends with a file having s = 0. Do not generate output for this file.<br>", output:"For each test case, first output the number of the test case (\'File #1\', \'File #2\', etc.), followed by a line that contains the minimal number of floppies needed for the transfer and a blank line. Adhere to the format shown below in the sample output.<br>", sample_in:"1000000\n10000000\n100000000\n0", sample_out:"File #1\nJohn needs 1 floppies.\n\nFile #2\nJohn needs 5 floppies.\n\nFile #3\nJohn needs 41 floppies.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:209, vtotal_submit:381, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southwestern Europe 1996, Practice", author:"", tag:["TEST"]}
{pid:1323, vid:1323, oj:"hdu", title:"Perfection", desc:"From the article Number Theory in the 1994 Microsoft Encarta: &quot;If a, b, c are integers such that a = bc, a is called a multiple of b or of c, and b or c is called a divisor or factor of a. If c is not 1/-1, b is called a proper divisor of a. Even integers, which include 0, are multiples of 2, for example, -4, 0, 2, 10; an odd integer is an integer that is not even, for example, -5, 1, 3, 9. A perfect number is a positive integer that is equal to the sum of all its positive, proper divisors; for example, 6, which equals 1 + 2 + 3, and 28, which equals 1 + 2 + 4 + 7 + 14, are perfect numbers. A positive number that is not perfect is imperfect and is deficient or abundant according to whether the sum of its positive, proper divisors is smaller or larger than the number itself. Thus, 9, with proper divisors 1, 3, is deficient; 12, with proper divisors 1, 2, 3, 4, 6, is abundant.&quot; <br>Given a number, determine if it is perfect, abundant, or deficient. <br>", input:"A list of N positive integers (none greater than 60,000), with 1 &lt; N &lt; 100. A 0 will mark the end of the list.<br>", output:"The first line of output should read PERFECTION OUTPUT. The next N lines of output should list for each input integer whether it is perfect, deficient, or abundant, as shown in the example below. Format counts: the echoed integers should be right justified within the first 5 spaces of the output line, followed by two blank spaces, followed by the description of the integer. The final line of output should read END OF OUTPUT.<br>", sample_in:"15 28 6 56 60000 22 496 0", sample_out:"PERFECTION OUTPUT\n   15  DEFICIENT\n   28  PERFECT\n    6  PERFECT\n   56  ABUNDANT\n60000  ABUNDANT\n   22  DEFICIENT\n  496  PERFECT\nEND OF OUTPUT", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:832, vtotal_submit:1523, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Atlantic USA 1996", author:"", tag:["TEST"]}
{pid:1324, vid:1324, oj:"hdu", title:"Pseudo-Random Numbers", desc:"Computers normally cannot generate really random numbers, but frequently are used to generate sequences of pseudo-random numbers. These are generated by some algorithm, but appear for all practical purposes to be really random. Random numbers are used in many applications, including simulation. <br>A common pseudo-random number generation technique is called the linear congruential method. If the last pseudo-random number generated was L, then the next number is generated by evaluating ( Z x L + I ) mod M, where Z is a constant multiplier, I is a constant increment, and M is a constant modulus. For example, suppose Z is 7, I is 5, and M is 12. If the first random number (usually called the seed) is 4, then we can determine the next few pseudo-random numbers are follows: <br><br><center><img src=data/images/1324-1.gif></center><br><br>As you can see, the sequence of pseudo-random numbers generated by this technique repeats after six numbers. It should be clear that the longest sequence that can be generated using this technique is limited by the modulus, M. <br><br>In this problem you will be given sets of values for Z, I, M, and the seed, L. Each of these will have no more than four digits. For each such set of values you are to determine the length of the cycle of pseudo-random numbers that will be generated. But be careful: the cycle might not begin with the seed! <br>", input:"Each input line will contain four integer values, in order, for Z, I, M, and L. The last line will contain four zeroes, and marks the end of the input data. L will be less than M. <br>", output:"For each input line, display the case number (they are sequentially numbered, starting with 1) and the length of the sequence of pseudo-random numbers before the sequence is repeated. <br>", sample_in:"7 5 12 4\n5173 3849 3279 1511\n9111 5309 6000 1234\n1079 2136 9999 1237\n0 0 0 0", sample_out:"Case 1: 6\nCase 2: 546\nCase 3: 500\nCase 4: 220", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:184, vtotal_submit:535, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"North Central North America 1996", author:"", tag:["TEST"]}
{pid:1325, vid:1325, oj:"hdu", title:"Is It A Tree?", desc:"A tree is a well-known data structure that is either empty (null, void, nothing) or is a set of one or more nodes connected by directed edges between nodes satisfying the following properties. <br>There is exactly one node, called the root, to which no directed edges point. <br><br>Every node except the root has exactly one edge pointing to it. <br><br>There is a unique sequence of directed edges from the root to each node. <br><br>For example, consider the illustrations below, in which nodes are represented by circles and edges are represented by lines with arrowheads. The first two of these are trees, but the last is not.<br><br><center><img src=data/images/1325-1.gif><img src=data/images/1325-2.gif><img src=data/images/1325-3.gif></center><br><br>In this problem you will be given several descriptions of collections of nodes connected by directed edges. For each of these you are to determine if the collection satisfies the definition of a tree or not. <br><br>", input:"The input will consist of a sequence of descriptions (test cases) followed by a pair of negative integers. Each test case will consist of a sequence of edge descriptions followed by a pair of zeroes Each edge description will consist of a pair of integers; the first integer identifies the node from which the edge begins, and the second integer identifies the node to which the edge is directed. Node numbers will always be greater than zero. <br>", output:"For each test case display the line ``Case k is a tree.&quot; or the line ``Case k is not a tree.&quot;, where k corresponds to the test case number (they are sequentially numbered starting with 1). <br>", sample_in:"6 8 5 3 5 2 6 4\n5 6 0 0\n8 1 7 3 6 2 8 9 7 5\n7 4 7 8 7 6 0 0\n3 8 6 8 6 4\n5 3 5 6 5 2 0 0\n-1 -1", sample_out:"Case 1 is a tree.\nCase 2 is a tree.\nCase 3 is not a tree.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1475, vtotal_submit:11695, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"North Central North America 1997", author:"", tag:["TEST"]}
{pid:1326, vid:1326, oj:"hdu", title:"Box of Bricks", desc:"Little Bob likes playing with his box of bricks. He puts the bricks one upon another and builds stacks of different height. ``Look, I\'ve built a wall!\'\', he tells his older sister Alice. ``Nah, you should make all stacks the same height. Then you would have a real wall.\'\', she retorts. After a little con- sideration, Bob sees that she is right. So he sets out to rearrange the bricks, one by one, such that all stacks are the same height afterwards. But since Bob is lazy he wants to do this with the minimum number of bricks moved. Can you help? <br><br><center><img src=data/images/1326-1.gif></center><br>", input:"The input consists of several data sets. Each set begins with a line containing the number n of stacks Bob has built. The next line contains n numbers, the heights hi of the n stacks. You may assume 1 &lt;= n &lt;= 50 and 1 &lt;= hi &lt;= 100.<br><br>The total number of bricks will be divisible by the number of stacks. Thus, it is always possible to rearrange the bricks such that all stacks have the same height. <br><br>The input is terminated by a set starting with n = 0. This set should not be processed. <br>", output:"For each set, first print the number of the set, as shown in the sample output. Then print the line ``The minimum number of moves is k.\'\', where k is the minimum number of bricks that have to be moved in order to make all the stacks the same height. <br><br>Output a blank line after each set.<br>", sample_in:"6\n5 2 4 1 7 5\n0", sample_out:"Set #1\nThe minimum number of moves is 5.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1546, vtotal_submit:3916, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southwestern Europe 1997", author:"", tag:["TEST"]}
{pid:1327, vid:1327, oj:"hdu", title:"Definite Values", desc:"A common error in programming is to use variables that have not been initialized before. For example, in C and C++, all variables have an indefinite value after declaration - their value can be anything. Thus, the following program<br><br>main()<br>{<br>  int x;<br>  printf(&quot;%d\\n&quot;,x);<br>}<br><br>could print any number. But even in languages such as Pascal, where all values are initialized to zero, it is useful to give variables definite values before using them, the avoid side effects when your code portion is placed into a different context.<br><br>Generally, the problem of deciding for a given program whether all variables have been assigned values before they are read out, is undecidable. But if you, as in this problem, consider only a sequence of assignments, the problem becomes solvable.<br>", input:"The input contains several program parts. Each part starts with a number n on a line by itself, the number of lines in the program part. The following n lines contain each an assignment of the form &quot;variable1 = variable2&quot;, where the variablei\'s are lower-case letters.<br><br>The input is terminated by a test case starting with n = 0.<br>", output:"Assume that before the execution of the given program part, variable a has some definite value, while all other variables are undefined. You have to print the names of the varaibles which have a definite value after the execution of the program part. More specifically, format your output as follows.<br><br>For each program part in the input, first print the number of the program, as shown in the sample output. Then print a line containing the names of the variables which have a definite value after the execution of the given program part. Print them in alphabetically sorted order, and leave one blank after each variable name. If none of the variables has a definite value after the execution of the program part, print the word &quot;none&quot;.<br><br>Print a blank line after each test case.<br>", sample_in:"4\nb = a\nc = d\nd = b\ne = f\n1\na = b\n0", sample_out:"Program #1\na b d \n\nProgram #2\nnone", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:383, vtotal_submit:1139, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southwestern Europe 1997, Practice", author:"", tag:["TEST"]}
{pid:1328, vid:1328, oj:"hdu", title:"IBM Minus One", desc:"You may have heard of the book \'2001 - A Space Odyssey\' by Arthur C. Clarke, or the film of the same name by Stanley Kubrick. In it a spaceship is sent from Earth to Saturn. The crew is put into stasis for the long flight, only two men are awake, and the ship is controlled by the intelligent computer HAL. But during the flight HAL is acting more and more strangely, and even starts to kill the crew on board. We don\'t tell you how the story ends, in case you want to read the book for yourself :-)<br><br>After the movie was released and became very popular, there was some discussion as to what the name \'HAL\' actually meant. Some thought that it might be an abbreviation for \'Heuristic ALgorithm\'. But the most popular explanation is the following: if you replace every letter in the word HAL by its successor in the alphabet, you get ... IBM.<br><br>Perhaps there are even more acronyms related in this strange way! You are to write a program that may help to find this out.<br>", input:"The input starts with the integer n on a line by itself - this is the number of strings to follow. The following n lines each contain one string of at most 50 upper-case letters.<br>", output:"For each string in the input, first output the number of the string, as shown in the sample output. The print the string start is derived from the input string by replacing every time by the following letter in the alphabet, and replacing \'Z\' by \'A\'.<br><br>Print a blank line after each test case.<br>", sample_in:"2\nHAL\nSWERC", sample_out:"String #1\nIBM\n\nString #2\nTXFSD", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1751, vtotal_submit:3589, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southwestern Europe 1997, Practice", author:"", tag:["TEST"]}
{pid:1329, vid:1329, oj:"hdu", title:"Hanoi Tower Troubles Again!", desc:"People stopped moving discs from peg to peg after they know the number of steps needed to complete the entire task. But on the other hand, they didn\'t not stopped thinking about similar puzzles with the Hanoi Tower. Mr.S invented a little game on it. The game consists of N pegs and a LOT of balls. The balls are numbered 1,2,3... The balls look ordinary, but they are actually magic. If the sum of the numbers on two balls is NOT a square number, they will push each other with a great force when they\'re too closed, so they can NEVER be put together touching each other. <br><br><center><img src=data/images/1329-1.jpg></center><br><br>The player should place one ball on the top of a peg at a time. He should first try ball 1, then ball 2, then ball 3... If he fails to do so, the game ends. Help the player to place as many balls as possible. You may take a look at the picture above, since it shows us a best result for 4 pegs. <br>", input:"The first line of the input contains a single integer T, indicating the number of test cases. (1&lt;=T&lt;=50) Each test case contains a single integer N(1&lt;=N&lt;=50), indicating the number of pegs available. <br>", output:"For each test case in the input print a line containing an integer indicating the maximal number of balls that can be placed. Print -1 if an infinite number of balls can be placed. <br>", sample_in:"2\n4\n25", sample_out:"11\n337", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:231, vtotal_submit:405, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"OIBH Reminiscence Programming Contest", author:"", tag:["TEST"]}
{pid:1330, vid:1330, oj:"hdu", title:"Deck", desc:"A single playing card can be placed on a table, carefully, so that the short edges of the card are parallel to the table\'s edge, and half the length of the card hangs over the edge of the table. If the card hung any further out, with its center of gravity off the table, it would fall off the table and flutter to the floor. The same reasoning applies if the card were placed on another card, rather than on a table. <br><br>Two playing cards can be arranged, carefully, with short edges parallel to table edges, to extend 3/4 of a card length beyond the edge of the table. The top card hangs half a card length past the edge of the bottom card. The bottom card hangs with only 1/4 of its length past the table\'s edge. The center of gravity of the two cards combined lies just over the edge of the table. <br><br>Three playing cards can be arranged, with short edges parallel to table edges, and each card touching at most one other card, to extend 11/12 of a card length beyond the edge of the table. The top two cards extend 3/4 of a card length beyond the edge of the bottom card, and the bottom card extends only 1/6 over the table\'s edge; the center of gravity of the three cards lines over the edges of the table. <br><br>If you keep stacking cards so that the edges are aligned and every card has at most one card above it and one below it, how far out can 4 cards extend over the table\'s edge? Or 52 cards? Or 1000 cards? Or 99999?<br>", input:"Input contains several nonnegative integers, one to a line. No integer exceeds 99999.<br>", output:"The standard output will contain, on successful completion of the program, a heading: <br><br># Cards Overhang <br><br>(that\'s two spaces between the words) and, following, a line for each input integer giving the length of the longest overhang achievable with the given number of cards, measured in cardlengths, and rounded to the nearest thousandth. The length must be expressed with at least one digit before the decimal point and exactly three digits after it. The number of cards is right-justified in column 5, and the decimal points for the lengths lie in column 12.<br>", sample_in:"1 \n2 \n3 \n4 \n30 ", sample_out:"The line of digits is intended to guide you in proper output alignment, and is not part of the output that your solution should produce. \n\n12345678901234567\n# Cards  Overhang\n    1     0.500\n    2     0.750\n    3     0.917\n    4     1.042\n   30     1.997", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:525, vtotal_submit:1019, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Central USA 1998", author:"", tag:["TEST"]}
{pid:1331, vid:1331, oj:"hdu", title:"Function Run Fun", desc:"We all love recursion! Don\'t we?<br><br>Consider a three-parameter recursive function w(a, b, c):<br><br>if a &lt;= 0 or b &lt;= 0 or c &lt;= 0, then w(a, b, c) returns:<br>1<br><br>if a &gt; 20 or b &gt; 20 or c &gt; 20, then w(a, b, c) returns:<br>w(20, 20, 20)<br><br>if a &lt; b and b &lt; c, then w(a, b, c) returns:<br>w(a, b, c-1) + w(a, b-1, c-1) - w(a, b-1, c)<br><br>otherwise it returns:<br>w(a-1, b, c) + w(a-1, b-1, c) + w(a-1, b, c-1) - w(a-1, b-1, c-1)<br><br>This is an easy function to implement. The problem is, if implemented directly, for moderate values of a, b and c (for example, a = 15, b = 15, c = 15), the program takes hours to run because of the massive recursion.<br>", input:"The input for your program will be a series of integer triples, one per line, until the end-of-file flag of -1 -1 -1. Using the above technique, you are to calculate w(a, b, c) efficiently and print the result.<br>", output:"Print the value for w(a,b,c) for each triple.", sample_in:"1 1 1\n2 2 2\n10 4 6\n50 50 50\n-1 7 18\n-1 -1 -1 ", sample_out:"w(1, 1, 1) = 2\nw(2, 2, 2) = 4\nw(10, 4, 6) = 523\nw(50, 50, 50) = 1048576\nw(-1, 7, 18) = 1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:791, vtotal_submit:1900, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Pacific Northwest 1999", author:"", tag:["TEST"]}
{pid:1332, vid:1332, oj:"hdu", title:"LC-Display", desc:"A friend of you has just bought a new computer. Until now, the most powerful computer he ever used has been a pocket calculator. Now, looking at his new computer, he is a bit disappointed, because he liked the LC-display of his calculator so much. So you decide to write a program that displays numbers in an LC-display-like style on his computer. <br>", input:"The input contains several lines, one for each number to be displayed. Each line contains two integers s, n (1 &lt;= s &lt;= 10, 0 &lt;= n &lt;= 99 999 999), where n is the number to be displayed and s is the size in which it shall be displayed. <br><br>The input file will be terminated by a line containing two zeros. This line should not be processed. <br>", output:"Output the numbers given in the input file in an LC-display-style using s ``-\'\' signs for the horizontal segments and s ``|\'\' signs for the vertical ones. Each digit occupies exactly s+2 columns and 2s+3 rows. (Be sure to fill all the white space occupied by the digits with blanks, also for the last digit.) There has to be exactly one column of blanks between two digits. <br><br>Output a blank line after each number. (You will find a sample of each digit in the sample output.) <br>", sample_in:"2 12345\n3 67890\n0 0", sample_out:"      --   --        -- \n   |    |    | |  | | \n   |    |    | |  | | \n      --   --   --   -- \n   | |       |    |    |\n   | |       |    |    |\n      --   --        -- \n\n ---   ---   ---   ---   --- \n|         | |   | |   | |   |\n|         | |   | |   | |   |\n|         | |   | |   | |   |\n ---         ---   --- \n|   |     | |   |     | |   |\n|   |     | |   |     | |   |\n|   |     | |   |     | |   |\n ---         ---   ---   ---", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:359, vtotal_submit:1126, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central European Regional Contest 1999", author:"", tag:["TEST"]}
{pid:1333, vid:1333, oj:"hdu", title:"Smith Numbers", desc:"While skimming his phone directory in 1982, Albert Wilansky, a mathematician of Lehigh University, noticed that the telephone number of his brother-in-law H. Smith had the following peculiar property: The sum of the digits of that number was equal to the sum of the digits of the prime factors of that number. Got it? Smith’s telephone number was 493-7775. This number can be written as the product of its prime factors in the following way: <br><br><center>4937775 = 3 * 5 * 5 * 65837</center><br>The sum of all digits of the telephone number is 4+9+3+7+7+7+5= 42?, and the sum of the digits of its prime factors is equally 3+5+5+6+5+8+3+7= 42. Wilansky was so amazed by his discovery that he named this kind of numbers after his brother-in-law: Smith numbers.<br><br>As this observation is also true for every prime number, Wilansky decided later that a (simple and unsophisticated) prime number is not worth being a Smith number, so he excluded them from the definition.<br><br>Wilansky published an article about Smith numbers in the Two Year College Mathematics Journal and was able to present a whole collection of different Smith numbers: For example, 9985 is a Smith number and so is 6036. However,Wilansky was not able to find a Smith number that was larger than the telephone number of his brother-in-law. It is your task to find Smith numbers that are larger than 4937775!<br>", input:"The input consists of a sequence of positive integers, one integer per line. Each integer will have at most 8 digits. The input is terminated by a line containing the number 0.<br>", output:"For every number n &gt; 0 in the input, you are to compute the smallest Smith number which is larger than n, and print it on a line by itself. You can assume that such a number exists.<br>", sample_in:"4937774\n0", sample_out:"4937775 ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:277, vtotal_submit:1408, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central European Regional Contest 2000", author:"", tag:["TEST"]}
{pid:1334, vid:1334, oj:"hdu", title:"Perfect Cubes", desc:"For hundreds of years Fermat\'s Last Theorem, which stated simply that for n &gt; 2 there exist no integers a, b, c &gt; 1 such that a^n = b^n + c^n, has remained elusively unproven. (A recent proof is believed to be correct, though it is still undergoing scrutiny.) It is possible, however, to find integers greater than 1 that satisfy the ``perfect cube\'\' equation a^3 = b^3 + c^3 + d^3 (e.g. a quick calculation will show that the equation 12^3 = 6^3 + 8^3 + 10^3 is indeed true). This problem requires that you write a program to find all sets of numbers {a, b, c, d} which satisfy this equation for a &lt;= 200. <br>", input:"", output:"The output should be listed as shown below, one perfect cube per line, in non-decreasing order of a (i.e. the lines should be sorted by their a values). The values of b, c, and d should also be listed in non-decreasing order on the line itself. There do exist several values of a which can be produced from multiple distinct sets of b, c, and d triples. In these cases, the triples with the smaller b values should be listed first. <br><br>The first part of the output is shown here: <br><br>Cube = 6, Triple = (3,4,5)<br>Cube = 12, Triple = (6,8,10)<br>Cube = 18, Triple = (2,12,16)<br>Cube = 18, Triple = (9,12,15)<br>Cube = 19, Triple = (3,10,18)<br>Cube = 20, Triple = (7,14,17)<br>Cube = 24, Triple = (12,16,20)<br><br>Note: The programmer will need to be concerned with an efficient implementation. The official time limit for this problem is 2 minutes, and it is indeed possible to write a solution to this problem which executes in under 2 minutes on a 33 MHz 80386 machine. Due to the distributed nature of the contest in this region, judges have been instructed to make the official time limit at their site the greater of 2 minutes or twice the time taken by the judge\'s solution on the machine being used to judge this problem.<br>", sample_in:"", sample_out:"", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:679, vtotal_submit:1909, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 1995", author:"", tag:["TEST"]}
{pid:1335, vid:1335, oj:"hdu", title:"Basically Speaking", desc:"The Really Neato Calculator Company, Inc. has recently hired your team to help design their Super Neato Model I calculator. As a computer scientist you suggested to the company that it would be neato if this new calculator could convert among number bases. The company thought this was a stupendous idea and has asked your team to come up with the prototype program for doing base conversion. The project manager of the Super Neato Model I calculator has informed you that the calculator will have the following neato features: <br>It will have a 7-digit display.<br><br>Its buttons will include the capital letters A through F in addition to the digits 0 through 9.<br><br>It will support bases 2 through 16. <br>", input:"The input for your prototype program will consist of one base conversion per line. There will be three numbers per line. The first number will be the number in the base you are converting from. The second number is the base you are converting from. The third number is the base you are converting to. There will be one or more blanks surrounding (on either side of) the numbers. There are several lines of input and your program should continue to read until the end of file is reached.<br>", output:"The output will only be the converted number as it would appear on the display of the calculator. The number should be right justified in the 7-digit display. If the number is to large to appear on the display, then print &quot;ERROR\'\' (without the quotes) right justified in the display. <br>", sample_in:"1111000  2 10\n1111000  2 16\n2102101  3 10\n2102101  3 15\n  12312  4  2\n     1A 15  2\n1234567 10 16\n   ABCD 16 15", sample_out:"    120\n     78\n   1765\n    7CA\n  ERROR\n  11001\n 12D687\n   D071", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:648, vtotal_submit:2056, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 1995", author:"", tag:["TEST"]}
{pid:1336, vid:1336, oj:"hdu", title:"Word Index", desc:"Encoding schemes are often used in situations requiring encryption or information storage/transmission economy. Here, we develop a simple encoding scheme that encodes particular types of words with five or fewer (lower case) letters as integers. <br>Consider the English alphabet {a,b,c,...,z}. Using this alphabet, a set of valid words are to be formed that are in a strict lexicographic order. In this set of valid words, the successive letters of a word are in a strictly ascending order; that is, later letters in a valid word are always after previous letters with respect to their positions in the alphabet list {a,b,c,...,z}. For example, <br><br>abc aep gwz <br><br><br>are all valid three-letter words, whereas <br><br>aab are cat <br><br><br>are not. <br><br>For each valid word associate an integer which gives the position of the word in the alphabetized list of words. That is: <br><br>a -&gt; 1<br>b -&gt; 2<br>.<br>.<br>z -&gt; 26<br>ab -&gt; 27<br>ac -&gt; 28<br>.<br>.<br>az -&gt; 51<br>bc -&gt; 52<br>.<br>.<br>vwxyz -&gt; 83681<br><br>Your program is to read a series of input lines. Each input line will have a single word on it, that will be from one to five letters long. For each word read, if the word is invalid give the number 0. If the word read is valid, give the word\'s position index in the above alphabetical list. <br>", input:"The input consists of a series of single words, one per line. The words are at least one letter long and no more that five letters. Only the lower case alphabetic {a,b,...,z} characters will be used as input. The first letter of a word will appear as the first character on an input line. <br><br>The input will be terminated by end-of-file. <br>", output:"The output is a single integer, greater than or equal to zero (0) and less than or equal 83681. The first digit of an output value should be the first character on a line. There is one line of output for each input line. <br>", sample_in:"z\na\ncat\nvwxyz", sample_out:"26\n1\n0\n83681", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:150, vtotal_submit:360, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"East Central North America 1995", author:"", tag:["TEST"]}
{pid:1337, vid:1337, oj:"hdu", title:"The Drunk Jailer", desc:"A certain prison contains a long hall of n cells, each right next to each other. Each cell has a prisoner in it, and each cell is locked. <br>One night, the jailer gets bored and decides to play a game. For round 1 of the game, he takes a drink of whiskey, and then runs down the hall unlocking each cell. For round 2, he takes a drink of whiskey, and then runs down the hall locking every other cell (cells 2, 4, 6, …). For round 3, he takes a drink of whiskey, and then runs down the hall. He visits every third cell (cells 3, 6, 9, …). If the cell is locked, he unlocks it; if it is unlocked, he locks it. He repeats this for n rounds, takes a final drink, and passes out.<br><br>Some number of prisoners, possibly zero, realizes that their cells are unlocked and the jailer is incapacitated. They immediately escape.<br><br>Given the number of cells, determine how many prisoners escape jail.<br>", input:"The first line of input contains a single positive integer. This is the number of lines that follow. Each of the following lines contains a single integer between 5 and 100, inclusive, which is the number of cells n.<br>", output:"For each line, you must print out the number of prisoners that escape when the prison has n cells.<br>", sample_in:"2\n5\n100 ", sample_out:"2\n10", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:746, vtotal_submit:1027, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Greater New York 2002", author:"", tag:["TEST"]}
{pid:1338, vid:1338, oj:"hdu", title:"Game Prediction", desc:"Suppose there are M people, including you, playing a special card game. At the beginning, each player receives N cards. The pip of a card is a positive integer which is at most N*M. And there are no two cards with the same pip. During a round, each player chooses one card to compare with others. The player whose card with the biggest pip wins the round, and then the next round begins. After N rounds, when all the cards of each player have been chosen, the player who has won the most rounds is the winner of the game. <br>Given your cards received at the beginning, write a program to tell the maximal number of rounds that you may at least win during the whole game.<br>", input:"The input consists of several test cases. The first line of each case contains two integers m (2 &lt;= m &lt;= 20) and n (1 &lt;= n &lt;= 50), representing the number of players and the number of cards each player receives at the beginning of the game, respectively. This followed by a line with n positive integers, representing the pips of cards you received at the beginning. Then a blank line follows to separate the cases. <br><br>The input is terminated by a line with two zeros.<br>", output:"For each test case, output a line consisting of the test case number followed by the number of rounds you will at least win during the game.<br>", sample_in:"2 5\n1 7 2 10 9\n\n6 11\n62 63 54 66 65 61 57 56 50 53 48\n\n0 0", sample_out:"Case 1: 2\nCase 2: 4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:277, vtotal_submit:667, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2002, Beijing (Mainland China)", author:"", tag:["TEST"]}
{pid:1339, vid:1339, oj:"hdu", title:"A Simple Task", desc:"Given a positive integer n and the odd integer o and the nonnegative integer p such that n = o2^p.<br><br><br>Example<br><br>For n = 24, o = 3 and p = 3.<br><br><br>Task<br><br>Write a program which for each data set:<br><br>reads a positive integer n,<br><br>computes the odd integer o and the nonnegative integer p such that n = o2^p,<br><br>writes the result.<br>", input:"The first line of the input contains exactly one positive integer d equal to the number of data sets, 1 &lt;= d &lt;= 10. The data sets follow.<br><br>Each data set consists of exactly one line containing exactly one integer n, 1 &lt;= n &lt;= 10^6.<br>", output:"The output should consists of exactly d lines, one line for each data set.<br><br>Line i, 1 &lt;= i &lt;= d, corresponds to the i-th input and should contain two integers o and p separated by a single space such that n = o2^p.<br>", sample_in:"1\n24", sample_out:"3 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1697, vtotal_submit:3560, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Central Europe 2001, Practice", author:"", tag:["TEST"]}
{pid:1340, vid:1340, oj:"hdu", title:"Cog-Wheels", desc:"Your little sister has got a new mechanical building kit, which includes many cog-wheels of different sizes. She starts building gears with different ratios, but soon she notices that there are some ratios which are quite difficult to realize, and some others she cannot realize at all. She would like to have a computer program that tells her what ratios can be realized and what ratios cannot. She asks you to write a program that does the job.<br><br>For example, let us assume that the kit contains cog-wheels with 6, 12, and 30 cogs. Your sister wants to realize a gear of ratio 5 : 4. One possible solution is shown in Figure 2. <br><br><center><img src=data/images/1340-1.gif></center><br><br><center>Figure 2: Combination of cog-wheels realizing a gear of 5 : 4.</center><br><br><br>It depicts a complete gear of ratio 5 : 4. Four wheels are used: cog-wheels of sizes 30 and 12 on the first axis, cog-wheels of sizes 6 and 12 on the second axis. The gear ratio is given by<br><br><center><img src=data/images/1340-2.gif></center><br><br>as desired. However, a gear of ratio 1 : 6 cannot be realized using the cog-wheels your sister has.<br><br>Given the sizes of the cog-wheels in the kit (i.e. the number of cogs they have), decide whether a given gear ratio can be built or not. You may use any finite number of cog-wheels of each size available.<br>", input:"The input begins with a line containing the number of scenarios.<br><br>The input for each scenario starts with a description of the cog-wheels in the kit. First, there is a line containing the number n of different sizes of cog-wheels (1&lt;=n&lt;=20). The next line contains n numbers c1 . . . cn, separated by single blanks. These denote the n different sizes of the cog-wheels in the kit, with 5&lt;=ci&lt;=100 for i = 1, . . . , n. You may assume that there is a cog-wheel of smallest size c = min{c1, . . . , cn} in the kit such that all sizes c1, . . . , cn are multiples of c.<br><br>The line describing the available cog-wheels is followed by the list of gear ratios to be realized. It starts with a line containing the numbermof ratios. The nextmlines each contain two integers a and b, separated by a single blank. They denote the ratio a : b, with 1&lt;=a, b&lt;=10000.<br>", output:"The output for every scenario begins with a line containing “Scenario #i:”, where i is the number of the scenario starting at 1. Then print the results for all the gear ratios given in that scenario. For each gear ratio a : b, print a line containing either Gear ratio a:b can be realized.<br><br>or<br><br>Gear ratio a:b cannot be realized.<br><br>Terminate the output of each scenario with a blank line.<br>", sample_in:"2\n3\n6 12 30\n2\n5 4\n1 6\n1\n42\n2\n13 13\n42 1", sample_out:"Scenario #1:\nGear ratio 5:4 can be realized.\nGear ratio 1:6 cannot be realized.\n\nScenario #2:\nGear ratio 13:13 can be realized.\nGear ratio 42:1 cannot be realized.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:102, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Northwestern Europe 2001", author:"", tag:["TEST"]}
{pid:1341, vid:1341, oj:"hdu", title:"Simple Computers", desc:"You are to write an interpreter for a simple computer. This computer uses a processor with a small number of machine instructions. Furthermore, it is equipped with 32 byte of memory, one 8-bit accumulator (accu) and a 5-bit program counter (pc). The memory contains data as well as code, which is the usual von Neumann architecture. <br>The program counter holds the address of the instruction to be executed next. Each instruction has a length of 1 byte - the highest 3 bits define the type of instruction and the lowest 5 bits define an optional operand which is always a memory address (xxxxx). For instructions that don\'t need an operand the lowest 5 bits have no meaning (-----). Here is a list of the machine instructions and their semantics: <br><br>000xxxxx   STA x   store the value of the accu into memory byte x<br>001xxxxx   LDA x   load the value of memory byte x into the accu<br>010xxxxx   BEQ x   if the value of the accu is 0 load the value x into the pc<br>011-----   NOP     no operation<br>100-----   DEC     subtract 1 from the accu<br>101-----   INC     add 1 to the accu<br>110xxxxx   JMP x   load the value x into the pc<br>111-----   HLT     terminate program<br><br><br>In the beginning, program counter and accumulator are set to 0. After fetching an instruction but before its execution, the program counter is incremented. You can assume that programs will terminate.<br>", input:"The input file contains several test cases. Each test case specifies the contents of the memory prior to execution of the program. Byte 0 through 31 are given on separate lines in binary representation. A byte is denoted by its highest-to-lowest bits. Input is terminated by EOF.<br>", output:"For each test case, output on a line the value of the accumulator on termination in binary representation, again highest bits first.<br>", sample_in:"00111110\n10100000\n01010000\n11100000\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n00111111\n10000000\n00000010\n11000010\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n11111111\n10001001", sample_out:"10000111", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:87, vtotal_submit:256, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 2000", author:"", tag:["TEST"]}
{pid:1342, vid:1342, oj:"hdu", title:"Lotto", desc:"In a Lotto I have ever played, one has to select 6 numbers from the set {1,2,...,49}. A popular strategy to play Lotto - although it doesn\'t increase your chance of winning - is to select a subset S containing k (k&gt;6) of these 49 numbers, and then play several games with choosing numbers only from S. For example, for k=8 and S = {1,2,3,5,8,13,21,34} there are 28 possible games: [1,2,3,5,8,13], [1,2,3,5,8,21], [1,2,3,5,8,34], [1,2,3,5,13,21], ... [3,5,8,13,21,34]. <br><br>Your job is to write a program that reads in the number k and the set S and then prints all possible games choosing numbers only from S.<br>", input:"The input file will contain one or more test cases. Each test case consists of one line containing several integers separated from each other by spaces. The first integer on the line will be the number k (6 &lt; k &lt; 13). Then k integers, specifying the set S, will follow in ascending order. Input will be terminated by a value of zero (0) for k. <br>", output:"For each test case, print all possible games, each game on one line. The numbers of each game have to be sorted in ascending order and separated from each other by exactly one space. The games themselves have to be sorted lexicographically, that means sorted by the lowest number first, then by the second lowest and so on, as demonstrated in the sample output below. The test cases have to be separated from each other by exactly one blank line. Do not put a blank line after the last test case. <br>", sample_in:"7 1 2 3 4 5 6 7\n8 1 2 3 5 8 13 21 34\n0", sample_out:"1 2 3 4 5 6\n1 2 3 4 5 7\n1 2 3 4 6 7\n1 2 3 5 6 7\n1 2 4 5 6 7\n1 3 4 5 6 7\n2 3 4 5 6 7\n\n1 2 3 5 8 13\n1 2 3 5 8 21\n1 2 3 5 8 34\n1 2 3 5 13 21\n1 2 3 5 13 34\n1 2 3 5 21 34\n1 2 3 8 13 21\n1 2 3 8 13 34\n1 2 3 8 21 34\n1 2 3 13 21 34\n1 2 5 8 13 21\n1 2 5 8 13 34\n1 2 5 8 21 34\n1 2 5 13 21 34\n1 2 8 13 21 34\n1 3 5 8 13 21\n1 3 5 8 13 34\n1 3 5 8 21 34\n1 3 5 13 21 34\n1 3 8 13 21 34\n1 5 8 13 21 34\n2 3 5 8 13 21\n2 3 5 8 13 34\n2 3 5 8 21 34\n2 3 5 13 21 34\n2 3 8 13 21 34\n2 5 8 13 21 34\n3 5 8 13 21 34", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:542, vtotal_submit:1327, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 1996", author:"", tag:["TEST"]}
{pid:1343, vid:1343, oj:"hdu", title:"Modular multiplication of polynomials", desc:"Consider polynomials whose coefficients are 0 and 1. Addition of two polynomials is achieved by \'adding\' the coefficients for the corresponding powers in the polynomials. The addition of coefficients is performed by addition modulo 2, i.e., (0 + 0) mod 2 = 0, (0 + 1) mod 2 = 1, (1 + 0) mod 2 = 1, and (1 + 1) mod 2 = 0. Hence, it is the same as the exclusive-or operation. <br><br>(x6 + x4 + x2 + x + 1) + (x7 + x + 1) = x7 + x6 + x4 + x2 <br><br>Subtraction of two polynomials is done similarly. Since subtraction of coefficients is performed by subtraction modulo 2 which is also the exclusive-or operation, subtraction of polynomials is identical to addition of polynomials. <br><br>(x6 + x4 + x2 + x + 1) - (x7 + x + 1) = x7 + x6 + x4 + x2 <br><br>Multiplication of two polynomials is done in the usual way (of course, addition of coefficients is performed by addition modulo 2). <br><br>(x6 + x4 + x2 + x + 1) (x7 + x + 1) <br>= x13 + x11 + x9 + x8 + x6 + x5 + x4 + x3 + 1 <br><br>Multiplication of two polynomials f(x) and g(x) modulo a polynomial h(x) is the remainder of f(x)g(x) divided by h(x). <br><br>(x6 + x4 + x2 + x + 1) (x7 + x + 1) modulo (x8 + x4 + x3 + x + 1) <br>= x7 + x6 + 1 <br><br>The largest exponent of a polynomial is called its degree. For example, the degree of x7 + x6 + 1 is 7. <br><br>Given three polynomials f(x), g(x), and h(x), you are to write a program that computes f(x)g(x) modulo h(x). We assume that the degrees of both f(x) and g(x) are less than the degree of h(x). The degree of a polynomial is less than 1000. <br><br>Since coefficients of a polynomial are 0 or 1, a polynomial can be represented by d+1 and a bit string of length d+1, where d is the degree of the polynomial and the bit string represents the coefficients of the polynomial. For example, x7 + x6 + 1 can be represented by <br><br>8 1 1 0 0 0 0 0 1. <br>", input:"The input consists of T test cases. The number of test cases (T) is given in the first line of the input. Each test case consists of three lines that contain three polynomials f(x), g(x), and h(x), one per line. Each polynomial is represented as described above.<br>", output:"The output should contain the polynomial f(x)g(x) modulo h(x), one per line. <br>", sample_in:"2 \n7 1 0 1 0 1 1 1 \n8 1 0 0 0 0 0 1 1 \n9 1 0 0 0 1 1 0 1 1 \n10 1 1 0 1 0 0 1 0 0 1 \n12 1 1 0 1 0 0 1 1 0 0 1 0 \n15 1 0 1 0 1 1 0 1 1 1 1 1 0 0 1", sample_out:"8 1 1 0 0 0 0 0 1 \n14 1 1 0 1 1 0 0 1 1 1 0 1 0 0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:37, vtotal_submit:64, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1344, vid:1344, oj:"hdu", title:"Nonst", desc:"Fast Phil works the late shift and leaves his company\'s parking lot at precisely 2:00 AM every morning. His route home is by a straight road which has one or more traffic signals. Phil has always wondered if, given the locations and cycles of each of the traffic signals, are there velocities he can travel home without ever having to speed up or slow down on account of a red light. You are to write a program to satisfy his curiosity. <br><br>Your program should find all integer speeds (in miles per hour) which can be used for Phil\'s trip home. Each speed is a rate (in miles per hour) he can maintain the moment he leaves the parking lot at 2:00 AM until he arrives home (we assume Phil has a long driveway in which to decelerate) such that he never passes through a red signal. He is allowed to pass throgh a signal at the exact moment it turns from yellow to red, or at the exact moment a red signal turns green. Since Phil is a relatively law-abiding citizen, you need only consider speeds less than or equal to 60 mph. Likewise, Phil isn\'t interested in travelling too slowly, so you should not consider speeds lower than 30 mph.<br>", input:"Input will consist of one or more sets of data describing a set of traffic signals, followed by the integer -1. The first integer in each set will contain the value N (specifying the number of traffic signals). N will be no larger than 6. This value will be followed by N sets of numbers, each containing values (in order) for L, G, Y and R. L is a positive real number indicating the location of a traffic signal, in miles, from the parking lot. G, Y and R are the lengths of time (in seconds) of the green, yellow, and red periods of the corresponding traffic signal\'s cycle. Phil has learned from an informant in the Highway Department that all N traffic signals start their green period precisely at 2:00 AM.<br>", output:"Output should consist of the input case number (starting with 1) followed by a list of all valid integer speeds Phil may drive to avoid the red signals. Consecutive integer speeds should be specified in interval notation of the form L-H, where L and H are the lowest and highest speeds for the interval. Intervals of the form L-L (that is, an interval of length 1) shold just be written as L. Intervals should be separated by commas. If there are no valid speeds, you program should display the phrase No acceptable speeds. The Expected Output below illustrates this format.<br>", sample_in:"1\n5.5 40 8 25\n\n3\n10.7 10 2 75\n12.5 12 5 57\n17.93 15 4 67\n\n-1", sample_out:"Case 1: 30, 32-33, 36-38, 41-45, 48-54, 59-60\nCase 2: No acceptable speeds.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:18, vtotal_submit:38, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"North Central North America 1997", author:"", tag:["TEST"]}
{pid:1345, vid:1345, oj:"hdu", title:"Doing Windows", desc:"The screen of monitors on computer systems are rectangles. The aspect ratio of a screen is its width divided by its height. This term can also be applied to rectangular windows that may appear on the monitor\'s screen, where it is defined as the width of the window divided by its height. For this problem we assume the dimensions of a monitor\'s screen and its windows are measured in integral numbers of pixels, the individual dots (arranged in a rectangular grid) that comprise and image. <br><br>Suppose your windowing software only allows windows to be resized in such a way that their aspect ratios are unmodified. For example, a window with a width of 150 pixels and a height of 100 pixels (and an espect ratio of 150/100, or 1.5) can be resized so its width is 225 pixels and its height is 150 pixels (the aspect ratio remains unchanged, at 225/150, or 1.5), but a width of 224 and a height of 150 is not allowed, since that would change the aspect ratio. Each window can be moved to an arbitrary location on the screen, but the entire window must remain visible on the screen. <br><br><br>Given the size of a screen and the initial sizes of four different windows (as integer values for width and height), is it possible to resize (and relocate) the four windows so they completely cover the screen without overlapping each other? That\'s the question you are to answer in this problem. <br><br><br>For example, consider a square screen with four square windows. The aspect ratio for each of these is exactly 1. We are permitted to resize each of the four windows so they would completely fill the screen without overlapping. This case is illustrated by the first data set in the Sample Input, below.<br>", input:"Input will consist of one or more data sets followed by a pair of zeroes. Each data set will contain five pairs of integers. The first pair (Ws, Hs) specifies the width and height of the screen. The four remaining pairs (Wi, Hi, for i = 1 to 4) specify the initial sizes of the windows.<br>", output:"Output should have one line for each input data set. The line should contain the input data set number (starting with 1) followed by the word Yes if the screen can be completely covered by the (possibly resized and relocated) windows with no overlap, or No if it cannot be so covered.<br>", sample_in:"400 400 10 10 35 35 15 15 100 100\n200 300 10 10 20 20 30 45 40 60\n200 250 10 10 20 20 30 45 40 60\n\n0 0", sample_out:"Set 1: Yes\nSet 2: No\nSet 3: Yes", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8, vtotal_submit:63, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"North Central North America 1997", author:"", tag:["TEST"]}
{pid:1346, vid:1346, oj:"hdu", title:"Coconuts, Revisited", desc:"The short story titled Coconuts, by Ben Ames Williams, appeared in the Saturday Evening Post on October 9, 1926. The story tells about five men and a monkey who were shipwrecked on an island. They spent the first night gathering coconuts. During the night, one man woke up and decided to take his share of the coconuts. He divided them into five piles. One coconut was left over so he gave it to the monkey, then hid his share and went back to sleep. <br><br>Soon a second man woke up and did the same thing. After dividing the coconuts into five piles, one coconut was left over which he gave to the monkey. He then hid his share and went back to bed. The third, fourth, and fifth man followed exactly the same procedure. The next morning, after they all woke up, they divided the remaining coconuts into five equal shares. This time no coconuts were left over. <br><br><br>An obvious question is ``how many coconuts did they originally gather?&quot; There are an infinite number of answers, but the lowest of these is 3,121. But that\'s not our problem here. <br><br><br>Suppose we turn the problem around. If we know the number of coconuts that were gathered, what is the maximum number of persons (and one monkey) that could have been shipwrecked if the same procedure could occur? <br>", input:"The input will consist of a sequence of integers, each representing the number of coconuts gathered by a group of persons (and a monkey) that were shipwrecked. The sequence will be followed by a negative number.<br>", output:"For each number of coconuts, determine the largest number of persons who could have participated in the procedure described above. Display the results similar to the manner shown below, in the Sample Output. There may be no solution for some of the input cases; if so, state that observation.<br>", sample_in:"25\n30\n3121\n-1", sample_out:"25 coconuts, 3 people and 1 monkey\n30 coconuts, no solution\n3121 coconuts, 5 people and 1 monkey", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:131, vtotal_submit:420, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1347, vid:1347, oj:"hdu", title:"Grandpa is Famous", desc:"The whole family was excited by the news. Everyone knew grandpa had been an extremely good bridge player for decades, but when it was announced he would be in the Guinness Book of World Records as the most successful bridge player ever, whow, that was astonishing!<br><br>The International Bridge Association (IBA) has maintained, for several years, a weekly rank? ing of the best players in the world. Considering that each appearance in a weekly ranking constitutes a point for the player, grandpa was nominated the best player ever because he got the highest number of points.<br><br>Having many friends who were also competing against him, grandpa is extremely curious to know which player(s) took the second place. Since the IBA rankings are now available in the internet he turned to you for help. He needs a program which, when given a list of weekly rankings, finds out which player(s) got the second place according to the number of points.<br>", input:"The input contains several test cases. Players are identified by integers from 1 to 10000. The first line of a test case contains two integers N and M indicating respectively the number of rankings available (2 &lt;= N &lt;= 500) and the number of players in each ranking (2 &lt;= M &lt;= 500). Each of the next N lines contains the description of one weekly ranking. Each description is composed by a sequence of M integers, separated by a blank space, identifying the players who figured in that weekly ranking. You can assume that:<br><br>1. in each test case there is exactly one best player and at least one second best player,<br>2. each weekly ranking consists of M distinct player identifiers.<br><br>The end of input is indicated by N = M = 0.<br>", output:"For each test case in the input your program must produce one line of output, containing the identification number of the player who is second best in number of appearances in the rankings. If there is a tie for second best, print the identification numbers of all second best players in increasing order. Each identification number produced must be followed by a blank space.<br>", sample_in:"4 5\n20 33 25 32 99\n32 86 99 25 10\n20 99 10 33 86\n19 33 74 99 32\n3 6\n2 34 67 36 79 93\n100 38 21 76 91 85\n32 23 85 31 88 1\n0 0", sample_out:"32 33\n1 2 21 23 31 32 34 36 38 67 76 79 88 91 93 100", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:170, vtotal_submit:567, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South America 2004", author:"", tag:["TEST"]}
{pid:1348, vid:1348, oj:"hdu", title:"Wall", desc:"Once upon a time there was a greedy King who ordered his chief Architect to build a wall around the King\'s castle. The King was so greedy, that he would not listen to his Architect\'s proposals to build a beautiful brick wall with a perfect shape and nice tall towers. Instead, he ordered to build the wall around the whole castle using the least amount of stone and labor, but demanded that the wall should not come closer to the castle than a certain distance. If the King finds that the Architect has used more resources to build the wall than it was absolutely necessary to satisfy those requirements, then the Architect will loose his head. Moreover, he demanded Architect to introduce at once a plan of the wall listing the exact amount of resources that are needed to build the wall.<br>Your task is to help poor Architect to save his head, by writing a program that will find the minimum possible length of the wall that he could build around the castle to satisfy King\'s requirements.<br><br><center><img src=data/images/1348-1.gif></center><br><br>The task is somewhat simplified by the fact, that the King\'s castle has a polygonal shape and is situated on a flat ground. The Architect has already established a Cartesian coordinate system and has precisely measured the coordinates of all castle\'s vertices in feet.<br>", input:"The first line of the input file contains two integer numbers N and L separated by a space. N (3 &lt;= N &lt;= 1000) is the number of vertices in the King\'s castle, and L (1 &lt;= L &lt;= 1000) is the minimal number of feet that King allows for the wall to come close to the castle.<br><br>Next N lines describe coordinates of castle\'s vertices in a clockwise order. Each line contains two integer numbers Xi and Yi separated by a space (-10000 &lt;= Xi, Yi &lt;= 10000) that represent the coordinates of ith vertex. All vertices are different and the sides of the castle do not intersect anywhere except for vertices.<br>", output:"Write to the output file the single number that represents the minimal possible length of the wall in feet that could be built around the castle to satisfy King\'s requirements. You must present the integer number of feet to the King, because the floating numbers are not invented yet. However, you must round the result in such a way, that it is accurate to 8 inches (1 foot is equal to 12 inches), since the King will not tolerate larger error in the estimates.<br><br>This problem contains multiple test cases!<br><br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br>", sample_in:"1\n\n9 100\n200 400\n300 400\n300 300\n400 300\n400 400\n500 400\n500 200\n350 200\n200 200", sample_out:"1628", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:514, vtotal_submit:2897, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Northeastern Europe 2001", author:"", tag:["TEST"]}
{pid:1349, vid:1349, oj:"hdu", title:"Fold-up Patterns", desc:"Fold-up patterns for solids like cubes or octahedrons can be found in many books on geometry, but without actually folding them it is hard to tell whether the constructions really work. In this problem, we will consider a special class of such patterns. <br><br><center><img src=data/images/1349-1.gif></center><br><br>Given a fold-up pattern built from unit squares in the plane, together with a description along what edges it should be folded in what direction, decide whether it will result in a closed surface of a solid in three dimensions. If it does, find the volume of the solid.<br><br>More precisely, the pattern consists of a connected set of unit squares in the plane. For any edge between connected sides you are told whether to fold forward, backward (always at a right angle), or not at all along that edge. If an edge between two adjacent squares in the pattern is not mentioned in the input, you may assume that the squares are not connected and can be ripped apart when folding. However, connected edges must always be folded according to the description.<br><br>For our purposes a closed surface is one where every square in the pattern separates the inside from the outside. When folded, the squares of the pattern lie on a rectangular, 3-dimensional grid, and each separates a cell (cubes of side length one unit) on the inside from one on the outside. For every cell it must be clear whether it is inside or outside. The following sketch illustrates this rule in two dimensions. <br><br><center><img src=data/images/1349-2.gif></center><br><br>Note that even the second pattern above satisfies our definition of a closed surface, but the interior is not connected.<br><br>Two different squares may not occupy exactly the same position in space, though they may (and will for a closed surface) touch at edges and vertices. Make sure that the pattern does not interpenetrate itself through connected edges. Apart from that, do not worry about the process of folding, e.g. what edges are folded first or whether part of the structure is in the way for the rest.<br>", input:"The input file consists of several test cases.<br><br>For each test case, the first line contains two integers n and e. These are the number n (1 &lt;= n &lt;= 200) of squares in the pattern and the number e (0 &lt;= e &lt;= 300) of edges. Squares are labelled by the integers 0 to n - 1. The following e lines describe one edge each using the four numbers s1; s2; p; f :<br><br>The two numbers s1 and s2 (with 0 &lt;= s1 &lt; s2 &lt; n) of the squares that are joined by the edge.<br><br>The position p of the square s2 with respect to the square s1 in the pattern. Here p = 0;1;2;3 mean above, to the left, below, or to the right of s1, respectively (see sketch below).<br><br>The number f =0;1;2 tells you to fold along the edge either not at all, forward, or back, respectively (see sketch).<br><br><center><img src=data/images/1349-3.gif></center><br><br>You can also assume that the pattern is connected and can be drawn in the plane without overlapping.<br><br>At the end of the input file, there will be a line containing two zeros (instead of n and e). Do not process that line.<br>", output:"For each scenario print “Test case #k:”, where k is the number of the test case (starting from 1).<br><br>Then, on the same line, print either “not a closed surface” if the pattern does not form a closed surface or “closed surface, volume=” and the volume as an integer if it does.<br>", sample_in:"6 5\n0 2 2 1\n1 2 3 1\n2 3 3 1\n2 4 2 1\n4 5 2 1\n5 4\n0 2 2 1\n1 2 3 1\n2 3 3 1\n2 4 2 1\n0 0", sample_out:"Test case #1: closed surface, volume=1\nTest case #2: not a closed surface\n\n<img src=\'data/images/1349-4.gif\'>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1, vtotal_submit:27, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central European Regional Contest 2000", author:"", tag:["TEST"]}
{pid:1350, vid:1350, oj:"hdu", title:"Taxi Cab Scheme", desc:"Running a taxi station is not all that simple. Apart from the obvious demand for a centralised coordination of the cabs in order to pick up the customers calling to get a cab as soon as possible, there is also a need to schedule all the taxi rides which have been booked in advance. Given a list of all booked taxi rides for the next day, you want to minimise the number of cabs needed to carry out all of the rides.<br><br>For the sake of simplicity, we model a city as a rectangular grid. An address in the city is denoted by two integers: the street and avenue number. The time needed to get from the address a, b to c, d by taxi is |a - c| + |b - d| minutes. A cab may carry out a booked ride if it is its first ride of the day, or if it can get to the source address of the new ride from its latest, at least one minute before the new ride’s scheduled departure. Note that some rides may end after midnight.<br>", input:"On the first line of the input is a single positive integer N, telling the number of test scenarios to follow. Each scenario begins with a line containing an integer M, 0 &lt; M &lt; 500, being the number of booked taxi rides. The following M lines contain the rides. Each ride is described by a departure time on the format hh:mm (ranging from 00:00 to 23:59), two integers a b that are the coordinates of the source address and two integers c d that are the coordinates of the destination address. All coordinates are at least 0 and strictly smaller than 200. The booked rides in each scenario are sorted in order of increasing departure time. <br>", output:"For each scenario, output one line containing the minimum number of cabs required to carry out all the booked taxi rides.<br>", sample_in:"2\n2\n08:00 10 11 9 16\n08:07 9 16 10 11\n2\n08:00 10 11 9 16\n08:06 9 16 10 11", sample_out:"1\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:203, vtotal_submit:603, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"Northwestern Europe 2004", author:"", tag:["TEST"]}
{pid:1351, vid:1351, oj:"hdu", title:"Leaky Cryptography", desc:"The ACM ICPC judges are very careful about not leaking their problems, and all communi- cations are encrypted. However, one does sometimes make mistakes, like using too weak an encryption scheme. Here is an example of that.<br><br>The encryption chosen was very simple: encrypt each chunk of the input by flipping some bits according to a shared key. To provide reasonable security, the size of both chunk and key is 32 bits.<br><br>That is, suppose the input was a sequence of m 32-bit integers.<br><br><center>N1 N2 N3 ... Nm</center><br><br>After encoding with the key K it becomes the following sequence of m 32-bit integers.<br><br><center>(N1 ^ K) (N2 ^ K) (N3 ^ K) ... (Nm ^ K)</center><br><br>where (a ^ b) is the bitwise exclusive or of a and b.<br><br>Exclusive or is the logical operator which is 1 when only one of its operands is 1, and 0 otherwise. Here is its definition for 1-bit integers.<br><br><center><img src=data/images/1351-1.gif></center><br><br>As you can see, it is identical to addition modulo 2. For two 32-bit integers a and b, their bitwise exclusive or a ^ b is defined as follows, using their binary representations, composed of 0\'s and 1\'s.<br><br><center>a ^ b = a31 ... a1a0 ^ b31 ... b1b0 = c31 ... c1c0</center><br><br>where<br><br><center><img src=data/images/1351-2.gif></center><br><br>For instance, using binary notation, 11010110 ^ 01010101 = 10100011, or using hexadecimal, d6 ^ 55 = a3.<br><br>Since this kind of encryption is notoriously weak to statistical attacks, the message has to be compressed in advance, so that it has no statistical regularity. We suppose that N1 N2 ... Nm is already in compressed form.<br><br>However, the trouble is that the compression algorithm itself introduces some form of regularity: after every 8 integers of compressed data, it inserts a checksum, the sum of these integers. That is, in the above input, N9 = N1 + N2 + ... + N8, where additions are modulo 2^32.<br><br>Luckily, you could intercept a communication between the judges. Maybe it contains a problem for the finals!<br><br>As you are very clever, you have certainly seen that you can easily find the lowest bit of the key, denoted by K0. On the one hand, if K0 = 1, then after encoding, the lowest bit of N1^K + N2^K + ... + N8^K is unchanged, as K0 is added an even number of times, but the lowest bit of N9^K is changed, so they shall differ. On the other hand, if K0 = 0, then after encoding, the lowest bit of N1^K + N2^K + ... + N8^K shall still be identical to the lowest bit of N9^K, as they do not change. For instance, if the lowest bits after encoding are 1 1 1 1 1 1 1 1 1 then K0 must be 1, but if they are 1 1 1 1 1 1 1 0 1 then K0 must be 0.<br><br>So far, so good. Can you do better?<br><br>You should find the key used for encoding.<br>", input:"The input starts with a line containing only a positive integer S, indicating the number of datasets in the input. S is no more than 1000.<br><br>It is followed by S datasets. Each dataset is composed of nine 32-bit integers corresponding to the first nine chunks of a communication. They are written in hexadecimal notation, using digits `0\' to `9\' and lowercase letters `a\' to `f\', and with no leading zeros. They are separated by a space or a newline. Each dataset is ended by a newline.<br>", output:"For each dataset you should output the key used for encoding. Each key shall appear alone on its line, and be written in hexadecimal notation, using digits `0\' to `9\' and lowercase letters `a\' to `f\', and with no leading zeros.<br>", sample_in:"8\n1 1 1 1 1 1 1 1 8\n3 2 3 2 3 2 3 2 6\n3 4 4 7 7 b a 2 2e\ne1 13 ce 28 ca 6 ab 46 a6d\nb08 49e2 6128 f27 8cf2 bc50 7380 7fe1 723b\n4eba eb4 a352 fd14 6ac1 eed1 dd06 bb83 392bc\nef593c08 847e522f 74c02b9c 26f3a4e1 e2720a01 6fe66007\n7a4e96ad 6ee5cef6 3853cd88\n60202fb8 757d6d66 9c3a9525 fbcd7983 82b9571c ddc54bab 853e52da\n22047c88 e5524401\n8", sample_out:"0\n2\n6\n1c6\n4924afc7\nffff95c5\n546991d\n901c4a16", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8, vtotal_submit:15, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1352, vid:1352, oj:"hdu", title:"I Conduit!", desc:"Irv Kenneth Diggit works for a company that excavates trenches, digs holes and generally tears up people’s yards. Irv’s job is to make sure that no underground pipe or cable is underneath where excavation is planned. He has several different maps, one for each utility company, showing where their conduits lie, and he needs to draw one large, consolidated map combining them all. One approach would be to simply draw each of the smaller maps one at a time onto the large map. However, this often wastes time, not to mention ink for the pen-plotter in the office, since in many cases portions of the conduits overlap with each other (albeit at different depths underground). What Irv wants is a way to determine the minimum number of line segments to draw given all the line segments from the separate maps.<br>", input:"Input will consist of multiple input sets. Each set will start with a single line containing a positive integer n indicating the total number of line segments from all the smaller maps. Each of the next n lines will contain a description of one segment in the format<br><br>x1 y1 x2 y2<br><br>where (x1,y1) are the coordinates of one endpoint and (x2,y2) are the coordinates of the other. Coordinate values are floating point values in the range 0...1000 speci.ed to at most two decimal places. The maximum number of line segments will be 10000 and all segments will have non-zero length. Following the last input set there will be a line containing a 0 indicating end of input; it should not be processed.<br>", output:"For each input set, output on a single line the minimum number of line segments that need to be drawn on the larger, consolidated map.<br>", sample_in:"3\n1.0 10.0 3.0 14.0\n0.0 0.0 20.0 20.0\n10.0 28.0 2.0 12.0\n2\n0.0 0.0 1.0 1.0\n1.0 1.0 2.15 2.15\n2\n0.0 0.0 1.0 1.0\n1.0 1.0 2.15 2.16\n0", sample_out:"2\n1\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:22, vtotal_submit:256, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1353, vid:1353, oj:"hdu", title:"Exact Change Only", desc:"Boudreaux reached over and shook awake Thibodeaux, who had dozed off somewhere in New Mexico. &quot;Where we at?&quot; Thibodeaux groggily yawned.<br><br>&quot;Not in Vegas, I gua-ran-tee, but could you get my knapsack?&quot; Boudreaux asked, gesturing to the worn, leather backpack in the back seat of their cherry red Ford Miata.<br><br>&quot;Why, is there a problem?&quot;<br><br>&quot;Just hand me my knapsack, problem or not.&quot;<br><br>Thibodeaux complied, glancing up as Boudreaux slowed the car to a stop in a line of vehicles approaching a toll booth. &quot;$1.65 -- Exact change only,&quot; Thibodeaux read the yellow sign on the front of a small wooden building occupied by a lone toll booth operator. &quot;I have to get $1.65 in exact change?&quot; Thibodeaux asked, digging through the knapsack, &quot;all I have are ten quarters, four dimes, and three pennies. I don\'t have any nickels . . .&quot;<br><br>&quot;Just give me five of the quarters and the four dimes,&quot; Boudreaux replied, holding out his hand.<br><br>&quot;Oh yeah,&quot; Thibodeaux said, handing over the coins, &quot;that does add up to $1.65. I wish there were an easy way to figure out if you have an exact monetary amount, given a set of coins.&quot;<br><br>&quot;Hmmm,&quot; Boudreaux shrugged, &quot;sounds like a good programming problem.&quot;<br>", input:"Input to this problem will consist of a (non-empty) series of up to 100 data sets. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets.<br><br>A single data set has 1 component:<br><br>Start line - A single line: <br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;A B C D E<br>      <br>where: <br>&nbsp; &nbsp; &nbsp;A: (0.01 ≤ A ≤ 5.00) is a decimal number (to two decimal places) of a monetary amount. <br>&nbsp; &nbsp; &nbsp;B: (0 ≤ B ≤ 100) is an integer number of quarters (one quarter = $0.25). <br>&nbsp; &nbsp; &nbsp;C: (0 ≤ C ≤ 100) is an integer number of dimes (one dime = $0.10). <br>&nbsp; &nbsp; &nbsp;D: (0 ≤ D ≤ 100) is an integer number of nickels (one nickel = $0.05). <br>&nbsp; &nbsp; &nbsp;E: (0 ≤ E ≤ 100) is an integer number of pennies (one penny = $0.01). <br>", output:"For each data set, there will be exactly one line of output. If there exists one or more subsets of the given coins whose values add up to the given monetary amount exactly, the output will be a single line in the form:<br><br>&nbsp; &nbsp; A B C D<br><br>where A is the number of quarters, B is the number of dimes, C is the number of nickels, and D is the number of pennies, for the subset with the fewest number of coins. Otherwise, the output will be a single line with the statement:<br><br>&nbsp; &nbsp; NO EXACT CHANGE<br>", sample_in:"0.45 2 1 1 4\n0.75 3 7 1 75", sample_out:"NO EXACT CHANGE\n3 0 0 0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:42, vtotal_submit:186, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1354, vid:1354, oj:"hdu", title:"Choose Your Own Adventure", desc:"After reading the book Tim and Marc Kill Kenny about fifty zillion times, James decided he\'d had it with choose-your-own-adventure stories. No matter what choices he made, it seemed like Kenny always fell down an abandoned mine shaft, got run over by a bus load of nuns, or was messily devoured by stray cats. James eventually found the page with the happy ending (where Kenny saves himself by trapping Tim and Marc between the pizza and the hungry programmers) by flipping through the book, but he can\'t figure out how to get there by following the rules. Luckily, he owns a C compiler...<br>", input:"Input to this problem will consist of a (non-empty) series of up to 100 data sets, each representing a choose-your-own-adventure story. Each data set will be formatted according to the following description, and there will be no blank lines separating data sets. <br><br>The first line contains a single integer n indicating the number of data sets. <br><br>A single data set has 2 components: <br><br>1. Page Count - A line containing a single integer X, where 1 &lt; X &lt; 100, indicating the number of pages in the story.<br>2. Page List - A sequence of X lines, each of which represents a page from the book. Each line has the following components separated from one another by single spaces:<br><ul><li>Line type - A single character indicating what type of line this is. It will represent either a &quot;C&quot; choice page, or an &quot;E&quot; end page. Page 1 is always a choice page.</li><br><li>Text - A string of text surrounded by double quotes. Including the quotes, this component will not exceed 256 characters. The quotes are given for input purposes only and should not be considered part of the text. The text will not contain embedded double quotes.</li><br><li>Choices - Two positive integers from 1 to X indicating the pages where the reader can go from this page. Only choice pages have this component.</li><br><li>Ending Type - Either the text &quot;HAPPY&quot; or &quot;GRISLY&quot;. There will only be one happy ending per story, and only end pages have this component.</li></ul><br>", output:"For each story in the input: <br><br><ul><li>Output a single line, &quot;STORY #&quot; where # is 1 for the first story, 2 for the second story, etc.</li> <br><li>Determine the story that begins on page 1 and ends on the happy ending page. Output the text of this story, printing one &quot;page&quot; of text per line. Note that there is only one such story for each data set. </li></ul><br>", sample_in:"2\n3\nC \"Arrived at LSU for the contest\" 2 3\nE \"Was devoured by sidewalk ants\" GRISLY\nE \"Won the contest. Received glory and nachos.\" HAPPY\n5\nC \"Saw a peanut\" 3 5\nE \"Made peanut butter sandwich\" HAPPY\nC \"Found a hammer\" 4 2\nE \"Hit self on head with hammer, ouch!\" GRISLY\nE \"Ate the peanut, choked on it, and died\" GRISLY", sample_out:"STORY 1\nArrived at LSU for the contest\nWon the contest. Received glory and nachos.\nSTORY 2\nSaw a peanut\nFound a hammer\nMade peanut butter sandwich", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:27, vtotal_submit:85, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1355, vid:1355, oj:"hdu", title:"The Peanuts", desc:"Mr. Robinson and his pet monkey Dodo love peanuts very much. One day while they were having a walk on a country road, Dodo found a sign by the road, pasted with a small piece of paper, saying &quot;Free Peanuts Here! &quot; You can imagine how happy Mr. Robinson and Dodo were. <br><br>There was a peanut field on one side of the road. The peanuts were planted on the intersecting points of a grid as shown in Figure-1. At each point, there are either zero or more peanuts. For example, in Figure-2, only four points have more than zero peanuts, and the numbers are 15, 13, 9 and 7 respectively. One could only walk from an intersection point to one of the four adjacent points, taking one unit of time. It also takes one unit of time to do one of the following: to walk from the road to the field, to walk from the field to the road, or pick peanuts on a point. <br><br><center><img src=data/images/1355-1.jpg></center><br><br>According to Mr. Robinson\'s requirement, Dodo should go to the plant with the most peanuts first. After picking them, he should then go to the next plant with the most peanuts, and so on. Mr. Robinson was not so patient as to wait for Dodo to pick all the peanuts and he asked Dodo to return to the road in a certain period of time. For example, Dodo could pick 37 peanuts within 21 units of time in the situation given in Figure-2. <br><br>Your task is, given the distribution of the peanuts and a certain period of time, tell how many peanuts Dodo could pick. You can assume that each point contains a different amount of peanuts, except 0, which may appear more than once.<br>", input:"The first line of input contains the test case number T (1 &lt;= T &lt;= 20). For each test case, the first line contains three integers, M, N and K (1 &lt;= M, N &lt;= 50, 0 &lt;= K &lt;= 20000). Each of the following M lines contain N integers. None of the integers will exceed 3000. (M * N) describes the peanut field. The j-th integer X in the i-th line means there are X peanuts on the point (i, j). K means Dodo must return to the road in K units of time.<br>", output:"For each test case, print one line containing the amount of peanuts Dodo can pick.<br>", sample_in:"2\n6 7 21\n0 0 0 0 0 0 0\n0 0 0 0 13 0 0\n0 0 0 0 0 0 7\n0 15 0 0 0 0 0\n0 0 0 9 0 0 0\n0 0 0 0 0 0 0\n6 7 20\n0 0 0 0 0 0 0\n0 0 0 0 13 0 0\n0 0 0 0 0 0 7\n0 15 0 0 0 0 0\n0 0 0 9 0 0 0\n0 0 0 0 0 0 0", sample_out:"37\n28", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:199, vtotal_submit:393, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1356, vid:1356, oj:"hdu", title:"The Balance", desc:"Ms. Iyo Kiffa-Australis has a balance and only two kinds of weights to measure a dose of medicine.<br><br>For example, to measure 200mg of aspirin using 300mg weights and 700mg weights, she can put one 700mg weight on the side of the medicine and three 300mg weights on the opposite side (Figure 1). Although she could put four 300mg weights on the medicine side and two 700mg weights on the other (Figure 2), she would not choose this solution because it is less convenient to use more weights.<br><br>You are asked to help her by calculating how many weights are required.<br><br><center><img src=data/images/1356-1.gif></center><br><br>", input:"The input is a sequence of datasets. A dataset is a line containing three positive integers a, b, and d separated by a space. The following relations hold: a != b, a &lt;= 10000, b &lt;= 10000, and d &lt;= 50000. You may assume that it is possible to measure dmg using a combination of amg and bmg weights. In other words, you need not consider &quot;no solution&quot; cases. <br><br>The end of the input is indicated by a line containing three zeros separated by a space. It is not a dataset.<br>", output:"The output should be composed of lines, each corresponding to an input dataset (a, b, d). An output line should contain two nonnegative integers x and y separated by a space. They should satisfy the following three conditions.<br><pre>&nbsp;&nbsp;1. You can measure dmg using x many amg weights and y many bmg weights.<br>&nbsp;&nbsp;2. The total number of weights (x + y) is the smallest among those pairs of nonnegative<br>&nbsp;&nbsp;integers satisfying the previous condition.<br>&nbsp;&nbsp;3. The total mass of weights (ax + by) is the smallest among those pairs of nonnegative<br>&nbsp;&nbsp;integers satisfying the previous two conditions.</pre><br>No extra characters (e.g. extra spaces) should appear in the output.<br>", sample_in:"700 300 200\n500 200 300\n500 200 500\n275 110 330\n275 110 385\n648 375 4002\n3 1 10000\n0 0 0", sample_out:"1 3\n1 1\n1 0\n0 3\n1 1\n49 74\n3333 1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:46, vtotal_submit:127, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1357, vid:1357, oj:"hdu", title:"Cave Exploration", desc:"Long time ago one man said, that he had explored the corridors of one cave. It means, that he was in all corridors of the cave.Corridors are really horizontal or vertical segments. Corridor counted visited if he was in at least one point of corridor.<br><br>Now you want to know, is it true. You have a map of the cave, and you know that explorer used the following algorithm: he turns left if he can, if he can\'t he goes straight, if he can\'t he turns right, if he can\'t he turns back.Exploration ends when the man reaches entry point second time. You task to count how many corridors wasn\'t visited by explorer.<br>", input:"In the first line there is an integer T (T&lt;=20) – the number of different maps. For each map in first line there is an integer N (N&lt;=1000) – the number of corridors. It is known that no two vertical corridors have common point and no two horizontal corridors have common point.So the next N lines contain such information: the line starts with one of the characters V or H –vertical or horizontal corridor. Then one Y-coordinate and two X-coordinates are given for a horizontal corridor or one X-coordinate and two Y-coordinates for a vertical corridor. The last line for each map contains X and Y coordinates of the entry point (start and end point of travel) and the direction (W – left, E – right, N – up and S – down). You may assume that: entry point is not located in the cross-point of two corridors, and explorer can always moves forward by the direction given in the input. All coordinates are integers and do not exceed 32767 by absolute value and there is no more than 500 vertical corridors and no more than 500 horizontal corridors.<br>", output:"For each map the program has to print the number of unvisited corridors in separate line.<br>", sample_in:"2\n6\nH 0 6 0\nH 2 1 6\nV 1 0 4\nV 5 3 0\nV 3 0 2\nH 1 2 4\n6 0 W\n1\nV 0 -5 5\n0 0 S", sample_out:"1\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1, vtotal_submit:24, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1358, vid:1358, oj:"hdu", title:"Period", desc:"For each prefix of a given string S with N characters (each character has an ASCII code between 97 and 126, inclusive), we want to know whether the prefix is a periodic string. That is, for each i (2 &lt;= i &lt;= N) we want to know the largest K &gt; 1 (if there is one) such that the prefix of S with length i can be written as A<sup>K</sup> , that is A concatenated K times, for some string A. Of course, we also want to know the period K.<br>", input:"The input file consists of several test cases. Each test case consists of two lines. The first one contains N (2 &lt;= N &lt;= 1 000 000) – the size of the string S. The second line contains the string S. The input file ends with a line, having the number zero on it.<br>", output:"For each test case, output “Test case #” and the consecutive test case number on a single line; then, for each prefix with length i that has a period K &gt; 1, output the prefix size i and the period K separated by a single space; the prefix sizes must be in increasing order. Print a blank line after each test case.<br>", sample_in:"3\naaa\n12\naabaabaabaab\n0", sample_out:"Test case #1\n2 2\n3 3\n\nTest case #2\n2 2\n6 2\n9 3\n12 4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:812, vtotal_submit:2383, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1359, vid:1359, oj:"hdu", title:"As the Crow Flies", desc:"<center><img src=data/images/1359-1.gif></center><br><br>As president of a startup airline company, you have started a frequent flier program that rewards customers for every mile they travel. As a for-profit company, you have a vested interest in minimizing the number of frequent flier miles that a person can earn on any one trip. To get an idea of how many miles a customer could earn flying the existing network, you\'ve decided to write a program. <br><br>Assumptions: <br><br><ul><li>A passenger\'s itinerary is one-way (no return flight). </li><br><li>Every itinerary takes the shortest route from the departing city to the destination city. </li><br><li>Frequent flier miles are counted &quot;as the crow flies&quot; (i.e., the shortest route across the earth\'s surface that connects the cities along the route). </li><br><li>The earth\'s surface is a perfect sphere with radius 4000 miles. </li></ul><br>", input:"The first line contains a single integer n indicating the number of data sets. Each data set will be formatted according to the following description: <br><br>A single data set has 3 components: <br><br>1. Header Line - A single line, &quot;X Y&quot;, where X is the number of cities and Y is the number of flight legs in the airline\'s network. Both will be positive integers less than 100. <br>2. City List - A list of cities and their locations, one city per line. The line will be of the format<br><br>&nbsp; &nbsp;&quot;C LA NS LO EW&quot; where: <br><br><ul><li>C is the name of the city (no spaces, alphabetical, first letter only upper case)</li> <br><li>LA is the degrees of latitude where the city is located (from 0 to 90) </li><br><li>NS is the direction of latitude (\'N\'orth or \'S\'outh of the equator) </li><br><li>LO is the degrees of longitude where the city is located (from 0 to 180) </li><br><li>EW is the direction of longitude (\'E\'ast or \'W\'est of the prime meridian) </li></ul><br><br>3. Flight List - A list of city pairs of the format &quot;B C&quot; representing different cities that are directly connected by flight legs, one pair per line. Note that &quot;B C&quot; is equivalent to &quot;C B&quot;.<br><br>Note: <br><br><ul><li>Some longitude measurements can be represented in multiple ways (i.e., 180E = 180W) </li><br><li>All degrees of latitude and longitude given in the input will be integers. </li><br><li>The airline\'s network is connected (i.e., there is at least one route between any two cities). </li></ul>", output:"For each data set, output the two cities that are farthest from each other (farthest in the sense that the shortest route between them is the longest of any city pair). You are guaranteed that there will be no ties. Display the city names on the same line, separated by a single space, sorted in dictionary order.<br>", sample_in:"2\n6 5\nNorthpole 90 N 87 E\nSouthpole 90 S 180 W\nEquatorone 0 N 45 W\nEquatortwo 0 S 90 E\nEquatorthree 0 S 180 E\nEquatorfour 0 N 46 W\nEquatorone Equatortwo\nEquatortwo Equatorthree\nEquatorthree Equatorfour\nNorthpole Equatortwo\nSouthpole Equatorthree\n2 1\nNorthpole 90 N 0 E\nSouthpole 90 S 0 W\nSouthpole Northpole", sample_out:"Equatorfour Equatorone\nNorthpole Southpole", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5, vtotal_submit:14, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1360, vid:1360, oj:"hdu", title:"Spell checker", desc:"The boss of a firm that you are employed with is dissatisfied with the text processor Word. He wants you to write a better text processor by tomorrow. The interface of the new processor should be clearer, there should be more options, and the resulting text should be more beautiful. You told the boss that this work would take not less than four days. Then your boss asked you to begin with a spell checking program. This program should check capital and small letters. It should detect a mistake in each of the following cases.<br><br>1)  The first letter in a sentence is small.<br>2)  A capital letter is not the first letter in a word.<br>A word is a sequence of letters not containing any other symbols or ends of line.<br><br>The end of a sentence is defined a full stop, a question-mark or an exclamation mark.<br>", input:"contains a text that consists of capital and small letters of the Latin alphabet (A–Z, a–z), punctuation marks (.,;:-!?)  and spaces.<br>", output:"You should output a number of mistakes in the input text in one line.<br>", sample_in:"This sentence iz correkt! -It Has,No mista;.Kes et oll.\nBut there are two BIG mistakes in this one!\nand here is one more.", sample_out:"3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:33, vtotal_submit:193, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1361, vid:1361, oj:"hdu", title:"Parencodings", desc:"Let S = s1 s2 … s2n  be a well-formed string of parentheses. S can be encoded in two different ways:<br><ul><br><li>By an integer sequence P = p1 p2 … pn where pi is the number of left parentheses before the ith right parenthesis in S (P-sequence).</li><br><li>By an integer sequence W = w1 w2 … wn where for each right parenthesis, say a in S, we associate an integer which is the number of right parentheses counting from the matched left parenthesis of a up to a. (W-sequence).</li><br></ul><br>Following is an example of the above encodings:<br><pre><br>&nbsp;&nbsp;S&nbsp;&nbsp;&nbsp;&nbsp;(((()()())))<br>&nbsp;&nbsp;P-sequence&nbsp;&nbsp;    4 5 6666<br>&nbsp;&nbsp;W-sequence&nbsp;&nbsp;    1 1 1456<br></pre><br>Write a program to convert P-sequence of a well-formed string to the W-sequence of the same string.<br>", input:"The first line of the input file contains a single integer t (1  t  10), the number of test cases, followed by the input data for each test case. The first line of each test case is an integer n (1  n  20), and the second line is the P-sequence of a well-formed string. It contains n positive integers, separated with blanks, representing the P-sequence.<br>", output:"The output file consists of exactly t lines corresponding to test cases. For each test case, the output line should contain n integers describing the W-sequence of the string corresponding to its given P-sequence.<br>", sample_in:"2\n6\n4 5 6 6 6 6\n9 \n4 6 6 6 6 8 9 9 9", sample_out:"1 1 1 4 5 6\n1 1 2 4 5 1 1 3 9", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:250, vtotal_submit:540, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2001 Asia Regional Teheran", author:"", tag:["TEST"]}
{pid:1362, vid:1362, oj:"hdu", title:"The Bermuda Triangle", desc:"People in the hidden region of the Bermuda Triangle make everything they need in triangular shapes. One day, someone decided to break the rule and bake a hexagonally shaped cake. But as usual, he has to serve the cake in triangular pieces. The pieces are equilateral triangles but in different sizes for different people. He can use as many triangles as needed to cut the cake into pieces, such that nothing remains from the cake. For example, the following figure shows one way that a hexagon with side 9 can be cut into triangles with side 2 and 3. (The cake is cut along the thick lines, thin lines are drawn to show the sizes).<br><br><center><img src=data/images/1362-1.gif></center><br><br>Input is a hexagon and triangle types (specified by the length of their sides) and the goal is to decide if the hexagon can be completely divided by the given triangle types.<br>", input:"The first line of the input file contains a single integer t (1&lt;=t &lt;=10), the number of test cases, followed by the input data for each test case. Each test case consists of a single line, containing s (1&lt;= s &lt;=25), the length of the hexagon\'s side, followed by n, the number of triangle types (1 &lt;=n &lt;=10), followed by n integers representing the length of each triangle type\'s side (between 1 and 25, inclusive).<br>", output:"There should be one output line per test case containing either YES or NO depending on whether the hexagon can be completely divided by the given triangle types.<br>", sample_in:"3\n5 2 2 3\n7 2 3 2\n13 2 2 3", sample_out:"NO\nNO\nYES", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:11, vtotal_submit:51, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"2001 Asia Regional Teheran", author:"", tag:["TEST"]}
{pid:1363, vid:1363, oj:"hdu", title:"Deformed Wheel", desc:"The village\'s carpentry is located by a hill side. The carpenter\'s two little boys play with a piece of wood which looks like a deformed wheel with two identical convex polygon-shaped faces. One boy sets the wooden wheel on a slope at the hill top and let it roll down. The other boy is to quickly place himself at where he guesses the rolling wood would stop. Your program is to help him make the right guess.<br><br>More formally, we consider the wooden wheel as a simple convex polygon and we approximate the hill by a sequence of connected line segments with decreasing slopes. The slope of the last segment in the sequence is assumed to be zero, and the slope of the first segment is assumed to be a positive number. Initially, the wheel is placed on the hill such that there is at least one point of contact between the wheel and segments. For example in the following figure, the wheel in its initial position is drawn in solid lines, while the final position is drawn in dashed lines.<br><br><center><img src=data/images/1363-1.gif></center><br><br>At any instant, the wheel rotates around one of its vertices, say P, if the y-coordinate of its center of gravity is decreased (note that this condition is necessary at any instant during the motion). It can be easily shown that at any instant, there is at most one such vertex. Rotation around P is stopped when the wheel touches a segment. The motion continues until no vertex can be found such that the wheel can rotate around it. At any instant, assume that changing the position of the center of gravity in any direction for at most 10-5 units, does not affect the stability of the wheel. Also assume that the friction between the wheel and the surface of the hill is so high that the wheel never slides on the surface.<br>", input:"The first line of the input file contains a single integer t (1 &lt;= t &lt;= 10), the number of test cases, followed by the input data for each test case. In the first line of each test case there is an integer n (1 &lt;= n &lt;= 10), that indicates the number of the wheel vertices. In each of the next n lines, there is a pair of numbers which are x and y coordinates of the initial position of a vertex. After this, there is a single line containing the initial x and y coordinates of the center of gravity of the wheel. You can assume that the center of gravity is inside or on the boundary of the polygon (note that the given center of gravity is not necessarily computable from wheel\'s geometric shape). Next lines of the test data will describe the shape of the hill. The surface of the hill is approximated with a series of line segments with decreasing slopes ending with a horizontal line segment. For each segment, there is a line containing length and slope of a segment (both of them are real numbers). The lines are ordered in decreasing slope (The last line of this part of the input has slope zero). You can assume that the last (horizontal) line is long enough that the wheel would not pass its end. In the last line of the test case, there is a line containing the x and y coordinates of the right end-point of the first segment. All coordinates and slopes are real numbers.<br>", output:"For each test case, there should be a single line in the output file, containing two numbers which are x and y coordinates of the wheel\'s center of gravity. Round the numbers in the output to 3 digits after decimal point.<br>", sample_in:"1\n4\n40 30\n30 37\n24 30\n30 26\n27 29\n30 1\n100 0\n40 30", sample_out:"28.854 20.031", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2, vtotal_submit:28, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2001 Asia Regional Teheran", author:"", tag:["TEST"]}
{pid:1364, vid:1364, oj:"hdu", title:"Illusive Chase", desc:"Tom the robocat is presented in a Robotics Exhibition for an enthusiastic audience of youngsters, placed around an m  n field. Tom which is turned off initially is placed in some arbitrary point in the field by a volunteer from the audience. At time zero of the show, Tom is turned on by a remote control. Poor Tom is shown a holographic illusion of Jerry in a short distance such that a direct path between them is either vertical or horizontal. There may be obstacles in the field, but the illusion is always placed such that in the direct path between Tom and the illusion, there would be no obstacles. Tom tries to reach Jerry, but as soon as he gets there, the illusion changes its place and the chase goes on. Let\'s call each chase in one direction (up, down, left, and right), a chase trip. Each trip starts from where the last illusion was deemed and ends where the next illusion is deemed out. After a number of chase trips, the holographic illusion no more shows up, and poor Tom wonders what to do next. At this time, he is signaled that for sure, if he returns to where he started the chase, a real Jerry is sleeping and he can catch it.<br><br>To simplify the problem, we can consider the field as a grid of squares. Some of the squares are occupied with obstacles. At any instant, Tom is in some unoccupied square of the grid and so is Jerry, such that the direct path between them is either horizontal or vertical. It\'s assumed that each time Tom is shown an illusion; he can reach it by moving only in one of the four directions, without bumping into an obstacle. Tom moves into an adjacent square of the grid by taking one and only one step.<br><br>The problem is that Tom\'s logging mechanism is a bit fuzzy, thus the number of steps he has taken in each chase trip is logged as an interval of integers, e.g. 2 to 5 steps to the left. Now is your turn to send a program to Tom\'s memory to help him go back. But to ease your task in this contest, your program should only count all possible places that he might have started the chase from.<br>", input:"The first line of the input file contains a single integer t (1 &lt;= t &lt;= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains two integers m and n, which are the number of rows and columns of the grid respectively (1 &lt;= m, n &lt;= 100). Next, there are m lines, each containing n integers which are either 0 or 1, indicating whether the corresponding cell of the grid is empty (0) or occupied by an obstacle (1). After description of the field, there is a sequence of lines, each corresponding to a chase trip of Tom (in order). Each line contains two positive integers which together specify the range of steps Tom has taken (inclusive), followed by a single upper-case character indicating the direction of the chase trip, which is one of the four cases of R (for right), L (for left), U (for up), and D (for down). (Note that these directions are relative to the field and are not directions to which Tom turns). This part of the test case is terminated by a line containing exactly two zeros.<br>", output:"For each test case, there should be a single line, containing an integer indicating the number of cells that Tom might have started the chase from.<br>", sample_in:"2\n6 6\n0 0 0 0 0 0\n0 0 0 1 1 0\n0 1 0 0 0 0\n0 0 0 1 0 0\n0 0 0 1 0 1\n0 0 0 0 0 1\n1 2 R\n1 2 D\n1 1 R\n0 0\n3 4\n0 0 0 0\n0 0 0 0\n0 0 0 0\n1 2 R\n3 7 U\n0 0", sample_out:"10\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:26, vtotal_submit:86, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2001 Asia Regional Teheran", author:"", tag:["TEST"]}
{pid:1365, vid:1365, oj:"hdu", title:"Puzzle Out", desc:"The scientific committee members of the 26th ACM/ICPC, who design the contest problems, use the following encryption algorithm to communicate the problem drafts securely through the Internet. To encrypt a text, all occurrences of each letter is replaced with another letter (possibly itself), such that no two letters are encrypted to the same letter. Both original and encrypted texts consist of only upper-case letters and blanks. Blanks are not encrypted and are repeated exactly in the encrypted text. As an example, the string GSRH RH GSV URIHG HZNKOV is the encrypted form of THIS IS THE FIRST SAMPLE according to the encryption table (A -&gt; Z, B -&gt; Y, C -&gt; X, …, Z -&gt; A).<br><br>A recipient of a problem draft has lost the encryption table, but he has a dictionary which includes all the possible words appearing in the problems. You are to help him set up a decryption table to enable him restore the original problem draft from the encrypted one. Given a dictionary of the original words used in the text, and the encrypted text, we want to find the right encryption table such that after decrypting the given encrypted text back to the original one, all words can be found in the dictionary. <br>", input:"The first part of the input file is a dictionary of English words common to all test cases. The first line of the file is d (1 &lt;= d &lt;= 50000); the number of words in the dictionary, followed by d lines each containing a word in the dictionary. The words in the dictionary are sorted in alphabetical order and all are in uppercase. Each word has at most 20 characters, but you can assume that sum of the length of all words in the dictionary is no more than 350,000. The next line contains a single integer t (1 &lt;= t &lt;= 10), the number of test cases, followed by the input data for each test case. Each test case, which is preceded by a single blank line, consists of multiple lines in the input file forming the encrypted text. Each line has a string containing only uppercase letters and blank. You may assume that no line break is occurred in the middle of a word and there may be arbitrary number of blank characters at the end of each line. Maximum length of input lines is 80. <br>", output:"The output file contains exactly t lines, each corresponding to a test case. Each line should contain a single string of 26 characters which is the encryption of the string ABCDEFGHIJKLMNOPQRSTUVWXYZ according to the encryption table used in the test case. Letters in the output string should be in uppercase. It is possible that some letters do not appear in the encrypted text at all. In this case, put a * mark in place of those letters not appearing in the decrypted version of the input text. If the test case has no solution, the output line should contain #No solution#. If there is more than one possible encryption table for a test case, the output line should contain #More than one solution#.<br>", sample_in:"14\nBE\nCHANGE\nFIRST\nIN\nIS\nMUST\nSAMPLE\nSEE\nTHE\nTHIS\nTO\nWISH\nWORLD\nYOU\n4\n\nGSRH RH GSV URIHG HZNKOV\n\nIZM BMVU    SP UGP \nRGTANP IZM KFVG UZ VPP \nFA UGP KZWCQ\n\nXYZ ABCDEFG\n\nXZY ABD", sample_out:"Z***VU*SR**ON**K*IHG******\nTSRQP*NGF**CBAZ**WVUM*K*I*\n#No solution#\n#More than one solution#", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:10, vtotal_submit:34, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"2001 Asia Regional Teheran", author:"", tag:["TEST"]}
{pid:1366, vid:1366, oj:"hdu", title:"The Willy Memorial Program", desc:"Willy the spider used to live in the chemistry laboratory of Dr. Petro. He used to wander about the lab pipes and sometimes inside empty ones. One night while he was in a pipe, he fell asleep. The next morning, Dr. Petro came to the lab. He didn\'t notice Willy while opening the valve to fill the pipes with hot water. Meanwhile, Stanley the gray mouse got what was going to happen. No time to lose! Stan ran hard to reach the valve before Willy gets drawn, but... Alas! He couldn\'t make it! <br><br>Poor Willy was boiled in hot water, but his memory is still in our hearts. Though Stan tried his best, we want to write a program, in the memory of Willy, to compute the time Stan had, to rescue Willy, assuming he started to run just when the doctor opened the valve.<br><br>To simplify the problem, assume the pipes are all vertical cylinders with diameter 1 cm. Every pipe is open from the top and closed at the bottom. Some of the pipes are connected through special horizontal pipes named links. The links have very high flow capacity, but are so tiny that at any given time, the volume of water inside them is negligible. The water enters from top of one of the pipes with a constant rate of 0.25πcm3/sec and begins to fill the pipe from the bottom until the water reaches a link through which it flows horizontally and begins to fill the connected pipe. From elementary physics we know if two pipes are connected and the surface of the water is above the connecting link, the level of water in both pipes remains the same when we try to fill one of them. In this case the water fills each pipe with a rate equal to half of the rate of incoming water. As an example, consider the following configuration:<br><br><center><img src=data/images/1366-1.gif></center><br><br>First, the lower 2 centimeters of the left pipe is filled with water at full rate, then, the lower 3 centimeters of the right pipe is filled, and after that, the upper part of the two pipes are filled in parallel at half rate. The input to your program is a configuration of pipes and links, and a target level in one of the pipes (the heavy dotted line in the above figure). The program should report how long it takes for the level of water to reach the target level. For the above configuration, the output is 9 seconds.<br><br>It is assumed that the water falls very rapidly, such that the time required for the water to fall can be neglected. The target level is always assumed to be a bit higher than the specified level for it. As an example, if we set the target point to level 4 in the left pipe in the figure above, the elapsed time for water to reach that target is assumed to be 5 (not 2), Also note that if the water reaches to the top of a pipe (say in level x), it won\'t pour out outside the pipe until empty spaces in connected pipes below level x are filled (if can be filled, i.e. the level of water reaches the connecting links). (Note that there may be some links at level x, to which water is entered). After all such spaces are filled; the water level would not go up further.<br>", input:"To describe positions, we assume the coordinates are expressed as (x, y) and the origin lies in the top-left of all pipes and links. (Note that y coordinates are increased downwards). All coordinates are integer numbers between 0 and 100, inclusive.<br>The first line of the input file contains a single integer t (1 &lt;= t &lt;= 10), the number of test cases, followed by the input data for each test case. The first line of each test case is p (1 &lt;= p &lt;= 20), the number of pipes, followed by p lines, each describing a pipe. Each pipe description line consists of three numbers. The first two are (x, y) coordinates of the upper-left corner of the pipe and the third number is the height of the pipe (at least 1 cm and at most 20 cm). Note that diameter of each pipe is 1 cm.<br><br>After input data describing the pipes, there is a line containing a single integer l, which is the number of links (0  l  50). After it, there are l lines describing links. Each link description contains 3 integers. The first two are (x, y) coordinates of the left end-point of the link and the third is the length of the link (at least 1 cm and at most 20 cm). It is assumed that the width of the link is zero.<br><br>The last line for each test case contains two numbers. The first is the number of target pipe (starting from one, with the order appeared in test data). The second line is the desired y for the level of water in the target pipe (note that the specified level may be out of the pipe at all).<br><br>You can assume the following about the input:<br><br>The water enters into the first pipe.<br>No link crosses a pipe.<br>No two links have the same y coordinates.<br>No two pipes have the same upper-left x coordinates.<br>Both endpoints of each link are connected to pipes.<br>", output:"The output file should contain exactly t lines with no blank lines in between, each corresponding to one test case. Each output line should contain the time required for the water to reach the target level in the target pipe (an integer number). If in a specific test case, the water never reaches the target level, the line should contain No Solution string in it.<br>", sample_in:"1\n2\n2 0 6\n5 1 6\n1\n3 4 2\n2 2", sample_out:"9", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8, vtotal_submit:28, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2001 Asia Regional Teheran", author:"", tag:["TEST"]}
{pid:1367, vid:1367, oj:"hdu", title:"Parallel Expectations", desc:"We are to predict some facts about the behavior of a single processor designed for running two programs in parallel. Programs are sequences of commands according to the following grammar:<br><b><br>&lt;Program&gt;   &lt;Command&gt; *<br>&lt;Command&gt;   &lt;Variable&gt; := &lt;Operand&gt; &lt;Operator&gt; &lt;Operand&gt;<br>&lt;Operator&gt;   + | - <br>&lt;Operand&gt;   &lt;Variable&gt; | &lt;Constant&gt;<br></b><br>A &lt;Variable&gt; is a sequence of (at most 20) alphanumeric characters (A...Z, a...z, and 0...9) starting with a letter (not case sensitive). A &lt;constant&gt; is an unsigned integer number (less than 100). There may be arbitrary number of blank or tab characters between tokens.<br><br>Before execution, programs are translated into machine language. A statement of the form X := Y + Z is translated to the following set of machine instructions:<br><b><br>Mov R1, Y<br>Mov R2, Z<br>Add R1, R2<br>Mov X, R1<br></b><br>A MOV instruction copies the content of its second operand into its first operand. An Add (Sub) instruction, adds (subtracts) its second operand from its first operand and the result is stored in the first operand. Note that Y and Z denote either a variable or an integer constant. Instructions generated for the command X := Y - Z is similar to the above instructions, except that Sub command is used instead of Add.<br><br>The processor is given two machine language programs and starts executing them from the first instruction. In each step, it randomly selects one of the two programs and runs the next instruction from the selected program. This continues until one program reaches its end. In this situation, the remaining instructions from the other one are executed sequentially to the end and the processor stops. It is assumed that all variables are shared between two programs, but each program has a separate register set. The goal of this program is to compute the expected final value of all variables among all possible executions of the programs. More precisely, we want to consider every possible execution of the two programs and for each variable, calculate the average of its final value in different executions. It is assumed that the initial value of all variables is zero.<br>", input:"The first line of the input file contains a single integer t (1 ≤ t ≤ 10), the number of test cases, followed by the input data for each test case. The data for each test case consists of a pair of programs. Each program is written as a sequence of consecutive lines, each line containing exactly one command. Programs end with a line containing only the word <b>END</b>. You may assume that no variable in any program is named \'<b>END</b>\'. There is no blank line between programs of one test case. There are at least one and at most 25 lines in each program. Total number of variables in two programs is no more than 10.<br>", output:"For each test case, the output file should contain the expected final value of all variables in alphabetical order of variable names (digits precede letters in this order). Output for different test cases should be separated by exactly one blank line. Round the numbers in the output to 4 digits after decimal point. Do not omit trailing zeros after decimal point (e.g. write 1.2000 instead of 1.2).<br>", sample_in:"1\nS := 1 + 3\nEND\nS := S+S\nEND", sample_out:"3.0000", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:9, vtotal_submit:53, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2001 Asia Regional Teheran", author:"", tag:["TEST"]}
{pid:1368, vid:1368, oj:"hdu", title:"University Entrance Examination", desc:"There is a fierce competition among high-school graduates in Iran to pass the centralized nationwide university entrance examination. Ministry of Science, Research, and Technology has set up the Education Evaluation Organization (EEO) to take care of all aspects of this big exam. This year the EEO managed to select some 150,000 students to enter universities out of 1.4 million high school graduates participated in a tough 4.5 hours multiple-choice exam. This annual event is usually preceded by a multi-billion Rial business offering preparatory courses to enthusiastic students. A few weeks after the big exam day, each participant receives a score sheet, and a list of Field-Department-University (FDU), displaying each field of study in the universities’ departments (e.g., the Software Engineering field of Computer Engineering department at Sharif University of Technology) along with their capacity for that year. The eligible participants (those who have scored enough to be allowed to declare their FDU priorities) fill out a priority indication form, and declare the FDUs they like to enter, in the order of their preference. The EEO processes the forms, and considering the total score, the participant’s FDU priority list, and some other selection rules, enters the accepted participants’ names in the list of each FDU, until all capacities are exhausted. Those who are not entered in a list are considered failed and may try again next year. Each accepted participant’s name may be entered in only one list.<br> <br>One of the interesting selection rules is to persuade participants to enter universities in the vicinity of their home towns. This is to help reduce the number of requests for staying in the university dormitories.  <br><br>The selection process is so complex and so sensitive to many, that EEO has decided to hire the very best programmers in Iran to design a new selection algorithm and write a completely new program for what they have been doing for years. ACM programming contest is where these programmers can be found.<br><br>There are N students S1 to SN , and M items F1 to FM , each representing one of the FDUs. There are also a number of geographic regions. For each participant, the total score, the geographic region where his/her high school diploma was awarded, and a priority list of his/her wanted FDUs are available. For each FDU, the geographic region where the corresponding university is located, and its capacity for that year is recorded.<br><br>Write a program to compute the list of accepted students with the FDU they can enter to, given the above list of input data. Your program must abide with the following rules:<br><br>1. (Local student selection rule) Suppose two students A and B have both selected F in their priority lists and F is in region R. Also suppose that score of A is greater than B\'s score.  Then, if B is from region R (local) and A is from other regions (non-local), and B\'s score is greater than 70% of A\'s score, then B has priority over A to enter F. In all other cases A has priority over B to enter F.<br>2. (Fairness rule) Students should be treated according to their priority list of FDUs. That is, an accepted student will be accepted to the first possible FDU he/she can enter.<br><br>Note: We assume that scores are all different integer values.<br>", input:"The first line of the input contains a single integer t (1 &lt;= t &lt;= 10), the number of test cases, followed by the input data for each test case. The first line of each test case contains N (1 &lt;= N &lt;= 150) and M (1 &lt;= M &lt;= 50) followed by N lines, each for one student. The format of these lines is Ri, Mi, K, Fi1, …, FiK in this order. In this line, that is for student i, Ri is his/her region number, Mi is his/her score in the entrance exam, K is the number of FDUs in his/her priority list (0 &lt;= K &lt;= M), and his/her priority list containing the FDU numbers in order of interest. Then there are M lines, one for each FDU. Each line contains Ri, and Ci in that order, which respectively is region number of Fi (the ith FDU) and the capacity of Fi. Note that region numbers are arbitrary integers.<br>", output:"Outputs for different test cases are separated by exactly one blank line. For each test case, you should write N lines, one for each of the N students. If student i has been accepted to FDU Fj, then ith line should contain j, and not accepted, if that student has not been accepted in any FDU of his/her interest.<br>", sample_in:"1\n9 2\n1 100 2 1 2\n2 80 2 2 1\n1 90 1 1\n2 40 1 2\n2 50 1 1\n1 60 1 2\n2 75 1 1\n1 95 1 1\n2 30 1 2\n1 3\n2 4", sample_out:"1\n2\n1\n2\nnot accepted\n2\nnot accepted\n1\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:10, vtotal_submit:45, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2001 Asia Regional Teheran", author:"", tag:["TEST"]}
{pid:1369, vid:1369, oj:"hdu", title:"Erdos Numbers", desc:"The Hungarian Paul Erdos (1913–1996, pronounced as “Ar-dish”) was not only one of the strangest mathematicians of the 20th century, he was also among the most famous ones. He kept on publishing widely circulated papers up to a very high age, and every mathematician having the honor of being a co-author to Erdos is well respected.<br><br>Not everybody got a chance to co-author a paper with Erdos, so many people were content if they managed to publish a paper with somebody who had published a paper with Erdos. This gave rise to the so-called Erdos numbers. An author who has jointly published with Erdos had Erdos number 1. An author who had not published with Erdos but with somebody with Erdos number 1 obtained Erdos number 2, and so on. Today, nearly everybody wants to know what Erdos number he or she has. Your task is to write a program that computes Erdos numbers for a given set of scientists.<br>", input:"The input file contains a sequence of scenarios, each scenario consisting of a paper database and a list of names. A scenario begins with the line “p n”, where p and n are natural numbers with 1&lt;=p&lt;=32000;1&lt;=n&lt;=3000. Following this line are p lines containing descriptions of papers (this is the paper database). A paper is described by a line of the following form:<br><br>LastName1, FirstName1, LastName2, Firstname2, . . . : TitleOfThePaper<br><br>The names and the title may contain any ASCII characters between 32 and 126 except commas and colons. There will always be exactly one space character following each comma. The first name may be abbreviated, but the same name will always be written in the same way. In particular, Erdos’ name is always written as “Erdos, P.”. (Umlauts like ‘¨o’,‘¨a’,. . . are simply written as ‘o’,‘a’, . . . .)<br><br>Example:<br><br>Smith, M.N., Martin, G., Erdos, P.: Newtonian forms of prime factors matrices.<br><br>After the p papers follow n lines each containing exactly one name in the same format as in the paper database.<br><br>The line ‘0 0’ terminates the input.<br><br>No name will consist of more than 40 characters. No line in the input file contains more than 250 characters. In each scenario there will be at most 10 000 different authors.<br>", output:"For every scenario first print the number of the scenario in the format shown in the sample output. Then print for every author name in the list of names their Erdos number based on the papers in the paper database of the scenario. The authors should be output in the order given in the input file. Authors that do not have any relation to Erdos via the papers have Erdos number infinity. Adhere to the format shown in the sample output.<br><br>Print a blank line after each case. <br>", sample_in:"2 2\nSmith, M.N., Martin, G., Erdos, P.: Newtonian forms of prime factors matrices.\nGardner, M., Martin, G.: Commuting Names\nSmith, M.N.\nGardner, M.\n0 0", sample_out:"Database #1\nSmith, M.N.: 1\nGardner, M.: 2 ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8, vtotal_submit:57, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"Mid-Central European Regional Contest 2000", author:"", tag:["TEST"]}
{pid:1370, vid:1370, oj:"hdu", title:"Biorhythms", desc:"Some people believe that there are three cycles in a person\'s life that start the day he or she is born. These three cycles are the physical, emotional, and intellectual cycles, and they have periods of lengths 23, 28, and 33 days, respectively. There is one peak in each period of a cycle. At the peak of a cycle, a person performs at his or her best in the corresponding field (physical, emotional or mental). For example, if it is the mental curve, thought processes will be sharper and concentration will be easier. <br><br>Since the three cycles have different periods, the peaks of the three cycles generally occur at different times. We would like to determine when a triple peak occurs (the peaks of all three cycles occur in the same day) for any person. For each cycle, you will be given the number of days from the beginning of the current year at which one of its peaks (not necessarily the first) occurs. You will also be given a date expressed as the number of days from the beginning of the current year. You task is to determine the number of days from the given date to the next triple peak. The given date is not counted. For example, if the given date is 10 and the next triple peak occurs on day 12, the answer is 2, not 3. If a triple peak occurs on the given date, you should give the number of days to the next occurrence of a triple peak. <br><br><br>This problem contains multiple test cases!<br><br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br>", input:"You will be given a number of cases. The input for each case consists of one line of four integers p, e, i, and d. The values p, e, and i are the number of days from the beginning of the current year at which the physical, emotional, and intellectual cycles peak, respectively. The value d is the given date and may be smaller than any of p, e, or i. All values are non-negative and at most 365, and you may assume that a triple peak will occur within 21252 days of the given date. The end of input is indicated by a line in which p = e = i = d = -1. <br>", output:"For each test case, print the case number followed by a message indicating the number of days to the next triple peak, in the form: <br><br>Case 1: the next triple peak occurs in 1234 days.<br><br>Use the plural form ``days\'\' even if the answer is 1. <br>", sample_in:"1\n\n0 0 0 0\n0 0 0 100\n5 20 34 325\n4 5 6 7\n283 102 23 320\n203 301 203 40\n-1 -1 -1 -1", sample_out:"Case 1: the next triple peak occurs in 21252 days.\nCase 2: the next triple peak occurs in 21152 days.\nCase 3: the next triple peak occurs in 19575 days.\nCase 4: the next triple peak occurs in 16994 days.\nCase 5: the next triple peak occurs in 8910 days.\nCase 6: the next triple peak occurs in 10789 days.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:480, vtotal_submit:1494, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"East Central North America 1999; Pacific Northwest 1999", author:"", tag:["TEST"]}
{pid:1371, vid:1371, oj:"hdu", title:"Clock", desc:"You are given a standard 12-hour clock with analog display, an hour hand and a minute hand. How many times does the minute hand pass the hour hand in a given time interval? <br>", input:"The input contains an indefinite number of lines; each line contains four numbers.<br><br>The first pair of numbers represents an &quot;initial time&quot; the second pair represents a &quot;final time.&quot;<br><br>In each such number pair, the first number represents hours, second number represents minutes.<br><br>The hours will be in the range 1..12, the minutes in the range 0..59.<br><br>No initial time and no final time will be an instant at which the minute hand just passes the hour hand. (In particular, 12 00 will not occur as an initial or final time.)<br><br>No initial time will be the same as the corresponding final time.<br><br>Between each initial time and corresponding final time, the hour hand will have turned less than one full revolution (360 degrees).<br><br>As the hour hand turns from its initial position to its final position, it may or may not sweep past the number 12 on the clock\'s dial.<br><br>If it does, then either the initial time is an &quot;A.M.&quot; time and the final time a &quot;P.M.&quot; time, or vice versa.<br><br>If it does not, then either both times (initial and final) are &quot;A.M.&quot; or both are &quot;P.M.&quot;<br><br>Each line of input gives rise to one line of output, containing<br><br>the initial and final times, and<br><br>the number of times the minute hand passes the hour hand between the initial time and the final time.<br><br>Observe all details of formatting, such as upper/lower case letters, punctuation, blank spaces, and the absence of blank lines.<br><br>In each time display, the hours and minutes are displayed in fields of width 2, separated by a colon.<br><br>The ten\'s digit (of hours or minutes) is displayed as a zero if it is zero.<br>", output:"Here is a formatting template shown between two lines of the above output:<br><br>Initial time  Final time  Passes<br>12345678901234567890123456789012<br>       12:50       01:02       0<br><br>", sample_in:"12 50  1  2\n 3  8  3 20\n 2 45 11  0\n11  0  3 20\n 1  2 12 50\n 3 20  3  8", sample_out:"Program 3 by team X\nInitial time  Final time  Passes\n       12:50       01:02       0\n       03:08       03:20       1\n       02:45       11:00       8\n       11:00       03:20       4\n       01:02       12:50      11\n       03:20       03:08      10\nEnd of program 3 by team X", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:20, vtotal_submit:105, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Rocky Mountain 2000", author:"", tag:["TEST"]}
{pid:1372, vid:1372, oj:"hdu", title:"Knight Moves", desc:"A friend of you is doing research on the Traveling Knight Problem (TKP) where you are to find the shortest closed tour of knight moves that visits each square of a given set of n squares on a chessboard exactly once. He thinks that the most difficult part of the problem is determining the smallest number of knight moves between two given squares and that, once you have accomplished this, finding the tour would be easy.<br>Of course you know that it is vice versa. So you offer him to write a program that solves the &quot;difficult&quot; part. <br><br>Your job is to write a program that takes two squares a and b as input and then determines the number of knight moves on a shortest route from a to b. <br>", input:"The input file will contain one or more test cases. Each test case consists of one line containing two squares separated by one space. A square is a string consisting of a letter (a-h) representing the column and a digit (1-8) representing the row on the chessboard. <br>", output:"For each test case, print one line saying &quot;To get from xx to yy takes n knight moves.&quot;. <br>", sample_in:"e2 e4\na1 b2\nb2 c3\na1 h8\na1 h7\nh8 a1\nb1 c3\nf6 f6", sample_out:"To get from e2 to e4 takes 2 knight moves.\nTo get from a1 to b2 takes 4 knight moves.\nTo get from b2 to c3 takes 2 knight moves.\nTo get from a1 to h8 takes 6 knight moves.\nTo get from a1 to h7 takes 5 knight moves.\nTo get from h8 to a1 takes 6 knight moves.\nTo get from b1 to c3 takes 1 knight moves.\nTo get from f6 to f6 takes 0 knight moves.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2196, vtotal_submit:5597, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 1996", author:"", tag:["TEST"]}
{pid:1373, vid:1373, oj:"hdu", title:"Channel Allocation", desc:"When a radio station is broadcasting over a very large area, repeaters are used to retransmit the signal so that every receiver has a strong signal. However, the channels used by each repeater must be carefully chosen so that nearby repeaters do not interfere with one another. This condition is satisfied if adjacent repeaters use different channels.<br><br>Since the radio frequency spectrum is a precious resource, the number of channels required by a given network of repeaters should be minimised. You have to write a program that reads in a description of a repeater network and determines the minimum number of channels required.<br>", input:"The input consists of a number of maps of repeater networks. Each map begins with a line containing the number of repeaters. This is between 1 and 26, and the repeaters are referred to by consecutive upper-case letters of the alphabet starting with A. For example, ten repeaters would have the names A,B,C,...,I and J. A network with zero repeaters indicates the end of input.<br><br>Following the number of repeaters is a list of adjacency relationships. Each line has the form:<br><br>A:BCDH<br><br>which indicates that the repeaters B, C, D and H are adjacent to the repeater A. The first line describes those adjacent to repeater A, the second those adjacent to B, and so on for all of the repeaters. If a repeater is not adjacent to any other, its line has the form<br><br>A:<br><br>The repeaters are listed in alphabetical order.<br><br>Note that the adjacency is a symmetric relationship; if A is adjacent to B, then B is necessarily adjacent to A. Also, since the repeaters lie in a plane, the graph formed by connecting adjacent repeaters does not have any line segments that cross. <br>", output:"For each map (except the final one with no repeaters), print a line containing the minumum number of channels needed so that no adjacent channels interfere. The sample output shows the format of this line. Take care that channels is in the singular form when only one channel is required.<br>", sample_in:"2\nA:\nB:\n4\nA:BC\nB:ACD\nC:ABD\nD:BC\n4\nA:BCD\nB:ACD\nC:ABD\nD:ABC\n0", sample_out:"1 channel needed.\n3 channels needed.\n4 channels needed.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:91, vtotal_submit:272, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Africa 2001", author:"", tag:["TEST"]}
{pid:1374, vid:1374, oj:"hdu", title:"The Circumference of the Circle", desc:"To calculate the circumference of a circle seems to be an easy task - provided you know its diameter. But what if you don\'t? <br><br>You are given the cartesian coordinates of three non-collinear points in the plane.<br>Your job is to calculate the circumference of the unique circle that intersects all three points. <br>", input:"The input file will contain one or more test cases. Each test case consists of one line containing six real numbers x1,y1, x2,y2,x3,y3, representing the coordinates of the three points. The diameter of the circle determined by the three points will never exceed a million. Input is terminated by end of file. <br>", output:"For each test case, print one line containing one real number telling the circumference of the circle determined by the three points. The circumference is to be printed accurately rounded to two decimals. The value of pi is approximately 3.141592653589793. <br>", sample_in:"0.0 -0.5 0.5 0.0 0.0 0.5\n0.0 0.0 0.0 1.0 1.0 1.0\n5.0 5.0 5.0 7.0 4.0 6.0\n0.0 0.0 -1.0 7.0 7.0 7.0\n50.0 50.0 50.0 70.0 40.0 60.0\n0.0 0.0 10.0 0.0 20.0 1.0\n0.0 -500000.0 500000.0 0.0 0.0 500000.0", sample_out:"3.14\n4.44\n6.28\n31.42\n62.83\n632.24\n3141592.65", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:391, vtotal_submit:612, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 1996", author:"", tag:["TEST"]}
{pid:1375, vid:1375, oj:"hdu", title:"Chemical Reactions", desc:"Bill teaches chemistry in the school and has prepared a number of tests for his students. Each test has a chemical formula and a number of possible reaction outcomes that his students are to choose one correct from. However, Bill wants to make sure that he has not made any typos while entering his tests into a computer and that his students won\'t easily throw away wrong answers simply by counting a number of chemical elements on the left and on the right side of the equation, which should be always equal in a valid reaction.<br><br>You are to write a program that will help Bill. The program shall read the description of the test for the students that consists of the given left side of the equation and a number of possible right sides, and determines if the number of chemical elements on each right side of the equation is equal to the number of chemical elements on the given left side of the equation.<br><br>To help you, poor computer folks, that are unaware of the complex world of chemistry, Bill has formalized your task. Each side of the equation is represented by a string of characters without spaces, and consists of one or more chemical sequences separated by a \'+\' (plus) characters. Each sequence has an optional preceding integer multiplier that applies to the whole sequence and a number of elements. Each element is optionally followed by an integer multiplier that applies to it. An element in this equation can be either distinct chemical element or a whole sequence that is placed in round parenthesis. Every distinct chemical element is represented by either one capital letter or a capital letter that is followed by a small letter.<br><br>Even more formally, using notation that is similar to BNF, we can write:<br><br>~{!$~} &lt;formula&gt; ::= [&lt;number&gt;] &lt;sequence&gt; { \'+\' [&lt;number&gt;] &lt;sequence&gt; }<br>~{!$~} &lt;sequence&gt; ::= &lt;element&gt; [&lt;number&gt;] { &lt;element&gt; [&lt;number&gt;] }<br>~{!$~} &lt;element&gt; ::= &lt;chem&gt; | \'(\' &lt;sequence&gt; \')\'<br>~{!$~} &lt;chem&gt; ::= &lt;uppercase_letter&gt; [ &lt;lowercase_letter&gt; ]<br>~{!$~} &lt;uppercase_letter&gt; ::= \'A\'..\'Z\'<br>~{!$~} &lt;lowercase_letter&gt; ::= \'a\'..\'z\'<br>~{!$~} &lt;number&gt; ::= \'1\'..\'9\' { \'0\'..\'9\' }<br><br>Every distinct chemical element is said to occur in the given formula for some total number X, if X is the sum of all separate occurrences of this chemical element multiplied to all numbers that apply to it. For example, in the following chemical formula:<br><br>C2H5OH+3O2+3(SiO2)<br><br>C occurs for a total of 2 times.<br>H occurs for a total of 6 times (5 + 1).<br>O occurs for a total of 13 times (1 + 3*2 + 3*2).<br>Si occurs for a total of 3 times.<br><br>All multipliers in the formula are integer numbers that are at least 2 if explicitly specified and are 1 by default. Each chemical formula is at most 100 characters long, and every distinct chemical element is guaranteed to occur for a total of no more than 10000 times in each formula.<br>", input:"The first line of the input file represents a chemical formula that is to be tested as the left side of the equation. The second line of the input file contains a single integer number N (1 &lt;= N &lt;= 10), which is the number of right sides of the equation that are to be tested. Each one of the following N lines represents one such formula.<br>", output:"You are to write to the output file N lines - one line per each possible answer of the chemical test for Bill\'s students that is given in the input file. For each right-hand side formula that is encountered in the input file, write to the output file:<br><br>&lt;left_formula&gt;==&lt;right_formula&gt;<br><br>if the total number of occurrences of each distinct chemical element on the left-hand side equals to the total number of occurrences of this chemical element on the right-hand side. Otherwise write:<br><br>&lt;left_formula&gt;!=&lt;right_formula&gt;<br><br>Here &lt;left_formula&gt; must be replaced exactly (character by character) with the original left-hand side formula as it is given in the first line of the input file, and &lt;right_formula&gt; must be replaced exactly with each right-hand side formula as they are given in the input file. Do not place any spaces in the lines you write to the output file.<br><br><br>This problem contains multiple test cases!<br><br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br>", sample_in:"1\n\nC2H5OH+3O2+3(SiO2)\n7\n2CO2+3H2O+3SiO2\n2C+6H+13O+3Si\n99C2H5OH+3SiO2\n3SiO4+C2H5OH\nC2H5OH+3O2+3(SiO2)+Ge\n3(Si(O)2)+2CO+3H2O+O2\n2CO+3H2O+3O2+3Si", sample_out:"C2H5OH+3O2+3(SiO2)==2CO2+3H2O+3SiO2\nC2H5OH+3O2+3(SiO2)==2C+6H+13O+3Si\nC2H5OH+3O2+3(SiO2)!=99C2H5OH+3SiO2\nC2H5OH+3O2+3(SiO2)==3SiO4+C2H5OH\nC2H5OH+3O2+3(SiO2)!=C2H5OH+3O2+3(SiO2)+Ge\nC2H5OH+3O2+3(SiO2)==3(Si(O)2)+2CO+3H2O+O2\nC2H5OH+3O2+3(SiO2)!=2CO+3H2O+3O2+3Si", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:11, vtotal_submit:29, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Northeastern Europe 2001", author:"", tag:["TEST"]}
{pid:1376, vid:1376, oj:"hdu", title:"Octal Fractions", desc:"Fractions in octal (base 8) notation can be expressed exactly in decimal notation. For example, 0.75 in octal is 0.963125 (7/8 + 5/64) in decimal. All octal numbers of n digits to the right of the octal point can be expressed in no more than 3n decimal digits to the right of the decimal point.<br><br>Write a program to convert octal numerals between 0 and 1, inclusive, into equivalent decimal numerals. The input to your program will consist of octal numbers, one per line, to be converted. Each input number has the form 0.d1d2d3 ... dk, where the di are octal digits (0..7). There is no limit on k. Your output will consist of a sequence of lines of the form<br><br>0.d1d2d3 ... dk [8] = 0.D1D2D3 ... Dm [10]<br><br>where the left side is the input (in octal), and the right hand side the decimal (base 10) equivalent. There must be no trailing zeros, i.e. Dm is not equal to 0.<br>", input:"", output:"", sample_in:"0.75\n0.0001\n0.01234567", sample_out:"0.75 [8] = 0.953125 [10]\n0.0001 [8] = 0.000244140625 [10]\n0.01234567 [8] = 0.020408093929290771484375 [10] ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:118, vtotal_submit:249, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Africa 2001", author:"", tag:["TEST"]}
{pid:1377, vid:1377, oj:"hdu", title:"A Well-Formed Problem", desc:"XML, eXtensible Markup Language, is poised to become the lingua franca of structured data communication for the foreseeable future, due in part to its strict formatting requirements. XML parsers must report anything that violates the rules of a well-formed XML document. An XML document is said to be well-formed if it meets all of the wellformedness constraints as defined by the World Wide Web Consortium (W3C) XML specification.<br><br>XML documents are composed of units called elements, that contain either character data and/or other elements.<br><br>Elements may also contain within their declaration values called attributes. Consider the following XML document: <br><br>&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;customer&gt;<br>       &lt;name&gt;<br>               &lt;first&gt;John&lt;/first&gt;<br>               &lt;last&gt;Doe&lt;/last&gt;<br>       &lt;/name&gt;<br>       &lt;address&gt;<br>               &lt;street&gt;<br>                       &lt;number&gt;15&lt;/number&gt;<br>                       &lt;direction&gt;West&lt;/direction&gt;<br>                       &lt;name&gt;34th&lt;/name&gt;<br>               &lt;/street&gt;<br>               &lt;city&gt;New York&lt;/city&gt;<br>               &lt;state-code&gt;NY&lt;/state-code&gt;<br>               &lt;zip-code format=&quot;PLUS4&quot;&gt;10001-0001&lt;/zip-code&gt;<br>               &lt;country-code&gt;USA&lt;/country-code&gt;<br>       &lt;/address&gt;<br>       &lt;orders/&gt;<br>&lt;/customer&gt;<br><br>The bold identifiers contained within angle brackets are the elements of the document. The italicized identifier &quot;format&quot; within the &quot;zip-code&quot; element is an attribute of that element. All elements, with the exception of &quot;orders&quot;, have a start and an end declaration, also called a tags. The &quot;orders&quot; element is an empty element, as indicated by the &quot;/&gt;&quot; sequence that closes the element, and does not require a separate end-tag. The first line is a processing instruction for an XML parser and is not considered an element of the document.<br><br>The rules for a well-formed document are:<br><br>1. There is exactly one element that is not contained within any other element. This element is identified as the &quot;root&quot; or &quot;document&quot; element. In the example above, &quot;customer&quot; is the document element.<br><br>2. The structure of an XML document must nest properly. An element\'s start-tag must be paired with a closing end-tag if it is a non-empty element.<br><br>3. The name in an element~{!/~}s end-tag must match the element type in the start-tag. For example, an element opened with &lt;address&gt; must be closed by &lt;/address&gt;.<br><br>4. No attribute may appear more than once in the same start-tag or empty-element tag.<br><br>5. A parsed element must not contain a recursive reference to itself. For example, it is improper to include another address element within an address element.<br><br>6. A named attribute must have an associated value.<br>", input:"The input file will contain a series of XML documents. The start of each document is identified by a line containing only the processing instruction &quot;&lt;?xml version=&quot;1.0&quot;?&gt;&quot;. The end of the input is identified by a line containing only the text &quot;&lt;?end?&gt;&quot; (this is not a true XML processing instruction, just a sentinel used to mark the end of the input for this problem). As with all XML documents, white space between elements and attributes should be ignored. You may make the following assuptions with regard to the input.<br><br>The only processing instruction that will be present is the XML version rocessing instruction, and it will always appear only at the beginning of each document in the input.<br><br>Element and attribute names are case-sensitive. For example, &lt;Address&gt; and &lt;address&gt; are considered to be different.<br><br>Element and attribute names will use only alpha-numeric characters and the dash &quot;-&quot; character.<br><br>XML comments will not appear in the input.<br><br>Values for attributes will always be properly enclosed in double quotes.<br><br>", output:"For each input XML document, output a line containing the text ~{!0~}well-formed~{!1~} if the document is well-formed, ~{!0~}non well-formed~{!1~} otherwise.<br>", sample_in:"&lt;?xml version=\"1.0\"?>\n&lt;acm-contest-problem>\n        &lt;title>A Well-Formed Problem&lt;/title>\n        &lt;text>XML, eXtensible Markup Language, is poised to become the lingua franca of\nstructured data communication for the foreseeable future. [...]&lt;/text>\n        &lt;input>probleme.in&lt;/input>\n        &lt;output>probleme.out&lt;/output>\n&lt;/acm-contest-problem>\n&lt;?xml version=\"1.0\"?>\n&lt;shopping-list>\n        &lt;items>\n                &lt;item quantity=\"1\" quantity=\"1\">Gallon of milk&lt;/item>\n                &lt;item>Frozen pizza\n        &lt;/items>\n&lt;/Shopping-list>\n&lt;errand-list>\n        &lt;errand>Get some cash at the ATM\n                &lt;errand>Pick up dry cleaning&lt;/errand>\n        &lt;/errand>\n&lt;/errand-list>\n&lt;?end?>", sample_out:"well-formed\nnon well-formed", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:6, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Greater New York 2000", author:"", tag:["TEST"]}
{pid:1378, vid:1378, oj:"hdu", title:"Formatting Text", desc:"Writings e-mails is fun, but, unfortunately, they do not look very nice, mainly because not all lines have the same lengths. In this problem, your task is to write an e-mail formatting program which reformats a paragraph of an e-mail (e.g. by inserting spaces) so that, afterwards, all lines have the same length (even the last one of each paragraph). <br>The easiest way to perform this task would be to insert more spaces between the words in lines which are too short. But this is not the best way. Consider the following example: <br><br>****************************<br>This is the example you are<br>actually considering.<br><br>Let us assume that we want to get lines as long as the row of stars. Then, by simply inserting spaces, we would get <br><br>****************************<br>This is the example you  are<br>actually        considering.<br><br>But this looks rather odd because of the big gap in the second line. By moving the word ``are\'\' from the first to the second line, we get a better result: <br><br>****************************<br>This  is  the  example   you<br>are  actually   considering.<br><br>Of course, this has to be formalized. To do this, we assign a badness to each gap between words. The badness assigned to a gap of n spaces is (n - 1)^2. The goal of the program is to minimize the sum of all badnesses. For example, the badness of the first example is 1 + 7^2 = 50 whereas the badness of the second one is only 1 + 1 + 1 + 4 + 1 + 4 = 12. <br><br>In the output, every line has to start and to end with a word. (I.e. there cannot be a gap at the beginning or the end of a line.) The only exception to this is the following: <br><br>If a line contains only one word this word shall be put at the beginning of the line, and a badness of 500 is assigned to this line if it is shorter than it should be. (Of course, in this case, the length of the line is simply the length of the word.) <br>", input:"The input contains a text consisting of several paragraphs. Each paragraph is preceded by a line containing a single integer n, the desired width of the paragraph (1 &lt;= n &lt;= 80). <br><br>Paragraphs consist of one or more lines which contain one or more words each. Words consist of characters with ASCII codes between 33 and 126, inclusive, and are separated by spaces (possibly more than one). No word will be longer than the desired width of the paragraph. The total length of all words of one paragraph will not be more than 10000 characters. <br><br>Each paragraph is terminated by exactly one blank line. There is no limit on the number of paragraphs in the input file. <br><br>The input file will be terminated by a paragraph description starting with n=0. This paragraph should not be processed. <br><br>", output:"Output the same text, formatted in the way described above (processing each paragraph separately). <br><br>If there are several ways to format a paragraph with the same badness, use the following algorithm to choose which one to output: Let A and B be two solutions. Find the first gap which has not the same length in A and B. Do not output the solution in which this gap is bigger. <br><br>Output a blank line after each paragraph.<br>", sample_in:"28\nThis is the example you are\nactually considering.\n\n25\nWriting e-mails is fun, and with this program,\nthey even look nice.\n\n0", sample_out:"This  is  the  example   you\nare  actually   considering.\n\nWriting e-mails  is  fun,\nand  with  this  program,\nthey  even   look   nice.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8, vtotal_submit:18, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central European Regional Contest 1999", author:"", tag:["TEST"]}
{pid:1379, vid:1379, oj:"hdu", title:"DNA Sorting", desc:"One measure of ``unsortedness\'\' in a sequence is the number of pairs of entries that are out of order with respect to each other. For instance, in the letter sequence ``DAABEC\'\', this measure is 5, since D is greater than four letters to its right and E is greater than one letter to its right. This measure is called the number of inversions in the sequence. The sequence ``AACEDGG\'\' has only one inversion (E and D)--it is nearly sorted--while the sequence ``ZWQM\'\' has 6 inversions (it is as unsorted as can be--exactly the reverse of sorted). <br><br>You are responsible for cataloguing a sequence of DNA strings (sequences containing only the four letters A, C, G, and T). However, you want to catalog them, not in alphabetical order, but rather in order of ``sortedness\'\', from ``most sorted\'\' to ``least sorted\'\'. All the strings are of the same length. <br><br><br>This problem contains multiple test cases!<br><br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br><br>", input:"The first line contains two integers: a positive integer n (0 &lt; n &lt;= 50) giving the length of the strings; and a positive integer m (1 &lt; m &lt;= 100) giving the number of strings. These are followed by m lines, each containing a string of length n. <br>", output:"Output the list of input strings, arranged from ``most sorted\'\' to ``least sorted\'\'. If two or more strings are equally sorted, list them in the same order they are in the input file. <br>", sample_in:"1\n\n10 6\nAACATGAAGG\nTTTTGGCCAA\nTTTGGCCAAA\nGATCAGATTT\nCCCGGGGGGA\nATCGATGCAT", sample_out:"CCCGGGGGGA\nAACATGAAGG\nGATCAGATTT\nATCGATGCAT\nTTTTGGCCAA\nTTTGGCCAAA", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:759, vtotal_submit:1738, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"East Central North America 1998", author:"", tag:["TEST"]}
{pid:1380, vid:1380, oj:"hdu", title:"Nonstop Travel", desc:"Fast Phil works the late shift and leaves his company\'s parking lot at precisely 2:00 AM every morning. His route home is by a straight road which has one or more traffic signals. Phil has always wondered if, given the locations and cycles of each of the traffic signals, are there velocities he can travel home without ever having to speed up or slow down on account of a red light. You are to write a program to satisfy his curiosity. <br><br>Your program should find all integer speeds (in miles per hour) which can be used for Phil\'s trip home. Each speed is a rate (in miles per hour) he can maintain the moment he leaves the parking lot at 2:00 AM until he arrives home (we assume Phil has a long driveway in which to decelerate) such that he never passes through a red signal. He is allowed to pass throgh a signal at the exact moment it turns from yellow to red, or at the exact moment a red signal turns green. Since Phil is a relatively law-abiding citizen, you need only consider speeds less than or equal to 60 mph. Likewise, Phil isn\'t interested in travelling too slowly, so you should not consider speeds lower than 30 mph. <br>", input:"Input will consist of one or more sets of data describing a set of traffic signals, followed by the integer -1. The first integer in each set will contain the value N (specifying the number of traffic signals). N will be no larger than 6. This value will be followed by N sets of numbers, each containing values (in order) for L, G, Y and R. L is a positive real number indicating the location of a traffic signal, in miles, from the parking lot. G, Y and R are the lengths of time (in seconds) of the green, yellow, and red periods of the corresponding traffic signal\'s cycle. Phil has learned from an informant in the Highway Department that all N traffic signals start their green period precisely at 2:00 AM. <br>", output:"Output should consist of the input case number (starting with 1) followed by a list of all valid integer speeds Phil may drive to avoid the red signals. Consecutive integer speeds should be specified in interval notation of the form L-H, where L and H are the lowest and highest speeds for the interval. Intervals of the form L-L (that is, an interval of length 1) shold just be written as L. Intervals should be separated by commas. If there are no valid speeds, you program should display the phrase No acceptable speeds. The Expected Output below illustrates this format.<br>", sample_in:"1\n5.5 40 8 25\n\n3\n10.7 10 2 75\n12.5 12 5 57\n17.93 15 4 67\n\n-1", sample_out:"Case 1: 30, 32-33, 36-38, 41-45, 48-54, 59-60\nCase 2: No acceptable speeds.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:19, vtotal_submit:107, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"North Central North America 1997", author:"", tag:["TEST"]}
{pid:1381, vid:1381, oj:"hdu", title:"Crazy Search", desc:"Many people like to solve hard puzzles some of which may lead them to madness. One such puzzle could be finding a hidden prime number in a given text. Such number could be the number of different substrings of a given size that exist in the text. As you soon will discover, you really need the help of a computer and a good algorithm to solve such a puzzle.<br><br>Your task is to write a program that given the size, N, of the substring, the number of different characters that may occur in the text, NC, and the text itself, determines the number of different substrings of size N that appear in the text.<br><br>As an example, consider N=3, NC=4 and the text &quot;daababac&quot;. The different substrings of size 3 that can be found in this text are: &quot;daa&quot;, &quot;aab&quot;, &quot;aba&quot;, &quot;bab&quot;, &quot;bac&quot;. Therefore, the answer should be 5. <br>", input:"The first line of input consists of two numbers, N and NC, separated by exactly one space. This is followed by the text where the search takes place. You may assume that the maximum number of substrings formed by the possible set of characters does not exceed 16 Millions.<br>", output:"The program should output just an integer corresponding to the number of different substrings of size N found in the given text.<br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br><br>", sample_in:"1\n\n3 4\ndaababac", sample_out:"5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:369, vtotal_submit:1601, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1382, vid:1382, oj:"hdu", title:"Ball Toss", desc:"Classmates stand in a circle facing inward, each with the direction left or right in mind. One of the students has a ball and begins by tossing it to another student. (It doesn\'t really matter which one.) When one catches the ball and is thinking left, she throws it back across the circle one place to the left (from her perspective) of the person who threw her the ball. Then she switches from thinking left to thinking right. Similarly, if she is thinking right, she throws the ball to the right of the person who threw it to her and then switches from thinking right to thinking left.<br><br>There are two exceptions to this rule: If one catches the ball from the classmate to her immediate left and is also thinking left, she passes the ball to the classmate to her immediate right, and then switches to thinking right. Similarly, if she gets the ball from the classmate to her immediate right and is thinking right, she passes the ball to the classmate to her immediate left, and then switches to thinking left. (Note that these rules are given to avoid the problem of tossing the ball to oneself.)<br><br>No matter what the initial pattern of left and right thinking is and who first gets tossed the ball, everyone will get tossed the ball eventually! In this problem, you will figure out how long it takes.<br><br>You\'ll be given the initial directions of n classmates (numbered clockwise), and the classmate to whom classmate 1 initially tosses the ball. (Classmate 1 will always have the ball initially.) <br>", input:"There will be multiple problem instances. Each problem instance will be of the form<br><br>n k t1 t2 t3 ... tn<br><br>where n (2 &lt;= n &lt;= 30) is the number of classmates, numbered 1 through n clockwise around the circle, k (&gt; 1) is the classmate to whom classmate 1 initially tosses the ball, and ti (i = 1, 2, ..., n) are each either L or R, indicating the initial direction thought by classmate i. (n = 0 indicates end of input.)<br>", output:"For each problem instance, you should generate one line of output of the form:<br><br>Classmate m got the ball last after t tosses.<br><br>where m and t are for you to determine. You may assume that t will be no larger than 100,000.<br><br>Note that classmate number 1 initially has the ball and tosses it to classmate k. Thus, number 1 has not yet been tossed the ball and so does not switch the direction he is thinking.<br>", sample_in:"4 2 L L L L\n4 3 R L L R\n10 4 R R L R L L R R L R\n0", sample_out:"Classmate 3 got the ball last after 4 tosses.\nClassmate 2 got the ball last after 4 tosses.\nClassmate 9 got the ball last after 69 tosses.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:19, vtotal_submit:39, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"East Central North America 2002", author:"", tag:["TEST"]}
{pid:1383, vid:1383, oj:"hdu", title:"Company", desc:"company pays different hourly wages for different job types. Each week the company keeps evidence of the total number of work hours for every job type and the total amount paid to all employees for that week. In different weeks different job types can be accomplished. The hourly wage for any job type in the same company remains unchanged. The hourly wage for any job type is a positive integer and the ratio between the maximum wage and the minimum wage is less than 20.<br><br>You are asked to write a program that computes the hourly wage for every job type using the data collected a period of time (one or several weeks). The number of job types is limited to 200 and the number of weeks in one data set is limited to 50.<br><br>The input contains several data sets in text format.<br><br>The format for the data set is:<br><br>The number of lines for the data set;<br>information_for__one_or_more_weeks<br>The format of the information for a week is the following:<br>job_type1 number_of _hours1<br>job_type2 number_of _hours2<br>job_type3 number_of _hours3<br>~{!-!-~}<br>. total_paid ( the dot marks the ending of info for a week)<br><br>The job type is represented as a string of characters (limited to 20). The number of hours is a positive integer (smaller than 1E5). The total paid is a positive integer (smaller than 2E10).<br><br>The program should write to standard output (for every job type involved in the data set) a line containing the job type and the hourly wage. The output for a data set ends with a line containing a dot.<br><br>If the program cannot compute a unique hourly wage for every job type it will print &quot;Incomplete data&quot; and if it cannot compute an integer hourly wage it will print &quot;Inconsistent data&quot;<br><br>An example is given in the following table: <br>", input:"", output:"", sample_in:"5\njob1 6\njob2 5\njob8 4\njob10 3\n. 100\n13\njob3 1\njob2 2\n. 40\njob1 3\njob2 1\n. 100\njob1 1\njob3 2\njob2 3\n. 100\njob1 1\njob2 5\n. 80", sample_out:"Incomplete data\n.\n         job3   20\n         job2   10\n         job1   30\n. ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1, vtotal_submit:237, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"Southeastern Europe 2000", author:"", tag:["TEST"]}
{pid:1384, vid:1384, oj:"hdu", title:"Intervals", desc:"You are given n closed, integer intervals [ai, bi] and n integers c1, ..., cn.<br><br>Write a program that:<br><br>&gt; reads the number of intervals, their endpoints and integers c1, ..., cn from the standard input,<br><br>&gt; computes the minimal size of a set Z of integers which has at least ci common elements with interval [ai, bi], for each i = 1, 2, ..., n,<br><br>&gt; writes the answer to the standard output<br>", input:"The first line of the input contains an integer n (1 &lt;= n &lt;= 50 000) - the number of intervals. The following n lines describe the intervals. The i+1-th line of the input contains three integers ai, bi and ci separated by single spaces and such that 0 &lt;= ai &lt;= bi &lt;= 50 000 and 1 &lt;= ci &lt;= bi - ai + 1.<br><br>Process to the end of file.<br><br>", output:"The output contains exactly one integer equal to the minimal size of set Z sharing at least ci elements with interval [ai, bi], for each i = 1, 2, ..., n.<br>", sample_in:"5\n3 7 3\n8 10 3\n6 8 1\n1 3 1\n10 11 1", sample_out:"6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:468, vtotal_submit:2607, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"", author:"1384", tag:["TEST"]}
{pid:1385, vid:1385, oj:"hdu", title:"Minimum Transport Cost", desc:"These are N cities in Spring country. Between each pair of cities there may be one transportation track or none. Now there is some cargo that should be delivered from one city to another. The transportation fee consists of two parts: <br>The cost of the transportation on the path between these cities, and<br><br>a certain tax which will be charged whenever any cargo passing through one city, except for the source and the destination cities.<br><br>You must write a program to find the route which has the minimum cost.<br>", input:"First is N, number of cities. N = 0 indicates the end of input.<br><br>The data of path cost, city tax, source and destination cities are given in the input, which is of the form:<br><br>a11 a12 ... a1N<br>a21 a22 ... a2N<br>...............<br>aN1 aN2 ... aNN<br>b1  b2  ... bN<br><br>c d<br>e f<br>...<br>g h<br><br>where aij is the transport cost from city i to city j, aij = -1 indicates there is no direct path between city i and city j. bi represents the tax of passing through city i. And the cargo is to be delivered from city c to city d, city e to city f, ..., and g = h = -1. You must output the sequence of cities passed by and the total cost which is of the form:<br>", output:"From c to d :<br>Path: c--&gt;c1--&gt;......--&gt;ck--&gt;d<br>Total cost : ......<br>......<br><br>From e to f :<br>Path: e--&gt;e1--&gt;..........--&gt;ek--&gt;f<br>Total cost : ......<br><br>Note: if there are more minimal paths, output the lexically smallest one. Print a blank line after each test case.<br><br>", sample_in:"5\n0 3 22 -1 4\n3 0 5 -1 -1\n22 5 0 9 20\n-1 -1 9 0 4\n4 -1 20 4 0\n5 17 8 3 1\n1 3\n3 5\n2 4\n-1 -1\n0", sample_out:"From 1 to 3 :\nPath: 1-->5-->4-->3\nTotal cost : 21\n\nFrom 3 to 5 :\nPath: 3-->4-->5\nTotal cost : 16\n\nFrom 2 to 4 :\nPath: 2-->1-->5-->4\nTotal cost : 17", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:904, vtotal_submit:6516, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 1996, Shanghai (Mainland China)", author:"", tag:["TEST"]}
{pid:1386, vid:1386, oj:"hdu", title:"Elevator Simulation", desc:"You are to simulate the movements of an elevator, which works according to the following rules: <br>The elevator stays 3 seconds for customers to get in or get out. If some customers want to get in and some want to get out, the elevator stays 6 seconds.<br><br>It takes the elevator 2 seconds to go one story upwards or downwards.<br><br>When there is no request for service, the elevator stays where it is. Namely, it is idle.<br><br>When the elevator is idle, and a request comes from upwards or downwards, it moves upwards or downwards. If a request comes from the story where it stays, the elevator opens its door to serve these customers.<br><br>When the elevator goes upwards or downwards, it keeps its direction until there is no request from upwards or downwards. However, it breaks off to let customers get out or pick up customers if necessary.<br><br>If the elevator is to go upwards or downwards, it does not accept customers intending to go upwards or downwards. <br><br>When the elevator can act more than one way according to aforementioned rules, it chooses the action with the highest priority. The priorities for actions, from the highest to the lowest, are:<br><br>let customers get out<br><br>let customers get in<br><br>go downstairs<br><br>go upstairs<br><br>Initially (at time 0), the elevator is in the 0th story, and it is idle. Given the requests, you are to output how the elevator moves in a designated interval. Suppose that each request comes at an integer second.<br><br>", input:"The input begins in its first line with the number of stories of a building, and other two numbers representing an interval. These three numbers are separated by a blank.<br><br>Each of the following lines in the input consists of three numbers, N1, N2, and N3, representing a request coming from N2th story to N3th story at time N1.<br><br>A line of three 0\'s separates two test cases. After the last test case, there is a line containing three 0\'s.<br><br>", output:"You have to output what the elevator acts at each second in the designated interval. Behind each case should be one blank line<br>", sample_in:"5 9 67\n10 2 1\n13 2 4\n21 4 2\n26 4 3\n40 1 2\n45 0 3\n46 0 2\n0 0 0\n0 0 0", sample_out:"9: Idle at story 0\n10: Going up to 1\n11: Going up to 1\n12: Going up to 2\n13: Going up to 2\n14: Let upstair-customers get in at story 2\n15: Let upstair-customers get in at story 2\n16: Let upstair-customers get in at story 2\n17: Going up to 3\n18: Going up to 3\n19: Going up to 4\n20: Going up to 4\n21: Let customers get out at story 4\n22: Let customers get out at story 4\n23: Let customers get out at story 4\n24: Let downstair-customers get in at story 4\n25: Let downstair-customers get in at story 4\n26: Let downstair-customers get in at story 4\n27: Going down to 3\n28: Going down to 3\n29: Let customers get out at story 3\n30: Let customers get out at story 3\n31: Let customers get out at story 3\n32: Going down to 2\n33: Going down to 2\n34: Let customers get out at story 2\n35: Let customers get out at story 2\n36: Let customers get out at story 2\n37: Let downstair-customers get in at story 2\n38: Let downstair-customers get in at story 2\n39: Let downstair-customers get in at story 2\n40: Going down to 1\n41: Going down to 1\n42: Let customers get out at story 1\n43: Let customers get out at story 1\n44: Let customers get out at story 1\n45: Going down to 0\n46: Going down to 0\n47: Let upstair-customers get in at story 0\n48: Let upstair-customers get in at story 0\n49: Let upstair-customers get in at story 0\n50: Going up to 1\n51: Going up to 1\n52: Let upstair-customers get in at story 1\n53: Let upstair-customers get in at story 1\n54: Let upstair-customers get in at story 1\n55: Going up to 2\n56: Going up to 2\n57: Let customers get out at story 2\n58: Let customers get out at story 2\n59: Let customers get out at story 2\n60: Going up to 3\n61: Going up to 3\n62: Let customers get out at story 3\n63: Let customers get out at story 3\n64: Let customers get out at story 3\n65: Idle at story 3\n66: Idle at story 3\n67: Idle at story 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:40, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 1997, Shanghai (Mainland China)", author:"", tag:["TEST"]}
{pid:1387, vid:1387, oj:"hdu", title:"Team Queue", desc:"Queues and Priority Queues are data structures which are known to most computer scientists. The Team Queue, however, is not so well known, though it occurs often in everyday life. At lunch time the queue in front of the Mensa is a team queue, for example. <br>In a team queue each element belongs to a team. If an element enters the queue, it first searches the queue from head to tail to check if some of its teammates (elements of the same team) are already in the queue. If yes, it enters the queue right behind them. If not, it enters the queue at the tail and becomes the new last element (bad luck). Dequeuing is done like in normal queues: elements are processed from head to tail in the order they appear in the team queue. <br><br>Your task is to write a program that simulates such a team queue. <br><br>", input:"The input will contain one or more test cases. Each test case begins with the number of teams t (1&lt;=t&lt;=1000). Then t team descriptions follow, each one consisting of the number of elements belonging to the team and the elements themselves. Elements are integers in the range 0 - 999999. A team may consist of up to 1000 elements. <br><br>Finally, a list of commands follows. There are three different kinds of commands: <br><br>ENQUEUE x - enter element x into the team queue <br>DEQUEUE - process the first element and remove it from the queue <br>STOP - end of test case <br>The input will be terminated by a value of 0 for t. <br><br>", output:"For each test case, first print a line saying &quot;Scenario #k&quot;, where k is the number of the test case. Then, for each DEQUEUE command, print the element which is dequeued on a single line. Print a blank line after each test case, even after the last one. <br>", sample_in:"2\n3 101 102 103\n3 201 202 203\nENQUEUE 101\nENQUEUE 201\nENQUEUE 102\nENQUEUE 202\nENQUEUE 103\nENQUEUE 203\nDEQUEUE\nDEQUEUE\nDEQUEUE\nDEQUEUE\nDEQUEUE\nDEQUEUE\nSTOP\n2\n5 259001 259002 259003 259004 259005\n6 260001 260002 260003 260004 260005 260006\nENQUEUE 259001\nENQUEUE 260001\nENQUEUE 259002\nENQUEUE 259003\nENQUEUE 259004\nENQUEUE 259005\nDEQUEUE\nDEQUEUE\nENQUEUE 260002\nENQUEUE 260003\nDEQUEUE\nDEQUEUE\nDEQUEUE\nDEQUEUE\nSTOP\n0", sample_out:"Scenario #1\n101\n102\n103\n201\n202\n203\n\nScenario #2\n259001\n259002\n259003\n259004\n259005\n260001", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:225, vtotal_submit:1091, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 1998", author:"", tag:["TEST"]}
{pid:1388, vid:1388, oj:"hdu", title:"Input", desc:"In a recent programming contest, one of the problems was about tiling floors with rectangular tiles. The input specification reads like this:<br><br>The input contains several floors. The first line of the input gives the number of floors.<br><br>Each floor is described in several lines. The first line contains two positive integers: the length and width of the floor, in millimeters. A floor is at most 40 000 mm long or wide. The next line contains a single number: the number t of tiles (1 &lt;= t &lt;= 100). The following t lines each contain the description of a tile. A tile is given as four integers: <br><br>xl yl xh yh <br><br>where (xl, yl) are the coordinates of the lower left corner of the tile, and (xh, yh) are the coordinates of the upper rightmost corner of the tile. A tile always has a positive area. The order of the coordinates of the floor and those of the tile coincide, of course.<br><br>You may assume that the tiles are mutually disjoint, and cover the floor, the whole floor, and nothing but the floor.<br><br>The last line of this specification raised some problems. Not for the contestants, but for the judges. Some of the test cases consist of many tiles. How can we be sure that our input file meets this condition? What we need is a checking program that verifies this condition.<br><br>Given an input file in the above format, find out for each floor whether the tiles<br><br>1. are disjoint, <br>2. do not lie outside the floor, <br>3. do cover the floor. <br>", input:"The input contains several floors. The first line of the input gives the number of floors. Each floor is described in several lines. The first line contains two positive integers: the length and width of the floor, in millimeters. A floor is at most 40 000 mm long or wide. The next line contains a single number: the number t of tiles (1 &lt;= t &lt;= 100). The following t lines each contain the description of a tile. A tile is given as four integers: <br><br>xl yl xh yh <br><br>where (xl, yl) are the coordinates of the lower left corner of the tile, and (xh, yh) are the coordinates of the upper rightmost corner of the tile. A tile always has a positive area. The order of the coordinates of the floor and those of the tile coincide, of course.<br><br>", output:"For each floor the output contains a single line, containing one of the following words: <br><br>NONDISJOINT if overlapping tiles occur; <br><br>NONCONTAINED if no overlapping tiles occur, but some tiles go outside the floor; <br><br>NONCOVERING if no overlapping tiles occur, and no tiles go outside the floor, but some parts of the floor are not covered; <br><br>OK if none of these is true. <br>", sample_in:"4 \n4 3 \n2 \n0 0 2 2 \n1 1 5 5 \n4 3 \n2 \n0 0 2 2 \n-2 2 5 5 \n4 3 \n2 \n0 0 2 2 \n2 0 4 2 \n4 3 \n3 \n0 0 2 2 \n2 0 4 2 \n0 2 4 3 ", sample_out:"NONDISJOINT \nNONCONTAINED \nNONCOVERING \nOK ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:25, vtotal_submit:64, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Northwestern Europe 2002", author:"", tag:["TEST"]}
{pid:1389, vid:1389, oj:"hdu", title:"Markov Trains", desc:"Business is not going well for the Dutch Railway Company NS. Due to technical problems, they are forced to cancel many train services without advance notice. This is, of course, extremely frustrating for students who travel from home to school by train.<br><br>The worst thing about the whole situation is the randomness of the cancellations. Nobody knows in advance whether a train service will be cancelled; a cancellation is not announced until the official departure time. Since there is usually more than one possible route from home to school, people are often left with an \'if I had known this in advance I would have taken the other route\' sort of feeling.<br><br>Recently, the statistics department of the NS found a revolutionary solution to this problem. They noticed that some train services are cancelled more often than others. In order to help the passengers, they decided to publish this information. The new timetables will state not just the time of departure and arrival of each service, but also its probability of cancellation.<br><br>The travel-planner software from the NS, which normally finds the fastest route between stations, must be updated to find the route which gives the best chance of arriving in time. This helps passengers to avoid trains that are likely to cause problems, instead taking a slightly longer, but more reliable route to school.<br><br>Given the new timetables, a departure station and time, a destination station and a desired arrival time, find the route which gives the best chance of arriving at the destination in time.<br><br>A route in this case is simply an ordered list of stations visited by the passenger, starting with the departure station and ending with the destination. The passenger will stick to the route, each time taking the first possible train to the next station. If a train is cancelled, he will just wait for the next train to that station.<br><br>The chance of arriving in time is taken to be the probability that the passenger, when following the route as described above, arrives at the destination station before or at the desired arrival time. When calculating this probability, we assume that train services are cancelled independently of each other and according to the probabilities stated in the timetable.<br>", input:"The first line of the input contains a single positive integer indicating the number of runs. For each run, the input is as follows:<br><br>&gt; A line with a single positive integer n, the number of trains in the timetable (n &lt;= 100).<br><br>&gt; n lines describing the timetable. Each line describes one train, stating its departure station x, the time of departure tx , its destination station y (x != y), the time of arrival ty (tx &lt; ty) and its probability of cancellation p.<br><br>Stations are identified by capital letters in the range \'A\' ... \'L\'. Times are in the format hh:mm with 00 &lt;= hh &lt; 24 and 00 &lt;= mm &lt; 60. The probability p is a decimal real number with 0.0 &lt;= p &lt; 1.0. Input elements are separated by spaces.<br><br>&gt; A line with a departure station a, earliest departure time ta , destination station b (a != b) and desired arrival time tb (ta &lt; tb ). Station identifiers and times are like those in the timetable.<br>", output:"The output consists of two lines for each run. The first line of each run contains the best possible route for the passenger as a list of station identifiers separated by spaces. The second line contains the probability that the passenger, when following the given route, arrives on time.<br><br>The probability must be formatted as a decimal real number with exactly one digit before the decimal point, and exactly 4 digits after. The usual rules for rounding apply: round up if the next digit would be &gt;= 5, otherwise round down.<br><br>Notes<br><br>&gt; When changing trains at an intermediate station, the earliest possible departure time is one minute after the time of arrival.<br><br>&gt; All times are on the same day; the journey does not cross midnight.<br><br>&gt; It never happens that two or more trains depart from the same station at the same time to the same destination station.<br><br>&gt; The input is such that there is a unique route with maximum probability.<br><br>&gt; The passenger will stick to his route, always taking the first available train to the next station. If a train is cancelled he will wait for the next train to that station. He will never try to be smart by taking faster trains or different routes.<br>", sample_in:"2\n3\nA 12:00 B 12:15 0.1\nA 12:10 B 12:14 0.23\nA 12:20 B 12:30 0.456\nA 12:00 B 12:30\n4\nA 12:00 B 12:15 0.1\nA 12:05 B 12:13 0.15\nB 12:20 C 12:35 0.12\nA 12:15 C 12:33 0.4\nA 12:00 C 13:00", sample_out:"A B\n0.9895\nA B C\n0.8668", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1, vtotal_submit:10, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Northwestern Europe 2002", author:"", tag:["TEST"]}
{pid:1390, vid:1390, oj:"hdu", title:"Binary Numbers", desc:"Given a positive integer n, find the positions of all 1\'s in its binary representation. The position of the least significant bit is 0.<br><br><br>Example<br><br>The positions of 1\'s in the binary representation of 13 are 0, 2, 3.<br><br><br>Task<br><br>Write a program which for each data set:<br><br>reads a positive integer n,<br><br>computes the positions of 1\'s in the binary representation of n,<br><br>writes the result.<br>", input:"The first line of the input contains exactly one positive integer d equal to the number of data sets, 1 &lt;= d &lt;= 10. The data sets follow.<br><br>Each data set consists of exactly one line containing exactly one integer n, 1 &lt;= n &lt;= 10^6.<br>", output:"The output should consists of exactly d lines, one line for each data set.<br><br>Line i, 1 &lt;= i &lt;= d, should contain increasing sequence of integers separated by single spaces - the positions of 1\'s in the binary representation of the i-th input number.<br>", sample_in:"1\n13", sample_out:"0 2 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1459, vtotal_submit:2510, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Central Europe 2001, Practice", author:"", tag:["TEST"]}
{pid:1391, vid:1391, oj:"hdu", title:"Number Steps", desc:"Starting from point (0,0) on a plane, we have written all non-negative integers 0, 1, 2,... as shown in the figure. For example, 1, 2, and 3 has been written at points (1,1), (2,0), and (3, 1) respectively and this pattern has continued.<br><br><center><img src=data/images/1391-1.gif></center><br><br>You are to write a program that reads the coordinates of a point (x, y), and writes the number (if any) that has been written at that point. (x, y) coordinates in the input are in the range 0...5000.<br>", input:"The first line of the input is N, the number of test cases for this problem. In each of the N following lines, there is x, and y representing the coordinates (x, y) of a point.<br>", output:"For each point in the input, write the number written at that point or write No Number if there is none.<br>", sample_in:"3\n4 2\n6 6\n3 4", sample_out:"6\n12\nNo Number", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1850, vtotal_submit:3491, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2000, Tehran (Iran)", author:"", tag:["TEST"]}
{pid:1392, vid:1392, oj:"hdu", title:"Surround the Trees", desc:"There are a lot of trees in an area. A peasant wants to buy a rope to surround all these trees. So at first he must know the minimal required length of the rope. However, he does not know how to calculate it. Can you help him? <br>The diameter and length of the trees are omitted, which means a tree can be seen as a point. The thickness of the rope is also omitted which means a rope can be seen as a line.<br><br><center><img src=data/images/1392-1.gif></center><br><br>There are no more than 100 trees.<br>", input:"The input contains one or more data sets. At first line of each input data set is number of trees in this data set, it is followed by series of coordinates of the trees. Each coordinate is a positive integer pair, and each integer is less than 32767. Each pair is separated by blank.<br><br>Zero at line for number of trees terminates the input for your program.<br>", output:"The minimal length of the rope. The precision should be 10^-2.<br>", sample_in:"9 \n12 7 \n24 9 \n30 5 \n41 9 \n80 7 \n50 87 \n22 9 \n45 1 \n50 7 \n0 ", sample_out:"243.06", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1313, vtotal_submit:6719, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 1997, Shanghai (Mainland China)", author:"", tag:["TEST"]}
{pid:1393, vid:1393, oj:"hdu", title:"Weird Clock", desc:"A weird clock marked from 0 to 59 has only a minute hand. It won\'t move until a special coin is thrown into its box. There are different kinds of coins as your options. However once you make your choice, you cannot use any other kind. There are infinite number of coins of each kind, each marked with a number d ( 1 &lt;= d &lt;= 1000 ), meaning that this coin will make the minute hand move d times clockwise the current time. For example, if the current time is 45, and d = 2. Then the minute hand will move clockwise 90 minutes and will be pointing to 15.<br><br>Now you are given the initial time s ( 1 &lt;= s &lt;= 59 ) and the coin\'s type d. Write a program to find the minimum number of d-coins needed to turn the minute hand back to 0.<br>", input:"There are several tests. Each test occupies a line containing two positive integers s and d.<br><br>The input is finished by a line containing 0 0.<br>", output:"For each test print in a single line the minimum number of coins needed. If it is impossible to turn the hand back to 0, output &quot;Impossible&quot;.<br>", sample_in:"30 1\n0 0", sample_out:"1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:683, vtotal_submit:2342, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ZOJ Monthly, December 2002", author:"", tag:["TEST"]}
{pid:1394, vid:1394, oj:"hdu", title:"Minimum Inversion Number", desc:"The inversion number of a given number sequence a1, a2, ..., an is the number of pairs (ai, aj) that satisfy i &lt; j and ai &gt; aj.<br><br>For a given sequence of numbers a1, a2, ..., an, if we move the first m &gt;= 0 numbers to the end of the seqence, we will obtain another sequence. There are totally n such sequences as the following:<br><br>a1, a2, ..., an-1, an (where m = 0 - the initial seqence)<br>a2, a3, ..., an, a1 (where m = 1)<br>a3, a4, ..., an, a1, a2 (where m = 2)<br>...<br>an, a1, a2, ..., an-1 (where m = n-1)<br><br>You are asked to write a program to find the minimum inversion number out of the above sequences.<br>", input:"The input consists of a number of test cases. Each case consists of two lines: the first line contains a positive integer n (n &lt;= 5000); the next line contains a permutation of the n integers from 0 to n-1.<br>", output:"For each case, output the minimum inversion number on a single line.<br>", sample_in:"10\n1 3 6 9 0 8 5 7 4 2", sample_out:"16", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2482, vtotal_submit:8726, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ZOJ Monthly, January 2003", author:"", tag:["TEST"]}
{pid:1395, vid:1395, oj:"hdu", title:"2^x mod n = 1", desc:"Give a number n, find the minimum x(x&gt;0) that satisfies 2^x mod n = 1.<br>", input:"One positive integer on each line, the value of n.<br>", output:"If the minimum x exists, print a line with 2^x mod n = 1.<br><br>Print 2^? mod n = 1 otherwise.<br><br>You should replace x and n with specific numbers.<br>", sample_in:"2\n5", sample_out:"2^? mod 2 = 1\n2^4 mod 5 = 1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2260, vtotal_submit:10503, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ZOJ Monthly, February 2003", author:"", tag:["TEST"]}
{pid:1396, vid:1396, oj:"hdu", title:"Counting Triangles", desc:"Given an equilateral triangle with n the length of its side, program to count how many triangles in it.<br><br><center><img src=data/images/1396-1.jpg></center><br><br>", input:"The length n (n &lt;= 500) of the equilateral triangle\'s side, one per line.<br><br>process to the end of the file<br>", output:"The number of triangles in the equilateral triangle, one per line.<br>", sample_in:"1\n2\n3", sample_out:"1\n5\n13", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:791, vtotal_submit:1973, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ZOJ Monthly, June 2003", author:"", tag:["TEST"]}
{pid:1397, vid:1397, oj:"hdu", title:"Goldbach\'s Conjecture", desc:"Goldbach\'s Conjecture: For any even number n greater than or equal to 4, there exists at least one pair of prime numbers p1 and p2 such that n = p1 + p2. <br>This conjecture has not been proved nor refused yet. No one is sure whether this conjecture actually holds. However, one can find such a pair of prime numbers, if any, for a given even number. The problem here is to write a program that reports the number of all the pairs of prime numbers satisfying the condition in the conjecture for a given even number.<br><br>A sequence of even numbers is given as input. Corresponding to each number, the program should output the number of pairs mentioned above. Notice that we are interested in the number of essentially different pairs and therefore you should not count (p1, p2) and (p2, p1) separately as two different pairs.<br>", input:"An integer is given in each input line. You may assume that each integer is even, and is greater than or equal to 4 and less than 2^15. The end of the input is indicated by a number 0.<br>", output:"Each output line should contain an integer number. No other characters should appear in the output.<br>", sample_in:"6\n10\n12\n0", sample_out:"1\n2\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1144, vtotal_submit:4292, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 1998, Tokyo (Japan)", author:"", tag:["TEST"]}
{pid:1398, vid:1398, oj:"hdu", title:"Square Coins", desc:"People in Silverland use square coins. Not only they have square shapes but also their values are square numbers. Coins with values of all square numbers up to 289 (=17^2), i.e., 1-credit coins, 4-credit coins, 9-credit coins, ..., and 289-credit coins, are available in Silverland. <br>There are four combinations of coins to pay ten credits: <br><br>ten 1-credit coins,<br>one 4-credit coin and six 1-credit coins,<br>two 4-credit coins and two 1-credit coins, and<br>one 9-credit coin and one 1-credit coin. <br><br>Your mission is to count the number of ways to pay a given amount using coins of Silverland.<br>", input:"The input consists of lines each containing an integer meaning an amount to be paid, followed by a line containing a zero. You may assume that all the amounts are positive and less than 300.<br>", output:"For each of the given amount, one line containing a single integer representing the number of combinations of coins should be output. No other characters should appear in the output. <br>", sample_in:"2\n10\n30\n0", sample_out:"1\n4\n27", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3330, vtotal_submit:7270, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 1999, Kyoto (Japan)", author:"", tag:["TEST"]}
{pid:1399, vid:1399, oj:"hdu", title:"Starship Hakodate-maru", desc:"The surveyor starship Hakodate-maru is famous for her two fuel containers with unbounded capacities. They hold the same type of atomic fuel balls. <br>There, however, is an inconvenience. The shapes of the fuel containers #1 and #2 are always cubic and regular tetrahedral respectively. Both of the fuel containers should be either empty or filled according to their shapes. Otherwise, the fuel balls become extremely unstable and may explode in the fuel containers. Thus, the number of fuel balls for the container #1 should be a cubic number (n^3 for some n = 0, 1, 2, 3, ...) and that for the container #2 should be a tetrahedral number (n(n+1)(n+2)/6 for some n = 0, 1, 2, 3, ...).<br><br>Hakodate-maru is now at the star base Goryokaku preparing for the next mission to create a precise and detailed chart of stars and interstellar matters. Both of the fuel containers are now empty. Commander Parus of Goryokaku will soon send a message to Captain Future of Hakodate-maru on how many fuel balls Goryokaku can supply. Captain Future should quickly answer to Commander Parus on how many fuel balls she requests before her ship leaves Goryokaku. Of course, Captain Future and her officers want as many fuel balls as possible.<br><br>For example, consider the case Commander Parus offers 151200 fuel balls. If only the fuel container #1 were available (i.e. if the fuel container #2 were unavailable), at most 148877 fuel balls could be put into the fuel container since 148877 = 53 * 53 * 53 &lt; 151200 &lt; 54 * 54 * 54. If only the fuel container #2 were available, at most 147440 fuel balls could be put into the fuel container since 147440 = 95 * 96 * 97 / 6 &lt; 151200 &lt; 96 * 97 * 98 / 6. Using both of the fuel containers #1 and #2, 151200 fuel balls can be put into the fuel containers since 151200 = 39 * 39 * 39 + 81 * 82 * 83 / 6. In this case, Captain Future\'s answer should be &quot;151200&quot;.<br><br>Commander Parus\'s offer cannot be greater than 151200 because of the capacity of the fuel storages of Goryokaku. Captain Future and her officers know that well.<br><br>You are a fuel engineer assigned to Hakodate-maru. Your duty today is to help Captain Future with calculating the number of fuel balls she should request.<br>", input:"The input is a sequence of at most 1024 positive integers. Each line contains a single integer. The sequence is followed by a zero, which indicates the end of data and should not be treated as input. You may assume that none of the input integers is greater than 151200.<br>", output:"The output is composed of lines, each containing a single integer. Each output integer should be the greatest integer that is the sum of a nonnegative cubic number and a nonnegative tetrahedral number and that is not greater than the corresponding input number. No other characters should appear in the output.<br>", sample_in:"100\n64\n50\n20\n151200\n0", sample_out:"99\n64\n47\n20\n151200", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:218, vtotal_submit:375, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2001, Hakodate (Japan)", author:"", tag:["TEST"]}
{pid:1400, vid:1400, oj:"hdu", title:"Mondriaan\'s Dream", desc:"Squares and rectangles fascinated the famous Dutch painter Piet Mondriaan. One night, after producing the drawings in his \'toilet series\' (where he had to use his toilet paper to draw on, for all of his paper was filled with squares and rectangles), he dreamt of filling a large rectangle with small rectangles of width 2 and height 1 in varying ways. <br><br><center><img src=data/images/1400-1.gif></center><br><br>Expert as he was in this material, he saw at a glance that he\'ll need a computer to calculate the number of ways to fill the large rectangle whose dimensions were integer values, as well. Help him, so that his dream won\'t turn into a nightmare! <br><br><center><img src=data/images/1400-2.gif></center><br>", input:"The input file contains several test cases. Each test case is made up of two integer numbers: the height h and the width w of the large rectangle. Input is terminated by h=w=0. Otherwise, 1&lt;=h,w&lt;=11. <br>", output:"For each test case, output the number of different ways the given rectangle can be filled with small rectangles of size 2 times 1. Assume the given large rectangle is oriented, i.e. count symmetrical tilings multiple times.<br>", sample_in:"1 2\n1 3\n1 4\n2 2\n2 3\n2 4\n2 11\n4 11\n0 0", sample_out:"1\n0\n1\n2\n3\n5\n144\n51205", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:282, vtotal_submit:674, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 2000", author:"", tag:["TEST"]}
{pid:1401, vid:1401, oj:"hdu", title:"Solitaire", desc:"Solitaire is a game played on a chessboard 8x8. The rows and columns of the chessboard are numbered from 1 to 8, from the top to the bottom and from left to right respectively.<br><br>There are four identical pieces on the board. In one move it is allowed to:<br><br>&gt; move a piece to an empty neighboring field (up, down, left or right),<br><br>&gt; jump over one neighboring piece to an empty field (up, down, left or right). <br><br><center><img src=data/images/1401-1.gif></center><br><br>There are 4 moves allowed for each piece in the configuration shown above. As an example let\'s consider a piece placed in the row 4, column 4. It can be moved one row up, two rows down, one column left or two columns right.<br><br>Write a program that:<br><br>&gt; reads two chessboard configurations from the standard input,<br><br>&gt; verifies whether the second one is reachable from the first one in at most 8 moves,<br><br>&gt; writes the result to the standard output.<br>", input:"Each of two input lines contains 8 integers a1, a2, ..., a8 separated by single spaces and describes one configuration of pieces on the chessboard. Integers a2j-1 and a2j (1 &lt;= j &lt;= 4) describe the position of one piece - the row number and the column number respectively. Process to the end of file.<br>", output:"The output should contain one word for each test case - YES if a configuration described in the second input line is reachable from the configuration described in the first input line in at most 8 moves, or one word NO otherwise.<br>", sample_in:"4 4 4 5 5 4 6 5\n2 4 3 3 3 6 4 6", sample_out:"YES", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:449, vtotal_submit:2964, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southwestern Europe 2002", author:"", tag:["TEST"]}
{pid:1402, vid:1402, oj:"hdu", title:"A * B Problem Plus", desc:"Calculate A * B.<br>", input:"Each line will contain two integers A and B. Process to end of file.<br><br>Note: the length of each integer will not exceed 50000.<br>", output:"For each case, output A * B in one line.<br>", sample_in:"1\n2\n1000\n2", sample_out:"2\n2000", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:705, vtotal_submit:10944, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"DOOM III", tag:["TEST"]}
{pid:1403, vid:1403, oj:"hdu", title:"Longest Common Substring", desc:"Given two strings, you have to tell the length of the Longest Common Substring of them.<br><br>For example:<br>str1 = banana<br>str2 = cianaic<br><br>So the Longest Common Substring is &quot;ana&quot;, and the length is 3.<br>", input:"The input contains several test cases. Each test case contains two strings, each string will have at most 100000 characters. All the characters are in lower-case.<br><br>Process to the end of file.<br>", output:"For each test case, you have to tell the length of the Longest Common Substring of them.<br>", sample_in:"banana\ncianaic", sample_out:"3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:507, vtotal_submit:3568, special_status:0, time_limit:4000, mem_limit:32768, hint:"", source:"", author:"Ignatius.L", tag:["TEST"]}
{pid:1404, vid:1404, oj:"hdu", title:"Digital Deletions", desc:"Digital deletions is a two-player game. The rule of the game is as following. <br><br>Begin by writing down a string of digits (numbers) that\'s as long or as short as you like. The digits can be 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 and appear in any combinations that you like. You don\'t have to use them all. Here is an example:<br><br><center><img src=data/images/1404-1.gif></center><br><br>On a turn a player may either:<br>Change any one of the digits to a value less than the number that it is. (No negative numbers are allowed.) For example, you could change a 5 into a 4, 3, 2, 1, or 0. <br>Erase a zero and all the digits to the right of it.<br><br><br>The player who removes the last digit wins.<br><br><br>The game that begins with the string of numbers above could proceed like this: <br><br><center><img src=data/images/1404-2.gif></center><br><br>Now, given a initial string, try to determine can the first player win if the two players play optimally both. <br>", input:"The input consists of several test cases. For each case, there is a string in one line.<br><br>The length of string will be in the range of [1,6]. The string contains only digit characters.<br><br>Proceed to the end of file.<br>", output:"Output Yes in a line if the first player can win the game, otherwise output No.<br>", sample_in:"0\n00\n1\n20", sample_out:"Yes\nYes\nNo\nNo", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:398, vtotal_submit:1782, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"Zhejiang University Local Contest 2006 Preliminary", author:"", tag:["TEST"]}
{pid:1405, vid:1405, oj:"hdu", title:"The Last Practice", desc:"Tomorrow is contest day, Are you all ready?<br>We have been training for 45 days, and all guys must be tired.But , you are so lucky comparing with many excellent boys who have no chance to attend the Province-Final.<br><br>Now, your task is relaxing yourself and making the last practice. I guess that at least there are 2 problems which are easier than this problem.<br>what does this problem describe?<br>Give you a positive integer, please split it to some prime numbers, and you can got it through sample input and sample output.<br>", input:"Input file contains multiple test case, each case consists of a positive integer n(1&lt;n&lt;65536), one per line. a negative terminates the input, and it  should not to be processed.", output:"For each test case you should output its factor as sample output (prime factor must come forth ascending ), there is a blank line between outputs. ", sample_in:"60\n12\n-1", sample_out:"Case 1.\n2 2 3 1 5 1\n\nCase 2.\n2 2 3 1\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\n60=2^2*3^1*5^1\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1147, vtotal_submit:7092, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（IV）", author:"", tag:["TEST"]}
{pid:1406, vid:1406, oj:"hdu", title:"完数", desc:"完数的定义：如果一个大于1的正整数的所有因子之和等于它的本身，则称这个数是完数，比如6，28都是完数：6=1+2+3；28=1+2+4+7+14。<br><br>本题的任务是判断两个正整数之间完数的个数。<br>", input:"输入数据包含多行，第一行是一个正整数n，表示测试实例的个数，然后就是n个测试实例，每个实例占一行，由两个正整数num1和num2组成,(1&lt;num1,num2&lt;10000) 。<br>", output:"对于每组测试数据，请输出num1和num2之间（包括num1和num2）存在的完数个数。<br>", sample_in:"2\n2 5\n5 7", sample_out:"0\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4847, vtotal_submit:16557, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（IV）", author:"", tag:["TEST"]}
{pid:1407, vid:1407, oj:"hdu", title:"测试你是否和LTC水平一样高", desc:"大家提到LTC都佩服的不行，不过，如果竞赛只有这一个题目，我敢保证你和他绝对在一个水平线上！<br>你的任务是：<br>计算方程x^2+y^2+z^2= num的一个正整数解。<br>", input:"输入数据包含多个测试实例，每个实例占一行，仅仅包含一个小于等于10000的正整数num。<br>", output:"对于每组测试数据，请按照x,y,z递增的顺序输出它的一个最小正整数解，每个实例的输出占一行，题目保证所有测试数据都有解。<br>", sample_in:"3", sample_out:"1 1 1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2965, vtotal_submit:11647, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（IV）", author:"", tag:["TEST"]}
{pid:1408, vid:1408, oj:"hdu", title:"盐水的故事", desc:"挂盐水的时候，如果滴起来有规律，先是滴一滴，停一下；然后滴二滴，停一下；再滴三滴，停一下...，现在有一个问题：这瓶盐水一共有VUL毫升，每一滴是D毫升，每一滴的速度是一秒（假设最后一滴不到D毫升，则花费的时间也算一秒），停一下的时间也是一秒这瓶水什么时候能挂完呢？<br>", input:"输入数据包含多个测试实例，每个实例占一行，由VUL和D组成，其中 0&lt;D&lt;VUL&lt;5000。<br>", output:"对于每组测试数据，请输出挂完盐水需要的时间，每个实例的输出占一行。<br>", sample_in:"10 1", sample_out:"13", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2395, vtotal_submit:12126, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"杭电ACM集训队训练赛（IV）", author:"", tag:["TEST"]}
{pid:1409, vid:1409, oj:"hdu", title:"Is It a Number", desc:"In some programming languages(like C/C++), we define numbers like this:<br><br>number -&gt; digits optional_fraction optional_exponent<br>optional_fraction -&gt; [empty] | .digits<br>optional_exponent -&gt; [empty] | E digits | E - digits<br>digits -&gt; digit | digits digit<br>digit -&gt; [0-9]<br><br>Given a string, you have to tell whether it is a legal number.", input:"The first line of input contains an integer T(1&lt;=T&lt;=100) which indicate the number of test cases. Then T test cases follow. Each test case contains one line. Each line contains a string whose length will not exceed 100.<br><br>Note: there are no spaces and tabs at the begin and the end of the string.", output:"For each test case, you have to tell whether the string is a legal number. If it is a legal number, output &quot;YES&quot; in a single line, otherwise, output &quot;NO&quot; in a single line.<br>", sample_in:"5\n0123\n123.456\n0.456E-5\n123 456\n0.456EF", sample_out:"YES\nYES\nYES\nNO\nNO", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:242, vtotal_submit:922, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-5 Programming Contest", author:"", tag:["TEST"]}
{pid:1410, vid:1410, oj:"hdu", title:"PK武林盟主", desc:"枫之羽认为自己很强，想当武林盟主，于是找现任武林盟主氢氧化铜挑战。氢氧化铜欣然接受了挑战，两人约好于下个月的月圆之夜在HDU校园内的三根柱子上进行决战。这场PK赛肯定能吸引武林中所有人前来观战，所以他们找了有商业运作潜力的经济人你，让你来组织这场百年一见的世纪之战，假设两人都有一定的血HP1、HP2.HP1是枫之羽的，HP2是氢氧化铜的。他们也有一定攻击力AP1、AP2，AP1是枫之羽的，AP2是氢氧化铜的。当进行攻击时，对方的HP减少自己的攻击力，比如HP1＝2 HP2＝1 AP1＝1 AP2＝1，当氢氧化铜攻击枫之羽时，枫之羽的HP＝2(原先的HP1)－1(氢氧化铜的AP2)＝1。现在两个人对决很多回合，每回合不是枫之羽攻击氢氧化铜，就是氢氧化铜攻击枫之羽。求枫之羽能赢氢氧化铜成为下任武林盟主的的胜率。", input:"该题含有多组测试数据,每行为HP1,HP2,AP1和AP2 (1&lt;=HP1,HP2,AP1,AP2&lt;=32767)", output:"每组数据输出一行，为枫之羽赢氢氧化铜概率的值 (结果保留4位小数).", sample_in:"2 1 1 1", sample_out:"75.0000", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:147, vtotal_submit:964, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-5 Programming Contest", author:"", tag:["TEST"]}
{pid:1411, vid:1411, oj:"hdu", title:"校庆神秘建筑", desc:"杭州电子科技大学即将迎来50周年的校庆，作为校庆委员会成员的我被上级要求设计一座神秘的建筑物来迎合校庆，因此我苦思冥想了一个月，终于设计出了一套方案，这座建筑物有点象古老埃及的金字塔，不过这个神秘建筑的根基是三角形的而不是矩形的，从数学的专业角度来讲，它是四面体。当我打算上交我的设计图纸的时候发现，我不知道怎么计算这个神秘建筑的体积（我知道这座建筑的各边的尺寸），于是我找来了聪明的你来帮助我解决这个难题。", input:"输入文件包含6个不超过1000的实数，每个数之间用空格隔开。每个数代表金字塔ABCD的一条棱边长度，棱边排序如下：AB，AC，AD，BC，BD，CD。 ", output:"输出数据应是一个实数，表示金字塔的体积，精确到4位小数。", sample_in:"2 2 2 2 2 2 ", sample_out:"0.9428", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:396, vtotal_submit:1543, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-5 Programming Contest", author:"", tag:["TEST"]}
{pid:1412, vid:1412, oj:"hdu", title:"{A} + {B}", desc:"给你两个集合，要求{A} + {B}.<br>注:同一个集合中不会有两个相同的元素.", input:"每组输入数据分为三行,第一行有两个数字n,m(0&lt;n,m&lt;=10000),分别表示集合A和集合B的元素个数.后两行分别表示集合A和集合B.每个元素为不超出int范围的整数,每个元素之间有一个空格隔开.", output:"针对每组数据输出一行数据,表示合并后的集合,要求从小到大输出,每个元素之间有一个空格隔开.", sample_in:"1 2\n1\n2 3\n1 2\n1\n1 2", sample_out:"1 2 3\n1 2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3333, vtotal_submit:10689, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"HDU 2006-5 Programming Contest", author:"", tag:["TEST"]}
{pid:1413, vid:1413, oj:"hdu", title:"文件系统", desc:"Ignatius做了一个文件系统,为了测试他的文件系统是否能正常工作,他打算对他的文件系统做一些测试.<br><br>刚开始的时候文件系统里只有一个根目录.Ignatius将输入一系列合法的文件操作命令,请你给出文件系统应该给出的相应提示信息.<br><br>Ignatius的文件系统的文件操作命令包括:<br><br>1. CD [directory name] : 进入当前目录下名为[directory name]的子目录,如果成功,系统应提示&quot;success&quot;,否则提示&quot;no such directory&quot;.<br>2. MD [directory name] : 在当前目录下建立名为[directory name]的子目录,如果当前目录下已经存在名为[directory name]的子目录,则提示&quot;directory already exist&quot;,否则提示&quot;success&quot;.<br>3. RD [directory name] : 删除当前目录下名为[directory name]的子目录,如果当前目录下不存在名为[directory name]的子目录,或者名为[directory name]的子目录下还有文件或子目录,则提示&quot;can not delete the directory&quot;,否则提示&quot;success&quot;.<br>4. CREATE [file name] : 在当前目录下创建名为[file name]的文件,如果当前目录下已经存在名为[file name]的文件,则提示&quot;file already exist&quot;,否则提示&quot;success&quot;.<br>5. DELETE [file name] : 删除当前目录下名为[file name]的文件,如果当前目录下不存在名为[file name]的文件,则提示&quot;no such file&quot;,否则提示&quot;success&quot;.<br><br>以下是几个特殊说明:<br><br>1. 要从当前目录退回到上一级目录可以使用&quot;CD ..&quot;命令来实现,我们约定根目录的上一级目录是其本身,任何一个目录下都不允许创建名为&quot;..&quot;的子目录,如果有命令试图创建名为&quot;..&quot;的子目录,则系统应反馈&quot;directory already exist&quot;.<br>2. 要从当前目录直接退回到根目录可以使用&quot;CD \\&quot;命令来实现,任何一个目录下都不允许创建名为&quot;\\&quot;的子目录.<br>3. 为了方便编程,给出的任意一个[directory name]和[file name]都只包括大写字母(A-Z),并且长度都小于20.<br>4. 在同一个目录下允许存在同名的file和directory,但不允许出现同名的file或directory,在不同目录下则无此限制.<br>5. 刚开始的时候根目录下没有文件和子目录,当前目录就是根目录本身.<br>6. 如果一个操作是成功的,则应在当前文件系统的基础上执行相应的操作,以改变文件系统的状态.<br>", input:"输入数据只有一组,该组测试数据包含若干行,每行代表一条文件操作命令,我保证每一条命令都是符合命令格式的.<br>处理到文件结束.", output:"对于每一条命令,请你给出系统的反馈信息,每个反馈信息占一行.<br>", sample_in:"CD ACM\nMD ACM\nCD ACM\nCREATE ACM\nMD ACM\nCD ACM\nCD \\\nRD ACM\nCD ACM\nRD ACM\nDELETE ACM\nCD ..\nRD ACM", sample_out:"no such directory\nsuccess\nsuccess\nsuccess\nsuccess\nsuccess\nsuccess\ncan not delete the directory\nsuccess\nsuccess\nsuccess\nsuccess\nsuccess", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:121, vtotal_submit:323, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-5 Programming Contest", author:"", tag:["TEST"]}
{pid:1414, vid:1414, oj:"hdu", title:"银河跳舞机大赛", desc:"怀特先生（见ACM/ICPC Asia Regional 2001, Shanghai）通过他的跳舞机（Dance Dance Revolution，DDR）减肥成功，他非常感激他的DDR，想把他的减肥经验推广，于是开了一个公司专门生产跳舞机。<br>由于他公司生产的跳舞机质量非常优秀，这些跳舞机销往银河系各地，各个星球上的人都非常喜欢它们，整个银河系都掀起了跳舞机热。银河体育联盟决定在银河系范围内举行一次银河跳舞机大赛。参加这次比赛的选手来自那美克星、ShiningStar星、X星、塞亚星...当然还有东道主地球。<br><br>由于比赛的奖品非常吸引人——一辆地球中国产的“红旗牌”时光穿梭机，每个选手都将使出浑身解数来争取这个奖品。<br><br>选手们拥有不同数量的腿，但是最多四条而且每个腿上只有一个脚。比如：地球人只有两个腿，那美克星人有四个腿，X星人三条、塞亚星人一条...<br>为此，怀特先生的公司专门为比赛设计了一种跳舞机，这种跳舞机上最多有15个踏板。之中必有一个是编号为ZERO的，它非常大，可以让一个选手的所有脚都站在上面，而且位于整个跳舞机的中心区域；其余的编号为1..P（P ≤ 14），它们均匀地分布在ZERO踏板周围，但是都非常小，每个只能容纳一个脚。<br>比赛的规则是这样的：<br><br>比赛开始前，选手可以将自己的脚踩在任意的踏板上，但是除了ZERO踏板，其余的踏板只能踩一个脚。<br><br>然后，播放一首长度为T秒的舞曲（例如：Smile组合的《Butterfly》），在歌曲播放期间，跳舞机的指令会提示选手在某些整秒时刻踩某些踏板。这时选手可以选择起跳并移动他的K（K ≤ P）个脚去踩别的踏板。但是起跳和移动会花费选手D + [K / 2]的时间（这里D表示起跳延时，“[K / 2]”表示K整除2），也就是说他需要花这么长时间才能将K个脚移动到目的区域。如果选手只是在原地起跳，没有移动他的腿的话，只花费D的时间，因为此时他没有去踩别的踏板，K = 0。<br><br>当然，选手可以选择站在原地不动，虽然这样做会引起其他选手的严重BS、全场观众的一片嘘声以及铺天盖地仍来的鸡蛋、青菜、萝卜...<br><br>另外，如果选手愿意，他也可以将他的一些或者全部脚移动到ZERO区域。<br><br>由于参赛的选手都是各个星球的精英，所以它们个个体力充沛，即使刚刚落地，也可以马上进行下一个动作。<br><br>如果选手在规定时刻踩了跳舞机提示的那些踏板，那么选手就会得到1分。例如：1秒的时刻，跳舞机提示踩1、2两个踏板，选手做到了（只要有任意两个脚踩在1、2踏板上），这时他的得分会增加1。<br>判断选手是否可以得分是由装在跳舞机踏板上的传感器来完成的，这些传感器只有在选手起跳的时候才会工作，站在原地不动是不会使它们工作的。一旦舞曲结束，该选手的比赛就结束。<br><br>由于比赛选手的腿的数量不一致，会引起不公平，组委会决定比赛以选手的实际得分占他可以得的分数的最高值的比例来判胜负。<br><br>可是根据跳舞机踏板的数目、每个选手脚的数目、起跳延时、舞曲的时间、跳舞机的指令序列来计算每个选手可以得到的最大得分对于手工计算还是十分浩大的工程，所以组委会邀请你，杭州电子科技大学聪明的ACMer，写一个程序帮忙计算一下，如果你顺利完成了这个任务，那么奖品嘛...当然是一个由PLMM送来的AC的气球咯！<br>", input:"测试数据将是多组的，而且每组之间都会有一个空行分隔。<br>每组测试数据的第一行是五个整数P、F、D、T、M。<br>P（1 ≤ P ≤ 14）表示跳舞机的踏板数，P = 0 表示输入结束<br>F（1 ≤ F ≤ 4，F ≤ P）表示选手脚的数量<br>D（1 ≤ D）表示起跳延时<br>T（1 ≤ T ≤ 300）表示舞曲的时间<br>M（1 ≤ M ≤ 300，M ≤ T）表示跳舞机的指令数<br>接下来，是M行跳舞机的指令，每条指令的格式如下：<br>t k a1 a2 ... ak<br>其中t表示这条指令是t（1 ≤ t ≤ T）秒时刻的指令，k（1 ≤ k ≤ F）表示指令要求踩的踏板的总数，a1 - ak（1 ≤ ai ≤ P，1 ≤ i ≤ k）表示要求踩a1 - ak号踏板。<br>", output:"输出能够得到的最大的分数，单位：POINT。", sample_in:"2 1 1 4 1\n1 1 1\n\n2 1 1 4 3\n1 1 1\n2 1 1\n3 1 1\n\n0 12 3 29 3\n1 1 1\n1 1 1\n1 1 1", sample_out:"1 POINT.\n3 POINTS.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2, vtotal_submit:199, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-5 Programming Contest", author:"", tag:["TEST"]}
{pid:1415, vid:1415, oj:"hdu", title:"Jugs", desc:"In the movie &quot;Die Hard 3&quot;, Bruce Willis and Samuel L. Jackson were confronted with the following puzzle. They were given a 3-gallon jug and a 5-gallon jug and were asked to fill the 5-gallon jug with exactly 4 gallons. This problem generalizes that puzzle. <br><br>You have two jugs, A and B, and an infinite supply of water. There are three types of actions that you can use: (1) you can fill a jug, (2) you can empty a jug, and (3) you can pour from one jug to the other. Pouring from one jug to the other stops when the first jug is empty or the second jug is full, whichever comes first. For example, if A has 5 gallons and B has 6 gallons and a capacity of 8, then pouring from A to B leaves B full and 3 gallons in A. <br><br>A problem is given by a triple (Ca,Cb,N), where Ca and Cb are the capacities of the jugs A and B, respectively, and N is the goal. A solution is a sequence of steps that leaves exactly N gallons in jug B. The possible steps are <br><br>fill A <br>fill B <br>empty A <br>empty B <br>pour A B <br>pour B A <br>success <br><br>where &quot;pour A B&quot; means &quot;pour the contents of jug A into jug B&quot;, and &quot;success&quot; means that the goal has been accomplished. <br><br>You may assume that the input you are given does have a solution. <br><br>", input:"Input to your program consists of a series of input lines each defining one puzzle. Input for each puzzle is a single line of three positive integers: Ca, Cb, and N. Ca and Cb are the capacities of jugs A and B, and N is the goal. You can assume 0 &lt; Ca &lt;= Cb and N &lt;= Cb &lt;=1000 and that A and B are relatively prime to one another. <br><br>", output:"Output from your program will consist of a series of instructions from the list of the potential output lines which will result in either of the jugs containing exactly N gallons of water. The last line of output for each puzzle should be the line &quot;success&quot;. Output lines start in column 1 and there should be no empty lines nor any trailing spaces. <br><br>", sample_in:"3 5 4 \n5 7 3 ", sample_out:"fill B \npour B A \nempty A \npour B A \nfill B \npour B A \nsuccess \nfill A \npour A B \nfill A \npour A B \nempty B \npour A B \nsuccess ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:179, vtotal_submit:792, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（一）", author:"", tag:["TEST"]}
{pid:1416, vid:1416, oj:"hdu", title:"Gizilch ", desc:"The game of gizilch has very simple rules.  First 100 grapes are labeled, in nontoxic ink, with the numbers 1 to 100.  Then, with a cry of ``GIZILCH!\'\', the referee fires the grapes up into the air with a giant gizilcher.  The two players, who each start with a score of  ``1\'\', race to eat the falling (or, shortly thereafter, fallen) grapes and, at the same time, multiply their scores by the numbers written on the grapes they eat.  After a minute, the hungry squirrels are let loose to finish the remaining grapes, and each contestant reports his score, the product of the numbers on the grapes he\'s eaten.  The unofficial winner is the player who announces the highest score. <br>Inevitably, though, disputes arise, and so the official winner is not determined until the disputes are resolved.  The player who claims the lower score is entitled to challenge his opponent\'s score.  The player with the lower score is presumed to have told the truth, because if he were to lie about his score, he would surely come up with a bigger better lie.  The challenge is upheld if the player with the higher score has a score that cannot be achieved with grapes not eaten by the challenging player.  So, if the challenge is successful, the player claiming the lower score wins. <br><br>So, for example, if one player claims 343 points and the other claims 49, then clearly the first player is lying; the only way to score 343 is by eating grapes labeled 7 and 49, and the only way to score 49 is by eating a grape labeled 49.  Since each of two scores requires eating the grape labeled 49, the one claiming 343 points is presumed to be lying. <br><br>On the other hand, if one player claims 162 points and the other claims 81, it is possible for both to be telling the truth (e.g. one eats grapes 2, 3 and 27, while the other eats grape 81), so the challenge would not be upheld. <br><br>Unfortunately, anyone who is willing to referee a game of gizilch is likely to have himself consumed so many grapes (in a liquid form) that he or she could not reasonably be expected to perform the intricate calculations that refereeing requires.  Hence the need for you, sober programmer, to provide a software solution. <br>", input:"Pairs of unequal, positive numbers, with each pair on a single line, that are claimed scores from a game of gizilch. <br>", output:"Numbers, one to a line, that are the winning scores, assuming that the player with the lower score always challenges the outcome. <br>", sample_in:"343 49 \n3599 610 \n62 36 ", sample_out:"49 \n610 \n62 ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:32, vtotal_submit:111, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（一）", author:"", tag:["TEST"]}
{pid:1417, vid:1417, oj:"hdu", title:"Gleaming the Cubes", desc:"As chief engineer of the Starship Interprize, the task of repairing the hyperstellar, cubic, transwarped-out software has fallen on your shoulders. Simply put, you must compute the volume of the intersection of anywhere from 2 to 1000 cubes. <br>", input:"The input data file consists of several sets of cubes for which the volume of their intersections must be computed. The first line of the data file contains a number (from 2 to 1000) which indicates the number of cubes which follow, one cube per line. Each line which describes a cube contains four integers. The first three integers are the x, y, and z coordinates of the corner of a cube, and the fourth integer is the positive distance which the cube extends in each of the three directions (parallel to the x, y, and z axes) from that corner. <br>", output:"Following the data for the first set of cubes will be a number which indicates how many cubes are in a second set, followed by the cube descriptions for the second set, again one per line. Following this will be a third set, and so on. Your program should continue to process sets of cubes, outputting the volume of their intersections to the output file, one set per line, until a zero is read for the number of cubes. <br><br>Note that the data file will always contain at least one set of cubes, and every set will contain at least 2 and at most 1000 cubes. For any given set of cubes, the volume of their intersections will not exceed 1,000,000 units. <br><br>", sample_in:"2\n0 0 0 10\n9 1 1 5\n3\n0 0 0 10\n9 1 1 5\n8 2 2 3\n0", sample_out:"25\n9", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:51, vtotal_submit:129, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（一）", author:"", tag:["TEST"]}
{pid:1418, vid:1418, oj:"hdu", title:"抱歉", desc:"非常抱歉，本来兴冲冲地搞一场练习赛，由于我准备不足，出现很多数据的错误，现在这里换一个简单的题目：<br><br>前几天在网上查找ACM资料的时候，看到一个中学的奥数题目，就是不相交的曲线段分割平面的问题，我已经发到论坛，并且lxj 已经得到一个结论，这里就不<br><br>多讲了，下面有一个类似的并且更简单的问题：<br><br>如果平面上有n个点，并且每个点至少有2条曲线段和它相连，就是说，每条曲线都是封闭的，同时，我们规定：<br>1）所有的曲线段都不相交；<br>2）但是任意两点之间可以有多条曲线段。<br><br>如果我们知道这些线段把平面分割成了m份，你能知道一共有多少条曲线段吗？<br>", input:"输入数据包含n和m，n=0,m=0表示输入的结束，不做处理。<br>所有输入数据都在32位整数范围内。", output:"输出对应的线段数目。", sample_in:"3 2\n0 0", sample_out:"3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1097, vtotal_submit:3051, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（一）", author:"", tag:["TEST"]}
{pid:1419, vid:1419, oj:"hdu", title:"Dart-a-Mania", desc:"The game of darts has many variations. One such variation is the game of 301. In the game of 301 each player starts with a score of 301 (hence the name). Each player, in turn, throws three darts to score points which are subtracted from the player\'s current score. For instance, if a player has a current score of 272 and scores 55 points with the three darts, the new score would be 217. Each dart that is tossed may strike regions on the dartboard that are numbered between 1 and 20. (A value of zero indicates that the player either missed the dartboard altogether or elected to not throw the dart.) A dart that strikes one of these regions will either score the number printed on the dartboard, double the number printed, or triple the number printed. For example, a player may score 17, 34, or 51 points with a toss of one dart that hits one of the regions marked with a 17. A third way to score points with one dart is to hit the BULLS EYE which is worth 50 points. (There is no provision for doubling or tripling the bull\'s eye score.) <br><br>The first player to reduce his score to exactly zero wins the game. If a player scores more points than his/her current score, the player is said to have &quot;busted&quot; and the new score is returned to the last current score. <br><br>Given a player\'s current dart score, write a program to calculate all the possible combinations and permutations of scores on throwing three darts that would reduce the player\'s score to exactly zero (meaning the player won the game). The output of the program should contain the number of combinatons and permutations found. <br><br>For example, if the player\'s current score is 2, then there would be two combinations and six permutations. The combinations would be: 1) obtain a score of 2 on any one dart and zero on the other two, and 2) obtain a score of one on two different darts and zero on the third dart. The order in which this is accomplished is not important. <br><br>With permutations the order is significant; therefore the six permutations would be as follows: <br><br>Dart 1: 2 0 0 1 1 0 <br>Dart 2: 0 2 0 1 0 1 <br>Dart 3: 0 0 2 0 1 1 <br><br>(Note: The program doesn\'t print out the actual permutations &amp; combinations, just the total number of each.) <br><br>", input:"The input file, DARTS.IN, contains a list of integers (each &lt;= 999), one per line, that represent several players\' current scores. A value of zero or less will signify the end of the input file. <br>", output:"For each positive integer in the input file, 2 or 3 line(s) will be written to the output file, DARTS.OUT. <br><br>If the score can be reduced to zero, your program should write the lines: <br><br>NUMBER OF COMBINATIONS THAT SCORES x IS c.<br>NUMBER OF PERMUTATIONS THAT SCORES x IS p.<br><br>where x is the value of the player\'s score while c and p are the total number of combinations and permutations possible, respectively. <br>If it is impossible to reduce the player\'s score to zero, write the line: <br><br>THE SCORE OF x CANNOT BE MADE WITH THREE DARTS.<br><br>After the line(s) above are printed, your program should write a line of 70 asterisks to separate output for different scores. The message &quot;END OF OUTPUT&quot; should appear at the end of the output file. <br>", sample_in:"162\n175\n2\n68\n211\n114\n-100", sample_out:"NUMBER OF COMBINATIONS THAT SCORES 162 I9 7.\nNUMBER OF PERMUTATIONS THAT SCORES 162 I9 28.\n***********************************************************************\nTHE SCORE OF 175 CANNOT BE MADE WITH THREE DARTS.\n***********************************************************************\nNUMBER OF COMBINATIONS THAT SCORES 2 I9 2.\nNUMBER OF PERMUTATIONS THAT SCORES 2 I9 6.\n***********************************************************************\nNUMBER OF COMBINATIONS THAT SCORES 68 I9 187.\nNUMBER OF PERMUTATIONS THAT SCORES 68 I9 1056.\n***********************************************************************\nTHE SCORE OF 211 CANNOT BE MADE WITH THREE DARTS.\n***********************************************************************\nNUMBER OF COMBINATIONS THAT SCORES 114 I9 82.\nNUMBER OF PERMUTATIONS THAT SCORES 114 I9 445.\n***********************************************************************\nEND OF OUTPUT", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:73, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（一）", author:"", tag:["TEST"]}
{pid:1420, vid:1420, oj:"hdu", title:"Prepared for New Acmer", desc:"集训进行了将近2个礼拜，这段时间以恢复性训练为主，我一直在密切关注大家的训练情况，目前为止，对大家的表现相当满意，首先是绝大部分队员的训练积极性很高，其次，都很遵守集训纪律，最后，老队员也起到了很好的带头作用，这里特别感谢为这次DP专题练习赛提供题目和测试数据的集训队队长xhd同学.<br><br>特别高兴的是，跟随集训队训练的一批新队员表现非常好，进步也比较显著，特别是训练态度大大超出我的预期，我敢说，如果各位能如此坚持下去，绝对前途无量！<br><br>考虑到新队员还没有经过系统训练，我这里特别添加一道简单题：<br>给定三个正整数A，B和C（A,B,C&lt;=1000000），求A^B mod C的结果.<br><br>希望各位都能体会到比赛中AC的快乐，绝对的量身定制，很高的待遇哟，呵呵...<br>", input:"输入数据首先包含一个正整数N,表示测试实例的个数，然后是N行数据，每行包括三个正整数A,B,C。<br>", output:"对每个测试实例请输出计算后的结果，每个实例的输出占一行。<br>", sample_in:"3\n2 3 4\n3 3 5\n4 4 6", sample_out:"0\n2\n4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1453, vtotal_submit:5462, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（二）", author:"", tag:["TEST"]}
{pid:1421, vid:1421, oj:"hdu", title:"搬寝室", desc:"搬寝室是很累的,xhd深有体会.时间追述2006年7月9号,那天xhd迫于无奈要从27号楼搬到3号楼,因为10号要封楼了.看着寝室里的n件物品,xhd开始发呆,因为n是一个小于2000的整数,实在是太多了,于是xhd决定随便搬2*k件过去就行了.但还是会很累,因为2*k也不小是一个不大于n的整数.幸运的是xhd根据多年的搬东西的经验发现每搬一次的疲劳度是和左右手的物品的重量差的平方成正比(这里补充一句,xhd每次搬两件东西,左手一件右手一件).例如xhd左手拿重量为3的物品,右手拿重量为6的物品,则他搬完这次的疲劳度为(6-3)^2 = 9.现在可怜的xhd希望知道搬完这2*k件物品后的最佳状态是怎样的(也就是最低的疲劳度),请告诉他吧.", input:"每组输入数据有两行,第一行有两个数n,k(2&lt;=2*k&lt;=n&lt;2000).第二行有n个整数分别表示n件物品的重量(重量是一个小于2^15的正整数).", output:"对应每组输入数据,输出数据只有一个表示他的最少的疲劳度,每个一行.", sample_in:"2 1\n1 3", sample_out:"4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2554, vtotal_submit:14472, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（二）", author:"", tag:["TEST"]}
{pid:1422, vid:1422, oj:"hdu", title:"重温世界杯", desc:"世界杯结束了,意大利人连本带利的收回了法国人6年前欠他们的债,捧起了大力神杯,成就了4星意大利.<br>世界杯虽然结束了,但是这界世界杯给我们还是留下许多值得回忆的东西.比如我们听到了黄名嘴的3分钟激情解说,我们懂得了原来可以向同一个人出示3张黄牌，我们还看到了齐达内的头不仅能顶球还能顶人…………<br>介于有这么多的精彩,xhd决定重温德国世界杯,当然只是去各个承办世界杯比赛的城市走走看看.但是这需要一大比钱,幸运的是xhd对世界杯的热爱之情打动了德国世界杯组委会,他们将提供xhd在中国杭州和德国任意世界杯承办城市的往返机票,并说服了这些城市在xhd到达这座城市时为他提供一笔生活费以便他在那里参观时用,当参观完时剩余的钱也将留给xhd,但当生活费不够时他们将强行结束xhd的这次德国之行,除了这个,他们还有一个条件,xhd只能根据他们所给的路线参观.比如有3座城市a,b,c,他们给定了a-b-c-a的路线,那么xhd只有3种参观顺序abc,bca,cab.由于各个城市所提供的生活费和在那里的花费都不同,这使xhd很头痛,还好我们事先知道了这笔生活费和花费.请问xhd最多能顺利参观几座城市?", input:"每组输入数据分两行,第一行是一个正整数n(1&lt;=n&lt;=100000),表示有n座城市.接下来的一行按照给定的路线顺序的输出这n个城市的生活费和花费,w1,l1,w2,l2,……,wn,ln,其中wi,li分别表示第i个城市的生活费和花费,并且它们都是正整数.", output:"对应每组数据输出最多能参观的城市数.", sample_in:"3\n3 2 3 4 2 2\n3\n3 2 3 4 2 3", sample_out:"3\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:888, vtotal_submit:4028, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（二）", author:"", tag:["TEST"]}
{pid:1423, vid:1423, oj:"hdu", title:"Greatest Common Increasing Subsequence", desc:"This is a problem from ZOJ 2432.To make it easyer,you just need output the length of the subsequence.", input:"Each sequence is described with M - its length (1 &lt;= M &lt;= 500) and M integer numbers Ai (-2^31 &lt;= Ai &lt; 2^31) - the sequence itself. ", output:"output print L - the length of the greatest common increasing subsequence of both sequences. ", sample_in:"1\n\n5\n1 4 2 5 -12\n4\n-12 1 2 4", sample_out:"2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:650, vtotal_submit:3371, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（二）", author:"", tag:["TEST"]}
{pid:1424, vid:1424, oj:"hdu", title:"Increasing Sequences", desc:"This is a problem from ZOJ 1499.To make it easyer,you just need output the last number.If there are leading zeros you should delete it.", input:"Input will consist of multiple test cases. Each case will consist of one line, containing a string of digits of maximum length 80. A line consisting of a single 0 terminates input. <br>", output:"For each instance,output the last number.", sample_in:"3456 \n3546 \n3526 \n0001 \n100000101", sample_out:"6\n46\n26\n1\n101", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:35, vtotal_submit:245, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（二）", author:"", tag:["TEST"]}
{pid:1425, vid:1425, oj:"hdu", title:"sort", desc:"给你n个整数，请按从大到小的顺序输出其中前m大的数。<br>", input:"每组测试数据有两行，第一行有两个数n,m(0&lt;n,m&lt;1000000)，第二行包含n个各不相同，且都处于区间[-500000,500000]的整数。<br>", output:"对每组测试数据按从大到小的顺序输出前m大的数。<br>", sample_in:"5 3\n3 -35 92 213 -644", sample_out:"213 92 3\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\n请用VC/VC++提交", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4173, vtotal_submit:23858, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（三）", author:"", tag:["TEST"]}
{pid:1426, vid:1426, oj:"hdu", title:"Sudoku Killer", desc:"自从2006年3月10日至11日的首届数独世界锦标赛以后，数独这项游戏越来越受到人们的喜爱和重视。<br>据说，在2008北京奥运会上，会将数独列为一个单独的项目进行比赛，冠军将有可能获得的一份巨大的奖品———HDU免费七日游外加lcy亲笔签名以及同hdu acm team合影留念的机会。<br>所以全球人民前仆后继，为了奖品日夜训练茶饭不思。当然也包括初学者linle，不过他太笨了又没有多少耐性，只能做做最最基本的数独题，不过他还是想得到那些奖品，你能帮帮他吗？你只要把答案告诉他就可以，不用教他是怎么做的。<br><br>数独游戏的规则是这样的：在一个9x9的方格中，你需要把数字1-9填写到空格当中，并且使方格的每一行和每一列中都包含1-9这九个数字。同时还要保证，空格中用粗线划分成9个3x3的方格也同时包含1-9这九个数字。比如有这样一个题，大家可以仔细观察一下，在这里面每行、每列，以及每个3x3的方格都包含1-9这九个数字。<br><br>例题：<br><img src=data/images/C31-1001-1.jpg><br><br>答案：<br><img src=data/images/C31-1001-2.jpg><br>", input:"本题包含多组测试，每组之间由一个空行隔开。每组测试会给你一个 9*9 的矩阵，同一行相邻的两个元素用一个空格分开。其中1-9代表该位置的已经填好的数，问号（?）表示需要你填的数。<br>", output:"对于每组测试，请输出它的解，同一行相邻的两个数用一个空格分开。两组解之间要一个空行。<br>对于每组测试数据保证它有且只有一个解。<br>", sample_in:"7 1 2 ? 6 ? 3 5 8\n? 6 5 2 ? 7 1 ? 4\n? ? 8 5 1 3 6 7 2\n9 2 4 ? 5 6 ? 3 7\n5 ? 6 ? ? ? 2 4 1\n1 ? 3 7 2 ? 9 ? 5\n? ? 1 9 7 5 4 8 6\n6 ? 7 8 3 ? 5 1 9\n8 5 9 ? 4 ? ? 2 3", sample_out:"7 1 2 4 6 9 3 5 8\n3 6 5 2 8 7 1 9 4\n4 9 8 5 1 3 6 7 2\n9 2 4 1 5 6 8 3 7\n5 7 6 3 9 8 2 4 1\n1 8 3 7 2 4 9 6 5\n2 3 1 9 7 5 4 8 6\n6 4 7 8 3 2 5 1 9\n8 5 9 6 4 1 7 2 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:643, vtotal_submit:3645, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（三）", author:"", tag:["TEST"]}
{pid:1427, vid:1427, oj:"hdu", title:"速算24点", desc:"速算24点相信绝大多数人都玩过。就是随机给你四张牌，包括A(1),2,3,4,5,6,7,8,9,10,J(11),Q(12),K(13)。要求只用\'+\',\'-\',\'*\',\'/\'运算符以及括号改变运算顺序，使得最终运算结果为24(每个数必须且仅能用一次)。游戏很简单，但遇到无解的情况往往让人很郁闷。你的任务就是针对每一组随机产生的四张牌，判断是否有解。我们另外规定，整个计算过程中都不能出现小数。<br>", input:"每组输入数据占一行，给定四张牌。<br>", output:"每一组输入数据对应一行输出。如果有解则输出&quot;Yes&quot;，无解则输出&quot;No&quot;。<br>", sample_in:"A 2 3 6\n3 3 8 8", sample_out:"Yes\nNo", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:383, vtotal_submit:2737, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（三）", author:"", tag:["TEST"]}
{pid:1428, vid:1428, oj:"hdu", title:"漫步校园", desc:"LL最近沉迷于AC不能自拔，每天寝室、机房两点一线。由于长时间坐在电脑边，缺乏运动。他决定充分利用每次从寝室到机房的时间，在校园里散散步。整个HDU校园呈方形布局，可划分为n*n个小方格，代表各个区域。例如LL居住的18号宿舍位于校园的西北角，即方格(1,1)代表的地方，而机房所在的第三实验楼处于东南端的(n,n)。因有多条路线可以选择，LL希望每次的散步路线都不一样。另外，他考虑从A区域到B区域仅当存在一条从B到机房的路线比任何一条从A到机房的路线更近(否则可能永远都到不了机房了…)。现在他想知道的是，所有满足要求的路线一共有多少条。你能告诉他吗?<br>", input:"每组测试数据的第一行为n(2=&lt;n&lt;=50)，接下来的n行每行有n个数，代表经过每个区域所花的时间t(0&lt;t&lt;=50)(由于寝室与机房均在三楼，故起点与终点也得费时)。<br>", output:"针对每组测试数据，输出总的路线数(小于2^63)。<br>", sample_in:"3\n1 2 3\n1 2 3\n1 2 3\n3\n1 1 1\n1 1 1\n1 1 1", sample_out:"1\n6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:435, vtotal_submit:2614, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（三）", author:"", tag:["TEST"]}
{pid:1429, vid:1429, oj:"hdu", title:"胜利大逃亡(续)", desc:"Ignatius再次被魔王抓走了(搞不懂他咋这么讨魔王喜欢)……<br><br>这次魔王汲取了上次的教训，把Ignatius关在一个n*m的地牢里，并在地牢的某些地方安装了带锁的门，钥匙藏在地牢另外的某些地方。刚开始Ignatius被关在(sx,sy)的位置，离开地牢的门在(ex,ey)的位置。Ignatius每分钟只能从一个坐标走到相邻四个坐标中的其中一个。魔王每t分钟回地牢视察一次，若发现Ignatius不在原位置便把他拎回去。经过若干次的尝试，Ignatius已画出整个地牢的地图。现在请你帮他计算能否再次成功逃亡。只要在魔王下次视察之前走到出口就算离开地牢，如果魔王回来的时候刚好走到出口或还未到出口都算逃亡失败。<br>", input:"每组测试数据的第一行有三个整数n,m,t(2&lt;=n,m&lt;=20,t&gt;0)。接下来的n行m列为地牢的地图，其中包括:<br><br>.   代表路<br>*   代表墙<br>@   代表Ignatius的起始位置<br>^   代表地牢的出口<br>A-J 代表带锁的门,对应的钥匙分别为a-j<br>a-j 代表钥匙，对应的门分别为A-J<br><br>每组测试数据之间有一个空行。<br>", output:"针对每组测试数据，如果可以成功逃亡，请输出需要多少分钟才能离开，如果不能则输出-1。<br>", sample_in:"4 5 17\n@A.B.\na*.*.\n*..*^\nc..b*\n\n4 5 16\n@A.B.\na*.*.\n*..*^\nc..b*", sample_out:"16\n-1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:726, vtotal_submit:4442, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（三）", author:"", tag:["TEST"]}
{pid:1430, vid:1430, oj:"hdu", title:"魔板", desc:"在魔方风靡全球之后不久，Rubik先生发明了它的简化版——魔板。魔板由8个同样大小的方块组成，每个方块颜色均不相同，可用数字1-8分别表示。任一时刻魔板的状态可用方块的颜色序列表示：从魔板的左上角开始，按顺时针方向依次写下各方块的颜色代号，所得到的数字序列即可表示此时魔板的状态。例如，序列(1,2,3,4,5,6,7,8)表示魔板状态为：<br><br>1 2 3 4<br>8 7 6 5<br><br>对于魔板，可施加三种不同的操作，具体操作方法如下：<br><br>A: 上下两行互换,如上图可变换为状态87654321<br>B: 每行同时循环右移一格,如上图可变换为41236785<br>C: 中间4个方块顺时针旋转一格,如上图可变换为17245368<br><br>给你魔板的初始状态与目标状态，请给出由初态到目态变换数最少的变换步骤，若有多种变换方案则取字典序最小的那种。<br>", input:"每组测试数据包括两行，分别代表魔板的初态与目态。<br>", output:"对每组测试数据输出满足题意的变换步骤。<br>", sample_in:"12345678\n17245368\n12345678\n82754631", sample_out:"C\nAC", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:198, vtotal_submit:1624, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（三）", author:"", tag:["TEST"]}
{pid:1431, vid:1431, oj:"hdu", title:"素数回文", desc:"xiaoou33对既是素数又是回文的数特别感兴趣。比如说151既是素数又是个回文。现在xiaoou333想要你帮助他找出某个范围内的素数回文数，请你写个程序找出 a 跟b 之间满足条件的数。(5 &lt;= a &lt; b &lt;= 100,000,000); <br>", input:"这里有许多组数据，每组包括两组数据a跟b。 ", output:"对每一组数据,按从小到大输出a，b之间所有满足条件的素数回文数（包括a跟b）每组数据之后空一行。 ", sample_in:"5 500", sample_out:"5\n7\n11\n101\n131\n151\n181\n191\n313\n353\n373\n383", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1457, vtotal_submit:9462, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"zjut", author:"", tag:["TEST"]}
{pid:1432, vid:1432, oj:"hdu", title:"Lining Up", desc:"``How am I ever going to solve this problem?&quot; said the pilot. <br><br><br>Indeed, the pilot was not facing an easy task. She had to drop packages at specific points scattered in a dangerous area. Furthermore, the pilot could only fly over the area once in a straight line, and she had to fly over as many points as possible. All points were given by means of integer coordinates in a two-dimensional space. The pilot wanted to know the largest number of points from the given set that all lie on one line. Can you write a program that calculates this number? <br><br>Your program has to be efficient! <br>", input:"The input consists of multiple test cases, and each case begins with a single positive integer on a line by itself indicating the number of points, followed by N pairs of integers, where 1 &lt; N &lt; 700. Each pair of integers is separated by one blank and ended by a new-line character. No pair will occur twice in one test case. <br><br>", output:"For each test case, the output consists of one integer representing the largest number of points that all lie on one line, one line per case. ", sample_in:"5\n1 1\n2 2\n3 3\n9 10\n10 11", sample_out:"3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:138, vtotal_submit:843, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（四）", author:"", tag:["TEST"]}
{pid:1433, vid:1433, oj:"hdu", title:"Simply Syntax ", desc:"In the land of Hedonia the official language is Hedonian. A Hedonian professor had noticed that many of her students still did not master the syntax of Hedonian well. Tired of correcting the many syntactical mistakes, she decided to challenge the students and asked them to write a program that could check the syntactical correctness of any sentence they wrote. Similar to the nature of Hedonians, the syntax of Hedonian is also pleasantly simple. Here are the rules: <br><br>0. The only characters in the language are the characters p through z and N, C, D, E, and I. <br><br>1. Every character from p through z is a correct sentence. <br><br>2. If s is a correct sentence, then so is Ns. <br><br>3. If s and t are correct sentences, then so are Cst, Dst, Est and Ist. <br><br>4. Rules 0. to 3. are the only rules to determine the syntactical correctness of a sentence. <br><br>You are asked to write a program that checks if sentences satisfy the syntax rules given in Rule 0. - Rule 4. <br>", input:"The input consists of a number of sentences consisting only of characters p through z and N, C, D, E, and I. Each sentence is ended by a new-line character. The collection of sentences is terminated by the end-of-file character. If necessary, you may assume that each sentence has at most 256 characters and at least 1 character.<br>", output:"The output consists of the answers YES for each well-formed sentence and NO for each not-well-formed sentence. The answers are given in the same order as the sentences. Each answer is followed by a new-line character, and the list of answers is followed by an end-of-file character. <br><br>", sample_in:"Cp\nIsz\nNIsz\nCqpq", sample_out:"NO\nYES\nYES\nNO", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:110, vtotal_submit:290, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（四）", author:"", tag:["TEST"]}
{pid:1434, vid:1434, oj:"hdu", title:"幸福列车", desc:"一批幸福的列车即将从杭州驶向幸福的终点站——温州，身为总列车长的linle有一些奇怪的癖好。<br><br>他会记录下全部乘客的名字（name）和他们的人品值（RP），根据这些将他们排序，并不时地从某辆列车里踢出人品最不好（RP值最低）的一个人，当两个人人品一样不好时，他就会踢出名字难听的人（linle认为按字典顺序，排在越在后面的人名字越难听）。<br><br>当然出于列车行驶需要，他还会不时的发布一些命令，比如让某个乘客上车，合并某两辆列车等。<br><br>linle的上一任秘书***因为不能高效地执行他的这些命令而被炒鱿鱼，他现在正在寻觅新的秘书人选，你能不能胜任呢？（谢绝男士，待遇丰厚~~~）<br>", input:"本题包含多组测试，请处理到文件结束。<br>对于每一组测试，第一行包含两个整数 N ，M ，表示一共有N( N&lt;=10000 ) 辆列车，执行M( M&lt;=10000 )次操作。<br>接下来有 N （从1开始记数）辆列车的信息，每辆列车先有一个数字 Xi(1 &lt;= Xi &lt;= 100 )，表示该列车有Xi个乘客，接下来Xi行乘客信息，每个乘客包含名字（20个字符以内，不包含空白符）和人品（0&lt;= RP &lt;=30000）。<br>再接下来有 M 行操作信息，一共有3种操作，分别为<br><br>GETON Xi name RP  表示有一个叫name的人品为RP的人登上第Xi列车<br><br>JOIN Xi Xj          表示有将第Xj辆列车合并到Xi辆列车<br><br>GETOUT Xi        表示从第Xi辆列车踢出一个人品最差的人<br><br>测试数据保证每个操作均合法，即不会将已经被合并到其他列车的列车再进行合并，也不会从一辆空列车里踢出乘客<br>", output:"对于每个 GETOUT 命令，输出被踢出的那个人的名字<br>", sample_in:"3 5\n2\nxhd 0\nzl 1\n2\n8600 1\nll 2\n1\nIgnatius 3\nGETOUT 1\nJOIN 1 2\nGETOUT 1\nGETON 3 hoho 2\nGETOUT 3", sample_out:"xhd\nzl\nhoho\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nHuge input, scanf is recommended. \n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:278, vtotal_submit:1598, special_status:0, time_limit:10000, mem_limit:65535, hint:"", source:"ACM暑期集训队练习赛（四）", author:"", tag:["TEST"]}
{pid:1435, vid:1435, oj:"hdu", title:"Stable Match", desc:"Network 公司的BOSS 说现在他们公司建立的信号发射站和接收站经常出现信号发送接收不稳定的问题,信号的稳定度被定义为发射点到接收点的距离,距离越大,越不稳定,所以发射点跟接收点在可能的情况下应越近越好.<br>  BOSS给8600的任务就是：:建立一个匹配表,使得一个发射点对应一个接收点,对于某一个发射点来说,它的接收点离它越近那么就会更稳定,同样对于接收点也是一样的情况. 匹配的目标是使得整个网络变得稳定。,对于某2个匹配,比如,( a ---- 1) ,(b----2) ,如果发射点a 离接收点2 比 1要近,而且2 也离 发射点a要比 b 近, 那么 a 就很有可能把信号发到 2中,我们就说这个搭配是不 稳定的。同样如果发射点b 离接收点1 比 2 要近,而且1 也离 发射点b要比 a 近 ,也会出现不稳定的情 况.  而且每个点都有一个容量值,如果对于一个发射点到2个接收点的距离一样的话,它将首先选择容量大的那个. 所以8600就是要建立一个稳定的匹配,使得每个一个信号发射点对应一个接收点,并且不会出现信号不稳定的情况.<br>8600苦思冥想也没什么进展,希望你能帮他解决这个难题.<br>", input:"输入数据首先包含一个正整数N,N&lt;=20表示测试实例的个数.每个实例首先是一个整C,C&lt;=200表示有C个信号发射点和C个信号接收点. 接下来的C行表示 C个发射点的编号,容量和坐标,坐标为,x,y,z 3个实数(x,y,z ≥0).最后C行是C个接收点的编号,容量和坐标.<br>", output:"输出建立稳定搭配后各个发射点和接收点的编号,每一行代表一个搭配,前一个整数为发射点的编号，后一个为对应的接收点的编号。如果有多种情况，输出其中一种即可.如果任务不可能完成的话,输出&quot;Impossible&quot;.每个实例后请输出一个空行.<br>", sample_in:"1\n3\n1 1 60.57 57.16 69.27\n2 2 26.05 61.06 11.52\n3 3 9.04 58.20 56.90\n1 2 280.74 12.78 316.14\n2 3 305.16 267.15 87.65\n3 1 240.72 312.41 217.10", sample_out:"3 1\n1 2\n2 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:55, vtotal_submit:188, special_status:1, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（四）", author:"", tag:["TEST"]}
{pid:1436, vid:1436, oj:"hdu", title:"排列组合（二）", desc:"有N个字母，每个字母的数量不定。用这N个字母组成一个长为M的串，并且规定这个串中每个字母能出现的次数。求这样的串的总数。", input:"每组输入数据的第一行有两个数字N,M。接下来有N行，每行的第一个数k表示对应字母可以出现的种数，接下来的k个数表示该字母可以在串中出现的个数。其中0表示可以不出现。如测试数据,第一个2表示有&quot;A&quot;&quot;B&quot;两个字母，第二个2表示求一个长度为2的串，第二行的第一个数3表示后面有3个数字，0，1，2分别表示字母&quot;A&quot;在这个串中可以出现0次，1次，2次，第三行表示字母&quot;B&quot;可以出现的次数。则这样的串有&quot;AB&quot;,&quot;BA&quot;,&quot;AA&quot;3种。", output:"对应每组输入，输出满足要求的串的总数。（输出结果不会超出2^63)", sample_in:"2 2\n3 0 1 2\n2 0 1", sample_out:"3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:46, vtotal_submit:684, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（四）", author:"", tag:["TEST"]}
{pid:1437, vid:1437, oj:"hdu", title:"天气情况", desc:"如果我们把天气分为雨天，阴天和晴天3种，在给定各种天气之间转换的概率，例如雨天转换成雨天，阴天和晴天的概率分别为0.4,0.3,0.3.那么在雨天后的第二天出现雨天,阴天和晴天的概率分别为0.4,0.3,0.3.现在给你今天的天气情况,问你n天后的某种天气出现的概率.", input:"我们这里假设1,2,3分别代表3种天气情况,Pij表示从i天气转换到j天气的概率.<br>首先是一个数字T表示数据的组数.<br>每组数据以9个数开始分别是P11,P12,P13,……,P32,P33,接着下一行是一个数字m，表示提问的次数。每次提问有3个数据，i,j,n,表示过了n天从i天气情况到j天气情况(1&lt;=i,j&lt;=3   1&lt;=n&lt;=1000)。<br>", output:"根据每次提问输出相应的概率(保留3位小数)。", sample_in:"1\n0.4 0.3 0.3 0.2 0.5 0.3 0.1 0.3 0.6\n3\n1 1 1\n2 3 1\n1 1 2", sample_out:"0.400\n0.300\n0.250\n\n\nHint:如果GC提交不成功，可以换VC试试", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:193, vtotal_submit:585, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（四）", author:"", tag:["TEST"]}
{pid:1438, vid:1438, oj:"hdu", title:"钥匙计数之一", desc:"一把锁匙有N个槽，槽深为1，2，3，4。每锁匙至少有3个不同的深度且至少有1对相连的槽其深度之差为3。求这样的锁匙的总数。 ", input:"本题无输入", output:"对N&gt;=2且N&lt;=31，输出满足要求的锁匙的总数。", sample_in:"N=2: 0\nN=3: 8\nN=4: 64\nN=5: 360\n..\n..\n..\n..\n..\n..\n..\n\nN=31: ...\n\n注：根据Pku Judge Online 1351 Number of Locks或 Xi\'an 2002 改编,在那里N&lt;=16", sample_out:"", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:378, vtotal_submit:1206, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"ecjtu_zhousc", tag:["TEST"]}
{pid:1439, vid:1439, oj:"hdu", title:"Cipher", desc:"Bob and Alice started to use a brand-new encoding scheme. Surprisingly it is not a Public Key Cryptosystem, but their encoding and decoding is based on secret keys. They chose the secret key at their last meeting in Philadelphia on February 16th, 1996. They chose as a secret key a sequence of n distinct integers, a1 ; . . .; an, greater than zero and less or equal to n. The encoding is based on the following principle. The message is written down below the key, so that characters in the message and numbers in the key are correspondingly aligned. Character in the message at the position i is written in the encoded message at the position ai, where ai is the corresponding number in the key. And then the encoded message is encoded in the same way. This process is repeated k times. After kth encoding they exchange their message.<br><br>The length of the message is always less or equal than n. If the message is shorter than n, then spaces are added to the end of the message to get the message with the length n.<br><br>Help Alice and Bob and write program which reads the key and then a sequence of pairs consisting of k and message to be encoded k times and produces a list of encoded messages. <br><br>", input:"The input file consists of several blocks. Each block has a number 0 &lt; n &lt;= 200 in the first line. The next line contains a sequence of n numbers pairwise distinct and each greater than zero and less or equal than n. Next lines contain integer number k and one message of ascii characters separated by one space. The lines are ended with eol, this eol does not belong to the message. The block ends with the separate line with the number 0. After the last block there is in separate line the number 0. <br>", output:"Output is divided into blocks corresponding to the input blocks. Each block contains the encoded input messages in the same order as in input file. Each encoded message in the output file has the lenght n. After each block there is one empty line. ", sample_in:"10\n4 5 3 7 2 8 1 6 10 9\n1 Hello Bob\n1995 CERC\n0\n0", sample_out:"BolHeol b\nC RCE", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:88, vtotal_submit:278, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（5）", author:"", tag:["TEST"]}
{pid:1440, vid:1440, oj:"hdu", title:"Department", desc:"The Department of Security has a new headquarters building. The building has several floors, and on each floor there are rooms numbered xxyy where yy stands for the room number and xx for the floor number, 0 &lt; xx; yy &lt;= 10. The building has `pater-noster\' elevator, i.e. elevator build up from several cabins running all around. From time to time the agents must visit the headquarters. During their visit they want to visit several rooms and in each room they want to stay for some time. Due to the security reasons, there can be only one agent in the same room at the same time, The same rule applies to the elevators. The visits are planned in the way ensuring they can be accomplished within one day. Each agent visits the headquarters at most once a day.<br><br>Each agent enters the building at the 1st floor, passes the reception and then starts to visit the rooms according to his/her list. Agents always visit the rooms by the increasing room numbers. The agents form a linear hierarchy according to which they have assigned their one letter personal codes. The agents with higher seniority have lexicographically smaller codes. No two agents have the same code.<br><br>If more then one agent want to enter a room, or an elevator, the agents have to form a queue. In each queue, they always stand according to their codes. The higher the seniority of the agent, the closer to the top of the queue he stands. Every 5 s (seconds) the first agent in the queue in front of the elevator enters the elevator. After visiting the last room in the headquarters each agent uses if necessary elevator to the first floor and exits the building.<br><br>The times necessary to move from a certain point in the headquarters to another are set as follows: Entering the building, i.e. passing the reception and reaching the elevator, or a room on the first floor takes 30 s. Exiting the building, i.e. stepping out of the elevator or a room on the first floor and passing the reception takes also 30 s. On the same floor, the transfer from the elevator to the room (or to the queue in front of the room), or from the room to the elevator (or to the queue in front of the elevator), or from one room to another (or to the queue in front of the room) takes 10 s. The transfer from one floor to the next floor above or below in an elevator takes 30 s. Write a program that determines time course of agent\'s visits in the headquarters. <br><br>", input:"The input file contains the descriptions of n &gt;= 0 visits of different agents. The first line of the description of each visit consists of agent\'s one character code C, C = A, . . ., Z, and the time when the agent enters the headquarters. The time is in the format HH:MM:SS (hours, minutes, seconds). The next lines (there will be at least one) contain the room number, and the length of time intended to stay in the room, time is in seconds. Each room is in a separate line. The list of rooms is sorted according to the increasing room number. The list of rooms ends by the line containing 0. The list of the descriptions of visits ends by the line containing the character dot. ", output:"The output contains detailed records of each agent\'s visit in the headquarters. For each agent, there will be a block. Blocks are ordered in the order of increasing agent\'s codes. Blocks are separated by an empty line. After the last block there is an empty line too. The first line of a block contains the code of agent. Next lines contain the starting and ending time (in format HH:MM:SS) and the descriptions of his/her activity. Time data will be separated by one blank character. Description will be separated from time by one blank character. Description will have a form Entry, Exit or Message. The Message can be one of the following: Waiting in elevator queue, Waiting in front of room RoomNumber, Transfer from room RoomNumber to room RoomNumber, Transfer from elevator to room RoomNumber, Transfer from RoomNumber to elevator, Stay in room RoomNumber, Stay in elevator. <br>", sample_in:"A 10:00:00\n0101 100\n0110 50\n0202 90\n0205 50\n0\nB 10:01:00\n0105 100\n0201 5\n0205 200\n0\n.", sample_out:"A\n10:00:00 10:00:30 Entry\n10:00:30 10:02:10 Stay in room 0101\n10:02:10 10:02:20 Transfer from room 0101 to room 0110\n10:02:20 10:03:10 Stay in room 0110\n10:03:10 10:03:20 Transfer from room 0110 to elevator\n10:03:20 10:03:50 Stay in elevator\n10:03:50 10:04:00 Transfer from elevator to room 0202\n10:04:00 10:05:30 Stay in room 0202\n10:05:30 10:05:40 Transfer from room 0202 to room 0205\n10:05:40 10:07:40 Waiting in front of room 0205\n10:07:40 10:08:30 Stay in room 0205\n10:08:30 10:08:40 Transfer from room 0205 to elevator\n10:08:40 10:09:10 Stay in elevator\n10:09:10 10:09:40 Exit\n\nB\n10:01:00 10:01:30 Entry\n10:01:30 10:03:10 Stay in room 0105\n10:03:10 10:03:20 Transfer from room 0105 to elevator\n10:03:20 10:03:25 Waiting in elevator queue\n10:03:25 10:03:55 Stay in elevator\n10:03:55 10:04:05 Transfer from elevator to room 0201\n10:04:05 10:04:10 Stay in room 0201\n10:04:10 10:04:20 Transfer from room 0201 to room 0205\n10:04:20 10:07:40 Stay in room 0205\n10:07:40 10:07:50 Transfer from room 0205 to elevator\n10:07:50 10:08:20 Stay in elevator\n10:08:20 10:08:50 Exit", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2, vtotal_submit:35, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（5）", author:"", tag:["TEST"]}
{pid:1441, vid:1441, oj:"hdu", title:"A Logical Problem", desc:"The input file for this program contains several logic circuit diagrams composed of zero or more dual-input AND and/or OR gates (with possible inversions of input and/or output values), one or more inputs, and a single output. The goal of this problem is to write a program which will determine what the output should be for a given circuit diagram and for a specified set of input values. <br><br>The logic circuits are drawn using printable ASCII characters and are allowed to be a maximum of 100 by 100 characters in size. The AND and OR gates are represented by the following arrangements of ASCII characters. respectively <br><br><br>:\\          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;        :\\ <br>: )          &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       : &gt;<br>:/           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;       :/ <br><br>Note that the only difference is that the AND gate has a right parenthesis character in the rightmost column of the center row, while the OR gate has a greater-than symbol in that same position. The gates in the data file will always be oriented as shown (i.e. they will not be flipped, rotated, or otherwise modified in any way from the arrangements shown above). <br><br>The &quot;circuit&quot; paths used to connect the gates are represented using the dash character (ASCII code 45 decimal) for horizontal paths, and the vertical bar character (ASCII code 124 decimal) for vertical paths. A path always travels in a straight line (either horizontally or vertically) unless altered by a junction, represented by a plus character (ASCII code 43 decimal), at which point it may make a 90 degree turn only. No two junctions may be adjacent to one another in horizontal or vertical direction, and no two paths may cross at any point. <br><br>The following circuits illustrate some legal and illegal circuit paths <br><br><img src=data/images/C36-1003-1.gif><br><br>The two inputs for a specific logic gate always approach horizontally from the left. One input is adjacent to the leftmost character of the first row of the gate, and the other input is adjacent to the leftmost character of the third row. The output for a gate always leaves horizontally to the right and is adjacent to the rightmost character of the second row of the gate. The positions of these inputs and output locations are indicated by the dash characters (\'-\') in the diagram below: <br><br><br>     -:\\<br>     &nbsp;: )-<br>     -:/<br><br>It is possible for either of the two inputs or the output to be inverted. That is, if the input or output is a 1, it is changed to a 0, or if it was to be a 0, it is changed to a 1. To indicate inversion, a lowercase &quot;oh&quot; character (ASCII code 111 decimal) is placed in the appropriate input or output position adjacent to the gate. If an input or output is inverted, it will always be preceded (in the case of an input) or followed (in the case of an output) by at least a single dash character. As an example, consider the diagram below which shows an AND gate with its top input and its output inverted: <br><br><br>    -o:\\<br>     &nbsp; : )o-<br>      &nbsp;-:/<br><br>As previously stated, there are one or more inputs and a single output in the complete logic circuit. Each input is indicated by one of the capital letters A through Z, and the output is indicated by a question mark character. So, a simple circuit consisting only of a single OR gate with two inputs labeled A and B could be represented as shown here: <br><br><br>    A-:\\<br>    &nbsp; : &gt;-?<br>    B-:/<br><br>You may assume that the input data obeys all of the rules outlined above (ie. there are no illegal circuits). The bottom end of a logic diagram is indicated by line containing only a single asterisk in the first column. After this are several lines each of which indicate the state of the inputs in the previous logic diagram. Each line is a string of 26 &quot;0&quot; and/or &quot;1&quot; characters, with the first position representing the state of input A, the second position representing the state of input B, etc. Note that input values which are not actually used in the circuit may simply be ignored. The list of input states is terminated by a line containing only a single asterisk character in the first column. <br><br>Following the astensk which terminates the list of input states is another circuit diagram followed by an asterisk and a list of input states terminated by an asterisk, which is then followed by another circuit diagram and another list of input states, and so on until the end of the file. The file will always contain at least one circuit and one set of inputs for that circuit. <br><br>For each logic circuit diagram, the program is to report the value of the output (0 or 1), one value per line, for each input state in the list which follows the circuit. The list of outputs for a given circuit should be followed by a single blank line to separate it from the lists for subsequent circuits. <br><br>", input:"", output:"", sample_in:"A-:\\\n    : )-?\nB-:/\n*\n00000000000000000000000000\n10000000000000000000000000\n01000000000000000000000000\n11000000000000000000000000\n*\n  +-A\n  |\n  +-:\\\n     : >o-:\\\n  +-:/     : )-?\n  |+----o:/\nB-+|\n C-+\n*\n00000000000000000000000000\n11100000000000000000000000\n*\nA-:\\\n   : )-?\nA-:/\n*\n00000000000000000000000000\n10000000000000000000000000\n*", sample_out:"0\n0\n0\n1\n\n1\n0\n\n0\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2, vtotal_submit:8, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（5）", author:"", tag:["TEST"]}
{pid:1442, vid:1442, oj:"hdu", title:"Soundex Indexing", desc:"The Soundex Index System was developed so that similar sounding names, or names with similar spelling could be encoded for easy retrieval. It has been used by the U.S. Bureau of the Census, and some States use it to help encode your driver\'s license number. Your task is to read a sequence of names, one at a time and one per line, compute the corresponding soundex code, and write to the output file the name and its soundex code (one line of output per name). <br><br>Names will contain from 1 to 20 upper case, alphabetic characters (ASCII values 65 thru 90, inclusive). Names shorter than 20 characters will NOT be padded with blanks. Thus a narne will consist of upper case letters only. <br><br><br>How to generate the Soundex Code:<br>A Soundex Code always consists of a letter followed by three digits. Here are the rules for soundex encoding: <br><br>1. The first letter of a name appears as the first and only letter in the soundex code. <br>2. The letters A, E, I, O, U, Y, W, &amp; H are never encoded, but do break successive code sequences (see next rule). <br>3. All other letters are encoded EXCEPT when they immediately follow a letter (including the first letter) that would be encoded with the same code digit. <br>4. The soundex code guide is: <br><img src=data/images/C36-1004-1.gif><br>5. Trailing zeros are appended to short codes so all names are encoded with a letter followed by three digits. <br>6. Longer codes are truncated after the third digit. <br>", input:"The input file, SOUNDEX.IN, contains a list of names, one per line. Each name will not exceed 20 characters, and you may assume that only upper case letters will be used. Your program should continue to read names until the end of the file is detected. <br>", output:"The output written to the file SOUNDEX.OUT should consist of a column of names and a column of their corresponding soundex codes. Write the headings &quot;NAME&quot; and &quot;SOUNDEX CODE&quot; in the first line of the output file in columns 10 and 35, respectively. After the heading line, the names and soundex codes should be written (one pair per line) with the name starting in column 10 and the soundex code beginning in column 35. The comment &quot;END OF OUTPUT&quot; should appear at the end of the output file on the line immediately after the last name. This comment should be written starting in column 20. <br>", sample_in:"LEE\nKUHNE\nEBELL\nEBELSON\nSCHAEFER\nSCHAAK", sample_out:"         NAME                     SOUNDEX CODE\n         LEE                      L000\n         KUHNE                    K500\n         EBELL                    E140\n         EBELSON                  E142\n         SCHAEFER                 S160\n         SCHAAK                   S200\n                   END OF OUTPUT\n         |         |              |\n         |         |              |__ Column 35\n         |         |__ Column 20\n         |__ Column 10", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:13, vtotal_submit:28, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（5）", author:"", tag:["TEST"]}
{pid:1443, vid:1443, oj:"hdu", title:"Joseph", desc:"The Joseph\'s problem is notoriously known. For those who are not familiar with the original problem: from among n people, numbered 1, 2, . . ., n, standing in circle every mth is going to be executed and only the life of the last remaining person will be saved. Joseph was smart enough to choose the position of the last remaining person, thus saving his life to give us the message about the incident. For example when n = 6 and m = 5 then the people will be executed in the order 5, 4, 6, 2, 3 and 1 will be saved.<br><br>Suppose that there are k good guys and k bad guys. In the circle the first k are good guys and the last k bad guys. You have to determine such minimal m that all the bad guys will be executed before the first good guy. <br>", input:"The input file consists of separate lines containing k. The last line in the input file contains 0. You can suppose that 0 &lt; k &lt; 14. <br>", output:"The output file will consist of separate lines containing m corresponding to k in the input file. <br>", sample_in:"3\n4\n0", sample_out:"5\n30", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:740, vtotal_submit:1491, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（5）", author:"", tag:["TEST"]}
{pid:1444, vid:1444, oj:"hdu", title:"Maya Calendar", desc:"During his last sabbatical, professor M. A. Ya made a surprising discovery about the old Maya calendar. From an old knotted message, professor discovered that the Maya civilization used a 365 day long year, called Haab, which had 19 months. Each of the first 18 months was 20 days long, and the names of the months were pop, no, zip, zotz, tzec, xul, yoxkin, mol, chen, yax, zac, ceh, mac, kankin, muan, pax, koyab, cumhu. Instead of having names, the days of the months were denoted by numbers starting from 0 to 19. The last month of Haab was called uayet and had 5 days denoted by numbers 0, 1, 2, 3, 4. The Maya believed that this month was unlucky, the court of justice was not in session, the trade stopped, people did not even sweep the floor. <br><br>For religious purposes, the Maya used another calendar in which the year was called Tzolkin (holly year). The year was divided into thirteen periods, each 20 days long. Each day was denoted by a pair consisting of a number and the name of the day. They used 20 names: imix, ik, akbal, kan, chicchan, cimi, manik, lamat, muluk, ok, chuen, eb, ben, ix, mem, cib, caban, eznab, canac, ahau and 13 numbers; both in cycles. <br><br>Notice that each day has an unambiguous description. For example, at the beginning of the year the days were described as follows: <br><br>1 imix, 2 ik, 3 akbal, 4 kan, 5 chicchan, 6 cimi, 7 manik, 8 lamat, 9 muluk, 10 ok, 11 chuen, 12 eb, 13 ben, 1 ix, 2 mem, 3 cib, 4 caban, 5 eznab, 6 canac, 7 ahau, and again in the next period 8 imix, 9 ik, 10 akbal . . .<br><br>Years (both Haab and Tzolkin) were denoted by numbers 0, 1, : : : , where the number 0 was the beginning of the world. Thus, the first day was: <br><br>&nbsp;Haab: 0. pop 0 <br>&nbsp;Tzolkin: 1 imix 0 <br><br>Help professor M. A. Ya and write a program for him to convert the dates from the Haab calendar to the Tzolkin calendar. <br><br>", input:"The date in Haab is given in the following format:<br>NumberOfTheDay. Month Year<br><br>The first line of the input file contains the number of the input dates in the file. The next n lines contain n dates in the Haab calendar format, each in separate line. The year is smaller then 5000. <br><br>", output:"The date in Tzolkin should be in the following format:<br>Number NameOfTheDay Year<br><br>The first line of the output file contains the number of the output dates. In the next n lines, there are dates in the Tzolkin calendar format, in the order corresponding to the input dates. <br><br>", sample_in:"3\n10. zac 0\n0. pop 0\n10. zac 1995", sample_out:"3\n3 chuen 0\n1 imix 0\n9 cimi 2801", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:161, vtotal_submit:437, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（5）", author:"", tag:["TEST"]}
{pid:1445, vid:1445, oj:"hdu", title:"Ride to School", desc:"Many graduate students of Peking University are living in Wanliu Campus, which is 4.5 kilometers from the main campus - Yanyuan. Students in Wanliu have to either take a bus or ride a bike to go to school. Due to the bad traffic in Beijing, many students choose to ride a bike. <br><br>We may assume that all the students except &quot;Charley&quot; ride from Wanliu to Yanyuan at a fixed speed. Charley is a student with a different riding habit - he always tries to follow another rider to avoid riding alone. When Charley gets to the gate of Wanliu, he will look for someone who is setting off to Yanyuan. If he finds someone, he will follow that rider, or if not, he will wait for someone to follow. On the way from Wanliu to Yanyuan, at any time if a faster student surpassed Charley, he will leave the rider he is following and speed up to follow the faster one. <br><br>We assume the time that Charley gets to the gate of Wanliu is zero. Given the set off time and speed of the other students, your task is to give the time when Charley arrives at Yanyuan. <br><br>", input:"There are several test cases. The first line of each case is N (1 &lt;= N &lt;= 10000) representing the number of riders (excluding Charley). N = 0 ends the input. The following N lines are information of N different riders, in such format:<br><br>Vi [TAB] Ti <br><br>Vi is a positive integer &lt;= 40, indicating the speed of the i-th rider (kph, kilometers per hour). Ti is the set off time of the i-th rider, which is an integer and counted in seconds. In any case it is assured that there always exists a nonnegative Ti. <br><br>", output:"Output one line for each case: the arrival time of Charley. Round up (ceiling) the value when dealing with a fraction.<br><br>", sample_in:"4\n20 0\n25 -155\n27 190\n30 240\n2\n21 0\n22 34\n0", sample_out:"780\n771", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:143, vtotal_submit:398, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2004, Beijing (Mainland China), Preliminary", author:"", tag:["TEST"]}
{pid:1446, vid:1446, oj:"hdu", title:"Paper Cut", desc:"Still remember those games we played in our childhood? Folding and cutting paper must be among the most popular ones. Clever children will always search for something new, even when they play games like cutting paper. Now, Carol, a smart girl, asks her brother Mike to solve a puzzle. However, as always, Mike cannot find the solution, therefore he turns to you for help. <br><br>Carol\'s puzzle is simple to state. She folds the paper in a certain manner and then uses a knife to cut through the folded paper. What Mike needs to do is to tell how many pieces the folded paper will turn into after it is cut. To eliminate the ambiguity, we can coordinate the paper as [0, 1] * [0, 1], with the coordinates of lower left corner (0, 0). A fold is denoted by two points (x1, y1) and (x2, y2) on the folding line, with which, the direction of the line is determined by from (x1, y1) to (x2, y2). Carol will always fold the paper from left to right relative to the directed line given (see Figure-1). The cut is determined by the two points on the cut line. Please note that the points given to determine the fold or the cut are not necessarily on the paper. <br><br><img src=data/images/1446-1.jpg><br><br>", input:"The first line of the input contains one integer t, the number of test cases. Then t cases follow. For each test case, the first line consists of an integer N (0 &lt;= N &lt;= 20), the number of folds, and the following N lines give two points on each fold line as x1, y1, x2, y2. The following line gives two points on the cut line in the same way. <br>", output:"For each test case, output one line containing the number of pieces the paper will turn into after the cut. <br><br>", sample_in:"2\n1\n0 0.5 1 1\n0.5 0 0.5 1\n1\n0 0.5 1 1\n0 0.4 1 0.4", sample_out:"2\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1, vtotal_submit:17, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2004, Beijing (Mainland China), Preliminary", author:"", tag:["TEST"]}
{pid:1447, vid:1447, oj:"hdu", title:"Fourier\'s Lines", desc:"Joseph Fourier was a great mathematician and physicist and is well known for his mathematic series. Among all the nineteen children in his family, Joseph was the youngest and the smartest. He began to show his interest in mathematics when he was very young. After he grew up, he often corresponded with C. Bonard (a professor of mathematics at Auxerre) by exchanging letters. <br><br>In one letter written to Bonard, Fourier asked a question: how to draw 17 lines on a plane to make exactly 101 crossings, where each crossing belongs to exactly two lines. Obviously, this is an easy problem, and Figure-1 is a solution that satisfies his requirement. Now the problem for you is a universal one. Can we draw N lines on a plane to make exactly M crossings, where each crossing belongs to exactly two lines? If we can, how many pieces, at most, can these lines cut the plane into?<br><img src=data/images/1447-1.jpg><br>", input:"The input may have several sets of test data. Each set is one line containing two integers N and M (1 &lt;= N &lt;= 100, 0 &lt;= M &lt;= 10000), separated by a space. The test data is followed by a line containing two zeros, which indicates the end of input and should not be processed as a set of data.<br><br>", output:"Output one line for each set of input in the following format:<br><br>Case i: N lines cannot make exactly M crossings. <br><br>if the drawing of these lines is impossible; <br><br>or: <br><br>Case i: N lines with exactly M crossings can cut the plane into K pieces at most. <br><br>Note: Even if N or M equals to one, you should use the words &quot;lines&quot; and &quot;crossings&quot; in your output. <br><br>", sample_in:"4 3\n4 6\n4 2\n5 11\n17 101\n0 0", sample_out:"Case 1: 4 lines with exactly 3 crossings can cut the plane into 8 pieces at most.\nCase 2: 4 lines with exactly 6 crossings can cut the plane into 11 pieces at most.\nCase 3: 4 lines cannot make exactly 2 crossings.\nCase 4: 5 lines cannot make exactly 11 crossings.\nCase 5: 17 lines with exactly 101 crossings can cut the plane into 119 pieces at most.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:36, vtotal_submit:96, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（六）", author:"", tag:["TEST"]}
{pid:1448, vid:1448, oj:"hdu", title:"The Treasure", desc:"We have arrived at the age of the Internet. Many software applications have transformed from stand-alone to online applications. Computer games are following this trend as well. Online games are becoming more and more popular, not only because they are more intelligent, but also because they can bring great profits. &quot;The computer game industry is developing rapidly in China. Online game revenues amounted to 1.3 billion Yuan last year and are expected to reach 6.7 billion Yuan by 2007.&quot; reported by China Daily in 2004. <br><br>However, good games originate from good programmers. We take for example that there is a RPG (Role Playing Game) and your boss asks you to implement some tasks. For simplicity\'s sake, we assume there are two kinds of roles in this game: one is player and the other is monster. You should help the player to achieve the goal: reach the place where treasure is positioned as early as possible and get the treasure.<br><br>The map of the game is a matrix of N * M identical cells. Some cells are passable blocks, and others are non-passable rocks. At any time, there is at most one role occupying a block. At the beginning, the time is set to 0, and the player is at a certain block. He then moves towards the treasure. At each turn, we have some rules: <br><br>1) The player can stay in the same block during the next one-second time duration, or he can walk or run towards the east, south, west, north, northeast, northwest, southeast, and southwest. <br><br><img src=data/images/1448-1.jpg><br><br>2) With walking, the player can arrive at the corresponding passable blocks around him (See Fig.1). Each move takes 1 second. <br><br>3) With running, the player can arrive at the corresponding passable blocks 2 cells away from him (See Fig.2). Each run takes 1 second. As demonstrated in Fig.3, if a neighbor cell is not passable, the player cannot run in that direction. For example, if cell 2 is a rock, running from 1 to 3 is impossible. <br><br>4) The monsters are classified into aggressive and non-aggressive. If a monster occupies a cell, the player cannot move into that cell or run through that cell. In addition, the player cannot move into the cells surrounding an aggressive monster, because it will attack the player near it. For example, in Fig.4, if there is an aggressive monster in 5, then the cell 1, 2, 3, 4, 6, 7, 8 and 9 are in its attacking region, so the player cannot stay in or pass through these cells. <br><br>5) Monsters change their positions each turn. Each monster appears by its position sequence iteratively. That\'s to say, given the position sequence of monster i: (x1, y1), (x2, y2), ..., (xs, ys), its initial position is (x1, y1) at time 0, then it appears in (x2, y2) at time 1, and so on. When monster i arrives at (xs, ys) at time s-1, it will arrive in (x1, y1) at time s, and start to repeat. <br>At the start of each turn, all the monsters change their positions first (the way of changing is given above). If a monster appears in the player\'s cell, or if an aggressive monster appears near the player to put him in its attacking region, the player will die, and the goal cannot be achieved. After all the monsters change their positions, the player makes a move or stays in the same cell. In his move, the moving path should not be occupied by any rocks or monsters or in the attacking region of any aggressive monsters. When counting the total time, we can neglect the time between monsters\' position change and the player\'s move. Given the map of the game, the player\'s starting position, the treasure position and all the monsters\' positions in every second, your task is to write a program to find the minimum time that the player gets the treasure. <br><br>", input:"The input consists of several test cases. The first line of each case contains two integers N and M (1 &lt;= N, M &lt;= 100), where N is the height of the map and M is the width of the map. This is followed by N lines each containing M characters representing the map. A \'#\' represents a rock, a \'.\' is a free block, \'p\' is the starting position of the player, \'t\' is the position of the treasure, \'n\' is the initial position of a non-aggressive monster, and an \'a\' stands for the initial position of an aggressive monster. <br><br>The cell (i, j) is the j-th cell on the i-th row counting from left to right. The rows are counted from 1 to N starting from the first line of the matrix. We can number all the monsters as 1, 2, 3… according to their initial position, sorting first by row, then by column. The (n+2)-th line contains an integer p (0 &lt;= p &lt;= 100), which is the total number of monsters (i.e. the total number of \'n\'s and \'a\'s in the matrix). It is followed by p lines each specifying a monster\'s position sequence in the following format: the i-th (1 &lt;= i &lt;= p) line corresponds to monster i, which begins with an integer s (1 &lt;= s &lt;= 100), meaning the length of position sequence. Then s pairs of integers x1, y1, x2, y2, …, xs, ys are followed, separated by blanks. Each pair is a free block in the map, (i.e. a monster never goes to a rock cell). <br><br>It is assured that none of the aggressive monsters\' initial position is around the player. Two consecutive cases are separated by a blank line. The input is terminated by a line containing a pair of zeros. <br>", output:"For each test case, output the minimum total time required for the player to get the treasure, in seconds. If it\'s not possible to get the treasure, or the minimum required time is greater than 100 seconds, please print a line just containing the string &quot;impossible&quot;. Two consecutive cases should be separated by a blank line.<br><br>", sample_in:"7 8\n#.#####.\n#.t#..p.\n#..#....\n..#a.#.#\n#...##.n\n.#......\n........\n2\n2 4 4 5 4\n3 5 8 6 8 5 7\n\n3 3\np#.\n##.\nt..\n0\n\n2 2\n#t\np#\n0\n\n0 0", sample_out:"8\n\nimpossible\n\n1\n\n\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nIn the first sample case, the player can follow (2,7), (4,7), stay in (4,7), (6,7), (7,6), (7,4), (5,2), (3,2) and (2,3) \nto get the treasure with the minimum time (8 seconds). \n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:10, vtotal_submit:43, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（六）", author:"", tag:["TEST"]}
{pid:1449, vid:1449, oj:"hdu", title:"Spiderman", desc:"Dr. Octopus kidnapped Spiderman\'s girlfriend M.J. and kept her in the West Tower. Now the hero, Spiderman, has to reach the tower as soon as he can to rescue her, using his own weapon, the web. <br><br>From Spiderman\'s apartment, where he starts, to the tower there is a straight road. Alongside of the road stand many tall buildings, which are definitely taller or equal to his apartment. Spiderman can shoot his web to the top of any building between the tower and himself (including the tower), and then swing to the other side of the building. At the moment he finishes the swing, he can shoot his web to another building and make another swing until he gets to the west tower. Figure-1 shows how Spiderman gets to the tower from the top of his apartment - he swings from A to B, from B to C, and from C to the tower. All the buildings (including the tower) are treated as straight lines, and during his swings he can\'t hit the ground, which means the length of the web is shorter or equal to the height of the building. Notice that during Spiderman\'s swings, he can never go backwards.<br><br><img src=data/images/1449-1.jpg><br><br>You may assume that each swing takes a unit of time. As in Figure-1, Spiderman used 3 swings to reach the tower, and you can easily find out that there is no better way.<br>", input:"The first line of the input contains the number of test cases K (1 &lt;= K &lt;= 20). Each case starts with a line containing a single integer N (2 &lt;= N &lt;= 5000), the number of buildings (including the apartment and the tower). N lines follow and each line contains two integers Xi, Yi, (0 &lt;= Xi, Yi &lt;= 1000000) the position and height of the building. The first building is always the apartment and the last one is always the tower. The input is sorted by Xi value in ascending order and no two buildings have the same X value.<br><br>", output:"For each test case, output one line containing the minimum number of swings (if it\'s possible to reach the tower) or -1 if Spiderman can\'t reach the tower.<br><br>", sample_in:"2\n6\n0 3\n3 5\n4 3\n5 5\n7 4\n10 4\n3\n0 3\n3 4\n10 4", sample_out:"3\n-1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:15, vtotal_submit:133, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（六）", author:"", tag:["TEST"]}
{pid:1450, vid:1450, oj:"hdu", title:"Pollution", desc:"The managers of a chemical plant, which is notorious for its high pollution, plan to adopt a newly developed device in order to reduce the amount of contaminants emitted. However, engineers in the plant are against this plan, as they doubt the usefulness of the device. As engineers only believe in experimental results, managers decide to hire programmers to make a numerical experiment to convince the engineers. <br><br>The new pollution-reducing device consists of several tanks with pipes connecting the tanks. You may assume there is at most one pipe between two tanks. Two tanks are called adjacent if a pipe connects them. When operating, the contaminant circulates in the device among these tanks. <br><br><img src=data/images/1450-1.jpg><br><br>As shown in the Figure-1, the contaminant in one tank in time t, will equally distribute into all adjacent tanks in the time t+1. In other words, if we use Xit to denote the amount of contaminant in tank i at time t, we can use the following formula: <br><br><img src=data/images/1450-2.jpg><br><br>where Iij=1 if tank i and tank j are adjacent, otherwise Iij=0, and where dj is the number of tanks adjacent to tank j. If no tank is adjacent to tank i, we have Xit+1=Xit. The managers, as well as the engineers, want to know that given the initial amount of contaminant in each tank, how the contaminant will be distributed in all the tanks after a long period of time in circulation. Namely, given Xi0 for all i, what are Xit when the difference between Xit and Xit+1 is so small that it can be ignored. You may assume that this condition will ALWAYS be attained from an initial case in this problem. <br>", input:"The first line of the input contains one integer T (1 &lt;= T &lt;= 10), the number of test cases. T cases then follow. For each test case, the first line consists of two integers: N and M where(1 &lt;= N &lt;= 100, 0 &lt;= M &lt;= N*(N-1)/2), is the number of tanks and pipes. The following N lines give the initial amount of contaminant for each tank, which are nonnegative real numbers and no larger than 100. Then the next M lines give the tanks that each pipe connects, as &quot;A B&quot; (1 &lt;= A, B &lt;= N, A != B) denotes there is a pipe between tank A and tank B.<br>", output:"For each test case, output the final amount of contaminant Xit+1 (one per line), followed by a blank line. The number should be rounded to three digits after the decimal point.<br>", sample_in:"2\n3 3\n1\n0\n0\n1 2\n2 3\n3 1\n4 4\n1\n0\n0\n1\n1 2\n2 3\n3 1\n3 4", sample_out:"0.333\n0.333\n0.333\n\n0.500\n0.500\n0.750\n0.250", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:16, vtotal_submit:55, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（六）", author:"", tag:["TEST"]}
{pid:1451, vid:1451, oj:"hdu", title:"Area in Triangle", desc:"Given a triangle field and a rope of a certain length (Figure-1), you are required to use the rope to enclose a region within the field and make the region as large as possible.<br><img src=data/images/1451-1.jpg><br><br>", input:"The input has several sets of test data. Each set is one line containing four numbers separated by a space. The first three indicate the lengths of the edges of the triangle field, and the fourth is the length of the rope. Each of the four numbers have exactly four digits after the decimal point. The line containing four zeros ends the input and should not be processed. You can assume each of the edges are not longer than 100.0000 and the length of the rope is not longer than the perimeter of the field.<br><br>", output:"Output one line for each case in the following format: <br><br>Case i: X <br><br>Where i is the case number, and X is the largest area which is rounded to two digits after the decimal point. <br>", sample_in:"12.0000 23.0000 17.0000 40.0000\n84.0000 35.0000 91.0000 210.0000\n100.0000 100.0000 100.0000 181.3800\n0 0 0 0", sample_out:"Case 1: 89.35\nCase 2: 1470.00\nCase 3: 2618.00", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:24, vtotal_submit:53, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（六）", author:"", tag:["TEST"]}
{pid:1452, vid:1452, oj:"hdu", title:"Happy 2004", desc:"Consider a positive integer X,and let S be the sum of all positive integer divisors of 2004^X. Your job is to determine S modulo 29 (the rest of the division of S by 29).<br><br>Take X = 1 for an example. The positive integer divisors of 2004^1 are 1, 2, 3, 4, 6, 12, 167, 334, 501, 668, 1002 and 2004. Therefore S = 4704 and S modulo 29 is equal to 6.<br>", input:"The input consists of several test cases. Each test case contains a line with the integer X (1 &lt;= X &lt;= 10000000). <br><br>A test case of X = 0 indicates the end of input, and should not be processed.<br>", output:"For each test case, in a separate line, please output the result of S modulo 29.<br>", sample_in:"1\n10000\n0", sample_out:"6\n10", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:509, vtotal_submit:891, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（六）", author:"", tag:["TEST"]}
{pid:1453, vid:1453, oj:"hdu", title:"City hall", desc:"Because of its age, the City Hall has suffered damage to one of its walls. A matrix with M rows and N columns represents the encoded image of that wall, where 1 represents an intact wall and 0 represents a damaged wall (like in Figure-1).<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1110000111<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1100001111<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1000000011<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1111101111<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1110000111<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Figure-1<br><br>To repair the wall, the workers will place some blocks vertically into the damaged area. They can use blocks with a fixed width of 1 and different heights of {1,2, ..., M}. <br><br>For a given image of the City Hallˇs wall, your task is to determine how many blocks of different heights are needed to fill in the damaged area of the wall, and to use the least amount of blocks.<br>", input:"There is only one test case. The case starts with a line containing two integers M and N (1 &lt;= M, N &lt;= 200). Each of the following M lines contains a string with length of N, which consists of ¨1〃s and/or ¨0〃s. These M lines represent the wall.<br>", output:"You should output how many blocks of different heights are needed. Use separate lines of the following format:<br><br>k Ck<br><br>where k劇{1,2, ..., M} means the height of the block, and Ck means the amount of blocks of height k that are needed. You should not output the lines where Ck = 0. The order of lines is in the ascending order of k.<br>", sample_in:"5 10\n1110000111\n1100001111\n1000000011\n1111101111\n1110000111", sample_out:"1 7\n2 1\n3 2\n5 1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:117, vtotal_submit:210, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（七）", author:"", tag:["TEST"]}
{pid:1454, vid:1454, oj:"hdu", title:"Pipe", desc:"The GX Light Pipeline Company started to prepare bent pipes for the new transgalactic light pipeline. During the design phase of the new pipe shape the company ran into the problem of determining how far the light can reach inside each component of the pipe. Note that the material which the pipe is made from is not transparent and not light reflecting.<br><br><img src=data/images/1454-1.gif><br><br>Each pipe component consists of many straight pipes connected tightly together. For the programming purposes, the company developed the description of each component as a sequence of points [x1; y1], [x2; y2], . . ., [xn; yn], where x1 &lt; x2 &lt; . . . xn . These are the upper points of the pipe contour. The bottom points of the pipe contour consist of points with y-coordinate decreased by 1. To each upper point [xi; yi] there is a corresponding bottom point [xi; (yi)-1] (see picture above). The company wants to find, for each pipe component, the point with maximal x-coordinate that the light will reach. The light is emitted by a segment source with endpoints [x1; (y1)-1] and [x1; y1] (endpoints are emitting light too). Assume that the light is not bent at the pipe bent points and the bent points do not stop the light beam. <br><br>", input:"The input file contains several blocks each describing one pipe component. Each block starts with the number of bent points 2 &lt;= n &lt;= 20 on separate line. Each of the next n lines contains a pair of real values xi, yi separated by space. The last block is denoted with n = 0. <br>", output:"The output file contains lines corresponding to blocks in input file. To each block in the input file there is one line in the output file. Each such line contains either a real value, written with precision of two decimal places, or the message Through all the pipe.. The real value is the desired maximal x-coordinate of the point where the light can reach from the source for corresponding pipe component. If this value equals to xn, then the message Through all the pipe. will appear in the output file. <br>", sample_in:"4\n0 1\n2 2\n4 1\n6 4\n6\n0 1\n2 -0.6\n5 -4.45\n7 -5.57\n12 -10.8\n17 -16.55\n0", sample_out:"4.67\nThrough all the pipe.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:59, vtotal_submit:162, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（七）", author:"", tag:["TEST"]}
{pid:1455, vid:1455, oj:"hdu", title:"Sticks", desc:"George took sticks of the same length and cut them randomly until all parts became at most 50 units long. Now he wants to return sticks to the original state, but he forgot how many sticks he had originally and how long they were originally. Please help him and design a program which computes the smallest possible original length of those sticks. All lengths expressed in units are integers greater than zero. <br>", input:"The input contains blocks of 2 lines. The first line contains the number of sticks parts after cutting, there are at most 64 sticks. The second line contains the lengths of those parts separated by the space. The last line of the file contains zero.<br>", output:"The output file contains the smallest possible length of original sticks, one per line. <br>", sample_in:"9\n5 2 1 5 2 1 5 2 1\n4\n1 2 3 4\n0", sample_out:"6\n5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:693, vtotal_submit:5273, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（七）", author:"", tag:["TEST"]}
{pid:1456, vid:1456, oj:"hdu", title:"Transportation", desc:"Ruratania is just entering capitalism and is establishing new enterprising activities in many fields in- cluding transport. The transportation company TransRuratania is starting a new express train from city A to city B with several stops in the stations on the way. The stations are successively numbered, city A station has number 0, city B station number m. The company runs an experiment in order to improve passenger transportation capacity and thus to increase its earnings. The train has a maximum capacity n passengers. The price of the train ticket is equal to the number of stops (stations) between the starting station and the destination station (including the destination station). Before the train starts its route from the city A, ticket orders are collected from all onroute stations. The ticket order from the station S means all reservations of tickets from S to a fixed destination station. In case the company cannot accept all orders because of the passenger capacity limitations, its rejection policy is that it either completely accept or completely reject single orders from single stations.<br><br>Write a program which for the given list of orders from single stations on the way from A to B determines the biggest possible total earning of the TransRuratania company. The earning from one accepted order is the product of the number of passengers included in the order and the price of their train tickets. The total earning is the sum of the earnings from all accepted orders. <br><br>", input:"The input file is divided into blocks. The first line in each block contains three integers: passenger capacity n of the train, the number of the city B station and the number of ticket orders from all stations. The next lines contain the ticket orders. Each ticket order consists of three integers: starting station, destination station, number of passengers. In one block there can be maximum 22 orders. The number of the city B station will be at most 7. The block where all three numbers in the first line are equal to zero denotes the end of the input file.<br>", output:"The output file consists of lines corresponding to the blocks of the input file except the terminating block. Each such line contains the biggest possible total earning. <br>", sample_in:"10 3 4\n0 2 1\n1 3 5\n1 2 7\n2 3 10\n10 5 4\n3 5 10\n2 4 9\n0 2 5\n2 5 8\n0 0 0", sample_out:"19\n34", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:30, vtotal_submit:86, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（七）", author:"", tag:["TEST"]}
{pid:1457, vid:1457, oj:"hdu", title:"Counting Out", desc:"Consider this simple form of shuffling a deck of cards. Hold the deck face down and count to a certain number (say k), on each count taking one card from the top of the deck and placing it at the bottom. When you have finished counting, turn the top card (the k+1\'th card) over and place it face up on the table. Thus cards are continually moved from the top of the deck to the bottom, even when you have fewer cards than your chosen number. Continue in this way until you have no more cards left. Thus if k was 4, you would move 4 cards, one by one, from the top of the deck to the bottom and turn over the fifth. You would then move the sixth, seventh, eighth and ninth cards to the bottom and expose the tenth. Note that the number of the exposed card is always one more than k; if k was nine you would expose every tenth card, and so on.<br><br>Write a program that will read in the chosen number (k) and details of a deck of cards and simulate this process. Remember that a standard deck (or pack) of cards contains 52 cards. These are divided into 4 suits - Spades, Hearts, Diamonds and Clubs. Within each suit there are 13 cards - Ace (A), 2-9, Ten (T), Jack (J), Queen (Q) and King (K).<br>", input:"Input will consist of a series of scenarios. Each scenario will start with a number k (4 &lt;= k &lt;= 26) on a line by itself. This will be followed by the description of a deck. A deck will be specified on four lines with 13 cards on each line and with cards separated by exactly one space (see the example below). The cards are shown as they would be seen if they were face up, thus the last card in the sequence would be the top of the deck as far as you are concerned. The file will be terminated by a line consisting of a zero (0).<br><br>", output:"Output will consist of a series of lines, one for each scenario in the input. Each line will consist of the last card played, in the format shown below.<br><br>", sample_in:"4\nH2 H7 SA HJ D4 S4 HT DJ C9 HQ CT H8 SQ\nDQ S6 D2 H5 CJ CK HA D5 D9 H9 S8 D3 C4\nS2 C5 CQ D8 DT C6 DK H4 CA C8 C2 SK C7\nS5 H6 H3 S9 S7 C3 SJ S3 ST HK DA D6 D7\n0 ", sample_out:"S8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:42, vtotal_submit:85, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（八）", author:"", tag:["TEST"]}
{pid:1458, vid:1458, oj:"hdu", title:"Tax Avoidance", desc:"Now that inflation is under control the tax base is fairly stable, and hence the Infernal Revenue Department is desperately seeking more ways of extracting more money from the citizenry. One proposal is to institute a capital gains tax - in particular a tax made on the profit realised by buying and selling shares on the Stock Exchange. This seems to be a safe bet, since most ordinary people are not involved and therefore it will only affect the ``rich\'\' who can afford to pay. However, the Society of Creative Acountants has heard of these proposals and realise that it could well affect them.<br><br>The problem arises from the fact that shares do not have a fixed (or even steadily moving) price, and thus one has to determine which of the entire portfolio were sold. IRD have identified two ways of determining this; called respectively First Bought, First Sold (FBFS) and Last Bought, First Sold (LBFS). These are most easily explained by an example. Assume that you bought 10000 shares at 100c per share, then bought another 10000 at 90c per share and then sold 15000 shares at 95c per share. The sale will realise $14,250. Under the FBFS method you will be deemed to have sold the oldest stocks first so they will have cost you $10,000 plus $4,500, i.e. $14,500. You have therefore suffered a loss of of $250 and would not be liable for tax. Under the LBFS scheme, you are deemed to have sold the youngest shares first and hence these would have cost $9000 plus $5000, a total of $14,000, meaning you would have to pay tax on $250.<br><br>Write a program that will read in a series of share transactions, and for each share determine which method is the optimum. The optimum is the one that minimises the profit (if both earn a profit) or maximises the loss (if at least one makes a loss). In case of a tie, choose LBFS.<br><br>", input:"Input will consist of a series of sets of share transactions. Each set will start with the name of the share (3 upper case characters) on a line by itself. This name will be unique in the data set. This will be followed by a series of buy and sell transactions. Each transaction will be on a line by itself and will start with one of the letters `B\' (Buy) or `S\' (Sell), followed by the number of shares involved (up to 100,000) and the price (in cents, up to 10,000) separated by one or more spaces. You will never sell more shares than you own. Each set of transactions will be terminated by a line starting with an `E\'. The file will be terminated by a line consisting of a single #.<br><br>", output:"Output will consist of a series of lines, one for each set of transactions. Each line will consist of the share name, a single space, the chosen method, a single space and the profit or loss on the overall transaction (in dollars). This should be in a field 9 characters wide with two digits after the decimal point.<br><br>", sample_in:"PCS\nB 100 10000\nB 100  9000\nS 150  9500\nE\nCSC\nB  100 10000\nS   50 11000\nE\n#", sample_out:"PCS FBFS   -250.00\nCSC LBFS    500.00", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2, vtotal_submit:59, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（八）", author:"", tag:["TEST"]}
{pid:1459, vid:1459, oj:"hdu", title:"Calendar", desc:"Most of us have a calendar on which we scribble details of important events in our lives---visits to the dentist, the Regent 24 hour book sale, Programming Contests and so on. However there are also the fixed dates: partner\'s birthdays, wedding anniversaries and the like; and we also need to keep track of these. Typically we need to be reminded of when these important dates are approaching---the more important the event, the further in advance we wish to have our memories jogged.<br><br>Write a program that will provide such a service. The input will specify the year for which the calendar is relevant (in the range 1901 to 1999). Bear in mind that, within the range specified, all years that are divisible by 4 are leap years and hence have an extra day (February 29th) added. The output will specify ``today\'s\'\' date, a list of forthcoming events and an indication of their relative importance.<br>", input:"The first line of input will contain an integer representing the year (in the range 1901 to 1999). This will be followed by a series of lines representing anniversaries or days for which the service is requested. An anniversary line will consist of the letter `A\'; three integer numbers (D, M, P) representing the date, the month and the importance of the event; and a string describing the event, all separated by one or more spaces. P will be a number between 1 and 7 (both inclusive) and represents the number of days before the event that the reminder service should start. The string describing the event will always be present and will start at the first non-blank character after the priority. It will never be longer than 50 characters including spaces. A date line will consist of the letter `D\' and the date and month as above. All anniversary lines will precede any date lines. No line will be longer than 255 characters in total. The file will be terminated by a line consisting of a single #.<br><br>", output:"Output will consist of a series of blocks of lines, one for each date line in the input. Each block will consist of the requested date followed by the list of events for that day and as many following days as necessary. The output should specify the date of the event (D and M), right justified in fields of width 3, and the relative importance of the event. Events that happen today should be flagged as shown below, events that happen tomorrow should have P stars, events that happen the day after tomorrow should have P-1 stars, and so on. If several events are scheduled for the same day, order them by relative importance (number of stars). If there is still a conflict, order them by their appearance in the input stream. Follow the format used in the example below. Leave 1 blank line between blocks.<br><br>", sample_in:"1993\nA 23 12 5 Partner\'s birthday\nA 25 12 7    Christmas\nA 20 12 1 Unspecified Anniversary\nD 20 12\n#", sample_out:"Today is: 20 12\n 20 12 *TODAY* Unspecified Anniversary\n 23 12 ***     Partner\'s birthday\n 25 12 ***     Christmas", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:34, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（八）", author:"", tag:["TEST"]}
{pid:1460, vid:1460, oj:"hdu", title:"Beggar My Neighbour", desc:"&quot;Beggar My Neighbour\'\' (sometimes known as &quot;Strip Jack Naked\'\') is a traditional card game, designed to help teach beginners something about cards and their values. A standard deck is shuffled and dealt face down to the two players, the first card to the non-dealer, the second to the dealer, and so on until each player has 26 cards. The dealer receives the last card. The non-dealer starts the game by playing the top card of her deck (the second last card dealt) face up on the table. The dealer then covers it by playing her top card face up. Play continues in this fashion until a ``face\'\' card (Ace, King, Queen or Jack) is played. The next player must then ``cover\'\' that card, by playing one card for a Jack, two for a Queen, three for a King and four for an Ace. If a face card is played at any stage during this sequence, play switches and the other player must cover that card. When this sequence has ended, the player who exposed the last face card takes the entire heap, placing it face down under her existing deck. She then starts the next round by playing one card face up as before, and play continues until one player cannot play when called upon to do so, because they have no more cards.<br><br>Write a program that will simulate playing this game. Remember that a standard deck (or pack) of cards contains 52 cards. These are divided into 4 suits - Spades, Hearts, Diamonds and Clubs. Within each suit there are 13 cards - Ace (A), 2-9, Ten (T), Jack (J), Queen (Q) and King (K).<br><br>", input:"Input will consist of a series of decks of cards. Each deck will give the cards in order as they would be dealt (that is in the example deck below, the non-dealer would start the game by playing the H2). Decks will occupy 4 lines with 13 cards on each. The designation of each card will be the suit (S, H, D, C) followed by the rank (A, 2-9, T, J, Q, K). There will be exactly one space between cards. The file will be terminated by a line consisting of a single #.<br>", output:"Output will consist of a series of lines, one for each deck in the input. Each line will consist of the number of the winning player (1 is the dealer, 2 is the first to play) and the number of cards in the winner\'s hand (ignoring any on the stack), right justified in a field of width 3.<br>", sample_in:"HA H3 H4 CA SK S5 C5 S6 C4 D5 H7 HJ HQ\nD4 D7 SJ DT H6 S9 CT HK C8 C9 D6 CJ C6\nS8 D8 C2 S2 S3 C7 H5 DJ S4 DQ DK D9 D3\nH9 DA SA CK CQ C3 HT SQ H8 S7 ST H2 D2\n#", sample_out:"1 44", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:22, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（八）", author:"", tag:["TEST"]}
{pid:1461, vid:1461, oj:"hdu", title:"Rotations and Reflections", desc:"Many games, tricks and puzzles depend on determining whether two patterns on a rectangular grid are the ``same\'\' or not. For instance, the 96 different ways of arranging 8 queens safely on a chessboard can be shown to consist of rotations and/or reflections of only 12 basic patterns.<br><br>Write a program that will read in pairs of patterns and determine whether there is a simple transformation that will convert one into the other. Because symmetrical patterns bear many relationships to each other, the transformations must be checked in a specific order. The possible transformations (in order) are:<br><br>Preservation:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The patterns are identical  <br><br>90 degree rotation  :&nbsp;&nbsp;&nbsp;&nbsp;The pattern was rotated clockwise by 90 degrees  <br><br>180 degree rotation:&nbsp;&nbsp;&nbsp;&nbsp;The pattern was rotated clockwise by 180 degrees  <br><br>270 degree rotation:&nbsp;&nbsp;&nbsp;&nbsp;The pattern was rotated clockwise by 270 degrees  <br><br>Reflection:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The pattern was reflected about the horizontal axis (effectively by a mirror held at the top of the pattern) <br><br>Combination:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A reflection (as above), followed by one of the above rotations <br><br>Improper:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The patterns do not match under any of the above transformations <br>", input:"Input will consist of a series of pairs of patterns. Each set will consist of a line containing a single integer N (2 &lt;= N &lt;= 10) giving the size of the patterns, followed by N lines. Each line will consist of N dots or `x\'s (specifying a line of the original pattern), a space, and another set of N dots and `x\'s (specifying a line of the transformed pattern). The file will be terminated by a line consisting of a single zero (0).<br><br>", output:"Output will consist of a series of lines, one for each pattern pair in the input. Each line will consist of one of the following: `Preserved\', `Rotated through m degrees\' (where m is one of 90, 180 or 270), `Reflected\', `Reflected and rotated through m degrees\', `Improper\'.<br><br>", sample_in:"5\nx...x ....x\n.x... ...x.\n...x. .x...\n..x.x ..x..\n....x xx..x\n2\nx. xx\nx. xx\n4\n..x. ...x\nxx.. ....\n.... xx..\n...x ..x.\n4\n.x.. ..x.\n.x.x x...\n.... ..xx\n..x. ....\n0", sample_out:"Rotated through 90 degrees\nImproper\nReflected\nReflected and rotated through 270 degrees", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:40, vtotal_submit:93, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（八）", author:"", tag:["TEST"]}
{pid:1462, vid:1462, oj:"hdu", title:"Word Crosses", desc:"A `word cross\' is formed by printing a pair of words, the first horizontally and the second vertically, so that they share a common letter. A `leading word cross\' is one where the common letter is as near as possible to the beginning of the horizontal word, and, for this letter, as close as possible to the beginning of the vertical word. Thus DEFER and PREFECT would cross on the first \'E\' in each word, PREFECT and DEFER would cross on the \'R\'. `Double leading word crosses\' use two pairs of words arranged so that the two horizontal words are on the same line and each pair forms a leading word cross.<br><br>Write a program that will read in sets of four words and form them (if possible) into double leading word crosses.<br><br>", input:"Input will consist of a series of lines, each line containing four words (two pairs). A word consists of 1 to 10 upper case letters, and will be separated from its neighbours by at least one space. The file will be terminated by a line consisting of a single #.<br>", output:"Output will consist of a series of double leading word crosses as defined above. Leave exactly three spaces between the horizontal words. If it is not possible to form both crosses, write the message `Unable to make two crosses\'. Leave 1 blank line between output sets.<br><br>", sample_in:"MATCHES CHEESECAKE PICNIC EXCUSES\nPEANUT BANANA VACUUM  GREEDY\nA  VANISHING   LETTER TRICK\n#", sample_out:" C\n H\n E\n E\n S\n E          E\n C          X\nMATCHES   PICNIC\n K          U\n E          S\n            E\n            S\n\nUnable to make two crosses\n\nV\nA   LETTER\nN     R\nI     I\nS     C\nH     K\nI\nN\nG", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:74, vtotal_submit:273, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（八）", author:"", tag:["TEST"]}
{pid:1463, vid:1463, oj:"hdu", title:"Anniversaries", desc:"As far as our perceptions are concerned, a year runs from the midnight beginning the first of January to the midnight ending the 31st of December. Thus we can say that a year consists of:<br>12 months (of differing lengths) <br>52 (and a bit) weeks <br>365 days <br>8,760 hours <br>525,600 minutes <br>31,536,000 seconds. <br>Most of these numbers need to be adjusted in leap years.<br><br>A k\'th anniversary of a date is usually defined as the same date (month and day) k years later, thus the 10th anniversary of 17th May 1983 is 17th May 1993. However we can also define other types of `versaries\' - the 1 week-versary of 28th February 1984 is 6th March 1984.<br><br>If we define a convention of naming dates (and times if necessary) by specifying successively smaller periods separated by colons (that is as yyyy:mm:dd:hh:mm:ss) we can label the units using the same convention, that is y for years, d for days, w for weeks, h for hours, m for minutes and s for seconds (we cannot use months, they are too variable). We can then summarise the above examples as:<br>1983:5:17 + 10y -&gt; 1993:5:17<br>1984:2:28 + 1w -&gt; 1984:3:6 <br>Note that the specification of an event has to be as least as precise (that is employ units at least as small) as the specification of the desired versary.<br><br>Write a program that will read in details of events and desired versaries and calculate the required date (and time if necessary). Bear in mind that a year is a leap year if it is divisible by 4 unless it is divisible by 100 as well, in which case it is only a leap year if it is divisible by 400; thus 1984 and 2000 are leap years, but 1900 is not.<br><br>", input:"Input will consist of a series of lines, each line a specification of an event and a desired versary. The input will follow the format shown below, except that where one space is shown there may be more than one space. The event will be specified at least to the same precision as the desired versary. All events will start in this century, and no versary will be more than 100 years (or equivalent). Note that midnight starts a day rather than terminates it and thus is written as 0:0:0 and not as 24:0:0. The file will be terminated by a line consisting of a single 0.<br><br>", output:"Output will consist of a series of lines, one for each line of the input. Each line will consist of the specification of the desired versary, to the same precision as given in the input, in the format shown below.<br><br>", sample_in:"1983:5:17    10 y\n1984:2:28    1   w\n1993:7:25:13:23 5 h\n0", sample_out:"1983:5:17 + 10y -> 1993:5:17\n1984:2:28 + 1w -> 1984:3:6\n1993:7:25:13:23 + 5h -> 1993:7:25:18:23", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5, vtotal_submit:19, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（八）", author:"", tag:["TEST"]}
{pid:1464, vid:1464, oj:"hdu", title:"Telephone Numbers", desc:"Many New Zealand telephones now have letters printed in association with the digits. This allows firms and organisations to ``customise\'\' their telephone numbers by incorporating their name or some other word. Thus one might be able to obtain information on training as a nurse by dialling 0-800-NURSING, or find out about courses at local universities by dialling 0-800-4-OTAGOU or 0-800-AUCKUNI.<br><br>There are two related problems associated with this approach - one is relatively easy to solve while the other is a little more difficult. If one can elicit the cooperation of one\'s local telephone company, then one can merely purchase a suitable telephone number that matches your word. However, if you already have a telephone number, then one needs to find the `best\' word that matches it.<br><br>Write a program that will do this. Input will be a list of words from a dictionary and a list of telephone numbers. Your program must determine suitable candidate words that fit all or part of the given telephone numbers. Since suitability is somewhat subjective the only criterion you should apply is length - only the longest matching words are considered candidates. Note also that matches can only apply at the end, sequences such as 5COSC23 are unacceptable.<br><br>For this problem assume the following allocation of letters to digits: <br><br>1  Q Z      2  A B C    3  D E F <br>4  G H I    5  J K L    6  M N O <br>7  P R S    8  T U V    9  W X Y <br><br>", input:"Input will consist of two parts. The first part will contain up to 20000 words ranging in length from 4 to 7 upper case letters, one word per line. These words form the dictionary, and will not necessarily be in English. The rest of the file will contain a series of telephone numbers, each containing 7 digits and punctuated conventionally. The file will be terminated by a line consisting of a single #.<br><br>", output:"Output will consist of a series of lines, one for each number in the input. Each line will consist of the original telephone number, a colon, a space and one or more words or number-word combinations. There must be a hyphen between numbers and letters. If there are several matching words, the words should appear in alphabetic sequence. If there are no matching words, then the message ``No words\'\' should appear. Follow the spacing and layout shown in the example.<br><br>", sample_in:"OTAGOU\nUBINT\nAUCKUNI\nMUBGOT\n468-2468\n123-4567\n282-5864\n#", sample_out:"468-2468: 4-MUBGOT 4-OTAGOU\n123-4567: No words\n282-5864: AUCKUNI", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:75, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（八）", author:"", tag:["TEST"]}
{pid:1465, vid:1465, oj:"hdu", title:"不容易系列之一", desc:"大家常常感慨，要做好一件事情真的不容易，确实，失败比成功容易多了！<br>做好“一件”事情尚且不易，若想永远成功而总从不失败，那更是难上加难了，就像花钱总是比挣钱容易的道理一样。<br>话虽这样说，我还是要告诉大家，要想失败到一定程度也是不容易的。比如，我高中的时候，就有一个神奇的女生，在英语考试的时候，竟然把40个单项选择题全部做错了！大家都学过概率论，应该知道出现这种情况的概率，所以至今我都觉得这是一件神奇的事情。如果套用一句经典的评语，我们可以这样总结：一个人做错一道选择题并不难，难的是全部做错，一个不对。<br><br>不幸的是，这种小概率事件又发生了，而且就在我们身边：<br>事情是这样的——HDU有个网名叫做8006的男性同学，结交网友无数，最近该同学玩起了浪漫，同时给n个网友每人写了一封信，这都没什么，要命的是，他竟然把所有的信都装错了信封！注意了，是全部装错哟！<br><br>现在的问题是：请大家帮可怜的8006同学计算一下，一共有多少种可能的错误方式呢？", input:"输入数据包含多个多个测试实例，每个测试实例占用一行，每行包含一个正整数n（1&lt;n&lt;=20），n表示8006的网友的人数。", output:"对于每行输入请输出可能的错误方式的数量，每个实例的输出占用一行。", sample_in:"2\n3", sample_out:"1\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4380, vtotal_submit:12968, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（九）", author:"", tag:["TEST"]}
{pid:1466, vid:1466, oj:"hdu", title:"计算直线的交点数", desc:"平面上有n条直线，且无三线共点，问这些直线能有多少种不同交点数。<br>比如,如果n=2,则可能的交点数量为0(平行)或者1(不平行)。", input:"输入数据包含多个测试实例,每个测试实例占一行,每行包含一个正整数n（n&lt;=20）,n表示直线的数量.<br>", output:"每个测试实例对应一行输出，从小到大列出所有相交方案，其中每个数为可能的交点数,每行的整数之间用一个空格隔开。", sample_in:"2\n3", sample_out:"0 1\n0 2 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2441, vtotal_submit:7600, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（九）", author:"", tag:["TEST"]}
{pid:1467, vid:1467, oj:"hdu", title:"Triangles", desc:"It is always very nice to have little brothers or sisters. You can tease them, lock them in the bathroom or put red hot chili in their sandwiches. But there is also a time when all meanness comes back! <br><br>As you know, in one month it is Christmas and this year you are honored to make the big star that will be stuck on the top of the Christmas tree. But when you get the triangle-patterned silver paper you realize that there are many holes in it. Your little sister has already cut out smaller triangles for the normal Christmas stars. Your only chance is to find an algorithm that tells you for each piece of silver paper the size of the largest remaining triangle. <br><br>Given a triangle structure with white and black fields inside you must find the largest triangle area of white fields, as shown in the following figure. <br><img src=data/images/1467-1.gif><br>", input:"The input contains several triangle descriptions. The first line of each description contains an integer n (1 &lt;= n &lt;= 100), which gives the height of the triangle. The next n lines contain characters of the set {space, #, -} representing the rows of the triangle, where `#\' is a black and `-\' a white field. The spaces are used only to keep the triangle shape in the input by padding at the left end of the lines. (Compare with the sample input. The first test case corresponds to the figure.) <br>For each triangle, the number of the characters `#\' and `-\' per line is odd and decreases from 2n - 1 down to 1. <br><br>The input is terminated by a description starting with n = 0. <br>", output:"For each triangle in the input, first output the number of the triangle, as shown in the sample output. Then print the line ``The largest triangle area is a.\'\', where a is the number of fields inside the largest triangle that consists only of white fields. Note that the largest triangle can have its point at the top, as in the second case of the sample input. <br><br>Output a blank line after each test case. <br><br>", sample_in:"5\n#-##----#\n -----#-\n  ---#-\n   -#-\n    -\n4\n#-#-#--\n #---#\n  ##-\n   -\n0", sample_out:"Triangle #1\nThe largest triangle area is 9.\n\nTriangle #2\nThe largest triangle area is 4.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:77, vtotal_submit:255, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（九）", author:"", tag:["TEST"]}
{pid:1468, vid:1468, oj:"hdu", title:"Instant Complexity", desc:"Analyzing the run-time complexity of algorithms is an important tool for designing efficient programs that solve a problem. An algorithm that runs in linear time is usually much faster than an algorithm that takes quadratic time for the same task, and thus should be preferred. <br><br>Generally, one determines the run-time of an algorithm in relation to the `size\' n of the input, which could be the number of objects to be sorted, the number of points in a given polygon, and so on. Since determining a formula dependent on n for the run-time of an algorithm is no easy task, it would be great if this could be automated. Unfortunately, this is not possible in general, but in this problem we will consider programs of a very simple nature, for which it is possible. Our programs are built according to the following rules (given in BNF), where &lt; number &gt; can be any non-negative integer: <br><br>&lt; Program &gt; ::= &quot;BEGIN&quot; &lt; Statementlist &gt; &quot;END&quot; <br>&lt; Statementlist &gt; ::= &lt; Statement &gt; | &lt; Statement &gt; &lt; Statementlist &gt; <br>&lt; Statement &gt; ::= &lt; LOOP-Statement &gt; | &lt; OP-Statement &gt; <br>&lt; LOOP-Statement &gt; ::= &lt; LOOP-Header &gt; &lt; Statementlist &gt; &quot;END&quot; <br>&lt; LOOP-Header &gt; ::= &quot;LOOP&quot; &lt; number &gt; | &quot;LOOP n&quot; <br>&lt; OP-Statement &gt; ::= &quot;OP&quot; &lt; number &gt;<br><br>The run-time of such a program can be computed as follows: the execution of an OP-statement costs as many time-units as its parameter specifies. The statement list enclosed by a LOOP-statement is executed as many times as the parameter of the statement indicates, i.e., the given constant number of times, if a number is given, and n times, if n is given. The run-time of a statement list is the sum of the times of its constituent parts. The total run-time therefore generally depends on n. <br>", input:"The input starts with a line containing the number k of programs in the input. Following this are k programs which are constructed according to the grammar given above. Whitespace and newlines can appear anywhere in a program, but not within the keywords BEGIN, END, LOOP and OP or in an integer value. The nesting depth of the LOOP-operators will be at most 10. <br><br>", output:"For each program in the input, first output the number of the program, as shown in the sample output. Then output the run-time of the program in terms of n; this will be a polynomial of degree Y &lt;= 10. Print the polynomial in the usual way, i.e., collect all terms, and print it in the form ``Runtime = a*n^10+b*n^9+ . . . +i*n^2+ j*n+k\'\', where terms with zero coefficients are left out, and factors of 1 are not written. If the runtime is zero, just print ``Runtime = 0\'\'. <br>Output a blank line after each test case. <br>", sample_in:"2\nBEGIN\nLOOP n\nOP 4\nLOOP 3\nLOOP n\nOP 1\nEND\nOP 2\nEND\nOP 1\nEND\nOP 17\nEND\nBEGIN\nOP 1997 LOOP n LOOP n OP 1 END END\nEND", sample_out:"Program #1\nRuntime = 3*n^2+11*n+17\n\nProgram #2\nRuntime = n^2+1997", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:24, vtotal_submit:86, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（九）", author:"", tag:["TEST"]}
{pid:1469, vid:1469, oj:"hdu", title:"Video Surveillance", desc:"A friend of yours has taken the job of security officer at the Star-Buy Company, a famous depart- ment store. One of his tasks is to install a video surveillance system to guarantee the security of the customers (and the security of the merchandise of course) on all of the store\'s countless floors. As the company has only a limited budget, there will be only one camera on every floor. But these cameras may turn around to look in every direction. <br><br>The first problem is to choose where to install the camera for every floor. The only requirement is that every part of the room must be visible from there. In the following figure the left floor can be completely surveyed from the position indicated by a dot, while for the right floor, there is no such position, the given position failing to see the lower left part of the floor. <br><br><img src=data/images/1469-1.gif><br><br>Before trying to install the cameras, your friend first wants to know whether there is indeed a suitable position for them. He therefore asks you to write a program that, given a ground plan, de- termines whether there is a position from which the whole floor is visible. All floor ground plans form rectangular polygons, whose edges do not intersect each other and touch each other only at the corners. <br><br>", input:"The input contains several floor descriptions. Every description starts with the number n of vertices that bound the floor (4 &lt;= n &lt;= 100). The next n lines contain two integers each, the x and y coordinates for the n vertices, given in clockwise order. All vertices will be distinct and at corners of the polygon. Thus the edges alternate between horizontal and vertical. <br><br>A zero value for n indicates the end of the input. <br>", output:"For every test case first output a line with the number of the floor, as shown in the sample output. Then print a line stating &quot;Surveillance is possible.\'\' if there exists a position from which the entire floor can be observed, or print &quot;Surveillance is impossible.\'\' if there is no such position. <br><br>Print a blank line after each test case. ", sample_in:"4\n0 0\n0 1\n1 1\n1 0\n8\n0 0\n0 2\n1 2\n1 1\n2 1\n2 2\n3 2\n3 0\n0", sample_out:"Floor #1\nSurveillance is possible.\n\nFloor #2\nSurveillance is impossible.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:28, vtotal_submit:52, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（九）", author:"", tag:["TEST"]}
{pid:1470, vid:1470, oj:"hdu", title:"Island of Logic", desc:"The Island of Logic has three kinds of inhabitants: divine beings that always tell the truth, evil beings that always lie, and human beings that are truthful during the day and lie at night. Every inhabitant recognizes the type of every other inhabitant. <br>A social scientist wants to visit the island. Because he is not able to distinguish the three kinds of beings only from their looks, he asks you to provide a communication analyzer that deduces facts from conversations among inhabitants. The interesting facts are whether it is day or night and what kind of beings the speakers are. <br>", input:"The input contains several descriptions of conversations. Each description starts with an integer n, the number of statements in the conversation. The following n lines each contain one statement by an inhabitant. Every statement line begins with the speaker\'s name, one of the capital letters A, B, C, D, E, followed by a colon `:\'. Next is one of the following kinds of statements: <br><br>I am [not] ( divine | human | evil | lying ). <br><br>X is [not] ( divine | human | evil | lying ). <br><br>It is ( day | night ). <br><br>Square brackets [] mean that the word in the brackets may or may not appear, round brackets () mean that exactly one of the alternatives separated by | must appear. X stands for some name from A, B, C, D, E. There will be no two consecutive spaces in any statement line, and at most 50 statements in a conversation. <br><br>The input is terminated by a test case starting with n = 0. <br><br>", output:"For each conversation, first output the number of the conversation in the format shown in the sample output. Then print &quot;This is impossible.\'\', if the conversation cannot happen according to the rules or &quot;No facts are deducible.\'\', if no facts can be deduced. Otherwise print all the facts that can be deduced. Deduced facts should be printed using the following formats: <br><br>X is ( divine | human | evil ). <br><br>It is ( day | night ). <br><br>X is to be replaced by a capital letter speaker name. Facts about inhabitants must be given first (in alphabetical order), then it may be stated whether it is day or night. <br><br>The output for each conversation must be followed by a single blank line. <br>", sample_in:"1\nA: I am divine.\n1\nA: I am lying.\n1\nA: I am evil.\n3\nA: B is human.\nB: A is evil.\nA: B is evil.\n0", sample_out:"Conversation #1\nNo facts are deducible.\n\nConversation #2\nThis is impossible.\n\nConversation #3\nA is human.\nIt is night.\n\nConversation #4\nA is evil.\nB is divine.\n\n\nReasoning made easy \n\nTo make things clearer, we will show the reasoning behind the third input example, where A says ``I am evil.\'\'.\n What can be deduced from this? \nObviously A cannot be divine, since she would be lying, similarly A cannot be evil, since she would tell the truth. \nTherefore, A must be human, moreover, since she is lying, it must be night. So the correct output is as shown. \n\nIn the fourth input example, it is obvious that A is lying since her two statements are contradictory. \nSo, B can be neither human nor evil, and consequently must be divine. B always tells the truth, thus A must be evil. Voil‘a! ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:12, vtotal_submit:35, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（九）", author:"", tag:["TEST"]}
{pid:1471, vid:1471, oj:"hdu", title:"MBone", desc:"MBone is an abbreviation for `Multicast Backbone\'. It is the realization of a virtual network built on top of the Internet protocol. In contrast to connection-oriented transmission of data (unicast) and the transmission from a sender to all destinations in a network (broadcast) it provides the multicast facility, a facility to send data to all hosts that have joined a so-called `multicast group\'. All members of a group are able to send data to and receive data from the group. <br>Your program is to simulate a simplified version of the MBone. In our setting MBone is a combination of multicast routers and hosts, each host belonging to one of the routers. A router and the hosts that belong to it are called an island. Routers are connected via tunnels which are simple communication channels: data packets sent from one side through the tunnel are received on the other side. <br><br>In order to become a member of a multicast group, a host must send a protocol message to its corresponding multicast router specifying the address of the group it wants to join. As a consequence the host will receive all data packets sent to this group. <br><br>In order to send a data packet to a multicast group, a host sends the packet to the multicast router within its island. Every multicast router duplicates all received packets and sends them through each of its outgoing tunnels. After that it sends copies of the packet to all hosts on its island that have joined the group specified in the packet. <br><br>The distribution range of a packet within MBone is restricted through an integer value called TTL (Time To Live) which is assigned to every packet. If a packet is sent through a tunnel its TTL is decremented by the threshold (an integer value) specified for each tunnel. A packet will not be sent over a tunnel if the TTL of the packet is lower than the threshold of the tunnel. <br><br><img src=data/images/1471-1.gif><br>", input:"The input to your program will consist of several descriptions of MBone networks. The first part of each description defines the network topology, and the second part describes the activities on this network. The first part starts with a line containing a single integer m (1 &lt; m &lt; 10), the number of islands in the network. A value of m = 0 indicates the end of input. The following lines contain the descriptions for the m islands. <br><br>Each island description starts with a line containing the name of the multicast router (given as a string of at most 20 non-blank characters) followed by an integer for the number of remaining lines in the island description. These lines can be of two kinds:<br><br>Host belonging to island: H &lt;Host Address&gt; <br><br>Tunnel: T &lt;Threshold&gt; &lt;Dest. Name&gt; <br><br>&lt; Host Address &gt; and &lt; Threshold &gt; are positive integer values specifying the address of the host and the threshold of the tunnel, respectively. &lt; Dest: Name &gt; is the name of the destination router at the other end of the tunnel, which is always different from the current router. <br><br>The first line of the second part contains a single integer of at most 1000 indicating the number of lines in the following activity description. Each one of these lines describes the activity of a host: join a group, leave a group or send a packet to a group. <br><br>Join a group: J &lt;Host Address&gt; &lt;Group Address&gt; <br><br>Leave a group: L &lt;Host Address&gt; &lt;Group Address&gt; <br><br>Send a packet to a group: S &lt;Host Address&gt; &lt;Group Address&gt; &lt;Packet ID&gt; &lt;TTL&gt; <br><br>The &lt; Group Address &gt;, &lt; Packet ID &gt; and &lt; TTL &gt; are positive integer values with the obvious meaning. All names used for the routers and all host addresses used in a scenario, as well as all packet IDs are unique. TTLs of packets will be at most 1000. There will be at most 50 hosts and 100 tunnels in the network and at most 20 active groups (i.e, groups for which there is at least one member host) at any time. No host will try to leave a group that it is not in, nor try to join a group it is in.<br><br>", output:"In the output you have to print the packets received by the hosts in the network for each scenario. If hosts receive multiple copies of a packet (routed via different paths), they keep only the copy with the highest TTL (reaching them via the `shortest\' path). <br><br>For each network description, first output the number of the network, as shown in the sample output. Each one of the subsequent lines is of the format &lt;Host Address&gt; &lt;Packet ID&gt; &lt;TTL&gt;, meaning that host &lt;Host Address&gt; received the packet having the ID &lt;Packet ID&gt; with the remaining TTL &lt;TTL&gt;. The three entries of the line should be separated by single blank characters. The output must be sorted in ascending order: first by the host address and second by the packet ID. <br><br>Output a blank line after each test case. <br><br>", sample_in:"3\nNuremberg 3\nT 8 Munich\nH 3768\nH 3669\nMunich 6\nH 721\nH 722\nH 723\nT 6 Nuremberg\nH 857\nT 9 Ulm\nUlm 5\nH 51225\nH 51226\nH 51227\nT 15 Nuremberg\nT 9 Munich\n14\nJ 51227 26\nJ 3768 27\nJ 723 26\nJ 3768 26\nS 3768 26 1000 17\nJ 857 26\nS 3768 26 320 16\nJ 722 26\nL 857 26\nS 51227 26 1001 37\nS 723 26 533 5\nL 51227 26\nL 3768 27\nL 723 26\n0", sample_out:"Network #1\n722 533 5\n722 1001 28\n723 320 8\n723 533 5\n723 1000 9\n723 1001 28\n857 320 8\n3768 320 16\n3768 1000 17\n3768 1001 22\n51227 1000 0\n51227 1001 37", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2, vtotal_submit:6, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（九）", author:"", tag:["TEST"]}
{pid:1472, vid:1472, oj:"hdu", title:"There\'s Treasure Everywhere!", desc:"Finding buried treasures is simple: all you need is a map! The pirates in the Caribbean were famous for their enormous buried treasures and their elaborate maps. The maps usually read like ``Start at the lone palm tree. Take three steps towards the forest, then seventeen step towards the small spring, . . . blahblah . . . , finally six steps toward the giant rock. Dig right here, and you will find my treasure!\'\' Most of these directions just boil down to taking the mentioned number of steps in one of the eight principal compass directions (depicted in the left of the figure). <br>Obviously, following the paths given by these maps may lead to an interesting tour of the local scenery, but if one is in a hurry, there is usually a much faster way: just march directly from your starting point to the place where the treasure is buried. Instead of taking three steps north, one step east, one step north, three steps east, two steps south and one step west (see figure), following the direct route (dashed line in figure) will result in a path of about 3.6 steps. <br><br>You are to write a program that computes the location of and distance to a buried treasure, given a `traditional\' map. <br><img src=data/images/1472_1.gif><br>", input:"The input contains several strings, each one on a line by itself, and each one consisting of at most 200 characters. The last string will be END, signaling the end of the input. All other strings describe one treasure map each, according to the following format: <br><br>The description is a comma-separated list of pairs of lengths (positive integers less than 1000) and directions (N (north), NE (northeast), E (east), SE (southeast), S (south), SW (southwest), W (west) or NW (northwest)). For example, 3W means 3 steps to the west, and 17NE means 17 steps to the northeast. A full stop (.) terminates the description, which contains no blanks. <br>", output:"For every map description in the input, first print the number of the map, as shown in the sample output. Then print the absolute coordinates of the treasure, in the format ``The treasure is located at (x,y).\'\'. The coordinate system is oriented such that the x-axis points east, and the y-axis points north. The path always starts at the origin (0,0). <br><br>On the next line print the distance to that position from the point (0,0), in the format ``The distance to the treasure is d.\'\'. The fractional values x, y, d must be printed exact to three digits to the right of the decimal point. <br><br>Print a blank line after each test case. <br>", sample_in:"3N,1E,1N,3E,2S,1W.\n10NW.\nEND", sample_out:"Map #1\nThe treasure is located at (3.000,2.000).\nThe distance to the treasure is 3.606.\n\nMap #2\nThe treasure is located at (-7.071,7.071).\nThe distance to the treasure is 10.000.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:28, vtotal_submit:53, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southwestern Europe 1997", author:"", tag:["TEST"]}
No Such Problem Called HDU 1473.<br>
{pid:1474, vid:1474, oj:"hdu", title:"Always On the Run", desc:"Screeching tires. Searching lights. Wailing sirens. Police cars everywhere. Trisha Quickfinger did it again! Stealing the `Mona Lisa\' had been more difficult than planned, but being the world\'s best art thief means expecting the unexpected. So here she is, the wrapped frame tucked firmly under her arm, running to catch the northbound metro to Charles-de-Gaulle airport. <br>But even more important than actually stealing the painting is to shake off the police that will soon be following her. Trisha\'s plan is simple: for several days she will be flying from one city to another, making one flight per day. When she is reasonably sure that the police has lost her trail, she will fly to Atlanta and meet her `customer\' (known only as Mr. P.) to deliver the painting. <br><br>Her plan is complicated by the fact that nowadays, even when you are stealing expensive art, you have to watch your spending budget. Trisha therefore wants to spend the least money possible on her escape flights. This is not easy, since airlines prices and flight availability vary from day to day. The price and availability of an airline connection depends on the two cities involved and the day of travel. Every pair of cities has a `flight schedule\' which repeats every few days. The length of the period may be different for each pair of cities and for each direction. <br><br>Although Trisha is a good at stealing paintings, she easily gets confused when booking airline flights. This is where you come in. <br><br>", input:"The input contains the descriptions of several scenarios in which Trisha tries to escape. Every description starts with a line containing two integers n and k. n is the number of cities through which Trisha\'s escape may take her, and k is the number of flights she will take. The cities are numbered 1, 2, ..., n, where 1 is Paris, her starting point, and n is Atlanta, her final destination. The numbers will satisfy 2 &lt;= n &lt;= 10 and 1 &lt;= k &lt;= 1000. <br>Next you are given n(n - 1) flight schedules, one per line, describing the connection between every possible pair of cities. The first n - 1 flight schedules correspond to the flights from city 1 to all other cities (2, 3, ..., n), the next n - 1 lines to those from city 2 to all others (1, 3, 4, ..., n), and so on. <br><br>The description of the flight schedule itself starts with an integer d, the length of the period in days, with 1 &lt;= d &lt;= 30. Following this are d non-negative integers, representing the cost of the flight between the two cities on days 1, 2, ..., d. A cost of 0 means that there is no flight between the two cities on that day. <br><br>So, for example, the flight schedule ``3 75 0 80\'\' means that on the first day the flight costs 75, on the second day there is no flight, on the third day it costs 80, and then the cycle repeats: on the fourth day the flight costs 75, there is no flight on the fifth day, etc. <br><br>The input is terminated by a scenario having n = k = 0. <br>", output:"For each scenario in the input, first output the number of the scenario, as shown in the sample output. If it is possible for Trisha to travel k days, starting in city 1, each day flying to a different city than the day before, and finally (after k days) arriving in city n, then print ``The best flight costs x.\'\', where x is the least amount that the k flights can cost. <br><br>If it is not possible to travel in such a way, print ``No flight possible.\'\'. <br><br>Print a blank line after each scenario. <br>", sample_in:"3 6\n2 130 150\n3 75 0 80\n7 120 110 0 100 110 120 0\n4 60 70 60 50\n3 0 135 140\n2 70 80\n2 3\n2 0 70\n1 80\n0 0", sample_out:"Scenario #1\nThe best flight costs 460.\n\nScenario #2\nNo flight possible.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:24, vtotal_submit:42, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southwestern Europe 1997", author:"", tag:["TEST"]}
{pid:1475, vid:1475, oj:"hdu", title:"Keeps Going and Going and ...", desc:"Lazy functional languages like Haskell and Miranda support features that are not found in other programming languages, including infinite lists. Consider the following simple (and useful) recursive declaration: <br>letrec<br>&nbsp;count n = cons n (count (n+1))<br>in<br>&nbsp;count 0<br><br>The function cons constructs lists, so the above declaration creates the following structure: <br><br>cons 0 (count 1)<br>= cons 0 (cons 1 (count 2))<br>= cons 0 (cons 1 (cons 2 ...))<br>= [0,1,2,...]<br><br>Lazy languages can do this because they only evaluate expressions that are actually used. If a program creates an infinite list and only looks at items 2 and 3 in it, the values in positions 0 and 1 are never evaluated and the list structure is only evaluated so far as the fourth node. <br><br><br>It is also possible to use more than one function to build an infinite list. Here is a declaration that creates the list [&quot;even&quot;,&quot;odd&quot;,&quot;even&quot;,...]: <br><br>letrec<br>&nbsp;even = cons &quot;even&quot; odd<br>&nbsp;odd = cons &quot;odd&quot; even<br>in<br>&nbsp;even<br><br>There are also functions that manipulate infinite lists. The functions take and drop can be used to remove elements from the start of the list, returning the (removed) front elements or the remainder of the list, respectively. Another useful function is zip, which combines two lists like the slider on a zipper combines the teeth. For example, <br><br>zip (count 0) (count 10) = [0,10,1,11,2,12,...]<br><br>Your task is to implement a subset of this functionality. <br><br><br>This problem contains multiple test cases!<br><br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br>", input:"The first line of input consists of two positive integers, n and m. n is the number of declarations to follow and m is the number of test cases. <br><br>Each declaration takes the form name = expr. There are two forms for expr : zip name1 name2 and x0 x1 ... xi name3. In the first case, name is the result of zipping name1 and name2 together. The other case defines the first i + 1 non-negative integers in the list name (where i is at least 0) and name3 is the name of the list that continues it (mandatory--all lists will be infinite). <br><br>The test cases take the form name s e, where s and e are non-negative integers, s &lt;= e and e - s &lt; 250. <br><br>No line of input will be longer than 80 characters. Names consist of a single capital letter. <br>", output:"For each test case, print the integers in positions s to e of the list name. List elements are numbered starting with 0. <br>", sample_in:"5 3\nS = 4 3 2 1 A\nO = 1 O\nE = 0 E\nA = zip E O\nZ = zip Z S\nA 43455436 43455438\nS 2 5\nZ 1 10", sample_out:"0 1 0\n2 1 0 1\n4 4 3 4 2 3 1 4 0 2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1, vtotal_submit:10, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（十）", author:"", tag:["TEST"]}
{pid:1476, vid:1476, oj:"hdu", title:"Scheduling Lectures", desc:"You are teaching a course and must cover n (1 &lt;= n &lt;= 1000) topics. The length of each lecture is L (1 &lt;= L &lt;= 500) minutes. The topics require t1, t2, ..., tn (1 &lt;= ti &lt;= L) minutes each. For each topic, you must decide in which lecture it should be covered. There are two scheduling restrictions: <br>1. Each topic must be covered in a single lecture. It cannot be divided into two lectures. This reduces discontinuity between lectures. <br>2. Topic i must be covered before topic i + 1 for all 1 &lt;= i &lt; n. Otherwise, students may not have the prerequisites to understand topic i + 1.<br><br>With the above restrictions, it is sometimes necessary to have free time at the end of a lecture. If the amount of free time is at most 10 minutes, the students will be happy to leave early. However, if the amount of free time is more, they would feel that their tuition fees are wasted. Therefore, we will model the dissatisfaction index (DI) of a lecture by the formula: <br><br><img src=data/images/1476-1.gif><br><br>where C is a positive integer, and t is the amount of free time at the end of a lecture. The total dissatisfaction index is the sum of the DI for each lecture.<br><br>For this problem, you must find the minimum number of lectures that is needed to satisfy the above constraints. If there are multiple lecture schedules with the minimum number of lectures, also minimize the total dissatisfaction index. <br><br><br>This problem contains multiple test cases!<br><br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br><br>", input:"The input consists of a number of cases. The first line of each case contains the integer n, or 0 if there are no more cases. The next line contains the integers L and C. These are followed by n integers t1, t2, ..., tn. <br><br>", output:"For each case, print the case number, the minimum number of lectures used, and the total dissatisfaction index for the corresponding lecture schedule on three separate lines. Output a blank line between cases. <br><br>", sample_in:"6\n30 15\n10\n10\n10\n10\n10\n10\n10\n120 10\n80\n80\n10\n50\n30\n20\n40\n30\n120\n100\n0", sample_out:"Case 1:\n\nMinimum number of lectures: 2\nTotal dissatisfaction index: 0\n\nCase 2:\n\nMinimum number of lectures: 6\nTotal dissatisfaction index: 2700", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:33, vtotal_submit:91, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（十）", author:"", tag:["TEST"]}
{pid:1477, vid:1477, oj:"hdu", title:"Metal Cutting", desc:"In order to build a ship to travel to Eindhoven, The Netherlands, various sheet metal parts have to be cut from rectangular pieces of sheet metal. Each part is a convex polygon with at most 8 vertices. Each rectangular piece of sheet metal has width n and height m, so that the four corners of the sheet can be specified by the Cartesian coordinates (0, 0), (0, m), (n, m) and (n, 0) in clockwise order. The cutting machine available can make only straight-line cuts completely through the metal. That is, it cannot cut halfway through the sheet, turn, and then cut some more. You are asked to write a program to determine the minimum total length of cuts this machine has to make in order to cut out the polygon. The cuts must be along the edges of the poligon. <br><br>For example, if n = m = 100, and the polygon has vertices (80, 80), (70, 30), (20, 20) and (20, 80), the following diagram shows the optimal cut (the thick lines). The numbers show the order in which the cuts are made. <br><br><img src=data/images/1477-1.gif><br><br>This problem contains multiple test cases!<br><br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br><br>", input:"The first line of input contains the two integers n and m where 0 &lt; n, m &lt;= 500. The next line contains p, the number of vertices in the polygon, where 3 &lt;= p &lt;= 8. Each of the next p lines contains two integers x and y where 0 &lt; x &lt; n and 0 &lt; y &lt; m, specifying the vertices of the polygon. The vertices are listed in clockwise order. You may assume that the polygon does not intersect itself, and that no three consecutive vertices are colinear. <br><br>", output:"Print the minimum total length of cuts required to cut out the given polygon, accurate to 3 decimal places. <br>", sample_in:"100 100\n4\n80 80\n70 30\n20 20\n20 80", sample_out:"Minimum total length = 312.575", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:28, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（十）", author:"", tag:["TEST"]}
{pid:1478, vid:1478, oj:"hdu", title:"Parallel Deadlock", desc:"A common problem in parallel computing is establishing proper communication patterns so that processors do not deadlock while either waiting to receive messages from other processors, or waiting for the sending of messages to other processors to complete. That is, one processor will not complete sending a message until it is received by the destination processor. Likewise, a receive cannot complete until a message is actually sent. <br><br>There are two modes of communication: blocking and non-blocking. A blocking send will not complete until a matching receive is performed at the destination processor. Likewise, a blocking receive will not complete until the matching send is performed by the source processor. Non- blocking actions will ``return\'\' immediately (i.e., allow the program to continue), but will not actually complete until the matching action is performed at the target. The matching action of a send is a receive (either blocking or non-blocking), and similarly, the matching action of a receive is a send (either blocking or non-blocking). <br><br><br>At the start of each timestep, each processor that is not blocked starts to run its next instruction. Processors that execute blocking instructions become blocked. Messages can be received at the end of the timestep in which they are sent, but may need to wait several timesteps until the recipient performs a matching receive. If the recipient of a message is waiting to receive from the sender, then the message is received in the same timestep. Messages are received in the order that they are sent. If all of the actions for a particular blocking instruction complete at the end of the timestep, then the processor that ran the instruction will be unblocked before the next timestep. <br><br><br>A correct program will terminate only when all of its actions have completed. Pending non-blocking operations must be completed before a program can terminate. <br><br><br>Your program will take in a list of processors and actions (no more than 100 for each processor), and determine if each processor finishes its program. If a given processor does not finish, it must print out which other processors are preventing it from finishing. <br><br><br>This problem contains multiple test cases!<br><br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br>", input:"The first line will be a single positive integer that tells how many processors will be listed. For each processor there will be one line containing the name of the processor (a single capital letter) followed by a positive integer, N . The following N lines will contain the instructions that comprise the program for that processor. <br><br>An instruction is of the form ``Mode Action Target(s)\'\' where ``Mode\'\' can be ``B\'\' or ``N\'\', for blocking or non-blocking, respectively. ``Action\'\' can be ``S\'\' or ``R\'\', for send or receive, respectively. ``Target(s)\'\' will be one or more processor names to which the action is to be addressed. No processor will be listed twice and a processor will never attempt any sort of communication with itself . A send to multiple targets will not complete until matching receives have been performed by all of the targets (and vice versa). <br><br>", output:"Given that instruction 1 occurs at t = 1, your program will output at which timestep each processor finishes. If a processor does not finish, you must output which processor are preventing that processor from finishing. Processors should be listed in alphabetical order, both for the list of processors and the sets of processors that prevent a processor from finishing. The list of processors preventing termination should list processors at most once and separate multiple processors with ``and\'\'. <br>", sample_in:"4\nI 5\nB S B P C\nN S B P C\nN R B\nB R P\nB R C\nB 2\nB R I\nB S I\nP 3\nN S I\nN R I\nB R I\nC 4\nN S I\nB R I\nB S P\nB R I", sample_out:"B finishes at t=4\nC never finishes because of P\nI never finishes because of B and C\nP finishes at t=5\n\n\n\n\nNotice how C\'s final blocking receive would be matched by a send on I if both instructions were executed. However, it never gets executed because it is stuck in the blocking send to P (that has no matching receive on P), therefore causing deadlock on I. ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1, vtotal_submit:12, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（十）", author:"", tag:["TEST"]}
{pid:1479, vid:1479, oj:"hdu", title:"Numbers That Count", desc:"``Kronecker\'s Knumbers\'\' is a little company that manufactures plastic digits for use in signs (theater marquees, gas station price displays, and so on). The owner and sole employee, Klyde Kronecker, keeps track of how many digits of each type he has used by maintaining an inventory book. For instance, if he has just made a sign containing the telephone number ``5553141\'\', he\'ll write down the number ``5553141\'\' in one column of his book, and in the next column he\'ll list how many of each digit he used: two 1s, one 3, one 4, and three 5s. (Digits that don\'t get used don\'t appear in the inventory.) He writes the inventory in condensed form, like this: ``21131435\'\'. <br><br>The other day, Klyde filled an order for the number 31123314 and was amazed to discover that the inventory of this number is the same as the number--it has three 1s, one 2, three 3s, and one 4! He calls this an example of a ``self-inventorying number\'\', and now he wants to find out which numbers are self-inventorying, or lead to a self-inventorying number through iterated application of the inventorying operation described below. You have been hired to help him in his investigations. <br><br><br>Given any non-negative integer n, its inventory is another integer consisting of a concatenation of integers c1d1c2d2...ckdk, where each ci and di is an unsigned integer, every ci is positive, the di satisfy 0 &lt;= d1 &lt; d2 &lt; ... &lt; dk &lt;= 9, and, for each digit d that appears anywhere in n, d equals di for some i and d occurs exactly ci times in the decimal representation of n. For instance, to compute the inventory of 5553141 we set c1 = 2, d1 = 1, c2 = 1, d2 = 3, etc., giving 21131435. The number 1000000000000 has inventory 12011 (``twelve 0s, one 1\'\'). <br><br><br>An integer n is called self-inventorying if n equals its inventory. It is called self-inventorying after j steps (j &gt;= 1) if j is the smallest number such that the value of the j-th iterative application of the inventory function is self-inventorying. For instance, 21221314 is self-inventorying after 2 steps, since the inventory of 21221314 is 31321314, the inventory of 31321314 is 31123314, and 31123314 is self-inventorying. <br><br><br>Finally, n enters an inventory loop of length k (k &gt;= 2) if k is the smallest number such that for some integer j (j &gt;= 0), the value of the j-th iterative application of the inventory function is the same as the value of the (j + k)-th iterative application. For instance, 314213241519 enters an inventory loop of length 2, since the inventory of 314213241519 is 412223241519 and the inventory of 412223241519 is 314213241519, the original number (we have j = 0 in this case). <br><br><br>Write a program that will read a sequence of non-negative integers and, for each input value, state whether it is self-inventorying, self-inventorying after j steps, enters an inventory loop of length k, or has none of these properties after 15 iterative applications of the inventory function. <br><br><br>This problem contains multiple test cases!<br><br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br><br>", input:"The input file contains multilple cases,and each having at most 80 digits, followed by the terminating value -1. There are no extra leading zeros. <br>", output:"For each non-negative input value n, output the appropriate choice from among the following messages (where n is the input value, j is a positive integer, and k is a positive integer greater than 1): <br><br>n is self-inventorying <br><br>n is self-inventorying after j steps <br><br>n enters an inventory loop of length k <br><br>n can not be classified after 15 iterations <br><br>", sample_in:"22\n31123314\n314213241519\n21221314\n111222234459\n-1", sample_out:"22 is self-inventorying\n31123314 is self-inventorying\n314213241519 enters an inventory loop of length 2\n21221314 is self-inventorying after 2 steps\n111222234459 enters an inventory loop of length 2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:48, vtotal_submit:157, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（十）", author:"", tag:["TEST"]}
{pid:1480, vid:1480, oj:"hdu", title:"钥匙计数之二", desc:"一把钥匙有N个槽，2&lt;N&lt;26槽深为1，2，3，4,5,6。每钥匙至少有3个不同的深度且相连的槽其深度之差不得为5。求这样的钥匙的总数。 <br>", input:"本题无输入", output:"对2&lt;N&lt;26，输出满足要求的钥匙的总数。<br>", sample_in:"N=3: 104\nN=4: 904\nN=5: 5880\n.\n.\n.\n.\n.\nN=25: 8310566473196300280", sample_out:"", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:456, vtotal_submit:920, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM暑期集训队练习赛（十）", author:"", tag:["TEST"]}
No Such Problem Called HDU 1481.<br>
{pid:1482, vid:1482, oj:"hdu", title:"Counterfeit Dollar", desc:"Sally Jones has a dozen Voyageur silver dollars. However, only eleven of the coins are true silver dollars; one coin is counterfeit even though its color and size make it indistinguishable from the real silver dollars. The counterfeit coin has a different weight from the other coins but Sally does not know if it is heavier or lighter than the real coins. <br><br>Happily, Sally has a friend who loans her a very accurate balance scale. The friend will permit Sally three weighings to find the counterfeit coin. For instance, if Sally weighs two coins against each other and the scales balance then she knows these two coins are true. Now if Sally weighs one of the true coins against a third coin and the scales do not balance then Sally knows the third coin is counterfeit and she can tell whether it is light or heavy depending on whether the balance on which it is placed goes up or down, respectively. <br><br><br>By choosing her weighings carefully, Sally is able to ensure that she will find the counterfeit coin with exactly three weighings. <br><br>", input:"The first line of input is an integer n (n &gt; 0) specifying the number of cases to follow. Each case consists of three lines of input, one for each weighing. Sally has identified each of the coins with the letters A-L. Information on a weighing will be given by two strings of letters and then one of the words ``up\'\', ``down\'\', or ``even\'\'. The first string of letters will represent the coins on the left balance; the second string, the coins on the right balance. (Sally will always place the same number of coins on the right balance as on the left balance.) The word in the third position will tell whether the right side of the balance goes up, down, or remains even.", output:"For each case, the output will identify the counterfeit coin by its letter and tell whether it is heavy or light. The solution will always be uniquely determined.", sample_in:"1\nABCD EFGH even\nABCI EFJK up\nABIJ EFGH even", sample_out:"K is the counterfeit coin and it is light.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:131, vtotal_submit:383, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"East Central North America 1998", author:"", tag:["TEST"]}
{pid:1483, vid:1483, oj:"hdu", title:"Automatic Correction of Misspellings", desc:"Some text editors offer a feature to correct words which seem to be written incorrectly. In this problem you are asked to implement a simple Automatic Correction of Misspellings (ACM). <br><br>ACM takes care of the following misspellings of words: <br><br>1.One letter is missing (e.g., letter is written leter) or too much (e.g., letter is written lettter). <br>2.One letter is wrong (e.g., letter is written ketter) <br>3.The order of two adjacent letters is wrong (e.g., letter is written lettre) <br><br>ACM is based on a dictionary of known words. When a text contains a word which is not in the dictionary, ACM will try to replace it by a similar word of the dictionary. Two words are similar if we can transform one word into the other by doing exactly one of the misspellings listed above. An unknown word is left unchanged if there is no similar word in the dictionary.<br>", input:"The first line of the input file will give the number n of words in the dictionary (n ≤ 10000). The next n lines contain the dictionary words. The following line contains an integer q ≤ 1000, the number of query words. The next q lines contain the query words. You may assume that each word in the input consists of 1 to 25 lower case letters (\'a\' to \'z\').<br>", output:"For each query word, print one line with the query word followed by one of the following possibilities:<br><br>1.is correct, if the word occurs in the dictionary. <br>2.is a misspelling of &lt;x&gt;, where &lt;x&gt; is a word of the dictionary similar to the query word, and the query word is not in the dictionary. In the case that there are several possibilities, select the word from the dictionary which appeared earlier in the input. <br>3.is unknown, if cases 1 and 2 do not apply.<br>", sample_in:"10\nthis\nis\na\ndictionary\nthat\nwe\nwill\nuse\nfor\nus\n6\nsu\nas\nthe\ndictonary\nus\nwilll", sample_out:"su is a misspelling of us\nas is a misspelling of is\nthe is unknown\ndictonary is a misspelling of dictionary\nus is correct\nwilll is a misspelling of will", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:20, vtotal_submit:60, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"2006/2007 ACM-ICPC University of Ulm Local Contest", author:"", tag:["TEST"]}
{pid:1484, vid:1484, oj:"hdu", title:"Basic wall maze", desc:"In this problem you have to solve a very simple maze consisting of: <br><br>1.a 6 by 6 grid of unit squares <br>2.3 walls of length between 1 and 6 which are placed either horizontally or vertically to separate squares <br>3.one start and one end marker <br>A maze may look like this:<br><br><center><img src=data/images/1485-1.png></center><br><br>You have to find a shortest path between the square with the start marker and the square with the end marker. Only moves between adjacent grid squares are allowed; adjacent means that the grid squares share an edge and are not separated by a wall. It is not allowed to leave the grid.<br>", input:"The input consists of several test cases. Each test case consists of five lines: The first line contains the column and row number of the square with the start marker, the second line the column and row number of the square with the end marker. The third, fourth and fifth lines specify the locations of the three walls. The location of a wall is specified by either the position of its left end point followed by the position of its right end point (in case of a horizontal wall) or the position of its upper end point followed by the position of its lower end point (in case of a vertical wall). The position of a wall end point is given as the distance from the left side of the grid followed by the distance from the upper side of the grid. <br><br>You may assume that the three walls don\'t intersect with each other, although they may touch at some grid corner, and that the wall endpoints are on the grid. Moreover, there will always be a valid path from the start marker to the end marker. Note that the sample input specifies the maze from the picture above. <br><br>The last test case is followed by a line containing two zeros.<br>", output:"For each test case print a description of a shortest path from the start marker to the end marker. The description should specify the direction of every move (\'N\' for up, \'E\' for right, \'S\' for down and \'W\' for left).<br><br>There can be more than one shortest path, in this case you can print any of them.<br>", sample_in:"1 6\n2 6\n0 0 1 0\n1 5 1 6\n1 5 3 5\n0 0", sample_out:"NEEESWW", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:38, vtotal_submit:160, special_status:1, time_limit:1000, mem_limit:32768, hint:"", source:"2006/2007 ACM-ICPC University of Ulm Local Contest", author:"", tag:["TEST"]}
{pid:1485, vid:1485, oj:"hdu", title:"Construct the wall maze", desc:"In this problem you have to construct a maze using a maze construction kit consisting of: <br><br>1.a 6 by 6 grid of unit squares <br>2.3 walls of length between 1 and 6 which are placed either horizontally or vertically to separate squares <br>3.one start and one end marker <br>A maze may look like this:<br><br><center><img src=data/images/1485-1.png></center><br><br>When a maze is finished, a shortest path between the square with the start marker and the square with the end marker is determined. Only moves between adjacent grid squares are allowed; adjacent means that the grid squares share an edge and are not separated by a wall. It is not allowed to leave the grid.<br><br>Your task is: given a shortest path of some maze, construct this maze. Obviously, the maze you construct should be valid, i.e., all 3 walls should be used, they should not intersect with each other (although they may touch at some grid corner), and the walls should not stick out of the grid. Moreover, the given path should be valid for this maze, i.e., it should lead from the square with the start marker to the square with the end marker without crossing any wall or going outside of the grid, and there shouldn\'t exist any shorter valid path.<br>", input:"The input consists of several test cases. Every test case starts with a line containing three positive integers, the length of the three walls of the maze construction kit. The next line consists of 1 to 25 characters from the set {\'N\', \'E\', \'S\', \'W\'} and describes a shortest path from the start to the end marker in the maze to be constructed. Each character specifies the direction of the next move (see picture). You may assume that each test case has at least one solution. <br><br>The last test case is followed by a line containing three zeros.<br>", output:"For each test case produce five lines of output: First the column and row number of the square containing the start marker, then the column and row number of the square containing the end marker, then the location of the three walls (in the same order as the given lengths in the input). The location of a wall should be specified by either the position of its left end point followed by the position of its right end point (in case of a horizontal wall) or the position of its upper end point followed by the position of its lower end point (in case of a vertical wall). The position of a wall end point should be given as the distance from the left side of the grid followed by the distance from the upper side of the grid. <br><br>There can be several valid solutions for a given test case (for example the test case in the sample input). Your program may print any of those solutions. Note that the sample output specifies the maze from the picture above.<br>", sample_in:"1 1 2\nNEEESWW\n0 0 0", sample_out:"1 6\n2 6\n0 0 1 0\n1 5 1 6\n1 5 3 5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:6, vtotal_submit:25, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2006/2007 ACM-ICPC University of Ulm Local Contest", author:"", tag:["TEST"]}
{pid:1486, vid:1486, oj:"hdu", title:"Dihedral groups", desc:"Consider n points on a unit circle with numbers k = 0, 1, ..., n-1. Initially point k makes an angle of 360 · k / n degrees to the x-axis, measured in counter-clockwise direction. We are going to perform two different kind of operations on that set of points:<br><br><li>rotation by 360 / n degrees in clockwise direction</li><br><li>reflection with respect to the x-axis</li><br><br>The following picture shows an example of these operations:<br><br><center><img src=data/images/1486-1.png></center><br><br>Given a sequence of operations, we are interested in the shortest sequence of operations which gives the same result, i.e., the position of every single point is the same after performing either of those sequences of operations. <br><br>The sequence is given as a string consisting of the characters \'r\' and \'m\' which represent clockwise rotation and reflection respectively (&quot;to the right&quot; and &quot;mirror&quot;). Multiple consecutive occurrences of the same character are collected into the representation &lt;character&gt;&lt;number&gt;, and for convenience this will also be done for single occurrences. So &quot;rrmrrrrrrrrrrrr&quot; will be abbreviated to &quot;r2 m1 r12&quot;. The representations of different operations are always separated by a single space.<br>", input:"The input file consists of several test cases. Each test case starts with a line containing n (3 ≤ n ≤ 10^8), the number of points. The second line of each test case consists of an abbreviated sequence of operations as described above. All numbers will be positive and less than 10^8. There will be no empty line in the input file, and no line will contain more than 100000 characters. The last test case is followed by a line containing 0.<br>", output:"For each test case print one line containing the abbreviated format of the sequence with the minimum number of operations which results in the same configuration of points as the input sequence. In case of multiple optimal solutions, print any solution. Note that the second line of the sample output is a blank line.<br>", sample_in:"4\nr2\n100\nm1 r100 m1\n54\nr218 m3 r1\n0", sample_out:"r2\n\nr1 m1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:9, vtotal_submit:53, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"2006/2007 ACM-ICPC University of Ulm Local Contest", author:"", tag:["TEST"]}
{pid:1487, vid:1487, oj:"hdu", title:"Economic phone calls", desc:"The phone you bought a long time ago has a built-in memory that keeps track of all the calls you receive. It logs the date (month and day) and the time (hour and minute) of each call along with the caller\'s number. Only a limited number of calls can be logged (memory was still expensive then). <br><br>You discover that the limit is almost reached and therefore plan to delete some entries from the log. In choosing the entries to delete you have to consider two restrictions: <br><br>1.There are some (important) entries you want to keep. <br>2.You want to be able to recover the year (which the phone does not log) of each call you keep. The recovery procedure is described below. <br>Calculate the minimal number of entries that must be kept to satisfy these requirements. <br><br><div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Recovery of years</div><br>Given a list of timestamps (consisting of month, day, hour, and minute) of calls, you find out the year of each call by the following procedure: <br><br>1.The last call in the list occurred in the current year. <br>2.You compare its timestamp t to the timestamp t\' of the previous call. If t\'&lt;t, you assume that both calls occurred in the same year. If t\'≥t, you assume that the previous call occured the year before. <br>3.You iterate backwards through the list and reason as in 2. at each step. <br><br>Note that this procedure is not correct in general, but you may assume that it is for the input you get, and you have to ensure that it gives the same result for the shortened log.<br>", input:"The input consists of several test cases. Every test case starts with the number of entries n in the log, where 1≤n≤1000. Each of the next n lines contains an entry. <br><br>Every entry has the format mm:dd:HH:MM number ±, describing the month mm, day dd, hour HH, minute MM, and number (having 1-16 digits) of each call, followed by + marking a call you definitively want to keep and by - marking the other calls. The entries come directly from the log of the phone, that is, they are sorted by time of reception of the corresponding call (the last entry is the most recent). <br><br>You may assume that the recovery procedure described above yields the correct year of each call.<br><br>The last test case is followed by a 0.<br>", output:"For each test case, output the minimal number of entries that must be kept to satisfy the requirements stated above. In particular, the recovery procedure described above must yield for each remaining entry the same year as derived from the corresponding input.<br>", sample_in:"7\n12:31:23:59 0123456789012345 +\n07:21:19:00 1337 -\n01:01:00:00 0987654321 -\n07:21:14:00 1337 -\n11:11:11:11 11111111111 +\n01:01:00:00 0123456789 +\n01:01:00:00 0987654321 -\n0", sample_out:"6\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>P.S.</div><i style=\'font-size:1px\'> </i>\nDue to an error in the phone\'s software no calls have been logged on February 29.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:13, vtotal_submit:58, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2006/2007 ACM-ICPC University of Ulm Local Contest", author:"", tag:["TEST"]}
{pid:1488, vid:1488, oj:"hdu", title:"Flavius Josephus Reloaded", desc:"Flavius Josephus once was trapped in a cave together with his comrade soldiers surrounded by Romans. All of Josephus\' fellow soldiers preferred not to surrender but to commit suicide. So they all formed a circle and agreed on a number k. Every k-th person in the circle would then commit suicide. However, Josephus had different priorities and didn\'t want to die just yet. According to the legend he managed to find the safe spot in the circle where he would be the last one to commit suicide. He surrendered to the Romans and became a citizen of Rome a few years later. <br><br>It is a lesser known fact that the souls of Josephus and his comrades were all born again in modern times. Obviously Josephus and his reborn fellow soldiers wanted to avoid a similar fiasco in the future. Thus they asked a consulting company to work out a better decision scheme. The company came up with the following scheme: <br><br>1.For the sake of tradition all soldiers should stand in a circle. This way a number between 0 and N-1 is assigned to each soldier, where N is the number of soldiers. <br>2.As changing numbers in the old scheme turned out to be horribly inefficient, the number assigned to a soldier will not change throughout the game. <br>3.The consulting company will provide two numbers a and b which will be used to calculate the number of the next soldier as follows: Let x be the number of the current soldier, then the number of the next soldier is the remainder of a*x^2 + b mod N. <br>4.We start with the soldier with number 0 and each soldier calculates the number of the next soldier according to the formula above. <br>5.As everyone deserves a second chance a soldier will commit suicide once his number is calculated for the second time. <br>6.In the event that the number of a soldier is calculated for the third time the game will end and all remaining soldiers will surrender. <br><br>You are to write a program that given the number of soldiers N and the constants a and b determines the number of survivors.<br>", input:"The input file consists of several test cases. Each test case consists of a single line containing the three integers N (2 ≤ N ≤ 109), a and b (0 ≤ a,b &lt; N) separated by white space. You may safely assume that the first soldier dies after no more than one million (106) steps. The input is terminated by a single number 0 which should not be processed.<br>", output:"For each test case output a single line containing the number of soldiers that survive.<br>", sample_in:"2 1 1\n5 1 1\n10 3 7\n101 9 2\n698253463 1 181945480\n1000000000 999999999 999999999\n0", sample_out:"0\n2\n4\n96\n698177783\n999999994", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:20, vtotal_submit:74, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"2006/2007 ACM-ICPC University of Ulm Local Contest", author:"", tag:["TEST"]}
{pid:1489, vid:1489, oj:"hdu", title:"Wine trading in Gergovia", desc:"As you may know from the comic &quot;Asterix and the Chieftain\'s Shield&quot;, Gergovia consists of one street, and every inhabitant of the city is a wine salesman. You wonder how this economy works? Simple enough: everyone buys wine from other inhabitants of the city. Every day each inhabitant decides how much wine he wants to buy or sell. Interestingly, demand and supply is always the same, so that each inhabitant gets what he wants.<br><br>There is one problem, however: Transporting wine from one house to another results in work. Since all wines are equally good, the inhabitants of Gergovia don\'t care which persons they are doing trade with, they are only interested in selling or buying a specific amount of wine. They are clever enough to figure out a way of trading so that the overall amount of work needed for transports is minimized.<br><br>In this problem you are asked to reconstruct the trading during one day in Gergovia. For simplicity we will assume that the houses are built along a straight line with equal distance between adjacent houses. Transporting one bottle of wine from one house to an adjacent house results in one unit of work.<br>", input:"The input consists of several test cases.<br>Each test case starts with the number of inhabitants n (2 ≤ n ≤ 100000). The following line contains n integers ai (-1000 ≤ ai ≤ 1000). If ai ≥ 0, it means that the inhabitant living in the ith house wants to buy ai bottles of wine, otherwise if ai &lt; 0, he wants to sell -ai bottles of wine. You may assume that the numbers ai sum up to 0.<br>The last test case is followed by a line containing 0.<br>", output:"For each test case print the minimum amount of work units needed so that every inhabitant has his demand fulfilled. You may assume that this number fits into a signed 64-bit integer (in GCC/G++ you can use the data type &quot;long long&quot;, in JAVA the data type &quot;long&quot;, in VC/VC++ will be &quot;__int64&quot;. More information about data type on HDOJ, <a href=http://acm.hdu.edu.cn/faq.php>please view F.A.Q</a>.). <br>", sample_in:"5\n5 -4 1 -3 1\n6\n-1000 -1000 -1000 1000 1000 1000\n0", sample_out:"9\n9000", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:35, vtotal_submit:106, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2006/2007 ACM-ICPC University of Ulm Local Contest", author:"", tag:["TEST"]}
{pid:1490, vid:1490, oj:"hdu", title:"Homogeneous squares", desc:"Assume you have a square of size n that is divided into n×n positions just as a checkerboard. Two positions (x1,y1) and (x2,y2), where 1 ≤ x1,y1,x2,y2 ≤ n, are called &quot;independent&quot; if they occupy different rows and different columns, that is, x1≠x2 and y1≠y2. More generally, n positions are called independent if they are pairwise independent. It follows that there are n! different ways to choose n independent positions. <br><br>Assume further that a number is written in each position of such an n×n square. This square is called &quot;homogeneous&quot; if the sum of the numbers written in n independent positions is the same, no matter how the positions are chosen. Write a program to determine if a given square is homogeneous! <br>", input:"The input contains several test cases. <br>The first line of each test case contains an integer n (1 ≤ n ≤ 1000). Each of the next n lines contains n numbers, separated by exactly one space character. Each number is an integer from the interval [-1000000,1000000]. <br>The last test case is followed by a zero.<br>", output:"For each test case output whether the specified square is homogeneous or not. Adhere to the format shown in the sample output.<br>", sample_in:"2\n1 2\n3 4\n3\n1 3 4\n8 6 -2\n-3 4 0\n0", sample_out:"homogeneous\nnot homogeneous", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:23, vtotal_submit:53, special_status:0, time_limit:6000, mem_limit:32768, hint:"", source:"2006/2007 ACM-ICPC University of Ulm Local Contest", author:"", tag:["TEST"]}
{pid:1491, vid:1491, oj:"hdu", title:"Octorber 21st", desc:"HDU\'s 50th birthday, on Octorber 21st, is coming. What an exciting day!! As a student of HDU, I always want to know how many days are there between today and Octorber 21st.So, write a problem and tell me the answer.Of course, the date I give you is always in 2006.<br><br><center><img src=data/images/c48-1001-1.jpg></center><br>", input:"The input consists of T test cases. The number of T is given on the first line of the input file.Following T lines, which represent dates, one date per line. The format for a date is &quot;month day&quot; where month is a number between 1 (which indicates January) and 12 (which indicates December), day is a number between 1 and 31.All the date in the input are in 2006, you can assume that all the dates in the input are legal(合法).", output:"For each case, if the date is before Octorber 21st, you should print a number that between the date and Octorber 21st.If the day is beyond Octorber 21st, just print &quot;What a pity, it has passed!&quot;.If the date is just Octorber 21st, print&quot;It\'s today!!&quot;.<br>", sample_in:"7\n10 20\n10 19\n10  1\n10 21\n9   1\n11 11\n12 12", sample_out:"1\n2\n20\nIt\'s today!!\n50\nWhat a pity, it has passed!\nWhat a pity, it has passed!", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1456, vtotal_submit:2697, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"“2006校园文化活动月”之“校庆杯”大学生程序设计竞赛暨杭州电子科技大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1492, vid:1492, oj:"hdu", title:"The number of divisors(约数) about Humble Numbers", desc:"A number whose only prime factors are 2,3,5 or 7 is called a humble number. The sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 24, 25, 27, ... shows the first 20 humble numbers. <br><br>Now given a humble number, please write a program to calculate the number of divisors about this humble number.For examle, 4 is a humble,and it have 3 divisors(1,2,4);12 have 6 divisors.<br><br>", input:"The input consists of multiple test cases. Each test case consists of one humble number n,and n is in the range of 64-bits signed integer. Input is terminated by a value of zero for n.<br>", output:"For each test case, output its divisor number, one line per case.<br>", sample_in:"4\n12\n0", sample_out:"3\n6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:889, vtotal_submit:2291, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"“2006校园文化活动月”之“校庆杯”大学生程序设计竞赛暨杭州电子科技大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1493, vid:1493, oj:"hdu", title:"QQpet exploratory park", desc:"Today, more and more people begin to raise a QQpet. You can get a lot of pleasure from it, although it does not have a real life and it calls for huge patience to take care of it. There is a place called QQpet exploratory park in the world. Every week, you can get a chance to have a joy there for free. The whole park contains 61 grids in a line, numbered from 0 to 60. Ten of them are important grids which will touch off ( 引发 ) an incident when the pet stands on. They are 5, 12, 22, 29, 33, 38, 42, 46, 50 and 55. Your pet is standing on the gird of number 0 in the beginning. You can toss the die ( 掷骰子 ) 10 times. Each time, the pet goes ahead n steps which n is the number from the die ( n ∈{ 1, 2, …, 6 } ). If your RP is great enough( calls RPG for short ), you will get many surprises in the important grids, such as some yuanbao( the money in QQpet world ), an improvement of your pet\'s ability, and the most attractive gift-package. Now, your task is to calculate the probability(概率) of touching each important grid.<br><br><center><img src=data/images/c48-1003-1.jpg></center><br>", input:"The first line of the input contains an integer t– determining the number of datasets. Then t lines follows. Each line contains 6 numbers pi, i ∈{ 1, 2, …, 6 }, indicating the probability of getting 1 to 6 after you toss the die every time . p1+ p2+ … + p6 = 1.<br>", output:"For each test case, output the probability of touching each important grid. accurate up to 1 decimal places. There is a blank line between test cases. See the Sample Output to get the exactly output format.<br>", sample_in:"2\n0.000 1.000 0.000 0.000 0.000 0.000\n0.500 0.000 0.000 0.000 0.000 0.500", sample_out:"5: 0.0%\n12: 100.0%\n22: 0.0%\n29: 0.0%\n33: 0.0%\n38: 0.0%\n42: 0.0%\n46: 0.0%\n50: 0.0%\n55: 0.0%\n\n5: 3.1%\n12: 30.5%\n22: 27.3%\n29: 24.6%\n33: 21.9%\n38: 10.9%\n42: 0.8%\n46: 0.0%\n50: 4.4%\n55: 1.0%", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:184, vtotal_submit:482, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"“2006校园文化活动月”之“校庆杯”大学生程序设计竞赛暨杭州电子科技大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1494, vid:1494, oj:"hdu", title:"跑跑卡丁车", desc:"跑跑卡丁车是时下一款流行的网络休闲游戏，你可以在这虚拟的世界里体验驾驶的乐趣。这款游戏的特别之处是你可以通过漂移来获得一种<br>加速卡，用这种加速卡可以在有限的时间里提高你的速度。为了使问题简单化，我们假设一个赛道分为L段，并且给你通过每段赛道的普通耗时Ai和用加速卡的耗时Bi。加速卡的获得机制是：普通行驶的情况下，每通过1段赛道,可以获得20%的能量(N2O).能量集满后获得一个加速卡(同时能量清0).加速卡最多可以储存2个,也就是说当你有2个加速卡而能量再次集满,那么能量清零但得不到加速卡。一个加速卡只能维持一段赛道，游戏开始时没有加速卡。<br><br><br><center><img src=data/images/c48-1004-1.jpg></center><br><br>问题是，跑完n圈最少用时为多少？", input:"每组输入数据有3行，第一行有2个整数L(0&lt;L&lt;100),N(0&lt;N&lt;100)分别表示一圈赛道分为L段和有N圈赛道，接下来两行分别有L个整数Ai和Bi<br>(Ai &gt; Bi).<br>", output:"对于每组输入数据，输出一个整数表示最少的用时.<br>", sample_in:"18 1\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 1 1 8 8", sample_out:"145\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\n对于sample这组数据，你可以先在普通情况下行驶前14段，这时你有2个加速卡以及80%的能量(N2O).在第15和16段用掉2个加速卡，通过第\n17段赛道后又可以得到一个加速卡，在第18段赛道使用.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:430, vtotal_submit:2108, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"“2006校园文化活动月”之“校庆杯”大学生程序设计竞赛暨杭州电子科技大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1495, vid:1495, oj:"hdu", title:"非常可乐", desc:"大家一定觉的运动以后喝可乐是一件很惬意的事情，但是seeyou却不这么认为。因为每次当seeyou买了可乐以后，阿牛就要求和seeyou一起分享这一瓶可乐，而且一定要喝的和seeyou一样多。但seeyou的手中只有两个杯子，它们的容量分别是N 毫升和M 毫升 可乐的体积为S （S&lt;101）毫升　(正好装满一瓶) ，它们三个之间可以相互倒可乐 (都是没有刻度的，且 S==N+M，101＞S＞0，N＞0，M＞0) 。聪明的ACMER你们说他们能平分吗？如果能请输出倒可乐的最少的次数，如果不能输出&quot;NO&quot;。", input:"三个整数 : S 可乐的体积 , N 和 M是两个杯子的容量，以&quot;0 0 0&quot;结束。", output:"如果能平分的话请输出最少要倒的次数，否则输出&quot;NO&quot;。", sample_in:"7 4 3\n4 1 3\n0 0 0", sample_out:"NO\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:951, vtotal_submit:4055, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"“2006校园文化活动月”之“校庆杯”大学生程序设计竞赛暨杭州电子科技大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1496, vid:1496, oj:"hdu", title:"Equations", desc:"Consider equations having the following form: <br><br>a*x1^2+b*x2^2+c*x3^2+d*x4^2=0<br>a, b, c, d are integers from the interval [-50,50] and any of them cannot be 0.<br><br>It is consider a solution a system ( x1,x2,x3,x4 ) that verifies the equation, xi is an integer from [-100,100] and xi != 0, any i ∈{1,2,3,4}.<br><br>Determine how many solutions satisfy the given equation.<br>", input:"The input consists of several test cases. Each test case consists of a single line containing the 4 coefficients a, b, c, d, separated by one or more blanks.<br>End of file.", output:"For each test case, output a single line containing the number of the solutions.<br>", sample_in:"1 2 3 -4\n1 1 1 1", sample_out:"39088\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:952, vtotal_submit:4769, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"“2006校园文化活动月”之“校庆杯”大学生程序设计竞赛暨杭州电子科技大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1497, vid:1497, oj:"hdu", title:"Simple Library Management System", desc:"After AC all the hardest problems in the world , the ACboy 8006 now has nothing to do . One day he goes to an old library to find a part-time job .It is also a big library which has N books and M users.The user\'s id is from 1 to M , and the book id is from 1 to N . According to the library rules , every user are only allowed to borrow 9 books .But what surprised him is that there is no computer in the library , and everything is just recorded in paper ! How terrible , I must be crazy after working some weeks , he thinks .So he wants to change the situation .<br><br>In the other hand , after 8006\'s fans  know it , they all collect money and buy many computers for the library .<br><br>Besides the hardware , the library needs a management program . Though it is just a piece of cake for 8006 , the library turns to you , a excellent programer,for help .<br><br>What they need is just a simple library management program . It is just a console program , and have only three commands : Borrow the book , Return the book , Query the user .<br><br>1.The Borrow command has two parameters : The user id and the book id<br>The format is : &quot;B ui bi&quot;    (1&lt;=ui&lt;=M , 1&lt;=bi&lt;=N)<br>The program must first check the book bi wether it\'s in the library . If it is not , just print &quot;The book is not in the library now&quot; in a line . <br>If it is , then check the user ui .<br>If the user has borrowed 9 books already, print &quot;You are not allowed to borrow any more&quot; .<br>Else let the user ui borrow the book , and print &quot;Borrow success&quot;.<br><br>2.The Return command only has one parameter : The book id<br>The format is : &quot;R bi&quot; (1&lt;=bi&lt;=N)<br>The program must first check the book bi whether it\'s in the library . If it is , just print &quot;The book is already in the library&quot; . Otherwise , you can return the book , and print &quot;Return success&quot;.<br><br>3.The Query command has one parameter : The user id<br>The format is : &quot;Q ui&quot; (1&lt;=ui&lt;=M)<br>If the number of books which the user ui has borrowed is 0 ,just print &quot;Empty&quot; , otherwise print the books\' id which he borrows in increasing order in a line.Seperate two books with a blank.", input:"The input file contains a series of test cases . Please process to the end of file . The first line contains two integers M and N ( 1&lt;= M &lt;= 1000 , 1&lt;=N&lt;=100000),the second line contains a integer C means the number of commands(1&lt;=C&lt;=10000). Then it comes C lines . Each line is a command which is described above.You can assum all the books are in the library at the beginning of each cases.", output:"For each command , print the message which described above .<br>Please output a blank line after each test.<br>If you still have some questions , see the Sample .<br>", sample_in:"5 10\n9\nR 1\nB 1 5\nB 1 2\nQ 1\nQ 2\nR 5\nQ 1\nR 2\nQ 1\n5 10\n9\nR 1\nB 1 5\nB 1 2\nQ 1\nQ 2\nR 5\nQ 1\nR 2\nQ 1", sample_out:"The book is already in the library\nBorrow success\nBorrow success\n2 5\nEmpty\nReturn success\n2\nReturn success\nEmpty\n\nThe book is already in the library\nBorrow success\nBorrow success\n2 5\nEmpty\nReturn success\n2\nReturn success\nEmpty\n\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nHuge input, the function scanf() may work better than cin", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:268, vtotal_submit:1406, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"“2006校园文化活动月”之“校庆杯”大学生程序设计竞赛暨杭州电子科技大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
{pid:1498, vid:1498, oj:"hdu", title:"50 years, 50 colors", desc:"On Octorber 21st, HDU 50-year-celebration, 50-color balloons floating around the campus, it\'s so nice, isn\'t it? To celebrate this meaningful day, the ACM team of HDU hold some fuuny games. Especially, there will be a game named &quot;crashing color balloons&quot;.<br><br>There will be a n*n matrix board on the ground, and each grid will have a color balloon in it.And the color of the ballon will be in the range of [1, 50].After the referee shouts &quot;go!&quot;,you can begin to crash the balloons.Every time you can only choose one kind of balloon to crash, we define that the two balloons with the same color belong to the same kind.What\'s more, each time you can only choose a single row or column of balloon, and crash the balloons that with the color you had chosen. Of course, a lot of students are waiting to play this game, so we just give every student k times to crash the balloons.<br><br>Here comes the problem: which kind of balloon is impossible to be all crashed by a student in k times.<br><br><center><img src=data/images/c48-1008-1.jpg></center><br>", input:"There will be multiple input cases.Each test case begins with two integers n, k. n is the number of rows and columns of the balloons (1 &lt;= n &lt;= 100), and k is the times that ginving to each student(0 &lt; k &lt;= n).Follow a matrix A of n*n, where Aij denote the color of the ballon in the i row, j column.Input ends with n = k = 0.<br>", output:"For each test case, print in ascending order all the colors of which are impossible to be crashed by a student in k times. If there is no choice, print &quot;-1&quot;.<br>", sample_in:"1 1\n1\n2 1\n1 1\n1 2\n2 1\n1 2\n2 2\n5 4\n1 2 3 4 5\n2 3 4 5 1\n3 4 5 1 2\n4 5 1 2 3\n5 1 2 3 4\n3 3\n50 50 50\n50 50 50\n50 50 50\n0 0", sample_out:"-1\n1\n2\n1 2 3 4 5\n-1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:515, vtotal_submit:1355, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"“2006校园文化活动月”之“校庆杯”大学生程序设计竞赛暨杭州电子科技大学第四届大学生程序设计竞赛", author:"", tag:["TEST"]}
No Such Problem Called HDU 1499.<br>
{pid:1500, vid:1500, oj:"hdu", title:"Chopsticks", desc:"In China, people use a pair of chopsticks to get food on the table, but Mr. L is a bit different. He uses a set of three chopsticks -- one pair, plus an EXTRA long chopstick to get some big food by piercing it through the food. As you may guess, the length of the two shorter chopsticks should be as close as possible, but the length of the extra one is not important, as long as it\'s the longest. To make things clearer, for the set of chopsticks with lengths A,B,C(A&lt;=B&lt;=C), (A-B)^2 is called the \'badness\' of the set. <br>It\'s December 2nd, Mr.L\'s birthday! He invited K people to join his birthday party, and would like to introduce his way of using chopsticks. So, he should prepare K+8 sets of chopsticks(for himself, his wife, his little son, little daughter, his mother, father, mother-in-law, father-in-law, and K other guests). But Mr.L suddenly discovered that his chopsticks are of quite different lengths! He should find a way of composing the K+8 sets, so that the total badness of all the sets is minimized. ", input:"The first line in the input contains a single integer T, indicating the number of test cases(1&lt;=T&lt;=20). Each test case begins with two integers K, N(0&lt;=K&lt;=1000, 3K+24&lt;=N&lt;=5000), the number of guests and the number of chopsticks. There are N positive integers Li on the next line in non-decreasing order indicating the lengths of the chopsticks.(1&lt;=Li&lt;=32000).", output:"For each test case in the input, print a line containing the minimal total badness of all the sets.", sample_in:"1\n1 40\n1 8 10 16 19 22 27 33 36 40 47 52 56 61 63 71 72 75 81 81 84 88 96 98 103 110 113 118 124 128 129 134 134 139 148 157 157 160 162 164", sample_out:"23\n\nNote\n\nFor the sample input, a possible collection of the 9 sets is:\n8,10,16; 19,22,27; 61,63,75; 71,72,88; 81,81,84; 96,98,103; 128,129,148; 134,134,139; 157,157,160", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:461, vtotal_submit:1534, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"OIBH Reminiscence Programming Contest", author:"", tag:["TEST"]}
{pid:1501, vid:1501, oj:"hdu", title:"Zipper", desc:"Given three strings, you are to determine whether the third string can be formed by combining the characters in the first two strings. The first two strings can be mixed arbitrarily, but each must stay in its original order.<br><br>For example, consider forming &quot;tcraete&quot; from &quot;cat&quot; and &quot;tree&quot;:<br><br>String A: cat<br>String B: tree<br>String C: tcraete<br><br><br>As you can see, we can form the third string by alternating characters from the two strings. As a second example, consider forming &quot;catrtee&quot; from &quot;cat&quot; and &quot;tree&quot;:<br><br>String A: cat<br>String B: tree<br>String C: catrtee<br><br><br>Finally, notice that it is impossible to form &quot;cttaree&quot; from &quot;cat&quot; and &quot;tree&quot;.<br>", input:"The first line of input contains a single positive integer from 1 through 1000. It represents the number of data sets to follow. The processing for each data set is identical. The data sets appear on the following lines, one data set per line.<br><br>For each data set, the line of input consists of three strings, separated by a single space. All strings are composed of upper and lower case letters only. The length of the third string is always the sum of the lengths of the first two strings. The first two strings will have lengths between 1 and 200 characters, inclusive.<br><br>", output:"For each data set, print:<br><br> Data set n: yes<br><br>if the third string can be formed from the first two, or<br><br> Data set n: no<br><br>if it cannot. Of course n should be replaced by the data set number. See the sample output below for an example.<br>", sample_in:"3\ncat tree tcraete\ncat tree catrtee\ncat tree cttaree", sample_out:"Data set 1: yes\nData set 2: yes\nData set 3: no", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1263, vtotal_submit:5927, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Pacific Northwest 2004", author:"", tag:["TEST"]}
{pid:1502, vid:1502, oj:"hdu", title:"Regular Words", desc:"Consider words of length 3n over alphabet {A, B, C} . Denote the number of occurences of A in a word a as A(a) , analogously let the number of occurences of B be denoted as B(a), and the number of occurenced of C as C(a) . <br><br>Let us call the word w regular if the following conditions are satisfied: <br><br>A(w)=B(w)=C(w) ; <br>if c is a prefix of w , then A(c)&gt;= B(c) &gt;= C(c) . <br>For example, if n = 2 there are 5 regular words: AABBCC , AABCBC , ABABCC , ABACBC and ABCABC . <br><br>Regular words in some sense generalize regular brackets sequences (if we consider two-letter alphabet and put similar conditions on regular words, they represent regular brackets sequences). <br><br>Given n , find the number of regular words. ", input:"There are mutiple cases in the input file. <br><br>Each case contains n (0 &lt;= n &lt;= 60 ). <br><br>There is an empty line after each case.", output:"Output the number of regular words of length 3n . <br><br>There should be am empty line after each case. ", sample_in:"2\n\n3", sample_out:"5\n\n42", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:306, vtotal_submit:1263, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1503, vid:1503, oj:"hdu", title:"Advanced Fruits", desc:"The company &quot;21st Century Fruits&quot; has specialized in creating new sorts of fruits by transferring genes from one fruit into the genome of another one. Most times this method doesn\'t work, but sometimes, in very rare cases, a new fruit emerges that tastes like a mixture between both of them. <br>A big topic of discussion inside the company is &quot;How should the new creations be called?&quot; A mixture between an apple and a pear could be called an apple-pear, of course, but this doesn\'t sound very interesting. The boss finally decides to use the shortest string that contains both names of the original fruits as sub-strings as the new name. For instance, &quot;applear&quot; contains &quot;apple&quot; and &quot;pear&quot; (APPLEar and apPlEAR), and there is no shorter string that has the same property. <br><br>A combination of a cranberry and a boysenberry would therefore be called a &quot;boysecranberry&quot; or a &quot;craboysenberry&quot;, for example. <br><br>Your job is to write a program that computes such a shortest name for a combination of two given fruits. Your algorithm should be efficient, otherwise it is unlikely that it will execute in the alloted time for long fruit names. <br>", input:"Each line of the input contains two strings that represent the names of the fruits that should be combined. All names have a maximum length of 100 and only consist of alphabetic characters.<br><br>Input is terminated by end of file. <br>", output:"For each test case, output the shortest name of the resulting fruit on one line. If more than one shortest name is possible, any one is acceptable.<br>", sample_in:"apple peach\nananas banana\npear peach", sample_out:"appleach\nbananas\npearch", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:480, vtotal_submit:1394, special_status:1, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 1999", author:"", tag:["TEST"]}
{pid:1504, vid:1504, oj:"hdu", title:"Disk Tree", desc:"Hacker Bill has accidentally lost all the information from his workstation\'s hard drive and he has no backup copies of its contents. He does not regret for the loss of the files themselves, but for the very nice and convenient directory structure that he had created and cherished during years of work. Fortunately, Bill has several copies of directory listings from his hard drive. Using those listings he was able to recover full paths (like &quot;WINNT\\SYSTEM32\\CERTSRV\\CERTCO~1\\X86&quot;) for some directories. He put all of them in a file by writing each path he has found on a separate line. Your task is to write a program that will help Bill to restore his state of the art directory structure by providing nicely formatted directory tree. ", input:"This problem contains multiple test cases!<br><br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br><br>The first line of the input contains single integer number N (1 &lt;= N &lt;= 500) that denotes a total number of distinct directory paths. Then N lines with directory paths follow. Each directory path occupies a single line and does not contain any spaces, including leading or trailing ones. No path exceeds 80 characters. Each path is listed once and consists of a number of directory names separated by a back slash (&quot;\\&quot;). <br><br>Each directory name consists of 1 to 8 uppercase letters, numbers, or the special characters from the following list: exclamation mark, number sign, dollar sign, percent sign, ampersand, apostrophe, opening and closing parenthesis, hyphen sign, commercial at, circumflex accent, underscore, grave accent, opening and closing curly bracket, and tilde (&quot;!#$%&amp;\'()-@^_`{}~&quot;).<br><br>", output:"Write to the output the formatted directory tree. Each directory name shall be listed on its own line preceded by a number of spaces that indicate its depth in the directory hierarchy. The subdirectories shall be listed in lexicographic order immediately after their parent directories preceded by one more space than their parent directory. Top level directories shall have no spaces printed before their names and shall be listed in lexicographic order. See sample below for clarification of the output format.", sample_in:"1\n\n7\nWINNT\\SYSTEM32\\CONFIG\nGAMES\nWINNT\\DRIVERS\nHOME\nWIN\\SOFT\nGAMES\\DRIVERS\nWINNT\\SYSTEM32\\CERTSRV\\CERTCO~1\\X86", sample_out:"GAMES\n DRIVERS\nHOME\nWIN\n SOFT\nWINNT\n DRIVERS\n SYSTEM32\n  CERTSRV\n   CERTCO~1\n    X86\n  CONFIG", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:60, vtotal_submit:337, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Northeastern Europe 2000", author:"", tag:["TEST"]}
{pid:1505, vid:1505, oj:"hdu", title:"City Game", desc:"Bob is a strategy game programming specialist. In his new city building game the gaming environment is as follows: a city is built up by areas, in which there are streets, trees,factories and buildings. There is still some space in the area that is unoccupied. The strategic task of his game is to win as much rent money from these free spaces. To win rent money you must erect buildings, that can only be rectangular, as long and wide as you can. Bob is trying to find a way to build the biggest possible building in each area. But he comes across some problems – he is not allowed to destroy already existing buildings, trees, factories and streets in the area he is building in.<br><br>Each area has its width and length. The area is divided into a grid of equal square units.The rent paid for each unit on which you\'re building stands is 3$.<br><br>Your task is to help Bob solve this problem. The whole city is divided into K areas. Each one of the areas is rectangular and has a different grid size with its own length M and width N.The existing occupied units are marked with the symbol R. The unoccupied units are marked with the symbol F.<br>", input:"The first line of the input contains an integer K – determining the number of datasets. Next lines contain the area descriptions. One description is defined in the following way: The first line contains two integers-area length M&lt;=1000 and width N&lt;=1000, separated by a blank space. The next M lines contain N symbols that mark the reserved or free grid units,separated by a blank space. The symbols used are:<br><br>R – reserved unit<br><br>F – free unit<br><br>In the end of each area description there is a separating line.<br>", output:"For each data set in the input print on a separate line, on the standard output, the integer that represents the profit obtained by erecting the largest building in the area encoded by the data set.", sample_in:"2\n5 6\nR F F F F F\nF F F F F F\nR R R F F F\nF F F F F F\nF F F F F F\n\n5 5\nR R R R R\nR R R R R\nR R R R R\nR R R R R\nR R R R R", sample_out:"45\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1009, vtotal_submit:3967, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southeastern Europe 2004", author:"", tag:["TEST"]}
{pid:1506, vid:1506, oj:"hdu", title:"Largest Rectangle in a Histogram", desc:"A histogram is a polygon composed of a sequence of rectangles aligned at a common base line. The rectangles have equal widths but may have different heights. For example, the figure on the left shows the histogram that consists of rectangles with the heights 2, 1, 4, 5, 1, 3, 3, measured in units where 1 is the width of the rectangles:<br><img src=data/images/1506-1.gif><br>Usually, histograms are used to represent discrete distributions, e.g., the frequencies of characters in texts. Note that the order of the rectangles, i.e., their heights, is important. Calculate the area of the largest rectangle in a histogram that is aligned at the common base line, too. The figure on the right shows the largest aligned rectangle for the depicted histogram.", input:"The input contains several test cases. Each test case describes a histogram and starts with an integer n, denoting the number of rectangles it is composed of. You may assume that 1 &lt;= n &lt;= 100000. Then follow n integers h1, ..., hn, where 0 &lt;= hi &lt;= 1000000000. These numbers denote the heights of the rectangles of the histogram in left-to-right order. The width of each rectangle is 1. A zero follows the input for the last test case.", output:"For each test case output on a single line the area of the largest rectangle in the specified histogram. Remember that this rectangle must be aligned at the common base line.", sample_in:"7 2 1 4 5 1 3 3\n4 1000 1000 1000 1000\n0", sample_out:"8\n4000", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1468, vtotal_submit:9593, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Ulm Local Contest 2003", author:"", tag:["TEST"]}
{pid:1507, vid:1507, oj:"hdu", title:"Uncle Tom\'s Inherited Land*", desc:"Your old uncle Tom inherited a piece of land from his great-great-uncle. Originally, the property had been in the shape of a rectangle. A long time ago, however, his great-great-uncle decided to divide the land into a grid of small squares. He turned some of the squares into ponds, for he loved to hunt ducks and wanted to attract them to his property. (You cannot be sure, for you have not been to the place, but he may have made so many ponds that the land may now consist of several disconnected islands.)<br><br>Your uncle Tom wants to sell the inherited land, but local rules now regulate property sales. Your uncle has been informed that, at his great-great-uncle\'s request, a law has been passed which establishes that property can only be sold in rectangular lots the size of two squares of your uncle\'s property. Furthermore, ponds are not salable property.<br><br>Your uncle asked your help to determine the largest number of properties he could sell (the remaining squares will become recreational parks). <br><img src=data/images/1507-1.gif><br>", input:"Input will include several test cases. The first line of a test case contains two integers N and M, representing, respectively, the number of rows and columns of the land (1 &lt;= N, M &lt;= 100). The second line will contain an integer K indicating the number of squares that have been turned into ponds ( (N x M) - K &lt;= 50). Each of the next K lines contains two integers X and Y describing the position of a square which was turned into a pond (1 &lt;= X &lt;= N and 1 &lt;= Y &lt;= M). The end of input is indicated by N = M = 0.<br>", output:"For each test case in the input your program should first output one line, containing an integer p representing the maximum number of properties which can be sold. The next p lines specify each pair of squares which can be sold simultaneity. If there are more than one solution, anyone is acceptable. there is a blank line after each test case. See sample below for clarification of the output format.<br>", sample_in:"4 4\n6\n1 1\n1 4\n2 2\n4 1\n4 2\n4 4\n4 3\n4\n4 2\n3 2\n2 2\n3 1\n0 0", sample_out:"4\n(1,2)--(1,3)\n(2,1)--(3,1)\n(2,3)--(3,3)\n(2,4)--(3,4)\n\n3\n(1,1)--(2,1)\n(1,2)--(1,3)\n(2,3)--(3,3)", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:387, vtotal_submit:1538, special_status:1, time_limit:1000, mem_limit:32768, hint:"", source:"South America 2002 -  Practice", author:"", tag:["TEST"]}
{pid:1508, vid:1508, oj:"hdu", title:"Alphacode", desc:"Alice and Bob need to send secret messages to each other and are discussing ways to encode their messages:<br><br>Alice: &quot;Let\'s just use a very simple code: We\'ll assign \'A\' the code word 1, \'B\' will be 2, and so on down to ‘Z’ being assigned 26.”<br>Bob: &quot;That\'s a stupid code, Alice. Suppose I send you the word \'BEAN\' encoded as 25114. You could decode that in many different ways!”<br>Alice: &quot;Sure you could, but what words would you get? Other than \'BEAN\', you\'d get ‘BEAAD’, ‘YAAD’, ‘YAN’, ‘YKD’ and ‘BEKD’. I think you would be able to figure out the correct decoding. And why would you send me the word ‘BEAN’ anyway?”<br>Bob: &quot;OK, maybe that\'s a bad example, but I bet you that if you got a string of length 500 there would be tons of different decodings and with that many you would find at least two different ones that would make sense.”<br>Alice: &quot;How many different decodings?&quot;<br>Bob: &quot;Jillions!&quot; <br><br>For some reason, Alice is still unconvinced by Bob’s argument, so she requires a program that will determine how many decodings there can be for a given string using her code.<br><br>", input:"Input will consist of multiple input sets. Each set will consist of a single line of digits representing a valid encryption (for example, no line will begin with a 0). There will be no spaces between the digits. An input line of ‘0’ will terminate the input and should not be processed<br>", output:"For each input set, output the number of possible decodings for the input string. All answers will be within the range of a long variable.<br>", sample_in:"25114\n1111111111\n3333333333\n0", sample_out:"6\n89\n1\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nIt can be confirmed that no zero in the head and no trailing zeros in the integer. \nPlease pay special notice on the position of zero.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:198, vtotal_submit:968, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"East Central North America 2004", author:"", tag:["TEST"]}
{pid:1509, vid:1509, oj:"hdu", title:"Windows Message Queue", desc:"Message queue is the basic fundamental of windows system. For each process, the system maintains a message queue. If something happens to this process, such as mouse click, text change, the system will add a message to the queue. Meanwhile, the process will do a loop for getting message from the queue according to the priority value if it is not empty. Note that the less priority value means the higher priority. In this problem, you are asked to simulate the message queue for putting messages to and getting message from the message queue.", input:"There\'s only one test case in the input. Each line is a command, &quot;GET&quot; or &quot;PUT&quot;, which means getting message or putting message. If the command is &quot;PUT&quot;, there\'re one string means the message name and two integer means the parameter and priority followed by. There will be at most 60000 command. Note that one message can appear twice or more and if two messages have the same priority, the one comes first will be processed first.(i.e., FIFO for the same priority.) Process to the end-of-file.", output:"For each &quot;GET&quot; command, output the command getting from the message queue with the name and parameter in one line. If there\'s no message in the queue, output &quot;EMPTY QUEUE!&quot;. There\'s no output for &quot;PUT&quot; command.", sample_in:"GET\nPUT msg1 10 5\nPUT msg2 10 4\nGET\nGET\nGET", sample_out:"EMPTY QUEUE!\nmsg2 10\nmsg1 10\nEMPTY QUEUE!", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:761, vtotal_submit:3175, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Zhejiang University Local Contest 2006, Preliminary", author:"", tag:["TEST"]}
{pid:1510, vid:1510, oj:"hdu", title:"White Rectangles", desc:"You are given a chessboard made up of N squares by N squares with equal size. Some of the squares are colored black, and the others are colored white. Please write a program to calculate the number of rectangles which are completely made up of white squares. <br>", input:"There are multiple test cases. Each test case begins with an integer N (1 &lt;= N &lt;= 100), the board size. The following N lines, each with N characters, have only two valid character values:<br><br># - (sharp) representing a black square;<br>. - (point) representing a white square.<br><br>Process to the end of file.<br>", output:"For each test case in the input, your program must output the number of white rectangles, as shown in the sample output.<br><br>", sample_in:"2\n.#\n..\n4\n..#.\n##.#\n.#..\n.#.#", sample_out:"5\n15", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:297, vtotal_submit:767, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ZOJ Monthly, January 2004", author:"", tag:["TEST"]}
{pid:1511, vid:1511, oj:"hdu", title:"Increasing Sequences", desc:"Given a string of digits, insert commas to create a sequence of strictly increasing numbers so as to minimize the magnitude of the last number. For this problem, leading zeros are allowed in front of a number.", input:"Input will consist of multiple test cases. Each case will consist of one line, containing a string of digits of maximum length 80. A line consisting of a single 0 terminates input.<br>", output:"For each instance, output the comma separated strictly increasing sequence, with no spaces between commas or numbers. If there are several such sequences, pick the one which has the largest first value; if there’s a tie, the largest second number, etc.", sample_in:"3456\n3546\n3526\n0001\n100000101\n0", sample_out:"3,4,5,6\n35,46\n3,5,26\n0001\n100,000101", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:41, vtotal_submit:184, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1512, vid:1512, oj:"hdu", title:"Monkey King", desc:"Once in a forest, there lived N aggressive monkeys. At the beginning, they each does things in its own way and none of them knows each other. But monkeys can\'t avoid quarrelling, and it only happens between two monkeys who does not know each other. And when it happens, both the two monkeys will invite the strongest friend of them, and duel. Of course, after the duel, the two monkeys and all of there friends knows each other, and the quarrel above will no longer happens between these monkeys even if they have ever conflicted.<br><br>Assume that every money has a strongness value, which will be reduced to only half of the original after a duel(that is, 10 will be reduced to 5 and 5 will be reduced to 2).<br><br>And we also assume that every monkey knows himself. That is, when he is the strongest one in all of his friends, he himself will go to duel.<br>", input:"There are several test cases, and each case consists of two parts.<br><br>First part: The first line contains an integer N(N&lt;=100,000), which indicates the number of monkeys. And then N lines follows. There is one number on each line, indicating the strongness value of ith monkey(&lt;=32768).<br><br>Second part: The first line contains an integer M(M&lt;=100,000), which indicates there are M conflicts happened. And then M lines follows, each line of which contains two integers x and y, indicating that there is a conflict between the Xth monkey and Yth.<br><br>", output:"For each of the conflict, output -1 if the two monkeys know each other, otherwise output the strongness value of the strongest monkey in all friends of them after the duel.", sample_in:"5\n20\n16\n10\n10\n4\n5\n2 3\n3 4\n3 5\n4 5\n1 5", sample_out:"8\n5\n5\n-1\n10", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:533, vtotal_submit:2920, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"ZOJ 3rd Anniversary Contest", author:"", tag:["TEST"]}
{pid:1513, vid:1513, oj:"hdu", title:"Palindrome", desc:"A palindrome is a symmetrical string, that is, a string read identically from left to right as well as from right to left. You are to write a program which, given a string, determines the minimal number of characters to be inserted into the string in order to obtain a palindrome. <br><br>As an example, by inserting 2 characters, the string &quot;Ab3bd&quot; can be transformed into a palindrome (&quot;dAb3bAd&quot; or &quot;Adb3bdA&quot;). However, inserting fewer than 2 characters does not produce a palindrome. ", input:"Your program is to read from standard input. The first line contains one integer: the length of the input string N, 3 &lt;= N &lt;= 5000. The second line contains one string with length N. The string is formed from uppercase letters from \'A\' to \'Z\', lowercase letters from \'a\' to \'z\' and digits from \'0\' to \'9\'. Uppercase and lowercase letters are to be considered distinct.<br> ", output:"Your program is to write to standard output. The first line contains one integer, which is the desired minimal number.<br>", sample_in:"5\nAb3bd", sample_out:"2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:564, vtotal_submit:2657, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"IOI 2000", author:"", tag:["TEST"]}
{pid:1514, vid:1514, oj:"hdu", title:"Free Candies", desc:"Little Bob is playing a game. He wants to win some candies in it - as many as possible.<br><br>There are 4 piles, each pile contains N candies. Bob is given a basket which can hold at most 5 candies. Each time, he puts a candy at the top of one pile into the basket, and if there\'re two candies of the same color in it ,he can take both of them outside the basket and put them into his own pocket. When the basket is full and there are no two candies of the same color, the game ends. If the game is played perfectly, the game will end with no candies left in the piles. <br><br>For example, Bob may play this game like this (N=5): <br><br><img src=data/images/1514-1.jpg><br><br>Note that different numbers indicate different colors, there are 20 kinds of colors numbered 1..20. <br><br>\'Seems so hard...\'Bob got very much puzzled. How many pairs of candies could he take home at most? <br><br>", input:"The input will contain no more than 10 test cases. Each test case begins with a line containing a single integer n(1&lt;=n&lt;=40) representing the height of the piles. In the following n lines, each line contains four integers xi1,xi2,xi3,xi4 (in the range 1..20). Each integer indicates the color of the corresponding candy. The test case containing n=0 will terminate the input, you should not give an answer to this case.<br><br>", output:"Output the number of pairs of candies that the cleverest little child can take home. Print your answer in a single line for each test case.", sample_in:"5\n1 2 3 4\n1 5 6 7\n2 3 3 3\n4 9 8 6\n8 7 2 1\n1\n1 2 3 4\n3\n1 2 3 4\n5 6 7 8\n1 2 3 4\n0", sample_out:"8\n0\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:60, vtotal_submit:194, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"OIBH Online Programming Contest #1", author:"", tag:["TEST"]}
{pid:1515, vid:1515, oj:"hdu", title:"Anagrams by Stack", desc:"How can anagrams result from sequences of stack operations? There are two sequences of stack operators which can convert TROT to TORT: <br><br>[<br>i i i i o o o o<br>i o i i o o i o<br>]<br><br>where i stands for Push and o stands for Pop. Your program should, given pairs of words produce sequences of stack operations which convert the first word to the second.<br><br>A stack is a data storage and retrieval structure permitting two operations: <br><br>Push - to insert an item and<br>Pop - to retrieve the most recently pushed item <br>We will use the symbol i (in) for push and o (out) for pop operations for an initially empty stack of characters. Given an input word, some sequences of push and pop operations are valid in that every character of the word is both pushed and popped, and furthermore, no attempt is ever made to pop the empty stack. For example, if the word FOO is input, then the sequence: <br><br>i i o i o o is valid, but <br>i i o  is not (it\'s too short), neither is <br>i i o o o i (there\'s an illegal pop of an empty stack) <br><br>Valid sequences yield rearrangements of the letters in an input word. For example, the input word FOO and the sequence i i o i o o produce the anagram OOF. So also would the sequence i i i o o o. You are to write a program to input pairs of words and output all the valid sequences of i and o which will produce the second member of each pair from the first.<br>", input:"The input will consist of several lines of input. The first line of each pair of input lines is to be considered as a source word (which does not include the end-of-line character). The second line (again, not including the end-of-line character) of each pair is a target word. The end of input is marked by end of file.", output:"For each input pair, your program should produce a sorted list of valid sequences of i and o which produce the target word from the source word. Each list should be delimited by <br><br>[<br>]<br><br>and the sequences should be printed in &quot;dictionary order&quot;. Within each sequence, each i and o is followed by a single space and each sequence is terminated by a new line.", sample_in:"madam\nadamm\nbahama\nbahama\nlong\nshort\neric\nrice", sample_out:"[\ni i i i o o o i o o \ni i i i o o o o i o \ni i o i o i o i o o \ni i o i o i o o i o \n]\n[\ni o i i i o o i i o o o \ni o i i i o o o i o i o \ni o i o i o i i i o o o \ni o i o i o i o i o i o \n]\n[\n]\n[\ni i o i o i o o \n]", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:323, vtotal_submit:1107, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Zhejiang University Local Contest 2001", author:"", tag:["TEST"]}
{pid:1516, vid:1516, oj:"hdu", title:"String Distance and Transform Process", desc:"String Distance is a non-negative integer that measures the distance between two strings. Here we give the definition. A transform list is a list of string, where each string, except for the last one, can be changed to the string followed by adding a character, deleting a character or replacing a character. The length of a transform list is the count of strings minus 1 (that is the count of operations to transform these two strings). The distance between two strings is the length of a transform list from one string to the other with the minimal length. You are to write a program to calculate the distance between two strings and give the corresponding transform list. ", input:"Input consists a sequence of string pairs, each string pair consists two lines, each string occupies one line. The length of each string will be no more than 80.<br>", output:"For each string pair, you should give an integer to indicate the distance between them at the first line, and give a sequence of command to transform string 1 to string 2. Each command is a line lead by command count, then the command. A command must be<br><br>Insert pos,value<br>Delete pos<br>Replace pos,value<br><br>where pos is the position of the string and pos should be between 1 and the current length of the string (in Insert command, pos can be 1 greater than the length), and value is a character. Actually many command lists can satisfy the request, but only one of them is required.<br>", sample_in:"abcac\nbcd\naaa\naabaaaa", sample_out:"3\n1 Delete 1\n2 Replace 3,d\n3 Delete 4\n4\n1 Insert 1,a\n2 Insert 2,a\n3 Insert 3,b\n4 Insert 7,a", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:43, vtotal_submit:104, special_status:1, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 1996, Shanghai (Mainland China)", author:"", tag:["TEST"]}
{pid:1517, vid:1517, oj:"hdu", title:"A Multiplication Game", desc:"Stan and Ollie play the game of multiplication by multiplying an integer p by one of the numbers 2 to 9. Stan always starts with p = 1, does his multiplication, then Ollie multiplies the number, then Stan and so on. Before a game starts, they draw an integer 1 &lt; n &lt; 4294967295 and the winner is who first reaches p &gt;= n.<br>", input:"Each line of input contains one integer number n.<br>", output:"For each line of input output one line either <br><br>Stan wins. <br><br>or <br><br>Ollie wins.<br><br>assuming that both of them play perfectly.<br>", sample_in:"162\n17\n34012226", sample_out:"Stan wins.\nOllie wins.\nStan wins.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1335, vtotal_submit:3271, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2001.09.22", author:"", tag:["TEST"]}
{pid:1518, vid:1518, oj:"hdu", title:"Square", desc:"Given a set of sticks of various lengths, is it possible to join them end-to-end to form a square?<br>", input:"The first line of input contains N, the number of test cases. Each test case begins with an integer 4 &lt;= M &lt;= 20, the number of sticks. M integers follow; each gives the length of a stick - an integer between 1 and 10,000.<br>", output:"For each case, output a line containing &quot;yes&quot; if is is possible to form a square; otherwise output &quot;no&quot;.<br>", sample_in:"3\n4 1 1 1 1\n5 10 20 30 40 50\n8 1 7 2 6 4 4 3 5", sample_out:"yes\nno\nyes", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:963, vtotal_submit:7026, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2002.09.21", author:"", tag:["TEST"]}
{pid:1519, vid:1519, oj:"hdu", title:"Think Positive", desc:"It is well known, that the year on planet Eisiem has n days. Of course, some days are very good for people, while some others are just horrible. Long observations have shown for each day of the year whether this day is good for most people, or bad.<br><br>The new president of the Planet Federation wants all people to be happy. He knows that good emotions have a tendency to accumulate, just like bad ones do. The New Year however is a special event and all emotions accumulated by this moment just disappear. Therefore the president wants to change the calendar on Eisiem and choose the new first day of the year, so that the positive emotions would prevail the whole year.<br><br>More precisely, for all i from 1 to n let ai be 1 if i-th day is good for most people and -1 if it is bad. Let sjk be the sum of ai for all days from the j-th day of the year to the k-th, that is:<br><br><img src=data/images/1519-1.jpg><br><br><br>President wants to find such j to order the j-th day to be the first day of the year, that sjk is positive for all k from 1 to n. Since he wants several variants to choose from, he asks you to find all such j. Since he doesn\'t want to get too much information at once, first of all he wants to know the number of such j. That is exactly your task.<br>", input:"The input contains multiple test cases. The first line of the input is a single integer T (1 &lt;= T &lt;= 30) which is the number of test cases. T test cases follow, each preceded by a single blank line.<br><br>The first line of each test case contains n - the number of days (1 &lt;= n &lt;= 200 000). Next line contains n integer numbers - ai.<br><br>", output:"For each case, output the number of different indices j, such that sjk is positive for all k, in a single line. <br>", sample_in:"2\n\n5\n1 -1 1 -1 1\n7\n1 1 1 1 1 1 1", sample_out:"1\n7", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:17, vtotal_submit:108, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"ZOJ", author:"", tag:["TEST"]}
{pid:1520, vid:1520, oj:"hdu", title:"Anniversary party", desc:"There is going to be a party to celebrate the 80-th Anniversary of the Ural State University. The University has a hierarchical structure of employees. It means that the supervisor relation forms a tree rooted at the rector V. E. Tretyakov. In order to make the party funny for every one, the rector does not want both an employee and his or her immediate supervisor to be present. The personnel office has evaluated conviviality of each employee, so everyone has some number (rating) attached to him or her. Your task is to make a list of guests with the maximal possible sum of guests\' conviviality ratings.<br>", input:"Employees are numbered from 1 to N. A first line of input contains a number N. 1 &lt;= N &lt;= 6 000. Each of the subsequent N lines contains the conviviality rating of the corresponding employee. Conviviality rating is an integer number in a range from -128 to 127. After that go T lines that describe a supervisor relation tree. Each line of the tree specification has the form: <br>L K <br>It means that the K-th employee is an immediate supervisor of the L-th employee. Input is ended with the line <br>0 0 ", output:"Output should contain the maximal sum of guests\' ratings.<br>", sample_in:"7\n1\n1\n1\n1\n1\n1\n1\n1 3\n2 3\n6 4\n7 4\n4 5\n3 5\n0 0", sample_out:"5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:906, vtotal_submit:3864, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1521, vid:1521, oj:"hdu", title:"排列组合", desc:"有n种物品，并且知道每种物品的数量。要求从中选出m件物品的排列数。例如有两种物品A,B，并且数量都是1，从中选2件物品，则排列有&quot;AB&quot;,&quot;BA&quot;两种。<br>", input:"每组输入数据有两行，第一行是二个数n,m(1&lt;=m,n&lt;=10)，表示物品数，第二行有n个数，分别表示这n件物品的数量。", output:"对应每组数据输出排列数。(任何运算不会超出2^31的范围)", sample_in:"2 2\n1 1", sample_out:"2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:564, vtotal_submit:2053, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"xhd", tag:["TEST"]}
{pid:1522, vid:1522, oj:"hdu", title:"Marriage is Stable", desc:"Albert, Brad, Chuck are happy bachelors who are in love with Laura, Marcy, Nancy. They all have three choices. But in fact, they do have some preference in mind. Say Albert, he likes Laura best, but that doesn\'t necesarily mean Laura likes him. Laura likes Chuck more than Albert. So if Albert can\'t marry Laura, he thinks Nancy a sensible choice. For Albert, he orders the girls Laura &gt; Nancy &gt; Marcy.<br><br>For the boys:<br><br>Albert: Laura &gt; Nancy &gt; Marcy<br>Brad: Marcy &gt; Nancy &gt; Laura<br>Chuck: Laura &gt; Marcy &gt; Nancy<br><br>For the girls:<br><br>Laura: Chuck &gt; Albert &gt; Brad<br>Marcy: Albert &gt; Chuck &gt; Brad<br>Nancy: Brad &gt; Albert &gt; Chuck<br><br>But if they were matched randomly, such as<br><br>Albert &lt;-&gt; Laura <br>Brad &lt;-&gt; Marcy<br>Chuck &lt;-&gt; Nancy<br><br>they would soon discover it\'s not a nice solution. For Laura, she likes Chuck instead of Albert. And what\'s more, Chuck likes Laura better than Nancy. So Laura and Chuck are likely to come together, leaving poor Albert and Nancy.<br><br>Now it\'s your turn to find a stable marriage. A stable marriage means for any boy G and girl M, with their choice m[G] and m[M], it will not happen that rank(G, M) &lt; rank(G, m[G]）and rank(M, G) &lt; rank(M, m[M]).<br>", input:"Each case starts with an integer n (1 &lt;= n &lt;= 500), the number of matches to make.<br><br>The following n lines contain n + 1 names each, the first being name of the boy, and rest being the rank of the girls.<br><br>The following n lines are the same information for the girls.<br><br>Process to the end of file.<br>", output:"If there is a stable marriage, print n lines with two names on each line. You can choose any one if there are multiple solution. Print &quot;Impossible&quot; otherwise.<br><br>Print a blank line after each test.<br>", sample_in:"3\nAlbert Laura Nancy Marcy\nBrad Marcy Nancy Laura\nChuck Laura Marcy Nancy\nLaura Chuck Albert Brad\nMarcy Albert Chuck Brad\nNancy Brad Albert Chuck", sample_out:"Albert Nancy\nBrad Marcy\nChuck Laura", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:188, vtotal_submit:469, special_status:1, time_limit:1000, mem_limit:32768, hint:"", source:"ZOJ", author:"", tag:["TEST"]}
{pid:1523, vid:1523, oj:"hdu", title:"Decoding Morse Sequences", desc:"Before the digital age, the most common &quot;binary&quot; code for radio communication was the Morse code. In Morse code, symbols are encoded as sequences of short and long pulses (called dots and dashes respectively). The following table reproduces the Morse code for the alphabet, where dots and dashes are represented as ASCII characters &quot;.&quot; and &quot;-&quot;:<br><br><img src=data/images/1523-1.gif><br>Notice that in the absence of pauses between letters there might be multiple interpretations of a Morse sequence. For example, the sequence -.-..-- could be decoded both as CAT or NXT (among others). A human Morse operator would use other context information (such as a language dictionary) to decide the appropriate decoding. But even provided with such dictionary one can obtain multiple phrases from a single Morse sequence.<br><br>Write a program which for each data set:<br><br>reads a Morse sequence and a list of words (a dictionary),<br><br>computes the number of distinct phrases that can be obtained from the given Morse sequence using words from the dictionary,<br><br>writes the result.<br><br>Notice that we are interested in full matches, i.e. the complete Morse sequence must be matched to words in the dictionary.<br>", input:"The rst line of the input contains exactly one positive integer d equal to the number of data sets, 1 &lt;= d &lt;= 20. The data sets follow.<br><br>The first line of each data set contains a Morse sequence - a nonempty sequence of at most 10 000 characters &quot;.&quot; and &quot;-&quot; with no spaces in between.<br><br>The second line contains exactly one integer n, 1 &lt;= n &lt;= 10 000, equal to the number of words in a dictionary. Each of the following n lines contains one dictionary word - a nonempty sequence of at most 20 capital letters from &quot;A&quot; to &quot;Z&quot;. No word occurs in the dictionary more than once.<br><br>", output:"The output should consist of exactly d lines, one line for each data set. Line i should contain one integer equal to the number of distinct phrases into which the Morse sequence from the i-th data set can be parsed. You may assume that this number is at most 2 * 10^9 for every single data set.", sample_in:"1\n.---.--.-.-.-.---...-.---.\n6\nAT\nTACK\nTICK\nATTACK\nDAWN\nDUSK", sample_out:"2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:24, vtotal_submit:121, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"Central Europe 2001", author:"", tag:["TEST"]}
{pid:1524, vid:1524, oj:"hdu", title:"A Chess Game", desc:"Let\'s design a new chess game. There are N positions to hold M chesses in this game. Multiple chesses can be located in the same position. The positions are constituted as a topological graph, i.e. there are directed edges connecting some positions, and no cycle exists. Two players you and I move chesses alternately. In each turn the player should move only one chess from the current position to one of its out-positions along an edge. The game does not end, until one of the players cannot move chess any more. If you cannot move any chess in your turn, you lose. Otherwise, if the misfortune falls on me... I will disturb the chesses and play it again. <br><br>Do you want to challenge me? Just write your program to show your qualification!<br>", input:"Input contains multiple test cases. Each test case starts with a number N (1 &lt;= N &lt;= 1000) in one line. Then the following N lines describe the out-positions of each position. Each line starts with an integer Xi that is the number of out-positions for the position i. Then Xi integers following specify the out-positions. Positions are indexed from 0 to N-1. Then multiple queries follow. Each query occupies only one line. The line starts with a number M (1 &lt;= M &lt;= 10), and then come M integers, which are the initial positions of chesses. A line with number 0 ends the test case.<br>", output:"There is one line for each query, which contains a string &quot;WIN&quot; or &quot;LOSE&quot;. &quot;WIN&quot; means that the player taking the first turn can win the game according to a clever strategy; otherwise &quot;LOSE&quot; should be printed.<br>", sample_in:"4\n2 1 2\n0\n1 3\n0\n1 0\n2 0 2\n0\n\n4\n1 1\n1 2\n0\n0\n2 0 1\n2 1 1\n3 0 1 3\n0", sample_out:"WIN\nWIN\nWIN\nLOSE\nWIN", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:380, vtotal_submit:1235, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"PKU Monthly", author:"", tag:["TEST"]}
{pid:1525, vid:1525, oj:"hdu", title:"Euclid\'s Game", desc:"Two players, Stan and Ollie, play, starting with two natural numbers. Stan, the first player, subtracts any positive multiple of the lesser of the two numbers from the greater of the two numbers, provided that the resulting number must be nonnegative. Then Ollie, the second player, does the same with the two resulting numbers, then Stan, etc., alternately, until one player is able to subtract a multiple of the lesser number from the greater to reach 0, and thereby wins. For example, the players may start with (25,7): <br><br>25 7<br>11 7<br>4 7<br>4 3<br>1 3<br>1 0 <br><br>an Stan wins. <br><br>", input:"The input consists of a number of lines. Each line contains two positive integers giving the starting two numbers of the game. Stan always starts.", output:"For each line of input, output one line saying either Stan wins or Ollie wins assuming that both of them play perfectly. The last line of input contains two zeroes and should not be processed. <br><br>", sample_in:"34 12\n15 24\n0 0", sample_out:"Stan wins\nOllie wins", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:486, vtotal_submit:1588, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"University of Waterloo Local Contest 2002.09.28", author:"", tag:["TEST"]}
{pid:1526, vid:1526, oj:"hdu", title:"A Plug for UNIX", desc:"You are in charge of setting up the press room for the inaugural meeting of the United Nations Internet eXecutive (UNIX), which has an international mandate to make the free flow of information and ideas on the Internet as cumbersome and bureaucratic as possible. <br>Since the room was designed to accommodate reporters and journalists from around the world, it is equipped with electrical receptacles to suit the different shapes of plugs and voltages used by appliances in all of the countries that existed when the room was built. Unfortunately, the room was built many years ago when reporters used very few electric and electronic devices and is equipped with only one receptacle of each type. These days, like everyone else, reporters require many such devices to do their jobs: laptops, cell phones, tape recorders, pagers, coffee pots, microwave ovens, blow dryers, curling <br>irons, tooth brushes, etc. Naturally, many of these devices can operate on batteries, but since the meeting is likely to be long and tedious, you want to be able to plug in as many as you can. <br>Before the meeting begins, you gather up all the devices that the reporters would like to use, and attempt to set them up. You notice that some of the devices use plugs for which there is no receptacle. You wonder if these devices are from countries that didn\'t exist when the room was built. For some receptacles, there are several devices that use the corresponding plug. For other receptacles, there are no devices that use the corresponding plug. <br>In order to try to solve the problem you visit a nearby parts supply store. The store sells adapters that allow one type of plug to be used in a different type of outlet. Moreover, adapters are allowed to be plugged into other adapters. The store does not have adapters for all possible combinations of plugs and receptacles, but there is essentially an unlimited supply of the ones they do have. <br><br>This problem contains multiple test cases!<br><br>The first line of a multiple input is an integer N, then a blank line followed by N input blocks. Each input block is in the format indicated in the problem description. There is a blank line between input blocks.<br><br>The output format consists of N output blocks. There is a blank line between output blocks.<br>", input:"The input will consist of one case. The first line contains a single positive integer n (1 &lt;= n &lt;= 100) indicating the number of receptacles in the room. The next n lines list the receptacle types found in the room. Each receptacle type consists of a string of at most 24 alphanumeric characters. The next line contains a single positive integer m (1 &lt;= m &lt;= 100) indicating the number of devices you would like to plug in. Each of the next m lines lists the name of a device followed by the type of plug it uses (which is identical to the type of receptacle it requires). A device name is a string of at most 24 alphanumeric characters. No two devices will have exactly the same name. The plug type is separated from the device name by a space. The next line contains a single positive integer k (1 &lt;= k &lt;= 100) indicating the number of different varieties of adapters that are available. Each of the next k lines describes a variety of adapter, giving the type of receptacle provided by the adapter, followed by a space, followed by the type of plug. <br>", output:"A line containing a single non-negative integer indicating the smallest number of devices that cannot be plugged in. ", sample_in:"1\n\n4\nA\nB\nC\nD\n5\nlaptop B\nphone C\npager B\nclock B\ncomb X\n3\nB X\nX A\nX D", sample_out:"1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:112, vtotal_submit:755, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"East Central North America 1999", author:"", tag:["TEST"]}
{pid:1527, vid:1527, oj:"hdu", title:"取石子游戏", desc:"有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，如果轮到你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。", input:"输入包含若干行，表示若干种石子的初始情况，其中每一行包含两个非负整数a和b，表示两堆石子的数目，a和b都不大于1,000,000,000。", output:"输出对应也有若干行，每行包含一个数字1或0，如果最后你是胜者，则为1，反之，则为0。", sample_in:"2 1\n8 4\n4 7", sample_out:"0\n1\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1173, vtotal_submit:3091, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NOI", author:"", tag:["TEST"]}
{pid:1528, vid:1528, oj:"hdu", title:"Card Game Cheater", desc:"Adam and Eve play a card game using a regular deck of 52 cards. The rules are simple. The players sit on opposite sides of a table, facing each other. Each player gets k cards from the deck and, after looking at them, places the cards face down in a row on the table. Adam’s cards are numbered from 1 to k from his left, and Eve’s cards are numbered 1 to k from her right (so Eve’s i:th card is opposite Adam’s i:th card). The cards are turned face up, and points are awarded as follows (for each i ∈ {1, . . . , k}):<br><br><br>If Adam’s i:th card beats Eve’s i:th card, then Adam gets one point.<br><br><br>If Eve’s i:th card beats Adam’s i:th card, then Eve gets one point.<br><br><br>A card with higher value always beats a card with a lower value: a three beats a two, a four beats a three and a two, etc. An ace beats every card except (possibly) another ace.<br><br><br>If the two i:th cards have the same value, then the suit determines who wins: hearts beats all other suits, spades beats all suits except hearts, diamond beats only clubs, and clubs does not beat any suit. <br><br>For example, the ten of spades beats the ten of diamonds but not the Jack of clubs. <br><br>This ought to be a game of chance, but lately Eve is winning most of the time, and the reason is that she has started to use marked cards. In other words, she knows which cards Adam has on the table before he turns them face up. Using this information she orders her own cards so that she gets as many points as possible.<br><br>Your task is to, given Adam’s and Eve’s cards, determine how many points Eve will get if she plays optimally. <br><br>", input:"There will be several test cases. The first line of input will contain a single positive integer N giving the number of test cases. After that line follow the test cases.<br><br>Each test case starts with a line with a single positive integer k &lt;= 26 which is the number of cards each player gets. The next line describes the k cards Adam has placed on the table, left to right. The next line describes the k cards Eve has (but she has not yet placed them on the table). A card is described by two characters, the first one being its value (2, 3, 4, 5, 6, 7, 8 ,9, T, J, Q, K, or A), and the second one being its suit (C, D, S, or H). Cards are separated by white spaces. So if Adam’s cards are the ten of clubs, the two of hearts, and the Jack of diamonds, that could be described by the line<br><br>TC 2H JD<br>", output:"For each test case output a single line with the number of points Eve gets if she picks the optimal way to arrange her cards on the table.<br><br>", sample_in:"3\n1\nJD\nJH\n2\n5D TC\n4C 5H\n3\n2H 3H 4H\n2D 3D 4D", sample_out:"1\n1\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:405, vtotal_submit:992, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Northwestern Europe 2004", author:"", tag:["TEST"]}
{pid:1529, vid:1529, oj:"hdu", title:"Cashier Employment", desc:"A supermarket in Tehran is open 24 hours a day every day and needs a number of cashiers to fit its need. The supermarket manager has hired you to help him, solve his problem. The problem is that the supermarket needs different number of cashiers at different times of each day (for example, a few cashiers after midnight, and many in the afternoon) to provide good service to its customers, and he wants to hire the least number of cashiers for this job. <br>The manager has provided you with the least number of cashiers needed for every one-hour slot of the day. This data is given as R(0), R(1), ..., R(23): R(0) represents the least number of cashiers needed from midnight to 1:00 A.M., R(1) shows this number for duration of 1:00 A.M. to 2:00 A.M., and so on. Note that these numbers are the same every day. There are N qualified applicants for this job. Each applicant i works non-stop once each 24 hours in a shift of exactly 8 hours starting from a specified hour, say ti (0 &lt;= ti &lt;= 23), exactly from the start of the hour mentioned. That is, if the ith applicant is hired, he/she will work starting from ti o\'clock sharp for 8 hours. Cashiers do not replace one another and work exactly as scheduled, and there are enough cash registers and counters for those who are hired.<br><br>You are to write a program to read the R(i) \'s for i=0...23 and ti \'s for i=1...N that are all, non-negative integer numbers and compute the least number of cashiers needed to be employed to meet the mentioned constraints. Note that there can be more cashiers than the least number needed for a specific slot.<br><br>", input:"The first line of input is the number of test cases for this problem (at most 20). Each test case starts with 24 integer numbers representing the R(0), R(1), ..., R(23) in one line (R(i) can be at most 1000). Then there is N, number of applicants in another line (0 &lt;= N &lt;= 1000), after which come N lines each containing one ti (0 &lt;= ti &lt;= 23). There are no blank lines between test cases.<br>", output:"For each test case, the output should be written in one line, which is the least number of cashiers needed.<br><br>If there is no solution for the test case, you should write No Solution for that case.<br>", sample_in:"1\n1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n5\n0\n23\n22\n1\n10", sample_out:"1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:167, vtotal_submit:764, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 2000, Tehran (Iran)", author:"", tag:["TEST"]}
{pid:1530, vid:1530, oj:"hdu", title:"Maximum Clique", desc:"Given a graph G(V, E), a clique is a sub-graph g(v, e), so that for all vertex pairs v1, v2 in v, there exists an edge (v1, v2) in e. Maximum clique is the clique that has maximum number of vertex.<br>", input:"Input contains multiple tests. For each test:<br><br>The first line has one integer n, the number of vertex. (1 &lt; n &lt;= 50)<br><br>The following n lines has n 0 or 1 each, indicating whether an edge exists between i (line number) and j (column number).<br><br>A test with n = 0 signals the end of input. This test should not be processed.<br>", output:"One number for each test, the number of vertex in maximum clique.<br>", sample_in:"5\n0 1 1 0 1\n1 0 1 1 1\n1 1 0 1 1\n0 1 1 0 1\n1 1 1 1 0\n0", sample_out:"4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:400, vtotal_submit:2340, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"ZOJ Monthly, February 2003", author:"", tag:["TEST"]}
{pid:1531, vid:1531, oj:"hdu", title:"King", desc:"Once, in one kingdom, there was a queen and that queen was expecting a baby. The queen prayed: ``If my child was a son and if only he was a sound king.\'\' After nine months her child was born, and indeed, she gave birth to a nice son. <br>Unfortunately, as it used to happen in royal families, the son was a little retarded. After many years of study he was able just to add integer numbers and to compare whether the result is greater or less than a given integer number. In addition, the numbers had to be written in a sequence and he was able to sum just continuous subsequences of the sequence. <br><br>The old king was very unhappy of his son. But he was ready to make everything to enable his son to govern the kingdom after his death. With regards to his son\'s skills he decided that every problem the king had to decide about had to be presented in a form of a finite sequence of integer numbers and the decision about it would be done by stating an integer constraint (i.e. an upper or lower limit) for the sum of that sequence. In this way there was at least some hope that his son would be able to make some decisions. <br><br>After the old king died, the young king began to reign. But very soon, a lot of people became very unsatisfied with his decisions and decided to dethrone him. They tried to do it by proving that his decisions were wrong. <br><br>Therefore some conspirators presented to the young king a set of problems that he had to decide about. The set of problems was in the form of subsequences Si = {aSi, aSi+1, ..., aSi+ni} of a sequence S = {a1, a2, ..., an}. The king thought a minute and then decided, i.e. he set for the sum aSi + aSi+1 + ... + aSi+ni of each subsequence Si an integer constraint ki (i.e. aSi + aSi+1 + ... + aSi+ni &lt; ki or aSi + aSi+1 + ... + aSi+ni &gt; ki resp.) and declared these constraints as his decisions. <br><br>After a while he realized that some of his decisions were wrong. He could not revoke the declared constraints but trying to save himself he decided to fake the sequence that he was given. He ordered to his advisors to find such a sequence S that would satisfy the constraints he set. Help the advisors of the king and write a program that decides whether such a sequence exists or not.<br>", input:"The input consists of blocks of lines. Each block except the last corresponds to one set of problems and king\'s decisions about them. In the first line of the block there are integers n, and m where 0 &lt; n &lt;= 100 is length of the sequence S and 0 &lt; m &lt;= 100 is the number of subsequences Si. Next m lines contain particular decisions coded in the form of quadruples si, ni, oi, ki, where oi represents operator &gt; (coded as gt) or operator &lt; (coded as lt) respectively. The symbols si, ni and ki have the meaning described above. The last block consists of just one line containing 0.", output:"The output contains the lines corresponding to the blocks in the input. A line contains text successful conspiracy when such a sequence does not exist. Otherwise it contains text lamentable kingdom. There is no line in the output corresponding to the last ``null\'\' block of the input.", sample_in:"4 2\n1 2 gt 0\n2 2 lt 2\n1 2\n1 0 gt 0\n1 0 lt 0\n0", sample_out:"lamentable kingdom\nsuccessful conspiracy", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:261, vtotal_submit:926, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Central Europe 1997", author:"", tag:["TEST"]}
{pid:1532, vid:1532, oj:"hdu", title:"Drainage Ditches", desc:"Every time it rains on Farmer John\'s fields, a pond forms over Bessie\'s favorite clover patch. This means that the clover is covered by water for awhile and takes quite a long time to regrow. Thus, Farmer John has built a set of drainage ditches so that Bessie\'s clover patch is never covered in water. Instead, the water is drained to a nearby stream. Being an ace engineer, Farmer John has also installed regulators at the beginning of each ditch, so he can control at what rate water flows into that ditch. <br>Farmer John knows not only how many gallons of water each ditch can transport per minute but also the exact layout of the ditches, which feed out of the pond and into each other and stream in a potentially complex network. <br>Given all this information, determine the maximum rate at which water can be transported out of the pond and into the stream. For any given ditch, water flows in only one direction, but there might be a way that water can flow in a circle. <br>", input:"The input includes several cases. For each case, the first line contains two space-separated integers, N (0 &lt;= N &lt;= 200) and M (2 &lt;= M &lt;= 200). N is the number of ditches that Farmer John has dug. M is the number of intersections points for those ditches. Intersection 1 is the pond. Intersection point M is the stream. Each of the following N lines contains three integers, Si, Ei, and Ci. Si and Ei (1 &lt;= Si, Ei &lt;= M) designate the intersections between which this ditch flows. Water will flow through this ditch from Si to Ei. Ci (0 &lt;= Ci &lt;= 10,000,000) is the maximum rate at which water will flow through the ditch.<br>", output:"For each case, output a single integer, the maximum rate at which water may emptied from the pond. <br>", sample_in:"5 4\n1 2 40\n1 4 20\n2 4 20\n2 3 30\n3 4 10", sample_out:"50", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1476, vtotal_submit:7631, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"USACO 93", author:"", tag:["TEST"]}
{pid:1533, vid:1533, oj:"hdu", title:"Going Home", desc:"On a grid map there are n little men and n houses. In each unit time, every little man can move one unit step, either horizontally, or vertically, to an adjacent point. For each little man, you need to pay a $1 travel fee for every step he moves, until he enters a house. The task is complicated with the restriction that each house can accommodate only one little man. <br><br>Your task is to compute the minimum amount of money you need to pay in order to send these n little men into those n different houses. The input is a map of the scenario, a \'.\' means an empty space, an \'H\' represents a house on that point, and am \'m\' indicates there is a little man on that point. <br><img src=data/images/1533.jpg><br>You can think of each point on the grid map as a quite large square, so it can hold n little men at the same time; also, it is okay if a little man steps on a grid with a house without entering that house.", input:"There are one or more test cases in the input. Each case starts with a line giving two integers N and M, where N is the number of rows of the map, and M is the number of columns. The rest of the input will be N lines describing the map. You may assume both N and M are between 2 and 100, inclusive. There will be the same number of \'H\'s and \'m\'s on the map; and there will be at most 100 houses. Input will terminate with 0 0 for N and M.<br>", output:"For each test case, output one line with the single integer, which is the minimum amount, in dollars, you need to pay. <br>", sample_in:"2 2\n.m\nH.\n5 5\nHH..m\n.....\n.....\n.....\nmm..H\n7 8\n...H....\n...H....\n...H....\nmmmHmmmm\n...H....\n...H....\n...H....\n0 0", sample_out:"2\n10\n28", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:655, vtotal_submit:2422, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"Pacific Northwest 2004", author:"", tag:["TEST"]}
{pid:1534, vid:1534, oj:"hdu", title:"Schedule Problem", desc:"A project can be divided into several parts. Each part should be completed continuously. This means if a part should take 3 days, we should use a continuous 3 days do complete it. There are four types of constrains among these parts which are FAS, FAF, SAF and SAS. A constrain between parts is FAS if the first one should finish after the second one started. FAF is finish after finish. SAF is start after finish, and SAS is start after start. Assume there are enough people involved in the projects, which means we can do any number of parts concurrently. You are to write a program to give a schedule of a given project, which has the shortest time. ", input:"The input file consists a sequences of projects.<br><br>Each project consists the following lines:<br><br>the count number of parts (one line) (0 for end of input)<br><br>times should be taken to complete these parts, each time occupies one line<br><br>a list of FAS, FAF, SAF or SAS and two part number indicates a constrain of the two parts<br><br>a line only contains a \'#\' indicates the end of a project <br>", output:"Output should be a list of lines, each line includes a part number and the time it should start. Time should be a non-negative integer, and the start time of first part should be 0. If there is no answer for the problem, you should give a non-line output containing &quot;impossible&quot;.<br><br>A blank line should appear following the output for each project.<br><br>", sample_in:"3\n2\n3\n4\nSAF 2 1\nFAF 3 2\n#\n3\n1\n1\n1\nSAF 2 1\nSAF 3 2\nSAF 1 3\n#\n0", sample_out:"Case 1:\n1 0\n2 2\n3 1\n\nCase 2:\nimpossible", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:253, vtotal_submit:1162, special_status:1, time_limit:1000, mem_limit:32768, hint:"", source:"Asia 1996, Shanghai (Mainland China)", author:"", tag:["TEST"]}
{pid:1535, vid:1535, oj:"hdu", title:"Invitation Cards", desc:"In the age of television, not many people attend theater performances. Antique Comedians of Malidinesia are aware of this fact. They want to propagate theater and, most of all, Antique Comedies. They have printed invitation cards with all the necessary information and with the programme. A lot of students were hired to distribute these invitations among the people. Each student volunteer has assigned exactly one bus stop and he or she stays there the whole day and gives invitation to people travelling by bus. A special course was taken where students learned how to influence people and what is the difference between influencing and robbery. <br>The transport system is very special: all lines are unidirectional and connect exactly two stops. Buses leave the originating stop with passangers each half an hour. After reaching the destination stop they return empty to the originating stop, where they wait until the next full half an hour, e.g. X:00 or X:30, where \'X\' denotes the hour. The fee for transport between two stops is given by special tables and is payable on the spot. The lines are planned in such a way, that each round trip (i.e. a journey starting and finishing at the same stop) passes through a Central Checkpoint Stop (CCS) where each passenger has to pass a thorough check including body scan. <br><br>All the ACM student members leave the CCS each morning. Each volunteer is to move to one predetermined stop to invite passengers. There are as many volunteers as stops. At the end of the day, all students travel back to CCS. You are to write a computer program that helps ACM to minimize the amount of money to pay every day for the transport of their employees. <br><br>", input:"The input consists of N cases. The first line of the input contains only positive integer N. Then follow the cases. Each case begins with a line containing exactly two integers P and Q, 1 &lt;= P,Q &lt;= 1000000. P is the number of stops including CCS and Q the number of bus lines. Then there are Q lines, each describing one bus line. Each of the lines contains exactly three numbers - the originating stop, the destination stop and the price. The CCS is designated by number 1. Prices are positive integers the sum of which is smaller than 1000000000. You can also assume it is always possible to get from any stop to any other stop. <br>", output:"For each case, print one line containing the minimum amount of money to be paid each day by ACM for the travel costs of its volunteers. <br>", sample_in:"2\n2 2\n1 2 13\n2 1 33\n4 6\n1 2 10\n2 1 60\n1 3 20\n3 4 10\n2 4 5\n4 1 50", sample_out:"46\n210", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:359, vtotal_submit:1637, special_status:0, time_limit:5000, mem_limit:65536, hint:"", source:"Central Europe 1998", author:"", tag:["TEST"]}
{pid:1536, vid:1536, oj:"hdu", title:"S-Nim", desc:"Arthur and his sister Caroll have been playing a game called Nim for some time now. Nim is played as follows:<br><br><br>&nbsp;&nbsp;The starting position has a number of heaps, all containing some, not necessarily equal, number of beads.<br><br>&nbsp;&nbsp;The players take turns chosing a heap and removing a positive number of beads from it.<br><br>&nbsp;&nbsp;The first player not able to make a move, loses.<br><br><br>Arthur and Caroll really enjoyed playing this simple game until they recently learned an easy way to always be able to find the best move:<br><br><br>&nbsp;&nbsp;Xor the number of beads in the heaps in the current position (i.e. if we have 2, 4 and 7 the xor-sum will be 1 as 2 xor 4 xor 7 = 1).<br><br>&nbsp;&nbsp;If the xor-sum is 0, too bad, you will lose.<br><br>&nbsp;&nbsp;Otherwise, move such that the xor-sum becomes 0. This is always possible.<br><br><br>It is quite easy to convince oneself that this works. Consider these facts:<br><br>&nbsp;&nbsp;The player that takes the last bead wins.<br><br>&nbsp;&nbsp;After the winning player\'s last move the xor-sum will be 0.<br><br>&nbsp;&nbsp;The xor-sum will change after every move.<br><br><br>Which means that if you make sure that the xor-sum always is 0 when you have made your move, your opponent will never be able to win, and, thus, you will win. <br><br>Understandibly it is no fun to play a game when both players know how to play perfectly (ignorance is bliss). Fourtunately, Arthur and Caroll soon came up with a similar game, S-Nim, that seemed to solve this problem. Each player is now only allowed to remove a number of beads in some predefined set S, e.g. if we have S =(2, 5) each player is only allowed to remove 2 or 5 beads. Now it is not always possible to make the xor-sum 0 and, thus, the strategy above is useless. Or is it? <br><br>your job is to write a program that determines if a position of S-Nim is a losing or a winning position. A position is a winning position if there is at least one move to a losing position. A position is a losing position if there are no moves to a losing position. This means, as expected, that a position with no legal moves is a losing position.", input:"Input consists of a number of test cases. For each test case: The first line contains a number k (0 &lt; k ≤ 100 describing the size of S, followed by k numbers si (0 &lt; si ≤ 10000) describing S. The second line contains a number m (0 &lt; m ≤ 100) describing the number of positions to evaluate. The next m lines each contain a number l (0 &lt; l ≤ 100) describing the number of heaps and l numbers hi (0 ≤ hi ≤ 10000) describing the number of beads in the heaps. The last test case is followed by a 0 on a line of its own.", output:"For each position: If the described position is a winning position print a \'W\'.If the described position is a losing position print an \'L\'. Print a newline after each test case.<br>", sample_in:"2 2 5\n3\n2 5 12\n3 2 4 7\n4 2 3 7 12\n5 1 2 3 4 5\n3\n2 5 12\n3 2 4 7\n4 2 3 7 12\n0", sample_out:"LWW\nWWL", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:974, vtotal_submit:3765, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Norgesmesterskapet 2004", author:"", tag:["TEST"]}
{pid:1537, vid:1537, oj:"hdu", title:"Rubik\'s Cube", desc:"Rummaging through the stuff of your childhood you find an old toy which you identify as the famous Rubik\'s Cube. While playing around with it you have to acknowledge that throughout the years your ability to solve the puzzle has not improved a bit. But because you always wanted to understand the thing and the only other thing you could do right now is to prepare for an exam, you decide to give it a try. Luckily the brother of your girlfriend is an expert and able to fix the cube no matter how messed-up it is. The problem is that he stays with his girlfriend in the Netherlands most of the time, so you need a solution for long-distance learning. You decide to implement a program which is able to document the state of the cube and the turns to be made. <br><br>A Rubik\'s Cube is covered with 54 square areas called facelets, 9 facelets on each of its six sides. Each facelet has a certain color. Usually when the cube is in its starting state, all facelets belonging to one side have the same color. For the original cube these are red, yellow, green, blue, white and orange. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src=data/images/1537_1.gif><br>The positions of the facelets can be changed by turning the sides of the cube. This moves nine &quot;little cubes&quot; together with their attached facelets into a new position (see Fig. 1). <br>The problem is to determine how the facelets of the entire cube are colored after turning different sides in different directions.<br>", input:"The first line contains the number of scenarios. Each scenario consists of two sections. The first section describes the starting state of the cube and the second describes the turns to be made. <br>The starting state describes the colors of the facelets and where they are positioned. The colors are identified by single characters, and one character is given per facelet. Characters are separated by blanks and arranged in a certain pattern (see Fig. 2). The pattern identifies all six sides of the cube and can be thought of as a folding pattern. As shown in Fig. 2, the description of the top side of the cube is placed right over the description of the front side. This is done by indenting the lines with blanks. The next three lines contain the descriptions of the left, front, right and back side as shown in Fig. 2. The descriptions are simply concatenated with a blank character used as separator. After that the description of the bottom side follows, using the same format as the one used to describe the top side. This concludes the description of the starting state. <br>Then follows the second section of the scenario containing the turns which have to be performed. The description of the turns starts with a line containing the number of turns t (t &gt; 0). Each turn is given in a separate line and consists of two integer values s and d which are separated by a single blank. The first value s determines the side of the cube which has to be turned. The sides are serially numbered as follows:left \'0\', front \'1\', right \'2\', back \'3\', top \'4\', bottom \'5\'. The second value d determines in which direction <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img src=data/images/1537_2.gif><br>the side s has to be turned and can either be \'1\' or \'-1\'. A \'1\' stands for clockwise and a \'-1\' for counterclockwise.The direction is given under the assumption that the viewer is looking directly at the specific side of the cube.", output:"The output for every scenario begins with a line containing &quot;Scenario #i:&quot;, where i is the number of the scenario starting at 1. After this line print the resulting state of the cube using the same format as the input. Each scenario is terminated by a single blank line.", sample_in:"2\n      w w w\n      w w w\n      w w w\nr r r g g g b b b o o o\nr r r g g g b b b o o o\nr r r g g g b b b o o o\n      y y y\n      y y y\n      y y y\n2\n3 1\n0 -1\n      g b b\n      g w w\n      g w w\nr r r y g g b b y o o w\nr r r y g g b b y o o w\nw w w r g g b b y o o b\n      o y y\n      o y y\n      o r r\n2\n0 1\n3 -1", sample_out:"Scenario #1:\n      g b b\n      g w w\n      g w w\nr r r y g g b b y o o w\nr r r y g g b b y o o w\nw w w r g g b b y o o b\n      o y y\n      o y y\n      o r r\n\nScenario #2:\n      w w w\n      w w w\n      w w w\nr r r g g g b b b o o o\nr r r g g g b b b o o o\nr r r g g g b b b o o o\n      y y y\n      y y y\n      y y y", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:53, vtotal_submit:131, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"TUD Programming Contest 2002, Darmstadt, Germany", author:"", tag:["TEST"]}
{pid:1538, vid:1538, oj:"hdu", title:"A Puzzle for Pirates", desc:"A bunch of pirates have gotten their hands on a hoard of gold pieces and wish to divide the loot. They are democratic pirates in their own way, and it is their custom to make such divisions in the following manner: The fiercest pirate makes a proposal about the division, and everybody votes on it, including the proposer. If 50 percent or more are in favor, the proposal passes and is implemented forthwith. Otherwise the proposer is thrown overboard, and the procedure is repeated with the next fiercest pirate. <br>All the pirates enjoy throwing one of their fellows overboard, but if given a choice they prefer cold, hard cash, the more the better. They dislike being thrown overboard themselves. All pirates are rational and know that the other pirates are also rational. Moreover, no two pirates are equally fierce, so there is a precise pecking order — and it is known to them all. The gold pieces are indivisible, and arrangements to share pieces are not permitted, because no pirate trusts his fellows to stick to such an arrangement. It\'s every man for himself. Another thing about pirates is that they are realistic. They believe \'a bird in the hand is worth two in the bush\' which means they prefer something that is certain than take a risk to get more, where they might lose everything. <br><br>For convenience, number the pirates in order of meekness, so that the least fierce is number 1, the next least fierce number 2 and so on. The fiercest pirate thus gets the biggest number, and proposals proceed in the order from the biggest to the least. <br><br>The secret to analyzing all such games of strategy is to work backward from the end. The place to start is the point at which the game gets down to just two pirates, P1 and P2. Then add in pirate P3, P4, ... , one by one. The illustration shows the results when 3, 4 or 5 pirates try to divide 100 pieces of gold. <br><br><img src=data/images/1538-1.jpg><br><br>Your task is to predict how many gold pieces a given pirate will get. ", input:"The input consists of a line specifying the number of testcases, followed by one line per case with 3 integer numbers n, m, p. n (1 ≤ n ≤ 10^4) is the number of pirates. m (1 ≤ m ≤ 10^7) is the number of gold pieces. p (1 ≤ p ≤ n) indicates a pirate where p = n indicates the fiercest one. <br>", output:"The output for each case consists of a single integer which is the minimal number of gold pieces pirate p can get. For example, if pirate p can get 0 or 1 gold pieces, output \'0\'. If pirate p will be thrown overboard, output \'Thrown\'. <br>", sample_in:"3\n3 100 2\n4 100 2\n5 100 5", sample_out:"0\n1\n98\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nThe situation gets complicated when a few gold pieces were divided among many pirates. ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:75, vtotal_submit:329, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"TJU Contest August 2006", author:"", tag:["TEST"]}
{pid:1539, vid:1539, oj:"hdu", title:"Shredding Company", desc:"You have just been put in charge of developing a new shredder for the Shredding Company. Although a &quot;normal&quot; shredder would just shred sheets of paper into little pieces so that the contents would become unreadable, this new shredder needs to have the following unusual basic characteristics. <br>The shredder takes as input a target number and a sheet of paper with a number written on it. <br>It shreds (or cuts) the sheet into pieces each of which has one or more digits on it. <br>The sum of the numbers written on each piece is the closest possible number to the target number, without going over it. <br>For example, suppose that the target number is 50, and the sheet of paper has the number 12346. The shredder would cut the sheet into four pieces, where one piece has 1, another has 2, the third has 34, and the fourth has 6. This is because their sum 43 (= 1 + 2 + 34 + 6) is closest to the target number 50 of all possible combinations without going over 50. For example, a combination where the pieces are 1, 23, 4, and 6 is not valid, because the sum of this combination 34 (= 1 + 23 + 4 + 6) is less than the above combination\'s 43. The combination of 12, 34, and 6 is not valid either, because 52 (= 12 + 34 + 6) is greater than the target number of 50.<br><img src=data/images/1539-1.jpg><br>There are also three special rules:<br><br>If the target number is the same as the number on the sheet of paper, then the paper is not cut. For example, if the target number is 100 and the number on the sheet of paper is also 100, then the paper is not cut. <br>If it not possible to make any combination whose sum is less than or equal to the target number, then error is printed on a display. For example, if the target number is 1 and the number on the sheet of paper is 123, it is not possible to make any valid combination, as the combination with the smallest possible sum is 1, 2, 3. The sum for this combination is 6, which is greater than the target number, and thus error is printed. <br>If there is more than one possible combination where the sum is closest to the target number without going over it, then rejected is printed on a display. For example, if the target number is 15, and the number on the sheet of paper is 111, then there are two possible combinations with the highest possible sum of 12: (a) 1 and 11 and (b) 11 and 1; thus rejected is printed. <br>In order to develop such a shredder, you have decided to first make a simple program that would simulate the above characteristics and rules. Given two numbers, where the first is the target number and the second is the number on the sheet of paper to be shredded, you need to figure out how the shedder should &quot;cut up&quot; the second number.<br><br>", input:"The input consists of several test cases, each on one line, as follows:<br><br>t1 num1<br>t2 num2<br>. . .<br>tn numn<br>0 0<br><br>Each test case consists of the following two positive integers, which are separated by one space: (1) the first integer (ti above) is the target number; (2) the second integer (numi above) is the number that is on the paper to be shredded.<br><br>Neither integers may have a 0 as the first digit, e.g., 123 is allowed but 0123 is not. You may assume that bother integers are at most 6 digits in length. A line consisting of two zeros signals the end of the input.<br><br><br>", output:"For each test case in the input, the corresponding output takes one of the following three types:<br><br>sum part1 part2 . . . <br>rejected <br>error <br>In the first type, partj and sum have the following meaning:<br><br>Each partj is a number on one piece of shredded paper. The order of partj corresponds to the order of the original digits on the sheet of paper. <br>sum is the sum of the numbers after being shredded, i.e., sum = part1 + part2 + . . . <br>Each number should be separated by one space.<br><br>The message error is printed if it is not possible to make any combination, and rejected if there is more than one possible combination.<br><br>No extra characters including spaces are allowed at the beginning of each line, nor at the end of each line.<br><br>", sample_in:"50 12346\n376 144139\n927438 927438\n18 3312\n9 3142\n25 1299\n111 33333\n103 862150\n6 1104\n0 0", sample_out:"43 1 2 34 6\n283 144 139\n927438 927438\n18 3 3 12\nerror\n21 1 2 9 9\nrejected\n103 86 2 15 0\nrejected", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:60, vtotal_submit:358, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"Asia 2002, Kanazawa (Japan)", author:"", tag:["TEST"]}
{pid:1540, vid:1540, oj:"hdu", title:"Tunnel Warfare", desc:"During the War of Resistance Against Japan, tunnel warfare was carried out extensively in the vast areas of north China Plain. Generally speaking, villages connected by tunnels lay in a line. Except the two at the ends, every village was directly connected with two neighboring ones.<br><br>Frequently the invaders launched attack on some of the villages and destroyed the parts of tunnels in them. The Eighth Route Army commanders requested the latest connection state of the tunnels and villages. If some villages are severely isolated, restoration of connection must be done immediately!<br>", input:"The first line of the input contains two positive integers n and m (n, m ≤ 50,000) indicating the number of villages and events. Each of the next m lines describes an event.<br><br>There are three different events described in different format shown below:<br><br>D x: The x-th village was destroyed.<br><br>Q x: The Army commands requested the number of villages that x-th village was directly or indirectly connected with including itself.<br><br>R: The village destroyed last was rebuilt.<br>", output:"Output the answer to each of the Army commanders’ request in order on a separate line.<br>", sample_in:"7 9\nD 3\nD 6\nD 5\nQ 4\nQ 5\nR\nQ 4\nR\nQ 4", sample_out:"1\n0\n2\n4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:684, vtotal_submit:3684, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"POJ Monthly", author:"", tag:["TEST"]}
{pid:1541, vid:1541, oj:"hdu", title:"Stars", desc:"Astronomers often examine star maps where stars are represented by points on a plane and each star has Cartesian coordinates. Let the level of a star be an amount of the stars that are not higher and not to the right of the given star. Astronomers want to know the distribution of the levels of the stars. <br><br><img src=data/images/1541-1.jpg><br><br>For example, look at the map shown on the figure above. Level of the star number 5 is equal to 3 (it\'s formed by three stars with a numbers 1, 2 and 4). And the levels of the stars numbered by 2 and 4 are 1. At this map there are only one star of the level 0, two stars of the level 1, one star of the level 2, and one star of the level 3. <br><br>You are to write a program that will count the amounts of the stars of each level on a given map.", input:"The first line of the input file contains a number of stars N (1&lt;=N&lt;=15000). The following N lines describe coordinates of stars (two integers X and Y per line separated by a space, 0&lt;=X,Y&lt;=32000). There can be only one star at one point of the plane. Stars are listed in ascending order of Y coordinate. Stars with equal Y coordinates are listed in ascending order of X coordinate.", output:"The output should contain N lines, one number per line. The first line contains amount of stars of the level 0, the second does amount of stars of the level 1 and so on, the last line contains amount of stars of the level N-1.", sample_in:"5\n1 1\n5 1\n7 1\n3 3\n5 5", sample_out:"1\n2\n1\n1\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:905, vtotal_submit:3783, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Ural Collegiate Programming Contest 1999", author:"", tag:["TEST"]}
{pid:1542, vid:1542, oj:"hdu", title:"Atlantis", desc:"There are several ancient Greek texts that contain descriptions of the fabled island Atlantis. Some of these texts even include maps of parts of the island. But unfortunately, these maps describe different regions of Atlantis. Your friend Bill has to know the total area for which maps exist. You (unwisely) volunteered to write a program that calculates this quantity.<br>", input:"The input file consists of several test cases. Each test case starts with a line containing a single integer n (1&lt;=n&lt;=100) of available maps. The n following lines describe one map each. Each of these lines contains four numbers x1;y1;x2;y2 (0&lt;=x1&lt;x2&lt;=100000;0&lt;=y1&lt;y2&lt;=100000), not necessarily integers. The values (x1; y1) and (x2;y2) are the coordinates of the top-left resp. bottom-right corner of the mapped area.<br><br>The input file is terminated by a line containing a single 0. Don’t process it.", output:"For each test case, your program should output one section. The first line of each section must be “Test case #k”, where k is the number of the test case (starting with 1). The second one must be “Total explored area: a”, where a is the total explored area (i.e. the area of the union of all rectangles in this test case), printed exact to two digits to the right of the decimal point.<br><br>Output a blank line after each test case.<br>", sample_in:"2\n10 10 20 20\n15 15 25 25.5\n0", sample_out:"Test case #1\nTotal explored area: 180.00 ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1157, vtotal_submit:5936, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central European Regional Contest 2000", author:"", tag:["TEST"]}
{pid:1543, vid:1543, oj:"hdu", title:"Paint the Wall", desc:"Here comes our future artist. See, he is painting again, this time on home\'s white wall, using different color of paint. Let me see, red, yellow, black, green... but why does he just paint rectangles? Pretty guy, seems he is fond of it.<br><br>So, after he\'s done his great job, the white wall has been filled with so many blocks of color. Of course, some color previously painted has been covered by some color painted later. Now, the little guy has some doubt that how many different colors have been left on the wall, and what are the areas of them. As a seven-year-old boy, he has just learned painting in kindergarten, math seems too difficult for him. So he turns to you, a college student good at math and programming, to help him figuring it out. Don\'t make him disappointed.<br>", input:"Input consists of multiple test cases, each describing &quot;a great job&quot; done by out little guy.<br><br>Each case begins with a line containing two integers, Height and Width, the size of the wall. The next line contains an integer N, which is the number of rectangles that have been painted. N lines follow, describing the rectangles in the order they were painted. Each line contains five integers, Top, Left, Bottom, Right, and Color, giving out the position, size and color information of the rectangle.<br><br>The range of Height and Width is [1, 10000]. There will be at least 1, and at most 100 rectangles to be painted. For each rectangle, Top and Bottom is in the range [0, Height], Left and Right is in the range [0, Width]. Bottom is strictly greater than Top, and Right is strictly greater than Left. Color will be in the range [1, 100].<br><br>The top-left coordinate of the wall is (0, 0), and the bottom-right coordinate of the wall is (Height, Width), as shown below.<br><pre><br><br>(0,0)      (0,W)<br>---------------<br>|             |<br>|             |<br>|             |<br>|             |<br>|             |<br>---------------<br>(H,0)      (H,W)<br><br></pre><br><br>The last case is followed by a line containing two zeroes.<br><br>There is a blank line between two test cases.<br>", output:"For each painting, first output &quot;Case X:&quot; in a single line where X is the case number starting form 1. Then output the colors left and their areas, one color per line, in the order of color numbers (increasing). For each color, you should output the color number, a blank space, and the area of this color on the wall. After that, you should output a single line &quot;There is M color left on the wall.&quot; or &quot;There are M colors left on the wall.&quot;, depending on M, which is the number of colors left on the wall.<br><br>Output a blank line between two test cases.<br>", sample_in:"10 5\n1\n1 1 2 2 2\n\n4 4\n2\n0 0 3 3 1\n2 2 4 4 2\n\n0 0", sample_out:"Case 1:\n2 1\nThere is 1 color left on the wall.\n\nCase 2:\n1 8\n2 4\nThere are 2 colors left on the wall.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:172, vtotal_submit:848, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Zhejiang Provincial Programming Contest 2006", author:"", tag:["TEST"]}
{pid:1544, vid:1544, oj:"hdu", title:"Palindromes", desc:"A regular palindrome is a string of numbers or letters that is the same forward as backward. For example, the string &quot;ABCDEDCBA&quot; is a palindrome because it is the same when the string is read from left to right as when the string is read from right to left.<br><br>Now give you a string S, you should count how many palindromes in any consecutive substring of S.<br>", input:"There are several test cases in the input. Each case contains a non-empty string which has no more than 5000 characters.<br><br>Proceed to the end of file.<br>", output:"A single line with the number of palindrome substrings for each case. <br>", sample_in:"aba\naa", sample_out:"4\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:374, vtotal_submit:1212, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Zhejiang Provincial Programming Contest 2006", author:"", tag:["TEST"]}
{pid:1545, vid:1545, oj:"hdu", title:"01-K Code", desc:"Consider a code string S of N symbols, each symbol can only be 0 or 1. In any consecutive substring of S, the number of 0\'s differs from the number of 1\'s by at most K. How many such valid code strings S are there? <br><br>For example, when N is 4, and K is 3, there are two invalid codes: 0000 and 1111. <br>", input:"The input consists of several test cases. For each case, there are two positive integers N and K in a line.<br><br>N is in the range of [1, 62].<br><br>K is in the range of [2, 5].<br>", output:"Output the number of valid code strings in a line for each case.", sample_in:"1 2\n4 3", sample_out:"2\n14", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:80, vtotal_submit:457, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Zhejiang Provincial Programming Contest 2006", author:"", tag:["TEST"]}
{pid:1546, vid:1546, oj:"hdu", title:"Idiomatic Phrases Game", desc:"Tom is playing a game called Idiomatic Phrases Game. An idiom consists of several Chinese characters and has a certain meaning. This game will give Tom two idioms. He should build a list of idioms and the list starts and ends with the two given idioms. For every two adjacent idioms, the last Chinese character of the former idiom should be the same as the first character of the latter one. For each time, Tom has a dictionary that he must pick idioms from and each idiom in the dictionary has a value indicates how long Tom will take to find the next proper idiom in the final list. Now you are asked to write a program to compute the shortest time Tom will take by giving you the idiom dictionary. <br>", input:"The input consists of several test cases. Each test case contains an idiom dictionary. The dictionary is started by an integer N (0 &lt; N &lt; 1000) in one line. The following is N lines. Each line contains an integer T (the time Tom will take to work out) and an idiom. One idiom consists of several Chinese characters (at least 3) and one Chinese character consists of four hex digit (i.e., 0 to 9 and A to F). Note that the first and last idioms in the dictionary are the source and target idioms in the game. The input ends up with a case that N = 0. Do not process this case. <br>", output:"One line for each case. Output an integer indicating the shortest time Tome will take. If the list can not be built, please output -1. ", sample_in:"5\n5 12345978ABCD2341\n5 23415608ACBD3412\n7 34125678AEFD4123\n15 23415673ACC34123\n4 41235673FBCD2156\n2\n20 12345678ABCD\n30 DCBF5432167D\n0", sample_out:"17\n-1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:283, vtotal_submit:1634, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Zhejiang Provincial Programming Contest 2006", author:"", tag:["TEST"]}
{pid:1547, vid:1547, oj:"hdu", title:"Bubble Shooter", desc:"Bubble shooter is a popular game. You can find a lot of versions from the Internet.<br><br><img src=data/images/1547-1.jpg><br><br>The goal of this game is to clean the bubbles off the field. Every time you just point the cannon to where you want the next bubble to go, and if three or more of bubbles with the same color came together (including the newly shot bubble), they will detonate. After the first explode, if some bubbles are disconnected from the bubble(s) in the topmost row, they will explode too.<br><br>In this problem, you will be given an arranged situation of bubbles in the field and the newly shot bubble. Your program should output the total number of bubbles that will explode.<br>", input:"There are multiple test cases. Each test case begins with four integers H (the height of the field, 2 &lt;= H &lt;= 100), W (the width of the field, 2 &lt;= W &lt;= 100, in the picture above, W is 10), h (the vertical position of the newly shot bubble, count from top to bottom, and the topmost is counted as 1) and w (the horizontal position of the newly shot bubble, count from left to right, and the leftmost is counted as 1). <br>Then H lines follow, the odd lines will contain W characters while the even lines will contain W-1 characters (refer to the picture above). Each character will be either a lowercase from \'a\' to \'z\' indicating the color of the bubble in that position, or a capital letter \'E\' indicating an empty position. You may assure the arranged situation is always valid (all the bubbles are directly or indirectly connected with at least one bubble in the topmost row, and the position of newly shot bubble is never empty).", output:"For each test case, output an integer indicating how many bubbles will explode.", sample_in:"2 2 2 1\naa\na\n3 3 3 3\naaa\nba\nbba\n3 3 3 1\naaa\nba\nbba\n3 3 3 3\naaa\nEa\naab", sample_out:"3\n8\n3\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:178, vtotal_submit:713, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Zhejiang Provincial Programming Contest 2006", author:"", tag:["TEST"]}
{pid:1548, vid:1548, oj:"hdu", title:"A strange lift", desc:"There is a strange lift.The lift can stop can at every floor as you want,  and  there is a number Ki(0 &lt;= Ki &lt;= N) on every floor.The lift have just two buttons: up and down.When you at floor i,if you press the button &quot;UP&quot; , you will go up Ki floor,i.e,you will go to the i+Ki th floor,as the same, if you press the button &quot;DOWN&quot; , you will go down Ki floor,i.e,you will go to the i-Ki th floor. Of course, the lift can\'t go up high than N,and can\'t go down lower than 1. For example, there is a buliding with 5 floors, and k1 = 3, k2 = 3,k3 = 1,k4 = 2, k5 = 5.Begining from the 1 st floor,you can press the button &quot;UP&quot;, and you\'ll go up to the 4 th floor,and if you press the button &quot;DOWN&quot;, the lift can\'t do it, because it can\'t go down to  the -2 th floor,as you know ,the -2 th floor isn\'t exist.<br>Here comes  the problem: when you are on floor A,and you want to go to floor B,how many times at least he has to press the button &quot;UP&quot; or &quot;DOWN&quot;?<br>", input:"The input consists of several test cases.,Each test case contains two lines.<br>The first line contains three integers N ,A,B( 1 &lt;= N,A,B &lt;= 200) which describe above,The second line consist N integers k1,k2,....kn.<br>A single 0 indicate the end of the input.", output:"For each case of the input output a  interger, the least times you have to press the button when you on  floor A,and you want to go to floor B.If you can\'t reach floor B,printf &quot;-1&quot;.", sample_in:"5 1 5\n3 3 1 2 5\n0", sample_out:"3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2082, vtotal_submit:9853, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
No Such Problem Called HDU 1549.<br>
No Such Problem Called HDU 1550.<br>
{pid:1551, vid:1551, oj:"hdu", title:"Cable master", desc:"Inhabitants of the Wonderland have decided to hold a regional programming contest. The Judging Committee has volunteered and has promised to organize the most honest contest ever. It was decided to connect computers for the contestants using a &quot;star&quot; topology - i.e. connect them all to a single central hub. To organize a truly honest contest, the Head of the Judging Committee has decreed to place all contestants evenly around the hub on an equal distance from it.<br><br>To buy network cables, the Judging Committee has contacted a local network solutions provider with a request to sell for them a specified number of cables with equal lengths. The Judging Committee wants the cables to be as long as possible to sit contestants as far from each other as possible.<br><br>The Cable Master of the company was assigned to the task. He knows the length of each cable in the stock up to a centimeter, and he can cut them with a centimeter precision being told the length of the pieces he must cut. However, this time, the length is not known and the Cable Master is completely puzzled.<br><br>You are to help the Cable Master, by writing a program that will determine the maximal possible length of a cable piece that can be cut from the cables in the stock, to get the specified number of pieces.<br>", input:"The input consists of several testcases. The first line of each testcase contains two integer numbers N and K, separated by a space. N (1 ≤ N ≤ 10000) is the number of cables in the stock, and K (1 ≤ K ≤ 10000) is the number of requested pieces. The first line is followed by N lines with one number per line, that specify the length of each cable in the stock in meters. All cables are at least 1 centimeter and at most 100 kilometers in length. All lengths in the input are written with a centimeter precision, with exactly two digits after a decimal point.<br><br>The input is ended by line containing two 0\'s.<br>", output:"For each testcase write to the output the maximal length (in meters) of the pieces that Cable Master may cut from the cables in the stock to get the requested number of pieces. The number must be written with a centimeter precision, with exactly two digits after a decimal point.<br><br>If it is not possible to cut the requested number of pieces each one being at least one centimeter long, then the output must contain the single number &quot;0.00&quot; (without quotes).<br>", sample_in:"4 11\n8.02\n7.43\n4.57\n5.39\n0 0", sample_out:"2.00", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:353, vtotal_submit:1555, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2001-2002 ACM Northeastern European Regional Programming Contest", author:"", tag:["TEST"]}
No Such Problem Called HDU 1552.<br>
{pid:1553, vid:1553, oj:"hdu", title:"Library", desc:"Castaway Robinson Crusoe is living alone on a remote island. One day a ship carrying a royal library has wrecked nearby. Usually Robinson brings any useful stuff from the shipwreck to his island, and this time he has brought a big chest with books.<br><br> Robinson has decided to build a bookcase for these books to create his own library. He cut a rectangular niche in the rock for that purpose, hammered in wooden pegs, and placed wooden planks on every pair of pegs that have the same height, so that all planks are situated horizontally and suit to act as shelves.<br><br>Unfortunately, Robinson has discovered that one especially old and big tome does not fit in his bookcase. He measured the height and width of this tome and has decided to redesign his bookcase in such a way, as to completely fit the tome on one of the shelves, taking into account locations of other shelves and the dimensions of the niche. With each shelf in the bookcase, one of the following operations should be made:<br><br>Leave the shelf on its original place. <br>Move the shelf to the left or to the right. <br>Shorten the shelf by cutting off a part of the plank and optionally move it to the left or to the right. <br>Move one of the pegs to a different place at the same height and move the shelf to the left or to the right. <br>Shorten the shelf by cutting off a part of the plank, move one of the pegs to a different place at the same height, and optionally move the shortened shelf to the left or to the right. <br>Remove the shelf from the bookcase along with both supporting pegs. <br>We say that the shelf is properly supported by its pegs, if exactly two distinct pegs support the shelf and the center of the shelf is between its pegs or coincides with one of the pegs. The original design of Robinson\'s library has all the shelves properly supported by their pegs and lengths of all shelves are integer number of inches. The Robinson may only cut an integer number of inches from the planks, because he has no tools for more precise measurements. All remaining shelves after the redesign must be properly supported by their pegs.<br><br>You are to find the way to redesign Robinson\'s library to fit the special old tome without changing original design too much. You have to minimize the number of pegs that are to be removed from their original places during the redesign (operations 4 and 5 remove one peg, and operation 6 removes two pegs). If there are different ways to solve the problem, then you are to find the one that minimizes the total length of planks that are to be cut off (operations 3 and 5 involve cutting something from the planks, and operation 6 counts as if cutting off the whole plank). Width of planks and diameter of pegs shall be considered zero.<br><br>The tome may not be rotated. The tome should completely (to all its width) stand on one of the shelves and may only touch other shelves, their pegs or niche\'s edge.<br>", input:"The input consists of several test cases.<br><br>The first line of each test case contains four integer numbers XN, YN, XT, and YT, separated by single spaces. They are, correspondingly, width and height of the niche, and width and height of the old tome in inches (1 ≤ XN, YN, XT, YT ≤ 1000).<br><br>The second line contains a single integer number N (1 ≤ N ≤ 100) that represents the number of the shelves. Then N lines follow. Each line represents a single shelf along with its two supporting pegs, and contains five integer numbers yi, xi, li, x1i, x2i, separated by spaces, where:<br><br>yi (0 &lt; yi &lt; YN) - the height of the ith shelf above the bottom of the niche in inches. <br>xi (0 ≤ xi &lt; XN) - the distance between the left end of the ith shelf and the left edge of the niche in inches. <br>li (0 &lt; li ≤ XN - xi) - the length of the ith shelf in inches. <br>x1i (0 ≤ x1i ≤ li/2) - the distance between the left end of the ith shelf and its leftmost supporting peg in inches. <br>x2i (li/2 ≤ x2i ≤ li; x1i &lt; x2i) - the distance between the left end of the ith shelf and its rightmost supporting peg in inches. <br>All shelves are situated on different heights and are properly supported by their pegs. The problem is guaranteed to have a solution for the input data.<br>", output:"The output shall, for each test case, contain two integer numbers separated by a space. The first one is the minimal number of pegs that are to be removed by Robinson from their original locations to place the tome. The second one is the minimal total length of planks in inches that are to be cut off during the redesign that removes the least number of pegs.", sample_in:"11 8 3 4\n4\n1 1 7 1 4\n4 3 7 1 6\n7 2 6 3 4\n2 0 3 0 3\n11 8 4 6\n4\n1 1 7 1 4\n4 3 7 1 6\n7 2 6 3 4\n2 0 3 0 3", sample_out:"0 0\n1 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:25, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2001-2002 ACM Northeastern European Regional Programming Contest", author:"", tag:["TEST"]}
{pid:1554, vid:1554, oj:"hdu", title:"Pairs of integers", desc:"You are to find all pairs of integers such that their sum is equal to the given integer number N and the second number results from the first one by striking out one of its digits. The first integer always has at least two digits and starts with a non-zero digit. The second integer always has one digit less than the first integer and may start with a zero digit.", input:"The input file consists of several test cases.<br><br>Each test case contains single integer N (10 ≤ N ≤ 10^9), as decribed above<br>", output:"The output consists of several blocks, one for each test case.<br><br>On the first line of a block write the total number of different pairs of integers that satisfy the problem statement. On the following lines write all those pairs. Write one pair on a line in ascending order of the first integer in the pair. Each pair must be written in the following format:<br><br>X + Y = N<br><br>Here X, Y, and N, must be replaced with the corresponding integer numbers. There should be exactly one space on both sides of \'+\' and \'=\' characters.<br>", sample_in:"302", sample_out:"5\n251 + 51 = 302\n275 + 27 = 302\n276 + 26 = 302\n281 + 21 = 302\n301 + 01 = 302", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:20, vtotal_submit:86, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2001-2002 ACM Northeastern European Regional Programming Contest", author:"", tag:["TEST"]}
{pid:1555, vid:1555, oj:"hdu", title:"How many days?", desc:"8600的手机每天消费1元，每消费K元就可以获赠1元，一开始8600有M元，问最多可以用多少天？<br>", input:"输入包括多个测试实例.每个测试实例包括2个整数M, k，（2 &lt;= k &lt;= M &lt;= 1000).M = 0, k = 0代表输入结束.", output:"对于每个测试实例输出一个整数，表示M元可以用的天数。<br>", sample_in:"2 2\n4 3\n0 0", sample_out:"3\n5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2419, vtotal_submit:4773, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-12 Programming Contest", author:"", tag:["TEST"]}
{pid:1556, vid:1556, oj:"hdu", title:"Color the ball", desc:"N个气球排成一排，从左到右依次编号为1,2,3....N.每次给定2个整数a b(a &lt;= b),lele便为骑上他的“小飞鸽&quot;牌电动车从气球a开始到气球b依次给每个气球涂一次颜色。但是N次以后lele已经忘记了第I个气球已经涂过几次颜色了，你能帮他算出每个气球被涂过几次颜色吗？", input:"每个测试实例第一行为一个整数N,(N &lt;= 100000).接下来的N行，每行包括2个整数a b(1 &lt;= a &lt;= b &lt;= N)。<br>当N = 0，输入结束。", output:"每个测试实例输出一行，包括N个整数，第I个数代表第I个气球总共被涂色的次数。", sample_in:"3\n1 1\n2 2\n3 3\n3\n1 1\n1 2\n1 3\n0", sample_out:"1 1 1\n3 2 1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1762, vtotal_submit:7120, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"HDU 2006-12 Programming Contest", author:"", tag:["TEST"]}
{pid:1557, vid:1557, oj:"hdu", title:"权利指数", desc:"在选举问题中，总共有n个小团体，每个小团体拥有一定数量的选票数。如果其中m个小团体的票数和超过总票数的一半，则此组合为“获胜联盟”。n个团体可形成若干个获胜联盟。一个小团体要成为一个“关键加入者”的条件是：在其所在的获胜联盟中，如果缺少了这个小团体的加入，则此联盟不能成为获胜联盟。一个小团体的权利指数是指：一个小团体在所有获胜联盟中成为“关键加入者”的次数。请你计算每个小团体的权利指数。", input:"输入数据的第一行为一个正整数T，表示有T组测试数据。每一组测试数据的第一行为一个正整数n（0&lt;n&lt;=20）。第二行有n个正整数，分别表示1到n号小团体的票数。", output:"对每组测试数据，在同一个行按顺序输出1到n号小团体的权利指数。", sample_in:"2\n1\n10\n7\n5 7 4 8 6 7 5", sample_out:"1\n16 22 16 24 20 22 16", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:327, vtotal_submit:762, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-12 Programming Contest", author:"", tag:["TEST"]}
{pid:1558, vid:1558, oj:"hdu", title:"Segment set", desc:"A segment and all segments which are connected with it compose a segment set. The size of a segment set is the number of segments in it. The problem is to find the size of some segment set.<br><br><center><img src=data/images/C50-1004-1.jpg></center>", input:"In the first line there is an integer t - the number of test case. For each test case in first line there is an integer n (n&lt;=1000) - the number of commands. <br><br>There are two different commands described in different format shown below:<br><br>P x1 y1 x2 y2 - paint a segment whose coordinates of the two endpoints are (x1,y1),(x2,y2).<br>Q k           - query the size of the segment set which contains the k-th segment.<br><br>k is between 1 and the number of segments in the moment. There is no segment in the plane at first, so the first command is always a P-command.<br>", output:"For each Q-command, output the answer. There is a blank line between test cases.", sample_in:"1\n10\nP 1.00 1.00 4.00 2.00\nP 1.00 -2.00 8.00 4.00\nQ 1\nP 2.00 3.00 3.00 1.00\nQ 1\nQ 3\nP 1.00 4.00 8.00 2.00\nQ 2\nP 3.00 3.00 6.00 -2.00\nQ 5", sample_out:"1\n2\n2\n2\n5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:709, vtotal_submit:3067, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2006-12 Programming Contest", author:"", tag:["TEST"]}
{pid:1559, vid:1559, oj:"hdu", title:"最大子矩阵", desc:"给你一个m×n的整数矩阵，在上面找一个x×y的子矩阵，使子矩阵中所有元素的和最大。", input:"输入数据的第一行为一个正整数T，表示有T组测试数据。每一组测试数据的第一行为四个正整数m,n,x,y（0&lt;m,n&lt;1000 AND 0&lt;x&lt;=m AND 0&lt;y&lt;=n），表示给定的矩形有m行n列。接下来这个矩阵，有m行，每行有n个不大于1000的正整数。", output:"对于每组数据，输出一个整数，表示子矩阵的最大和。", sample_in:"1\n4 5 2 2\n3 361 649 676 588\n992 762 156 993 169\n662 34 638 89 543\n525 165 254 809 280", sample_out:"2474", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:861, vtotal_submit:2514, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"HDU 2006-12 Programming Contest", author:"", tag:["TEST"]}
{pid:1560, vid:1560, oj:"hdu", title:"DNA sequence", desc:"The twenty-first century is a biology-technology developing century. We know that a gene is made of DNA. The nucleotide bases from which DNA is built are A(adenine), C(cytosine), G(guanine), and T(thymine). Finding the longest common subsequence between DNA/Protein sequences is one of the basic problems in modern computational molecular biology. But this problem is a little different. Given several DNA sequences, you are asked to make a shortest sequence from them so that each of the given sequence is the subsequence of it.<br><br>For example, given &quot;ACGT&quot;,&quot;ATGC&quot;,&quot;CGTT&quot; and &quot;CAGT&quot;, you can make a sequence in the following way. It is the shortest but may be not the only one.<br><br><center><img src=data/images/C50-1006-1.jpg></center>", input:"The first line is the test case number t. Then t test cases follow. In each case, the first line is an integer n ( 1&lt;=n&lt;=8 )  represents number of the DNA sequences. The following k lines contain the k sequences, one per line. Assuming that the length of any sequence is between 1 and 5.", output:"For each test case, print a line containing the length of the shortest sequence that can be made from these sequences.", sample_in:"1\n4\nACGT\nATGC\nCGTT\nCAGT", sample_out:"8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:195, vtotal_submit:811, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"HDU 2006-12 Programming Contest", author:"", tag:["TEST"]}
{pid:1561, vid:1561, oj:"hdu", title:"The more, The Better", desc:"ACboy很喜欢玩一种战略游戏，在一个地图上，有N座城堡，每座城堡都有一定的宝物，在每次游戏中ACboy允许攻克M个城堡并获得里面的宝物。但由于地理位置原因，有些城堡不能直接攻克，要攻克这些城堡必须先攻克其他某一个特定的城堡。你能帮ACboy算出要获得尽量多的宝物应该攻克哪M个城堡吗？<br>", input:"每个测试实例首先包括2个整数，N,M.(1 &lt;= M &lt;= N &lt;= 200);在接下来的N行里，每行包括2个整数，a,b. 在第 i 行，a 代表要攻克第 i 个城堡必须先攻克第 a 个城堡，如果 a = 0 则代表可以直接攻克第 i 个城堡。b 代表第 i 个城堡的宝物数量, b &gt;= 0。当N = 0, M = 0输入结束。", output:"对于每个测试实例，输出一个整数，代表ACboy攻克M个城堡所获得的最多宝物的数量。", sample_in:"3 2\n0 1\n0 2\n0 3\n7 4\n2 2\n0 1\n0 4\n2 1\n7 1\n7 6\n2 2\n0 0", sample_out:"5\n13", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1094, vtotal_submit:4693, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"HDU 2006-12 Programming Contest", author:"", tag:["TEST"]}
{pid:1562, vid:1562, oj:"hdu", title:"Guess the number", desc:"Happy new year to everybody!<br>Now, I want you to guess a minimum  number x betwwn 1000 and 9999 to let <br>(1) x % a = 0;<br>(2) (x+1) % b = 0;<br>(3) (x+2) % c = 0;<br>and a, b, c are integers between 1 and 100.<br>Given a,b,c, tell me what is the number of x ?<br>", input:"The number of test cases c is in the first line of input, then c test cases followed.every test contains three integers a, b, c.", output:"For each test case your program should output one line with the minimal number x, you should remember that x is between 1000 and 9999. If there is no answer for x, output &quot;Impossible&quot;.", sample_in:"2\n44 38 49\n25 56 3", sample_out:"Impossible\n2575", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1553, vtotal_submit:2394, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Happy 2007", author:"", tag:["TEST"]}
{pid:1563, vid:1563, oj:"hdu", title:"Find your present!", desc:"In the new year party, everybody will get a &quot;special present&quot;.Now it\'s your turn to get your special present, a lot of presents now putting on the desk, and only one of them will be yours.Each present has a card number on it, and your present\'s card number will be the one that different from all the others.For example, there are 5 present, and their card numbers are 1, 2, 3, 2, 1.so your present will be the one with the card number of 3, because 3 is the number that different from all the others.", input:"The input file will consist of several cases.   <br>Each case will be presented by an integer n (1&lt;=n&lt;=200, and n is odd) at first. Following that, n positive integers will be given in a line. These numbers indicate the card numbers of the presents.n = 0 ends the input.", output:"For each case, output an integer in a line, which is the card number of your present.", sample_in:"5\n1 1 3 2 2\n3\n1 2 1\n0", sample_out:"3\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1398, vtotal_submit:2422, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Happy 2007", author:"", tag:["TEST"]}
{pid:1564, vid:1564, oj:"hdu", title:"Play a game", desc:"New Year is Coming! <br>ailyanlu is very happy today! and  he is playing a chessboard game with 8600. <br>The size of the chessboard is n*n. A stone is placed in a corner square. They play alternatively with 8600 having the first move. Each time, player is allowed to move the stone to an unvisited neighbor square horizontally or vertically. The one who can\'t make a move will lose the game. If both play perfectly, who will win the game?", input:"The input is a sequence of positive integers each in a separate line. <br>The integers are between 1 and 10000, inclusive,(means 1 &lt;= n &lt;= 10000) indicating the size of the chessboard. The end of the input is indicated by a zero.", output:"Output the winner (&quot;8600&quot; or &quot;ailyanlu&quot;) for each input line except the last zero. <br>No other characters should be inserted in the output.", sample_in:"2\n0", sample_out:"8600", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:746, vtotal_submit:1236, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Happy 2007", author:"", tag:["TEST"]}
{pid:1565, vid:1565, oj:"hdu", title:"方格取数(1)", desc:"给你一个n*n的格子的棋盘，每个格子里面有一个非负数。<br>从中取出若干个数，使得任意的两个数所在的格子没有公共边，就是说所取的数所在的2个格子不能相邻，并且取出的数的和最大。", input:"包括多个测试实例，每个测试实例包括一个整数n 和n*n个非负数(n&lt;=20)", output:"对于每个测试实例，输出可能取得的最大的和", sample_in:"3\n75 15 21 \n75 15 28 \n34 70 5 ", sample_out:"188", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:823, vtotal_submit:4223, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"Happy 2007", author:"", tag:["TEST"]}
{pid:1566, vid:1566, oj:"hdu", title:"奇怪的公式", desc:"alpc12是个满脑子奇怪思想的孩子.新年到了，他想做做数学题，但是发现多边形的面积公式好复杂，于是他将其修改为S = a*b*c*d*...(a, b, c, d..是边且为正数且所有边不相等)，alpc12的老师alpc01看他如此偷懒，作为惩罚，决定好好考考他。于是alpc01问：&quot; 现在知道这个多边形的周长，这个多边形的面积最大为多少呢？而且，这回可不许你乱改周长公式哦!&quot;  ", input:"多个测试情况.每行输入n(3 &lt;= n &lt;= 1000)，代表多边形周长,读到文件尾(EOF结束)。", output:"对于每个输入的n，输出2行，<br>第一行：多边形的边数，然后是单调不降的各边的长度．<br>第二行：这个多边形的面积的最大值．<br>输出不要有任何的无用字符", sample_in:"3\n4\n5", sample_out:"2 1 2\n2\n2 1 3\n3\n2 2 3\n6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:58, vtotal_submit:229, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Happy 2007", author:"", tag:["TEST"]}
{pid:1567, vid:1567, oj:"hdu", title:"2006", desc:"When the old year is leaving and the New Year is coming, people are always looking back over the past while looking forward to the future. <br><br>&quot;What do you think is the most important events in the past year 2006?&quot;, a friend asked me.<br><br>&quot;Well, maybe the World Cup.&quot;, I replied.<br><br>&quot;Yeah, do you know, in a football match, how to arrange a proper match table for a group?&quot;<br><br>&quot;That\'s easy. In the World Cup, there are only 4 teams in a group. Everyone knows how to do it.&quot;<br><br>&quot;Yes, it\'s easy for four-team’s arrangement. But if there are six teams or more games, can you arrange that?&quot;<br><br>&quot;OK, let me have a try&quot;. I answered.<br><br>In fact, I tried many times to solve the problem, but got failure in the end. Can you help me?<br>", input:"The input contains data for several test cases.<br><br>Each case contains a single even integer, which is less than 2007, indicate the number of teams in a group.<br>and n-1 lines followed,  indicate the match table.each line indicate one round in the contest.For example, <br>4<br>1-2 3-4 // the first round<br>1-3 2-4 // the second round<br>1-4 2-3 // the third round", output:"For each test case output &quot;Yes&quot; means the  match table is correct, or &quot;No&quot; otherwise.", sample_in:"2\n1-2\n4\n1-2 3-4 \n1-3 2-4 \n1-4 2-3 \n4\n1-3 2-4 \n1-2 3-4 \n1-4 2-3 \n4\n1-2 3-2 \n1-3 2-4 \n1-4 2-3", sample_out:"Yes\nYes\nYes\nNo", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:87, vtotal_submit:366, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Happy 2007", author:"", tag:["TEST"]}
{pid:1568, vid:1568, oj:"hdu", title:"Fibonacci", desc:"2007年到来了。经过2006年一年的修炼，数学神童zouyu终于把0到100000000的Fibonacci数列<br>(f[0]=0,f[1]=1;f[i] = f[i-1]+f[i-2](i&gt;=2))的值全部给背了下来。<br>接下来，CodeStar决定要考考他，于是每问他一个数字，他就要把答案说出来，不过有的数字太长了。所以规定超过4位的只要说出前4位就可以了，可是CodeStar自己又记不住。于是他决定编写一个程序来测验zouyu说的是否正确。", input:"输入若干数字n(0 &lt;= n &lt;= 100000000)，每个数字一行。读到文件尾。", output:"输出f[n]的前4个数字（若不足4个数字，就全部输出）。", sample_in:"0\n1\n2\n3\n4\n5\n35\n36\n37\n38\n39\n40", sample_out:"0\n1\n1\n2\n3\n5\n9227\n1493\n2415\n3908\n6324\n1023", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1126, vtotal_submit:3082, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Happy 2007", author:"", tag:["TEST"]}
{pid:1569, vid:1569, oj:"hdu", title:"方格取数(2)", desc:"给你一个m*n的格子的棋盘，每个格子里面有一个非负数。<br>从中取出若干个数，使得任意的两个数所在的格子没有公共边，就是说所取数所在的2个格子不能相邻，并且取出的数的和最大。", input:"包括多个测试实例，每个测试实例包括2整数m,n和m*n个非负数(m&lt;=50,n&lt;=50)", output:"对于每个测试实例，输出可能取得的最大的和", sample_in:"3 3\n75 15 21 \n75 15 28 \n34 70 5", sample_out:"188", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:663, vtotal_submit:3975, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"Happy 2007", author:"", tag:["TEST"]}
{pid:1570, vid:1570, oj:"hdu", title:"A C", desc:"Are you excited when you see the title &quot;AC&quot; ? If the answer is YES , AC it ;<br><br>You must learn these two combination formulas in the school . If you have forgotten it , see the picture.<br><br><img src=data/images/C53-1001-1.jpg><br><br><br>Now I will give you n and m , and your task is to calculate the answer .", input:"In the first line , there is a integer T indicates the number of test cases.<br>Then T cases follows in the T lines.<br>Each case contains a character \'A\' or \'C\', two integers represent n and m. (1&lt;=n,m&lt;=10)", output:"For each case , if the character is \'A\' , calculate A(m,n),and if the character is \'C\' , calculate C(m,n).<br>And print the answer in a single line.", sample_in:"2\nA 10 10\nC 4 2", sample_out:"3628800\n6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2005, vtotal_submit:3392, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-1 Programming Contest", author:"", tag:["TEST"]}
{pid:1571, vid:1571, oj:"hdu", title:"下沙小面的(1)", desc:"Lele 在下沙高校中有很多同学，所以他有时间也经常到处去看望同学（顺便蹭饭）。<br>在下沙，最便宜方便的交通工具莫过于小面的了。<br>坐得多了，Lele有时候也想，如果将来失业了，能够在下沙开开小面的，也是多么幸福的啊。<br><br>终于有一天，他如愿当上了小面的的司机。为了更好的服务客户，他订立了一些开车的法则。<br><br>1.当有人要求上车时，如果不是下面这两种情况，他就会让人上车。<br>2.有些人会因为迷路，往往不知道自己在哪里。比如身在城市1，他也会要求Lele把他送到城市1。这时，Lele当然具有商人诚信的原则，告诉他这个情况，并且不会让他上车。<br>3.由于小面的的座位只有7个（不包括司机Lele的驾驶座），如果当时车上已经有7个人，Lele就不会让人再上车了。<br>4.在没人上车时，Lele会看车内谁最早上车，然后把他送到目的地，当然，车内其他要去这个地方的人也会一起下车。然后车停在那个位置<br>5.如果车内已经没乘客了，Lele就会在原地等着，直到下一个顾客上门。否则Lele在那个地方重复前面的法则。<br><br>现在，告诉你Lele一天面对到的情况，请帮他计算一下，他一天一共开了多少距离。", input:"本题目包含多组测试。最后一组测试后有一个0代表结束。<br>每组测试第一行有一个整数NCity(3&lt;=NCity&lt;=30)表示下沙一共有多少个站点(站点从0开始标号)。<br>然后给你一个 NCity * NCity 的矩阵，表示站点间的两两距离。即这个矩阵中第 i 行 第 j 列的元素表示站点 i 和站点 j 的距离。(0&lt;=距离&lt;=1000)<br>再然后有一个正整数 K ， 表示接下来有K个指令。每个指令占一行。<br>当指令开头为 UP 的时候，接下来有一个整数 T ,表示在面的所在位置有一个要去站点T(0&lt;=T&lt;NCity)的人要上车。<br>当指令为 GO 的时候，表示Lele要执行法则4，送某些乘客下车。<br>当然，如果车上当时没有乘客的话，你就可以忽略这个指令。<br><br>注意：<br>在每组测试开始的时候，Lele的面的总是停在站点0，且车为空<br>如果在T个指令都结束之后，还发现有人没下车，则你可以忽略他们。", output:"最后在一行内输出一个整数，表示Lele的面的一共开了多少距离。", sample_in:"3\n0 1 2\n1 0 3\n2 3 0\n9\nUP 1\nUP 2\nGO\nUP 2\nGO\nGO\nUP 2\nUP 1\nGO\n0", sample_out:"7", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:304, vtotal_submit:888, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-1 Programming Contest", author:"", tag:["TEST"]}
{pid:1572, vid:1572, oj:"hdu", title:"下沙小面的(2)", desc:"前文再续，书接上一题。话说当上小面的司机的Lele在施行他的那一套拉客法则以后，由于走的路线太长，油费又贵，不久便亏本了。(真可怜～)于是他又想了一个拉客的办法。<br><br>对于每一次拉客活动，他一次性把乘客都拉上车(当然也不会超过7个，因为位置只有7个)。然后，Lele计算出一条路线(出于某些目的，Lele只把车上乘客的目的地作为这条路线上的站点），把所有乘客都送到目的地(在这路线上不拉上其他乘客)，并且使总路线长度最短。<br><br>不过Lele每次都要花很多时间来想路线，你能写个程序帮他嘛？", input:"本题目包含多组测试。最后一组测试后有一个0代表结束。<br>每组测试第一行有一个整数NCity(3&lt;=NCity&lt;=30)表示下沙一共有多少个站点(站点从0开始标号)。<br>然后给你一个 NCity * NCity 的矩阵，表示站点间的两两距离。即这个矩阵中第 i 行 第 j 列的元素表示站点 i 和站点 j 的距离。(0&lt;=距离&lt;=1000)<br>再然后有一个整数K(1&lt;=K&lt;=7)，表示Lele拉上车的人数。<br>接下来的一行里包括 K 个整数，代表上车的人分别要去的站点。(0&lt;站点&lt;NCity)<br><br>注意：<br>对于每组测试，Lele都是在站点0拉上乘客的。", output:"对于每一组测试，在一行内输出一个整数，表示最短路线的长度。", sample_in:"3\n0 1 2\n1 0 3\n2 3 0\n3\n1 1 2\n0", sample_out:"4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:316, vtotal_submit:1252, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-1 Programming Contest", author:"", tag:["TEST"]}
{pid:1573, vid:1573, oj:"hdu", title:"X问题", desc:"求在小于等于N的正整数中有多少个X满足：X mod a[0] = b[0], X mod a[1] = b[1], X mod a[2] = b[2], …, X mod a[i] = b[i], … (0 &lt; a[i] &lt;= 10)。", input:"输入数据的第一行为一个正整数T，表示有T组测试数据。每组测试数据的第一行为两个正整数N，M (0 &lt; N &lt;= 1000,000,000 , 0 &lt; M &lt;= 10)，表示X小于等于N，数组a和b中各有M个元素。接下来两行，每行各有M个正整数，分别为a和b中的元素。", output:"对应每一组输入，在独立一行中输出一个正整数，表示满足条件的X的个数。", sample_in:"3\n10 3\n1 2 3\n0 1 2\n100 7\n3 4 5 6 7 8 9\n1 2 3 4 5 6 7\n10000 10\n1 2 3 4 5 6 7 8 9 10\n0 1 2 3 4 5 6 7 8 9", sample_out:"1\n0\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:564, vtotal_submit:2787, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-1 Programming Contest", author:"", tag:["TEST"]}
{pid:1574, vid:1574, oj:"hdu", title:"RP问题", desc:"在人类社会中，任何个体都具有人品，人品有各种不同的形式，可以从一种形式转换为另一种形式，从一个个体传递给另一个个体，在转换和传递的过程中，人品不会消失，也不被能创造，这就是，人品守恒定律！<br>人品守恒定律更形象的描述，当发生一件好事，你从中获利，必定消耗一定量RP；当发生一件不幸的事，你在其中有所损失，必定积攒一定量RP。<br>假设在一个时间段内在你身上可能会发生N个事件，每个事件都对应一个RP变化值a、RP门槛值b和获益值c。当RP变化值a为正，获益值c必定为负，只有你当前的RP值小于等于RP门槛值b的时候，此事件才有可能发生，当此事件发生时，你的RP值将增加|a|，获益值将减少|c|。反之，当RP变化值a为负，获益值c必定为正，只有你当前的RP值大于等于RP门槛值b的时候，此事件才有可能发生，当此事件发生时，你的RP值将减少|a|，获益值将增加|c|。<br>一个事件在满足上述RP条件的前提下，未必会发生。假设在这段时间之前你所具有的RP值和获益值都为0，那么过了这段时间后，你可能达到的最大获益值是多少？<br>注意：一个人的所具有的RP值可能为负。<br>", input:"输入数据的第一行为一个正整数T，表示有T组测试数据。每组测试数据的第一行为一个正整数N (0 &lt; N &lt;= 1000)，表示这个时间段在你身上可能发生N个事件。接下来N行，每行有三个整数a, b, c (0 &lt;= |a| &lt;= 10, 0 &lt;= |b| &lt;= 10000, 0 &lt;= |c| &lt;= 10000)。这N个事件是按照输入先后顺序先后发生的。也就是说不可能先发生第i行的事件，然后再发生i – j行的事件。", output:"对应每一组输入，在独立一行中输出一个正整数，表示最大可能获益值。", sample_in:"3\n1\n-1 0 1\n2\n10 200 -1\n-5 8 3\n3\n-5 0 4\n10 -5 -5\n-5 5 10", sample_out:"1\n2\n9", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:157, vtotal_submit:750, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-1 Programming Contest", author:"", tag:["TEST"]}
{pid:1575, vid:1575, oj:"hdu", title:"Tr A", desc:"A为一个方阵，则Tr A表示A的迹（就是主对角线上各项的和），现要求Tr(A^k)%9973。<br>", input:"数据的第一行是一个T，表示有T组数据。<br>每组数据的第一行有n(2 &lt;= n &lt;= 10)和k(2 &lt;= k &lt; 10^9)两个数据。接下来有n行，每行有n个数据，每个数据的范围是[0,9]，表示方阵A的内容。<br>", output:"对应每组数据，输出Tr(A^k)%9973。", sample_in:"2\n2 2\n1 0\n0 1\n3 99999999\n1 2 3\n4 5 6\n7 8 9", sample_out:"2\n2686", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1107, vtotal_submit:2259, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-1 Programming Contest", author:"", tag:["TEST"]}
{pid:1576, vid:1576, oj:"hdu", title:"A/B", desc:"要求(A/B)%9973，但由于A很大，我们只给出n(n=A%9973)(我们给定的A必能被B整除，且gcd(B,9973) = 1)。", input:"数据的第一行是一个T，表示有T组数据。<br>每组数据有两个数n(0 &lt;= n &lt; 9973)和B(1 &lt;= B &lt;= 10^9)。", output:"对应每组数据输出(A/B)%9973。", sample_in:"2\n1000 53\n87 123456789", sample_out:"7922\n6060", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:790, vtotal_submit:1474, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-1 Programming Contest", author:"", tag:["TEST"]}
{pid:1577, vid:1577, oj:"hdu", title:"WisKey的眼神", desc:"WisKey的眼镜有500多度,所以眼神不大好,而且他有个习惯,就是走路喜欢看着地(不是为了拣钱哦^_^),所以大家下次碰见他的时候最好主动打下招呼,呵呵.<br>但是Rabbit总是喜欢扮神秘,一天WisKey去食堂排队等着买饭,突然收到一道短消息,是Rabbit发的,”呵呵,又看见你了,你没看到我吧”.WisKey马上拉长脖子扫描食堂,可是就是看不到,再发短信问Rabbit在哪,Rabbit回信曰”我已经在寝室了”.WisKey无语....<br>假设食堂是个正方形,食堂中心坐标为(0,0),长度为2*L, WisKey保证在食堂内.<br>因为是吃饭高峰期,所以每个点上都站着人,当某些人处在同一直线上时就有可能被前面的人挡住.<br>聪明的ACMer请你帮帮WisKey,告诉他能不能看见Rabbit.<br><center><img src=data/images/c46-1001-1.jpg></center>", input:"输入L,sx,sy,px,py; L&lt;=1000,sx,sy是WisKey的坐标,px,py是Rabbit的坐标.<br>以L=0为结束.<br>", output:"对于每组输入数据，能看见输出”Yes”,看不见输出”No”.<br>Rabbit不在食堂输出”Out Of Range”.<br>", sample_in:"5 0 0 1 1\n5 0 0 2 0\n5 0 0 6 6\n5 0 0 -1 -1\n0", sample_out:"Yes\nNo\nOut Of Range\nYes", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:434, vtotal_submit:1982, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"冬练三九之一", author:"", tag:["TEST"]}
{pid:1578, vid:1578, oj:"hdu", title:"Martian Mining", desc:"The NASA Space Center, Houston, is less than 200 miles from San Antonio, Texas (the site of the ACM Finals this year). This is the place where the astronauts are trained for Mission Seven Dwarfs, the next giant leap in space exploration. The Mars Odyssey program revealed that the surface of Mars is very rich in yeyenum and bloggium. These minerals are important ingredients for certain revolutionary new medicines, but they are extremely rare on Earth. The aim of Mission Seven Dwarfs is to mine these minerals on Mars and bring them back to Earth. <br><br>The Mars Odyssey orbiter identified a rectangular area on the surface of Mars that is rich in minerals. The area is divided into cells that form a matrix of n rows and m columns, where the rows go from east to west and the columns go from north to south. The orbiter determined the amount of yeyenum and bloggium in each cell. The astronauts will build a yeyenum refinement factory west of the rectangular area and a bloggium factory to the north. Your task is to design the conveyor belt system that will allow them to mine the largest amount of minerals. <br><center><img src=data/images/c46-1002-1.jpg></center><br>There are two types of conveyor belts: the first moves minerals from east to west, the second moves minerals from south to north. In each cell you can build either type of conveyor belt, but you cannot build both of them in the same cell. If two conveyor belts of the same type are next to each other, then they can be connected. For example, the bloggium mined at a cell can be transported to the bloggium refinement factory via a series of south-north conveyor belts. <br><br>The minerals are very unstable, thus they have to be brought to the factories on a straight path without any turns. This means that if there is a south-north conveyor belt in a cell, but the cell north of it contains an east-west conveyor belt, then any mineral transported on the south-north conveyor beltwill be lost. The minerals mined in a particular cell have to be put on a conveyor belt immediately, in the same cell (thus they cannot start the transportation in an adjacent cell). Furthermore, any bloggium transported to the yeyenum refinement factory will be lost, and vice versa. <br><br>Your program has to design a conveyor belt system that maximizes the total amount of minerals mined,i.e., the sum of the amount of yeyenum transported to the yeyenum refinery and the amount of bloggium transported to the bloggium refinery.", input:"The input contains several blocks of test cases. Each case begins with a line containing two integers: the number 1 ≤ n ≤ 500 of rows, and the number 1 ≤ m ≤ 500 of columns. The next n lines describe the amount of yeyenum that can be found in the cells. Each of these n lines contains m integers. The first line corresponds to the northernmost row; the first integer of each line corresponds to the westernmost cell of the row. The integers are between 0 and 1000. The next n lines describe in a similar fashion theamount of bloggium found in the cells. <br><br>The input is terminated by a block with n = m = 0.", output:"For each test case, you have to output a single integer on a separate line: the maximum amount of mineralsthat can be mined.", sample_in:"4 4\n0 0 10 9\n1 3 10 0\n4 2 1 3 \n1 1 20 0\n10 0 0 0\n1 1 1 30\n0 0 5 5\n5 10 10 10\n0 0", sample_out:"98\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nHuge input file, \'scanf\' recommended to avoid TLE.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:13, vtotal_submit:38, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"冬练三九之一", author:"", tag:["TEST"]}
{pid:1579, vid:1579, oj:"hdu", title:"Function Run Fun", desc:"We all love recursion!  Don\'t we?<br><br>Consider a three-parameter recursive function w(a, b, c):<br><br>if a &lt;= 0 or b &lt;= 0 or c &lt;= 0, then w(a, b, c) returns:<br>&nbsp;&nbsp;1<br><br>if a &gt; 20 or b &gt; 20 or c &gt; 20, then w(a, b, c) returns:<br>&nbsp;&nbsp;w(20, 20, 20)<br><br>if a &lt; b and b &lt; c, then w(a, b, c) returns:<br>&nbsp;&nbsp;w(a, b, c-1) + w(a, b-1, c-1) - w(a, b-1, c)<br><br>otherwise it returns:<br>     w(a-1, b, c) + w(a-1, b-1, c) + w(a-1, b, c-1) - w(a-1, b-1, c-1)<br><br><br>This is an easy function to implement.  The problem is, if implemented directly, for moderate values of a, b and c (for example, a = 15, b = 15, c = 15), the program takes hours to run because of the massive recursion. <br>", input:"The input for your program will be a series of integer triples, one per line, until the end-of-file flag of -1 -1 -1. Using the above technique, you are to calculate w(a, b, c) efficiently and print the result.", output:"Print the value for w(a,b,c) for each triple.", sample_in:"1 1 1\n2 2 2\n10 4 6\n50 50 50\n-1 7 18\n-1 -1 -1", sample_out:"w(1, 1, 1) = 2\nw(2, 2, 2) = 4\nw(10, 4, 6) = 523\nw(50, 50, 50) = 1048576\nw(-1, 7, 18) = 1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:800, vtotal_submit:1940, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"冬练三九之一", author:"", tag:["TEST"]}
{pid:1580, vid:1580, oj:"hdu", title:"Always On the Run", desc:"Screeching tires. Searching lights. Wailing sirens. Police cars everywhere. Trisha Quickfinger did it again! Stealing the `Mona Lisa\' had been more difficult than planned, but being the world\'s best art thief means expecting the unexpected. So here she is, the wrapped frame tucked firmly under her arm, running to catch the northbound metro to Charles-de-Gaulle airport.<br><br>But even more important than actually stealing the painting is to shake off the police that will soon be following her. Trisha\'s plan is simple: for several days she will be flying from one city to another, making one flight per day. When she is reasonably sure that the police has lost her trail, she will fly to Atlanta and meet her `customer\' (known only as Mr. P.) to deliver the painting.<br><br>Her plan is complicated by the fact that nowadays, even when you are stealing expensive art, you have to watch your spending budget. Trisha therefore wants to spend the least money possible on her escape flights. This is not easy, since airlines prices and flight availability vary from day to day. The price and availability of an airline connection depends on the two cities involved and the day of travel. Every pair of cities has a `flight schedule\' which repeats every few days. The length of the period may be different for each pair of cities and for each direction.<br><br>Although Trisha is a good at stealing paintings, she easily gets confused when booking airline flights. This is where you come in. ", input:" The input contains the descriptions of several scenarios in which Trisha tries to escape. Every description starts with a line containing two integers n and k. n is the number of cities through which Trisha\'s escape may take her, and k is the number of flights she will take. The cities are numbered 1, 2, ..., n, where 1 is Paris, her starting point, and n is Atlanta, her final destination. The numbers will satisfy 2 &lt;= n &lt;= 10 and 1 &lt;= k &lt;= 1000.<br>Next you are given n(n - 1) flight schedules, one per line, describing the connection between every possible pair of cities. The first n - 1 flight schedules correspond to the flights from city 1 to all other cities (2, 3, ..., n), the next n - 1 lines to those from city 2 to all others (1, 3, 4, ..., n), and so on.<br><br>The description of the flight schedule itself starts with an integer d, the length of the period in days, with 1 &lt;= d &lt;= 30. Following this are d non-negative integers, representing the cost of the flight between the two cities on days 1, 2, ..., d. A cost of 0 means that there is no flight between the two cities on that day.<br><br>So, for example, the flight schedule ``3 75 0 80\'\' means that on the first day the flight costs 75, on the second day there is no flight, on the third day it costs 80, and then the cycle repeats: on the fourth day the flight costs 75, there is no flight on the fifth day, etc.<br><br>The input is terminated by a scenario having n = k = 0. ", output:" For each scenario in the input, first output the number of the scenario, as shown in the sample output. If it is possible for Trisha to travel k days, starting in city 1, each day flying to a different city than the day before, and finally (after k days) arriving in city n, then print ``The best flight costs x.\'\', where x is the least amount that the k flights can cost.<br><br>If it is not possible to travel in such a way, print ``No flight possible.\'\'.<br><br>Print a blank line after each scenario.<br>", sample_in:"3 6\n2 130 150\n3 75 0 80\n7 120 110 0 100 110 120 0\n4 60 70 60 50\n3 0 135 140\n2 70 80\n2 3\n2 0 70\n1 80\n0 0", sample_out:"Scenario #1\nThe best flight costs 460.\n\nScenario #2\nNo flight possible.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:18, vtotal_submit:31, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"冬练三九之一", author:"", tag:["TEST"]}
{pid:1581, vid:1581, oj:"hdu", title:"Number Game", desc:"Background<br><br>Christiane and Matthias are playing a new game, the Number Game. The rules of the Number Game are:<br><br>Christian and Matthias take turns in choosing integer numbers greater than or equal to 2. The following rules restrict the set of numbers which may be chosen:<br><br>R1 A number which has already been chosen by one of the players or a multiple of such a number cannot be chosen. (A number z is a multiple of a number y if z can be written as y * x and x is a positive integer.)<br><br>R2 A sum of two such multiples cannot be chosen either.<br><br>R3 For simplicity, a number which is greater than 20 cannot be chosen either. This enables a lot more NPCs (Non-Personal-Computers) to play this game.<br><br>The player who cannot choose any number anymore looses the Number Game.<br><br>Here is an example: Matthias starts by choosing 4. Then Christiane is not allowed to choose 4, 8, 12, etc. Let us assume her move is 3. Now, the numbers 3, 6, 9, etc. are excluded, too; furthermore, numbers like: 7 = 3 + 4, 10 = 2 * 3 + 4, 11 = 3 + 2 * 4, 13 = 3 * 3 + 4, . . . are not available. So, in fact, the only numbers left are 2 and 5. Matthias now says 2. Since 5 = 2 + 3 is now forbidden, too, he wins because there is no number for Christiane\'s move left.<br><br>Your task is to write a program which will help to play the Number Game. In general, i.e., without rule R3, this game may go on forever. However, with rule R3, it is possible to write a program that finds a strategy to win the game.<br><br><br>Problem<br><br>Given a game situation (a list of numbers which are not yet forbidden), your program should output all winning moves. A winning move is a move by which the player whose turn it is can force a win no matter what the other player will do. Now we define these terms more formally:<br><br>A loosing position is a position in which either<br><br>1. all numbers are forbidden, or<br><br>2. no winning move exists.<br><br>A winning position is a position in which a winning move exists.<br><br>A winning move is a move after which the position is a loosing position.", input:"The first line contains the number of scenarios.<br><br>The input for each scenario describes a game position. It begins with a line containing the number a, 0 &lt;= a &lt; 20 of numbers which are still available. Next follows a single line with the a numbers still available, separated by single blanks.<br><br>You may assume that all game positions in the input could really occur in the Number Game (for example, if 3 is not in the list of numbers available, 6 will not be, either).", output:" The output for each scenario begins with a line containing &quot;Scenario #i:&quot; where i is the number of the scenario starting at 1. In the next line either print &quot;There is no winning move.&quot; if this is true for the position of the current scenario, or &quot;The winning moves are: w1 w2 . . . wk.&quot; where the wi are all the winning moves, in ascending order, separated by single blanks. The output for each scenario should be followed by a blank line.<br><br>", sample_in:"2\n1\n2\n2\n2 3", sample_out:"Scenario #1:\nThe winning moves are: 2.\n\nScenario #2:\nThere is no winning move.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8, vtotal_submit:72, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"冬练三九之一", author:"", tag:["TEST"]}
{pid:1582, vid:1582, oj:"hdu", title:"AC Again", desc:"“AC”这个单词大概是我们 ACMers 最希望听到的回答了。不过如果把它写下来，你还能认识吗？<br>现在给你一幅由点阵构成的图，它代表 \'A\' 或 \'C\' 的一个字母。你的任务就是把它们识别出来。<br><br>注意：<br>1.笔划可能有粗有细，但是我们保证字符在外形上是肉眼可辨别的。<br>2.我们保证笔划是连贯的，即对于任意一个有笔划的点，在它周围八个点内有一点有笔划，这两点就是相连贯的。<br>3.\'A\',\'C\'这两个字符可能会按90，180，270这样的角度旋转。<br>", input:"本题目包含多组测试，每两组测试之间用一个或多个空行隔开。<br>对于每组数据，系统将给你一个肉眼可以辨别的图形表示一个字符\'A\' 或 \'C\'。<br>系统保证每个图形的大小在 50 * 50 一下。<br>输入数据只包含 \' \'(空格)和\'*\'两种字符，其中\'*\'表示该点有笔划。", output:"对于每组数据，根据图形，在一行内输出 A 或 C。", sample_in:"    *\n   * *\n  *****\n  *   *\n\n  ******\n *\n *\n *\n  ******", sample_out:"A\nC", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:71, vtotal_submit:317, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"冬练三九之二", author:"", tag:["TEST"]}
{pid:1583, vid:1583, oj:"hdu", title:"DNA Assembly", desc:"Farmer John has performed DNA sequencing on his prize milk-producing cow, Bessie DNA sequences are ordered lists (strings) containing the letters \'A\', \'C\', \'G\', and \'T\'. <br><br>As is usual for DNA sequencing, the results are a set of strings that are sequenced fragments of DNA, not entire DNA strings. A pair of strings like \'GATTA\' and \'TACA\' most probably represent the string \'GATTACA\' as the overlapping characters are merged, since they were probably duplicated in the sequencing process. <br><br>Merging a pair of strings requires finding the greatest overlap between the two and then eliminating it as the two strings are concatenated together. Overlaps are between the end of one string and beginning of another string, NOT IN THE MIDDLE OF A STRING. <br><br>By way of example, the strings \'GATTACA\' and \'TTACA\' overlap completely. On the other hand, the strings \'GATTACA\' and \'TTA\' have no overlap at all, since the matching characters of one appear in the middle of the other, not at one end or the other. Here are some examples of merging strings, including those with no overlap: <br><br><br><br>&nbsp;&nbsp;GATTA + TACA -&gt; GATTACA<br>&nbsp;&nbsp;TACA + GATTA -&gt; TACAGATTA<br>&nbsp;&nbsp;TACA + ACA -&gt; TACA<br>&nbsp;&nbsp;TAC + TACA -&gt; TACA<br>&nbsp;&nbsp;ATAC + TACA -&gt; ATACA<br>&nbsp;&nbsp;TACA + ACAT -&gt; TACAT<br>Given a set of N (2 &lt;= N &lt;= 7) DNA sequences all of whose lengths are in the range 1..7, find and print length of the shortest possible sequence obtainable by repeatedly merging all N strings using the procedure described above. All strings must be merged into the resulting sequence.", input:"The input consists of multiple test cases. <br>Each test case :<br>Line 1: A single integer N <br><br>Lines 2..N+1: Each line contains a single DNA subsequence<br>End of file.", output:"For each pair of input output the length of the shortest possible string obtained by merging the subsequences. It is always possible – and required – to merge all the input strings to obtain this string.", sample_in:"4\nGATTA\nTAGG\nATCGA\nCGCAT", sample_out:"13\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nExplanation of the sample: \n\nSuch string is \"CGCATCGATTAGG\".", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:51, vtotal_submit:169, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"冬练三九之二", author:"", tag:["TEST"]}
{pid:1584, vid:1584, oj:"hdu", title:"蜘蛛牌", desc:"蜘蛛牌是windows xp操作系统自带的一款纸牌游戏，游戏规则是这样的：只能将牌拖到比她大一的牌上面（A最小，K最大），如果拖动的牌上有按顺序排好的牌时，那么这些牌也跟着一起移动，游戏的目的是将所有的牌按同一花色从小到大排好，为了简单起见，我们的游戏只有同一花色的10张牌，从A到10，且随机的在一行上展开，编号从1到10，把第i号上的牌移到第j号牌上，移动距离为abs(i-j)，现在你要做的是求出完成游戏的最小移动距离。<br>", input:"第一个输入数据是T，表示数据的组数。<br>每组数据有一行，10个输入数据，数据的范围是[1,10]，分别表示A到10，我们保证每组数据都是合法的。", output:"对应每组数据输出最小移动距离。", sample_in:"1\n1 2 3 4 5 6 7 8 9 10", sample_out:"9", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:334, vtotal_submit:1330, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"冬练三九之二", author:"", tag:["TEST"]}
{pid:1585, vid:1585, oj:"hdu", title:"Auto Love-letter Maker", desc:"As the Valentine\'s Day is comeing soon,  Gardon is anxious about how to write a perfect love-letter to his girlfriend. But because of his poor Emotional quotient, he will never write a perfect love-letter. There is no doubt that roses must come with a love-letter! However, fortunately, Gardon has invented a powerful tool: Auto Love-letter Maker(ALM).<br>Gardon had spent more than twenty years on ALM though he\'s only eighteen years old. It follows the principle of GNU General Public License, so we can discover the rules of his algorithm:<br>1, A love-letter will always be ended with &quot;Love you! yours Gardon&quot;. The word &quot;Gardon&quot; is not generated by algorithm.<br>2, A love-letter will always begin with &quot;Dear Angel&quot;.<br>3, The text of love-letter is generated by some rule called &quot;Markov Words Link&quot;. The next word is generated by the last two words.<br>For example, this ruls is:<br>dear angel ==&gt; i<br>angel i    ==&gt; miss love wanna<br>i miss     ==&gt; you<br>i love     ==&gt; you<br>i wanna    ==&gt; be<br>love you   ==&gt; for yours<br>miss you   ==&gt; i<br>you i      ==&gt; love<br>wanna be   ==&gt; with<br>be with    ==&gt; you<br>with you   ==&gt; for<br>you for    ==&gt; ever<br>for ever   ==&gt; i love<br>ever i     ==&gt; wanna<br>ever love  ==&gt; you<br>So we can get this short love-letter:<br><br>Dear Angel: <br>   I miss you!I love you for ever!I wanna be with you for ever!<br>   Love you!<br>                       Yours, Gardon.<br><br>But Gardon find that if he tried to use a rule template which is more complex, it is probable the letter will never stop! After checking the algorithm, he has learned the matter is brought by the Markov rule. So now, he need you help him to check all the words-link template.<br>", input:"Input contains serveral words-links rules.each rule begin with a line &quot;**BEGIN**&quot; and end with a line &quot;** END **&quot;. each line will contain at least three ,at most thirty words: The first two words represent the rule case, and follow with all the valid words.<br>You can firmly assume that there will not be more than 10000 differents word in one case. Each word is a string of lower-case letters,and its length will not exceed 20. And I can tell you there is no more than 10000 rules.<br>", output:"Output your answer with the following rules:<br>1. It will NEVER reach the end, or two words which do not exist in the rules\'s first two words will ALWAYS appear , print &quot;Bad template!&quot;.<br>2. It can POSSIBLY reach the end or two words which do not exist in the rules\'s first two words MAY appear , print &quot;Imperfect template!&quot;.<br>3. It can ALWAYS reach the end and two words which do not exist in the rules\'s first two words NEVER appear , print &quot;Perfect template!&quot;.<br>", sample_in:"**BEGIN**\ndear angel i\nangel i miss love wanna\ni miss you\ni love you\ni wanna be\nlove you for yours\nmiss you i\nyou i love\nwanna be with\nbe with you\nwith you for\nyou for ever\nfor ever i love\never i wanna\never love you\n** END **\n**BEGIN**\ndear angel i\nangel i abcd\nlove you yours\n** END **\n**BEGIN**\ndear angel i\nangel i dear\ni dear angel\n** END **\n**BEGIN**\ndear angel love\nangel love you\nlove you yours\n** END **", sample_out:"Imperfect template!\nBad template!\nBad template!\nPerfect template!", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:17, special_status:0, time_limit:5000, mem_limit:65536, hint:"", source:"HDU “Valentines Day” Open Programming Contest 2007-02-14", author:"", tag:["TEST"]}
{pid:1586, vid:1586, oj:"hdu", title:"Sending", desc:"It\'s said that &quot;Writing a love-letter is mush easier than sending it out&quot;. After writing the love-letter with the help of ALM, Gardon is now planing how to send it to his Angel.<br>Er......In fact Gardon is too shy to send it directly. - -b So we needs to find some one to help him ...As the old saying goes &quot;You should pay to get something&quot;. Gardon must spend some money to buy gifts to someone who helps him. And there are also rules to give somebody gifts:<br>1. Some helpers need a number of gift.<br>2. If you ask A to send some gifts to B, besides the quantity of gifts A ordered, you must also give the same quantity of gifts to A as many as gifts you ask A to give B.<br><br>For example, there are four people, Angel, Bred, Cici, Dennis. Bred orderd two gifts, Cici and Dennis asked only one for themselves, and the way to send the letter is: Gardon==&gt;Dennis==&gt;Cici==&gt;Bred==&gt;Angel, so Gardon will buy Cici totally three gifts(one orded,the other two are paid for Cici sending gifts to Bred), and buy Dennis totally six gifts (one orded, the other two are paid for Dennis sending gifts to Cici). So totally Gardon need to buy eleven gifts - Bred two, Cici three, and Dennis six.<br><br>Now, giving every body\'s name, the quantity of gifts he/she ordered, and all person he/she knows (One can ask anybody who he/she knows), could you tell Gardon how many gifts he need to buy?", input:"Input starts with a integer T, and followed by T test cases.<br>In the begining of each case there is a integer N, which means how many person in the record.<br>Then N lines following, and each of them starts with a name. After their name, there are two integers V and C. V means the quantity of gifts he/she ordered, and following C names shows every person he/she knows.<br>You should know that all name is a word of at most 20 lowercases with a uppercase letter leading, and you can assume that there is no more than 1000 records in each test case. No one knows more than ten of others. <br>Everyone in the list will have a record except Angel.You\'ll always have a record of Gardon.", output:"For each test case inputed, please tell whether Gardon can send the letter out:<br>1. If he cannot, print &quot;Please do it yourself!&quot;<br>2. If he can, but should pay more than or equal with 1,000,000,000 gifts, print &quot;It cost too many!&quot;<br>3. Otherwise, print the gifts he needs to buy.", sample_in:"1\n4\nBred 2 1 Angel\nCici 1 1 Bred\nDennis 1 1 Cici\nGardon 0 2 Dennis Angel", sample_out:"Case 1: 11", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:6, vtotal_submit:47, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU “Valentines Day” Open Programming Contest 2007-02-14", author:"", tag:["TEST"]}
{pid:1587, vid:1587, oj:"hdu", title:"Flowers", desc:"As you know, Gardon trid hard for his love-letter, and now he\'s spending too much time on choosing flowers for Angel.<br>When Gardon entered the flower shop, he was frightened and dazed by thousands kinds of flowers. <br>&quot;How can I choose!&quot; Gardon shouted out.<br>Finally, Gardon-- a no-EQ man decided to buy flowers as many as possible.<br>Can you compute how many flowers Gardon can buy at most?", input:"Input have serveral test cases. Each case has two lines.<br>The first line contains two integers: N and M. M means how much money Gardon have.<br>N integers following, means the prices of differnt flowers.", output:"For each case, print how many flowers Gardon can buy at most.<br>You may firmly assume the number of each kind of flower is enough.", sample_in:"2 5\n2 3", sample_out:"2\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nGardon can buy 5=2+3,at most 2 flower, but he cannot buy 3 flower with 5 yuan.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1415, vtotal_submit:2403, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU “Valentines Day” Open Programming Contest 2007-02-14", author:"", tag:["TEST"]}
{pid:1588, vid:1588, oj:"hdu", title:"Gauss Fibonacci", desc:"Without expecting, Angel replied quickly.She says: &quot;I\'v heard that you\'r a very clever boy. So if you wanna me be your GF, you should solve the problem called GF~. &quot;<br>How good an opportunity that Gardon can not give up!  The &quot;Problem GF&quot; told by Angel is actually &quot;Gauss Fibonacci&quot;.<br>As we know ,Gauss is the famous mathematician who worked out the sum from 1 to 100 very quickly, and Fibonacci is the crazy man who invented some numbers.<br><br>Arithmetic progression:<br>g(i)=k*i+b;<br>We assume k and b are both non-nagetive integers.<br><br>Fibonacci Numbers:<br>f(0)=0<br>f(1)=1<br>f(n)=f(n-1)+f(n-2) (n&gt;=2)<br><br>The Gauss Fibonacci problem is described as follows:<br>Given k,b,n ,calculate the sum of every f(g(i)) for 0&lt;=i&lt;n<br>The answer may be very large, so you should divide this answer by M and just output the remainder instead.", input:"The input contains serveral lines. For each line there are four non-nagetive integers: k,b,n,M<br>Each of them will not exceed 1,000,000,000.<br>", output:"For each line input, out the value described above.", sample_in:"2 1 4 100\n2 0 4 100", sample_out:"21\n12", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:497, vtotal_submit:1869, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU “Valentines Day” Open Programming Contest 2007-02-14", author:"", tag:["TEST"]}
{pid:1589, vid:1589, oj:"hdu", title:"Stars Couple", desc:"Can you believe it? After Gardon had solved the problem, Angel accepted him! They were sitting on the lawn, watching the stars. <br>&quot;I still can\'t believe this!&quot; Gardon said.<br>Angel smiled and said: &quot;The reason why I love you does not rest on of who you are, but on who I am when I am with you.&quot;<br>Gardon answered :&quot;In my view, it\'s not because I\'m lonely and it\'s not because it\'s the Valentine\'s Day. It\'s because when you realize you want to spend the rest of your life with somebody, you want the rest of your life to start as soon as possible!&quot;<br>&quot;Watch the stars! How beautiful!&quot;<br>&quot;Just like your eyes!&quot; Gardon replied.<br>Angel smiled again:&quot; Did you hear about this: one star means one person. When two people fall in love, their stars will be always nearby.&quot;<br>&quot;So we are the nearest couple?&quot;<br>Now there is the question. Can you point out which couple of stars is nearest? Besides, can you fingle out which couple are most distant?", input:"Input contains serveral test cases. Each cases starts with a integer N (2&lt;=N&lt;=50,000). Then N lines follow. Each line have two integers Xi and Yi(-10^9&lt;Xi,Yi&lt;10^9), which show the position of one star.<br>The input will be ended with a integer 0.", output:"For each case, print the distance of the nearest couple and the most distant couple. <br>Print a blank line after each case.<br>", sample_in:"3\n1 1\n0 0\n0 1\n0", sample_out:"Case 1:\nDistance of the nearest couple is 1.000\nDistance of the most distant couple is 1.414\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nPlease use scanf instead of cin.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:97, vtotal_submit:777, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"HDU “Valentines Day” Open Programming Contest 2007-02-14", author:"", tag:["TEST"]}
{pid:1590, vid:1590, oj:"hdu", title:"Searching", desc:"&quot;You know what?&quot; Angel said, &quot;There is a love-letter from me embeded on the lawn. And if you can find it, it\'s for you~&quot;<br>&quot;How can I find it on such a big lawn?&quot;<br>&quot;I will show you a hint: start from that tree which is in center of this lawn, and run directly to (X,Y) point. Please memorize the distance you\'v passed. Then turn left with a angle A degree, and go ahead for k times of the length you\'v passed in the first step. k is a real number from 0 to 1. When you arrive, repeat to turn left, and run for k times as far as the length of the last step. After many many times, you will reach a place, where I embed my letter...&quot;<br>Of cause, Gardon wouldn\'t follow her hint simply. He just run there directly. Can you do it?", input:"Input have serveral test cases. Each cases have for real number: X,Y,A,k", output:"For each case, print the place where the treasure is embed.", sample_in:"1 0 90 0.5\n1 0 90 0\n1 0 0 0.5", sample_out:"(0.800,0.400)\n(1.000,0.000)\n(2.000,0.000)", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:44, vtotal_submit:304, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU “Valentines Day” Open Programming Contest 2007-02-14", author:"", tag:["TEST"]}
{pid:1591, vid:1591, oj:"hdu", title:"Encoded Love-letter", desc:"After Gardon had got Angel\'s letter, he found it was encoded...Oh my god, why did she encode a love-letter?? But don\'t worry, she wrote the algorithm for encoding after the letter:<br>Each charactor are changed to a corresponding charactor. If the keyword is &quot;Angel&quot;, the rule will be:<br><br>ABCDEFGHIJKLMNOPQRSTUVWXYZ<br>ANGELZYXWVUTSRQPOMKJIHFDCB<br><br>You may find that in the bottom line, charactors of the keyword come first. All other charactors will come in a reversed order.<br><br>Now given another keyword, work the letter out!<br>Can you write a program to translate the letter?<br>", input:"The letter will begin with the keyword (All uppercase), then lines of text.", output:"Decode the letter and print it out. Please note that a upper-case charactor will be decoded to a upper-case charactor, while a lower-case charactor will be decoded to a lower-case charactor.", sample_in:"ANGEL\nFxlr jxaj eac W xlam cqim hqwgl\nW xahl kqsl kplgwat zlltwry\nTlj sl atfack jxwru W eqr\'j farra zqmylj cqi\nW mlslsnlm aj jxl eac\nCqi aml atfack qr sc swre\nLhlrjxqiyx W vikj gar jxwru anqij cqi\nWz jxl eac wr jxl zijiml\nJxwk tqhl fwtt nlgqswry jmil\nW\'hl rlhlm gxaryl sc swre jxaj W fwtt tqhl cqi zqmlhlm\nW eqr\'j gaml xqf zqqt wj wk\nW fwtt tlj sc emlas gqsl jmil\nW fwtt jltt cqi kqsljxwry W farra tlj cqi urqf, W tlj cqi urqf\n\nW tqhl cqi, tqhwry cqi, ak jxl sqikl tqhlk jxl mwgl\nLhlr lhlmc eac xak kjqms, W fwtt atfack nc cqim kwel\nW swkk cqi, swkkwry cqi\nW eqr\'j gaml xqf xame wj wk\nW vikj farj cqi jq nl xappc\nLhlmcjxwry, W eq wj zqm cqi", sample_out:"When that day I hear your voice\nI have some special feeling\nLet me always think I don\'t wanna forget you\nI remember at the day\nYou are always on my mind\nEventhough I just can think about you\nIf the day in the future\nThis love will becoming true\nI\'ve never change my mind that I will love you forever\nI don\'t care how fool it is\nI will let my dream come true\nI will tell you something I wanna let you know, I let you know\n\nI love you, loving you, as the mouse loves the rice\nEven every day has storm, I will always by your side\nI miss you, missing you\nI don\'t care how hard it is\nI just want you to be happy\nEverything, I do it for you ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:374, vtotal_submit:1257, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU “Valentines Day” Open Programming Contest 2007-02-14", author:"", tag:["TEST"]}
{pid:1592, vid:1592, oj:"hdu", title:"Half of and a Half", desc:"Gardon bought many many chocolates from the A Chocolate Market (ACM). When he was on the way to meet Angel, he met Speakless by accident. <br>&quot;Ah, so many delicious chocolates! I\'ll get half of them and a half!&quot; Speakless said.<br>Gardon went on his way, but soon he met YZG1984 by accident....<br>&quot;Ah, so many delicious chocolates! I\'ll get half of them and a half!&quot; YZG1984 said.<br>Gardon went on his way, but soon he met Doramon by accident....<br>&quot;Ah, so many delicious chocolates! I\'ll get half of them and a half!&quot; Doramon said.<br>Gardon went on his way, but soon he met JGShining by accident....<br>&quot;Ah, so many delicious chocolates! I\'ll get half of them and a half!&quot; JGShining said.<br>.<br>.<br>.<br>After had had met N people , Gardon finally met Angel. He gave her half of the rest and a half, then Gardon have none for himself. Could you tell how many chocolates did he bought from ACM?", input:"Input contains many test cases.<br>Each case have a integer N, represents the number of people Gardon met except Angel. N will never exceed 1000;", output:"For every N inputed, tell how many chocolates Gardon had at first.", sample_in:"2", sample_out:"7", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:349, vtotal_submit:875, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU “Valentines Day” Open Programming Contest 2007-02-14", author:"", tag:["TEST"]}
{pid:1593, vid:1593, oj:"hdu", title:"find a way to escape", desc:"一日，话说0068与***泛舟湖上。忽见岸边出现他的一大敌人elnil。0068当然不想落入elnil的魔爪，于是他就得想办法逃脱。<br><br>这个湖是一个很规则的圆形，半径为R。此时0068正好在圆心位置。小船在湖中的速度为 V1，0068和elnil在岸上的速度都为V2。也就是说，如果0068在刚上岸的时候没被抓到，则他可逃脱。在任意时刻，0068和elnil都可以朝任何方向移动，但是0068不能一直呆上船上（会饿死的），elnil不能下水（他不会游泳）。假设0068和elnil都非常聪明，总能做对自己最有利的事情，而且两个人的体力都是无限的。<br><br>请问，0068最终能不能逃脱elnil的魔爪？", input:"本题目包含多组测试。请处理到文件结束。<br>每组测试包含三个整数，R，V1，V2。<br>", output:"对于每组数据，如果0068能够安全逃脱，输出Yes，否则输出No。<br>数据不会出现正好抓到的情况，所以你可不用太考虑临界点。", sample_in:"100 10 20\n100 10 50", sample_out:"Yes\nNo", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:395, vtotal_submit:1215, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-Spring Programming Contest - Warm Up （1）", author:"", tag:["TEST"]}
{pid:1594, vid:1594, oj:"hdu", title:"find the max", desc:"有一个离散函数f(x),x = {1, 2, ,,,,N}，f(x)&lt;2^31。现在要找出2个点i,j, 使得函数在这2点之间的点都在这2点连线下方，且此连线的斜率的绝对值越大越好。", input:"输入包括多个测试实例。每个测试实例包括2行，第一行为一个整数N，2 &lt;= N &lt;= 100000, 然后是N个整数f(x),x=1,2...N，读到文件结束符为止.", output:"对于每个测试实例输出找到的i和j,如果有多个答案，输出字典序最小的一个。", sample_in:"3\n1 2 3\n3\n2 6 4", sample_out:"1 2\n1 2\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nuse scanf to avoid Time Limit Exceeded", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:214, vtotal_submit:572, special_status:0, time_limit:1500, mem_limit:32768, hint:"", source:"HDU 2007-Spring Programming Contest - Warm Up （1）", author:"", tag:["TEST"]}
{pid:1595, vid:1595, oj:"hdu", title:"find the longest of the shortest", desc:"   Marica is very angry with Mirko because he found a new girlfriend and she seeks revenge.Since she doesn\'t live in the same city, she started preparing for the long journey.We know for every road how many minutes it takes to come from one city to another.<br>  Mirko overheard in the car that one of the roads is under repairs, and that it is blocked, but didn\'t konw exactly which road. It is possible to come from Marica\'s city to Mirko\'s no matter which road is closed.<br>  Marica will travel only by non-blocked roads, and she will travel by shortest route. Mirko wants to know how long will it take for her to get to his city in the worst case, so that he could make sure that his girlfriend is out of town for long enough.Write a program that helps Mirko in finding out what is the longest time in minutes it could take for Marica to come by shortest route by non-blocked roads to his city.", input:"Each case there are two numbers in the first row, N and M, separated by a single space, the number of towns,and the number of roads between the towns. 1 ≤ N ≤ 1000, 1 ≤ M ≤ N*(N-1)/2. The cities are markedwith numbers from 1 to N, Mirko is located in city 1, and Marica in city N.<br>In the next M lines are three numbers A, B and V, separated by commas. 1 ≤ A,B ≤ N, 1 ≤ V ≤ 1000.Those numbers mean that there is a two-way road between cities A and B, and that it is crossable in V minutes.", output:"In the first line of the output file write the maximum time in minutes, it could take Marica to come to Mirko.", sample_in:"5 6\n1 2 4\n1 3 3\n2 3 1\n2 4 4\n2 5 7\n4 5 1\n\n6 7\n1 2 1\n2 3 4\n3 4 4\n4 6 4\n1 5 5\n2 5 2\n5 6 5\n\n5 7\n1 2 8\n1 4 10\n2 3 9\n2 4 10\n2 5 1\n3 4 7\n3 5 10", sample_out:"11\n13\n27", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:270, vtotal_submit:1342, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"HDU 2007-Spring Programming Contest - Warm Up （1）", author:"", tag:["TEST"]}
{pid:1596, vid:1596, oj:"hdu", title:"find the safest road", desc:"XX星球有很多城市，每个城市之间有一条或多条飞行通道，但是并不是所有的路都是很安全的，每一条路有一个安全系数s,s是在 0 和 1 间的实数(包括0，1)，一条从u 到 v 的通道P 的安全度为Safe(P) = s(e1)*s(e2)…*s(ek) e1,e2,ek是P 上的边 ，现在8600 想出去旅游，面对这这么多的路，他想找一条最安全的路。但是8600 的数学不好，想请你帮忙 ^_^", input:"输入包括多个测试实例，每个实例包括：<br>第一行：n。n表示城市的个数n&lt;=1000;<br>接着是一个n*n的矩阵表示两个城市之间的安全系数，(0可以理解为那两个城市之间没有直接的通道)<br>接着是Q个8600要旅游的路线,每行有两个数字，表示8600所在的城市和要去的城市", output:"如果86无法达到他的目的地，输出&quot;What a pity!&quot;,<br>其他的输出这两个城市之间的最安全道路的安全系数,保留三位小数。", sample_in:"3\n1 0.5 0.5\n0.5 1 0.4\n0.5 0.4 1\n3\n1 2\n2 3\n1 3", sample_out:"0.500\n0.400\n0.500", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1025, vtotal_submit:5706, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"HDU 2007-Spring Programming Contest - Warm Up （1）", author:"", tag:["TEST"]}
{pid:1597, vid:1597, oj:"hdu", title:"find the nth digit", desc:"假设：<br>S1 = 1<br>S2 = 12<br>S3 = 123<br>S4 = 1234<br>.........<br>S9 = 123456789<br>S10 = 1234567891<br>S11 = 12345678912<br>............<br>S18 = 123456789123456789<br>..................<br>现在我们把所有的串连接起来<br>S = 1121231234.......123456789123456789112345678912.........<br>那么你能告诉我在S串中的第N个数字是多少吗？<br>", input:"输入首先是一个数字K，代表有K次询问。<br>接下来的K行每行有一个整数N(1 &lt;= N &lt; 2^31)。", output:"对于每个N，输出S中第N个对应的数字.<br>", sample_in:"6\n1\n2\n3\n4\n5\n10", sample_out:"1\n1\n2\n1\n2\n4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1654, vtotal_submit:7645, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-Spring Programming Contest - Warm Up （1）", author:"", tag:["TEST"]}
{pid:1598, vid:1598, oj:"hdu", title:"find the most comfortable road", desc:"XX星有许多城市，城市之间通过一种奇怪的高速公路SARS(Super Air Roam Structure---超级空中漫游结构）进行交流，每条SARS都对行驶在上面的Flycar限制了固定的Speed，同时XX星人对 Flycar的“舒适度”有特殊要求，即乘坐过程中最高速度与最低速度的差越小乘坐越舒服 ,(理解为SARS的限速要求，flycar必须瞬间提速/降速，痛苦呀 ),<br>但XX星人对时间却没那么多要求。要你找出一条城市间的最舒适的路径。(SARS是双向的）。<br>", input:"输入包括多个测试实例，每个实例包括：<br>第一行有2个正整数n (1&lt;n&lt;=200)和m (m&lt;=1000),表示有N个城市和M条SARS。<br>接下来的行是三个正整数StartCity,EndCity,speed,表示从表面上看StartCity到EndCity,限速为speedSARS。speed&lt;=1000000<br>然后是一个正整数Q（Q&lt;11),表示寻路的个数。<br>接下来Q行每行有2个正整数Start,End, 表示寻路的起终点。", output:"每个寻路要求打印一行，仅输出一个非负整数表示最佳路线的舒适度最高速与最低速的差。如果起点和终点不能到达，那么输出-1。", sample_in:"4 4\n1 2 2\n2 3 4\n1 4 1\n3 4 2\n2\n1 3\n1 2", sample_out:"1\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:668, vtotal_submit:3126, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-Spring Programming Contest - Warm Up （1）", author:"", tag:["TEST"]}
{pid:1599, vid:1599, oj:"hdu", title:"find the mincost route", desc:"杭州有N个景区，景区之间有一些双向的路来连接，现在8600想找一条旅游路线，这个路线从A点出发并且最后回到A点，假设经过的路线为V1,V2,....VK,V1,那么必须满足K&gt;2,就是说至除了出发点以外至少要经过2个其他不同的景区，而且不能重复经过同一个景区。现在8600需要你帮他找一条这样的路线，并且花费越少越好。<br>", input:"第一行是2个整数N和M（N &lt;= 100, M &lt;= 1000)，代表景区的个数和道路的条数。<br>接下来的M行里，每行包括3个整数a,b,c.代表a和b之间有一条通路，并且需要花费c元(c &lt;= 100)。", output:"对于每个测试实例，如果能找到这样一条路线的话，输出花费的最小值。如果找不到的话，输出&quot;It\'s impossible.&quot;.", sample_in:"3 3\n1 2 1\n2 3 1\n1 3 1\n3 3\n1 2 1\n1 2 3\n2 3 1", sample_out:"3\nIt\'s impossible.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:413, vtotal_submit:1969, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"HDU 2007-Spring Programming Contest - Warm Up （1）", author:"", tag:["TEST"]}
{pid:1600, vid:1600, oj:"hdu", title:"DNA Translation", desc:"Deoxyribonucleic acid (DNA) is composed of a sequence of nucleotide bases paired together to form a double-stranded helix structure. Through a series of complex biochemical processes the nucleotide sequences in an organism\'s DNA are translated into the proteins it requires for life. The object of this problem is to write a computer program which accepts a DNA strand and reports the protein generated, if any, from the DNA strand. <br>The nucleotide bases from which DNA is built are adenine, cytosine, guanine, and thymine (hereafter referred to as A, C, G, and T, respectively). These bases bond together in a chain to form half of a DNA strand. The other half of the DNA strand is a similar chain, but each nucleotide is replaced by its complementary base. The bases A and T are complementary, as are the bases C and G. These two ``half-strands\'\' of DNA are then bonded by the pairing of the complementary bases to form a strand of DNA. <br><br>Typically a DNA strand is listed by simply writing down the bases which form the primary strand (the complementary strand can always be created by writing the complements of the bases in the primary strand). For example, the sequence TACTCGTAATTCACT represents a DNA strand whose complement would be ATGAGCATTAAGTGA. Note that A is always paired with T, and C is always paired with G. <br><br>From a primary strand of DNA, a strand of ribonucleic acid (RNA) known as messenger RNA (mRNA for short) is produced in a process known as transcription. The transcribed mRNA is identical to the complementary DNA strand with the exception that thymine is replaced by a nucleotide known as uracil (hereafter referred to as U). For example, the mRNA strand for the DNA in the previous paragraph would be AUGAGCAUUAAGUGA. <br><br>It is the sequence of bases in the mRNA which determines the protein that will be synthesized. The bases in the mRNA can be viewed as a collection of codons, each codon having exactly three bases. The codon AUG marks the start of a protein sequence, and any of the codons UAA, UAG, or UGA marks the end of the sequence. The one or more codons between the start and termination codons represent the sequence of amino acids to be synthesized to form a protein. For example, the mRNA codon AGC corresponds to the amino acid serine (Ser), AUU corresponds to isoleucine (Ile), and AAG corresponds to lysine (Lys). So, the protein formed from the example mRNA in the previous paragraph is, in its abbreviated form, Ser-Ile-Lys. <br><br>The complete genetic code from which codons are translated into amino acids is shown in the table below (note that only the amino acid abbreviations are shown). It should also be noted that the sequence AUG, which has already been identified as the start sequence, can also correspond to the amino acid methionine (Met). So, the first AUG in a mRNA strand is the start sequence, but subsequent AUG codons are translated normally into the Met amino acid. <br><br><img src=data/images/1600-1.gif><br>", input:"The input for this program consists of strands of DNA sequences, one strand per line, from which the protein it generates, if any, should be determined and output. The given DNA strand may be either the primary or the complementary DNA strand, and it may appear in either forward or reverse order, and the start and termination sequences do not necessarily appear at the ends of the strand. For example, a given input DNA strand to form the protein Ser-Ile-Lys could be any of ATACTCGTAATTCACTCC, CCTCACTTAATGCTCATA, TATGAGCATTAAGTGAGG, or GGAGTGAATTACGAGTAT. The input will be terminated by a line containing a single asterisk character. <br>You may assume the input to contain only valid, upper-case, DNA nucleotide base letters (A, C, G, and T). No input line will exceed 255 characters in length. There will be no blank lines or spaces in the input. <br><br>", output:"Some sequences, though valid DNA strands, do not produce valid protein sequences; the string ``*** No translatable DNA found ***\'\' should be output when an input DNA strand does not translate into a valid protein.<br>", sample_in:"ATACTCGTAATTCACTCC\nCACCTGTACACAGAGGTAACTTAG\nTTAATACGACATAATTAT\nGCCTTGATATGGAGAACTCATTAGATA\nAAGTGTATGTTGAATTATATAAAACGGGCATGA\nATGATGATGGCTTGA\n*", sample_out:"Ser-Ile-Lys\nCys-Leu-His\nSer-Tyr\n*** No translatable DNA found ***\nLeu-Asn-Tyr-Ile-Lys-Arg-Ala\nMet-Met-Ala", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:15, vtotal_submit:64, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 1995", author:"", tag:["TEST"]}
{pid:1601, vid:1601, oj:"hdu", title:"Galactic Import", desc:"With the introduction of the new ThrustoZoom gigadimensional drive, it has become possible for HyperCommodities, the import/export conglomerate from New Jersey, to begin trading with even the most remote galaxies in the universe. HyperCommodities wants to import goods from some of the galaxies in the Plural Z sector. Planets within these galaxies export valuable products and raw materials like vacuuseal, transparent aluminum, digraphite, and quantum steel. Preliminary reports have revealed the following facts: <br><br><br>Each galaxy contains at least one and at most 26 planets. Each planet within a galaxy is identified by a unique letter from A to Z. <br><br>Each planet specializes in the production and export of one good. Different planets within the same galaxy export different goods. <br><br>Some pairs of planets are connected by hyperspace shipping lines. If planets A and B are connected, they can trade goods freely. If planet C is connected to B but not to A, then A and C can still trade goods with each other through B, but B keeps 5% of the shipment as a shipping fee. (Thus A only receives 95% of what C shipped, and C receives only 95% of what A shipped.) In general, any two planets can trade goods as long as they are connected by some set of shipping lines, but each intermediate planet along the shipping route keeps 5% of what it shipped (which is not necessarily equal to 5% of the original shipment). <br><br>At least one planet in each galaxy is willing to open a ThrustoZoom shipping line to Earth. A ThrustoZoom line is the same as any other shipping line within the galaxy, as far as business is concerned. For example, if planet K opens a ThrustoZoom line to Earth, then the Earth can trade goods freely with K, or it can trade goods with any planet connected to K, subject to the usual shipping fees. <br><br>HyperCommodities has assigned a relative value (a positive real number less than 10) to each planet\'s chief export. The higher the number, the more valuable the product. More valuable products can be resold with a higher profit margin in domestic markets. The problem is to determine which planet has the most valuable export when shipping fees are taken into account. ", input:"The input consists of one or more galaxy descriptions. Each galaxy description begins with a line containing an integer N which specifies the number of planets in the galaxy. The next N lines contain descriptions of each planet, which consist of: <br><br><br>1) The letter used to represent the planet. <br><br>2) A space. <br><br>3) The relative value of the planet\'s export, in the form d.dd. <br><br>4) A space. <br><br>5) A string containing letters and/or the character `*\'; a letter indicates a shipping line to that planet, and a `*\' indicates a willingness to open a ThrustoZoom shipping line to Earth. <br>", output:"For each galaxy description, output a single line which reads &quot;Import from P&quot; where P is the letter of the planet with the most valuable export, once shipping fees have been taken into account. (If more than one planet have the same most valuable export value then output the plant which is alphabetically first). <br>", sample_in:"1\nF 0.81 *\n5\nE 0.01 *A\nD 0.01 A*\nC 0.01 *A\nA 1.00 EDCB\nB 0.01 A*\n10\nS 2.23 Q*\nA 9.76 C\nK 5.88 MI\nE 7.54 GC\nM 5.01 OK\nG 7.43 IE\nI 6.09 KG\nC 8.42 EA\nO 4.55 QM\nQ 3.21 SO", sample_out:"Import from F\nImport from A\nImport from A", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:18, vtotal_submit:45, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 1995", author:"", tag:["TEST"]}
{pid:1602, vid:1602, oj:"hdu", title:"Mark-up", desc:"Mark-up languages are computer languages that assist in the formatting of text files. Special keywords are used to mark the text to allow control of fonts, page styles, paragraph styles, etc. TeX, troff, and HTML are examples of mark-up languages. <br><br>Spell checking can be difficult to adapt to these special texts. In general, special processors or spell checkers must be created in order to accommodate mark-up languages. A special processor would recognize the mark-up language and strip it from the text so that the ``plain\'\' text could then be processed by a spell checker. For this problem, you are to write such a processor for a small mark-up language so that the output of your program will be the plain text without the mark-ups. <br><br>The mark-up language to consider is one which allows the modification of fonts within the text. Each markup command will be preceded by a \\ character. If the letter following the \\ character is not a recognized command from the table below then the character following the \\ is printed as part of the plain text. For instance, the mark-up \\\\ can be used to print a single \\. <br><br>   \\b<br>    toggle bold font on/off (default state is off)  <br>   \\i<br>    toggle italics font on/off (default state is off)  <br>   \\s<br>    set font size; the s is immediately followed by an optional number; if the number is missing then the command will restore the previous size  <br>   \\*<br>    toggle processing of mark-ups on/off; if processing is toggle off then mark-ups are considered to be literal text (default state is on)  <br><br>The number following the \\s command can have a decimal point so 12, 9.5, 11., and .5 should all be recognized as valid numbers. <br><br>", input:"The input file will be plain text containing mark-ups from the language above. At the start, processing of mark-ups should be on. The file should be processed until the end-of-file is encountered. <br><br>", output:"", sample_in:"\\s18.\\bMARKUP sample\\b\\s\n\n\\*For bold statements use the \\b command.\\*\n\nIf you wish to \\iemphasize\\i something use the \\\\i command.\n\nFor titles use \\s14BIG\\s font sizes, 14 points usually works well.\n\nRemember that all of the commands toggle except for the \\\\s command.", sample_out:"MARKUP sample\n\nFor bold statements use the \\b command.\n\nIf you wish to emphasize something use the \\i command.\n\nFor titles use BIG font sizes, 14 points usually works well.\n\nRemember that all of the commands toggle except for the \\s command.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:10, vtotal_submit:46, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 1995", author:"", tag:["TEST"]}
{pid:1603, vid:1603, oj:"hdu", title:"A Puzzling Problem", desc:"The goal of this problem is to write a program which will take from 1 to 5 puzzle pieces such as those shown below and arrange them, if possible, to form a square. An example set of pieces is shown here. <br><br><img src=data/images/1603-1.jpg><br><br>The pieces cannot be rotated or flipped from their original orientation in an attempt to form a square from the set. All of the pieces must be used to form the square. There may be more than one possible solution for a set of pieces, and not every arrangement will work even with a set for which a solution can be found. Examples using the above set of pieces are shown here. <br><br><img src=data/images/1603-2.jpg><br>", input:"The input for this program contains several puzzles (i.e. sets of puzzle pieces) to be solved. The first line of the input is the number of pieces in the first puzzle. Each piece is then specified by listing a single line with two integers, the number of rows and columns in the piece, followed by one or more lines which specify the shape of the piece. The shape specification consists of `0\' and `1\' characters, with the `1\' characters indicating the solid shape of the puzzle (the `0\' characters are merely placeholders). For example, piece `A\' above would be specified as follows: <br><br>2 3<br>111<br>101<br><br>The pieces should be numbered by the order they are encountered in the puzzle. That is, the first piece in a puzzle is piece #1, the next is piece #2, etc. All pieces may be assumed to be valid and no larger than 4 rows by 4 columns. <br><br>The line following the final line of the last piece contains the number of pieces in the next puzzle, again followed by the puzzle pieces and so on. The end of the input file is indicated by a zero in place of the number of puzzle pieces. <br><br>", output:"Your program should report a solution, if one is possible, in the format shown by the examples below. A 4-row by 4-column square should be created, with each piece occupying its location in the solution. The solid portions of piece #1 should be replaced with `1\' characters, of piece #2 with `2\' characters, etc. The solutions for each puzzle should be followed by a single blank line. <br><br>If there are multiple solutions, any of them is acceptable. For puzzles which have no possible solution simply report ``No solution possible\'\'. <br><br>", sample_in:"4\n2 3\n111\n101\n4 2\n01\n01\n11\n01\n2 1\n1\n1\n3 2\n10\n10\n11\n4\n1 4\n1111\n1 4\n1111\n1 4\n1111\n2 3\n111\n001\n5\n2 2\n11\n11\n2 3\n111\n100\n3 2\n11\n01\n01\n1 3\n111\n1 1\n1\n0", sample_out:"1112\n1412\n3422\n3442\n\nNo solution possible\n\n1133\n1153\n2223\n2444", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:42, vtotal_submit:210, special_status:1, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 1995", author:"", tag:["TEST"]}
{pid:1604, vid:1604, oj:"hdu", title:"Letter Sequence Analysis", desc:"Cryptographic analysis makes extensive use of the frequency with which letters and letter sequences occur in a language. If an encrypted text is known to be in english, for example, a great deal can be learned from the fact that the letters E, L, N, R, S, and T are the most common ones used in written english. Even more can be learned if common letter pairs, triplets, etc. are known. <br>For this problem you are to write a program which accepts as input a text file of unspecified length and performs letter sequence analysis on the text. The program will report the five most frequent letter sequences for each set of sequences from one to five letters. That is it will report the individual characters which occur with the five highest frequencies, the pairs of characters which occur with the five highest frequencies, and so on up to the letter sequences of five characters which occur with the five highest frequencies. <br><br>The program should consider contiguous sequences of alphabetic characters only, and case should be ignored (e.g. an `a\' is the same as an `A\'). A report should be produced using the format shown in the example at the end of this problem description. For each sequence length from one to five, the report should list the sequences in descending order of frequency. If there are several sequences with the same frequency then all sequences should be listed in alphabetical order as shown (list all sequences in upper case). Finally, if there are less than five distinct frequencies for a particular sequence length, simply report as many distinct frequency lists as possible. <br><br><br>Examples<br><br>When a text file containing simply the line ``Peter Piper Picks Pickles!\'\' is used as input, the output should appear as shown here: <br><br>Analysis for Letter Sequences of Length 1<br>-----------------------------------------<br>Frequency = 5, Sequence(s) = (P)<br>Frequency = 4, Sequence(s) = (E)<br>Frequency = 3, Sequence(s) = (I)<br>Frequency = 2, Sequence(s) = (C,K,R,S)<br>Frequency = 1, Sequence(s) = (L,T)<br><br>Analysis for Letter Sequences of Length 2<br>-----------------------------------------<br>Frequency = 3, Sequence(s) = (PI)<br>Frequency = 2, Sequence(s) = (CK,ER,IC,PE)<br>Frequency = 1, Sequence(s) = (ES,ET,IP,KL,KS,LE,TE)<br><br>Analysis for Letter Sequences of Length 3<br>-----------------------------------------<br>Frequency = 2, Sequence(s) = (ICK,PIC)<br>Frequency = 1, Sequence(s) = (CKL,CKS,ETE,IPE,KLE,LES,PER,PET,PIP,TER)<br><br>Analysis for Letter Sequences of Length 4<br>-----------------------------------------<br>Frequency = 2, Sequence(s) = (PICK)<br>Frequency = 1, Sequence(s) = (CKLE,ETER,ICKL,ICKS,IPER,KLES,PETE,PIPE)<br><br>Analysis for Letter Sequences of Length 5<br>-----------------------------------------<br>Frequency = 1, Sequence(s) = (CKLES,ICKLE,PETER,PICKL,PICKS,PIPER)<br><br>When the first three paragraphs of this problem description are used as input, the output should appear as shown here: <br><br>Analysis for Letter Sequences of Length 1<br>-----------------------------------------<br>Frequency = 201, Sequence(s) = (E)<br>Frequency = 112, Sequence(s) = (T)<br>Frequency = 96, Sequence(s) = (S)<br>Frequency = 90, Sequence(s) = (R)<br>Frequency = 84, Sequence(s) = (N)<br><br>Analysis for Letter Sequences of Length 2<br>-----------------------------------------<br>Frequency = 37, Sequence(s) = (TH)<br>Frequency = 33, Sequence(s) = (EN)<br>Frequency = 27, Sequence(s) = (HE)<br>Frequency = 24, Sequence(s) = (RE)<br>Frequency = 23, Sequence(s) = (NC)<br><br>Analysis for Letter Sequences of Length 3<br>-----------------------------------------<br>Frequency = 24, Sequence(s) = (THE)<br>Frequency = 21, Sequence(s) = (ENC,EQU,QUE,UEN)<br>Frequency = 12, Sequence(s) = (NCE,SEQ,TER)<br>Frequency = 9, Sequence(s) = (CES,FRE,IVE,LET,REQ,TTE)<br>Frequency = 8, Sequence(s) = (ETT,FIV)<br><br>Analysis for Letter Sequences of Length 4<br>-----------------------------------------<br>Frequency = 21, Sequence(s) = (EQUE,QUEN)<br>Frequency = 20, Sequence(s) = (UENC)<br>Frequency = 12, Sequence(s) = (ENCE,SEQU)<br>Frequency = 9, Sequence(s) = (FREQ,NCES,REQU)<br>Frequency = 8, Sequence(s) = (ETTE,FIVE,LETT,TTER)<br><br>Analysis for Letter Sequences of Length 5<br>-----------------------------------------<br>Frequency = 21, Sequence(s) = (EQUEN)<br>Frequency = 20, Sequence(s) = (QUENC)<br>Frequency = 12, Sequence(s) = (SEQUE,UENCE)<br>Frequency = 9, Sequence(s) = (ENCES,FREQU,REQUE)<br>Frequency = 8, Sequence(s) = (ETTER,LETTE)<br><br><br>", input:"", output:"", sample_in:"", sample_out:"", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:12, vtotal_submit:30, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Mid-Central USA 1995", author:"", tag:["TEST"]}
{pid:1605, vid:1605, oj:"hdu", title:"Gears on a Board", desc:"An engineering firm called ``Gears R Us&quot; needs a program which can evaluate the operation of gears on a board. The board is a two-dimensional mounting plane which allows gears with two levels of teeth (an inside radius closest to the board and an outside radius away from the board). The gears rotate around the center of their diameter and interact by turning an adjacent gear which it touches (either on the inside or outside radiuss) with a equal tangential velocity. Angular velocity is the same for both the inside and outside radius gears. <br><br>``Gears R Us&quot; uses square mounting boards which have a 300×300 grid of mounting holes on 1 cm centers. When viewing the board, the lower left of the board is position x = 1, y = 1; the upper right of the board is position x = 300, y = 300. The gears mount only on mounting holes and are available with integer inside and outside radii between 1 and 100. The ``motor&quot; gear is the only original source of energy of any board and is actually a gear (powered from behind the board) subject to all the restrictions described for gears above. The following diagram shows a sample configuration. <br><br><img src=data/images/1605-1.png><br><br>In the above example, the motor is at location x = 20, y = 100; the inside and outside radii of the gears the motor drives are both 5 centimeters, and the motor is rotating to the left (counter-clockwise) at 300 RPM\'s. By observation and computation, you can see that the motor touches (without overlapping) the inside radius of Gear #1. The inside radius of Gear #1 touches the inside radius of Gear #2 and Gear #3. The outside radius of Gear #3 touches the outside radius of Gear #4; the inside radius of Gear #4 touches the inside radius of Gear #5. <br><br><br>Given the data in the above example, it is possible to compute that Gear #1 rotates to the right (clockwise) at 83.33 RPM\'s; Gear #2 rotates to the left (counter-clockwise) at 187.50 RPM\'s; Gear #3 rotates to the left at 150.00 RPM\'s; Gear #4 rotates to the right at 281.25 RPM\'s; and Gear #5 rotates to the left at 33.75 RPM\'s. <br><br><br>Although this example does not include any off-nominal conditions, ``Gears R Us&quot; needs your program to isolate two error conditions. The first error occurs when two or more gears would overlap at either the inner or outter radius. The second error condition occurs when any gear is being driven at two or more different speeds. It is valid for two or more gears to drive another gear at the same speed (and in the same direction). <br><br><br>It is possible for a warning condition to occur when 1 or more gears are idle (ie rotation = 0.0). If this condition occurs, your program will have to print a warning message as described below. <br><br>", input:"Input to your program consists of an undetermined number of configurations to be analyzed. Each set starts with a single line of six integers. <br><br>The first two integers are the x, y coordinates of the motor (1 &lt;= x, y &lt;= 300); the next two integers are the inside and outside radii of the motor gear respectively (1 &lt;= ir, or &lt;= 100); the fifth integer is the rotational velocity (1 &lt;= abs(AV) &lt;= 1000) of the motor in RPM\'s (negative representing counter-clockwise rotation and positive representing clockwise rotation); the sixth integer is the number of gears (1 &lt;= NG &lt;= 20) excluding the motor that are mounted on the board. <br><br><br>Each of the following NG lines contain exactly 4 integers representing gears 1 through NG respectively. The first two integers represent the x, y coordinates (1 &lt;= x, y &lt;= 300) of the gear and the second pair of integers represent the inside and outside radii of the gear respectively (1 &lt;= ir, or &lt;= 100). <br><br><br>", output:"For each input set, your program should print either a list of the gears and the rotation value for each or one of two error messages. The first line of each output set should be a line containing only ``Simulation #X&quot; where X is the simulation number (starting with 1) and is left-justified starting in column 13. <br><br>If there are no errors, lines 2 through NG+1 of the output set should contain the gear number right-justified in columns 1 and 2, a colon in column 3, either a `L\' for counter-clockwise rotation of the gear or a `R\' for clockwise rotation in column 5, and the magnitude of the rotation always printed with two digits to the right of the decimal point and are left-justified starting in column 7. If any gear has rotation of magnitude zero, you should print the message ``Warning -- Idle Gear&quot; in columns 5 through 24 instead of the rotation direction and magnitude. <br><br><br>If there is an error, your program should print only the first line containing ``Simulation #X&quot; and a second line containing only one of two error messages left-justified in column 1. If there is an overlapping of two or more gears at either in inner or outter radii, your program should print the message ``Error -- Overlapping Gears&quot;. If there is any gear which is being driven by two or more different vectors, your program should print the message ``Error -- Conflicting Gear Rotation&quot;. Your program should give precedence to the overlapping error condition. <br><br><br>The last line of output for each output set should be an empty line. <br>", sample_in:"20 100 5 5 -300 5\n43 100 18 10\n43 74 8 4\n71 100 10 15\n94 100 3 8\n122 100 25 6\n20 100 5 5 -300 5\n43 100 18 10\n43 74 8 4\n71 100 10 10\n89 100 3 8\n105 100 25 6\n20 100 5 5 -300 5\n43 100 18 10\n43 74 8 4\n71 100 10 10\n89 100 3 8\n125 100 25 6", sample_out:"Simulation #1\n 1: R 83.33\n 2: L 187.50\n 3: L 150.00\n 4: R 281.25\n 5: L 33.75\n\nSimulation #2\nError -- Overlapping Gears\n\nSimulation #3\n 1: R 83.33\n 2: L 187.50\n 3: L 150.00\n 4: R 187.50\n 5: Warning -- Idle Gear", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1, vtotal_submit:16, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Central USA 1996", author:"", tag:["TEST"]}
{pid:1606, vid:1606, oj:"hdu", title:"Excuses, Excuses!", desc:"Judge Ito is having a problem with people subpoenaed for jury duty giving rather lame excuses in order to avoid serving. In order to reduce the amount of time required listening to goofy excuses, Judge Ito has asked that you write a program that will search for a list of keywords in a list of excuses identifying lame excuses. Keywords can be matched in an excuse regardless of case. <br>", input:"Input to your program will consist of multiple sets of data. <br><br>Line 1 of each set will contain exactly two integers. The first number (1 &lt;= K &lt;= 20) defines the number of keywords to be used in the search. The second number (1 &lt;= E &lt;= 20) defines the number of excuses in the set to be searched.<br><br>Lines 2 through K+1 each contain exactly one keyword.<br><br>Lines K+2 through K+1+E each contain exactly one excuse.<br><br>All keywords in the keyword list will contain only contiguous lower case alphabetic characters of length L (1 &lt;= L &lt;= 20) and will occupy columns 1 through L in the input line.<br><br>All excuses can contain any upper or lower case alphanumeric character, a space, or any of the following punctuation marks [SPMamp&quot;.,!?&amp;] not including the square brackets and will not exceed 70 characters in length.<br><br>Excuses will contain at least 1 non-space character. <br><br>", output:"For each input set, you are to print the worst excuse(s) from the list. <br><br>The worst excuse(s) is/are defined as the excuse(s) which contains the largest number of incidences of keywords.<br><br>If a keyword occurs more than once in an excuse, each occurrence is considered a separate incidence.<br><br>A keyword ``occurs&quot; in an excuse if and only if it exists in the string in contiguous form and is delimited by the beginning or end of the line or any non-alphabetic character or a space. <br><br>For each set of input, you are to print a single line with the number of the set immediately after the string ``Excuse Set #&quot;. (See the Sample Output). The following line(s) is/are to contain the worst excuse(s) one per line exactly as read in. If there is more than one worst excuse, you may print them in any order. <br><br>After each set of output, you should print a blank line. <br>", sample_in:"5 3\ndog\nate\nhomework\ncanary\ndied\nMy dog ate my homework.\nCan you believe my dog died after eating my canary... AND MY HOMEWORK?\nThis excuse is so good that it contain 0 keywords.\n6 5\nsuperhighway\ncrazy\nthermonuclear\nbedroom\nwar\nbuilding\nI am having a superhighway built in my bedroom.\nI am actually crazy.\n1234567890.....,,,,,0987654321?????!!!!!!\nThere was a thermonuclear war!\nI ate my dog, my canary, and my homework ... note outdated keywords?", sample_out:"Excuse Set #1\nCan you believe my dog died after eating my canary... AND MY HOMEWORK?\n\nExcuse Set #2\nI am having a superhighway built in my bedroom.\nThere was a thermonuclear war!", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:93, vtotal_submit:273, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Central USA 1996", author:"", tag:["TEST"]}
{pid:1607, vid:1607, oj:"hdu", title:"Station Balance", desc:"The International Space Station contains many centrifuges in its labs. Each centrifuge will have some number (C) of chambers each of which can contain 0, 1, or 2 specimens. You are to write a program which assigns all S specimens to the chambers such that no chamber contains more than 2 specimens and the following expression for IMBALANCE is minimized. <br><br><img src=data/images/1607-1.gif><br><br>where: <br><br>CMi is the Chamber Mass of chamber i and is computed by summing the masses of the specimens assigned to chamber i. <br><br>AM is the Average Mass of the chambers and is computed by dividing the sum of the masses of all specimens by the number of chambers (C). <br><br>", input:"Input to this program will be multiple sets of input. The first line of each set will contain two numbers. The first number (1 &lt;= C &lt;= 5) defines the number of chambers in the centrifuge and the second number (1 &lt;= S &lt;= 2C) defines the number of specimens in the input set. The second line of input will contain S integers representing the masses of the specimens in the set. Each specimen mass will be between 1 and 1000 and will be delimited by the beginning or end of the line and/or one or more blanks. <br>", output:"For each input set, you are to print a line specifying the set number (starting with 1) in the format &quot;Set #X&quot; where &quot;X&quot; is the set number. <br><br>The next C lines will contain the chamber number in column 1, a colon in column number 2, and then the masses of the specimens your program has assigned to that chamber starting in column 4. The masses in your output should be separated by exactly one blank. <br><br>Your program should then print ``IMBALANCE = X&quot; on a line by itself where X is the computed imbalance of your specimen assignments printed to 5 digits of precision to the right of the decimal. <br><br>The final line of output for each set should be a blank line. (Follow the sample output format.) <br><br>", sample_in:"2 3\n6 3 8\n3 5\n51 19 27 14 33\n5 9\n1 2 3 5 7 11 13 17 19", sample_out:"Set #1\n 0: 6 3\n 1: 8\nIMBALANCE = 1.00000\n\nSet #2\n 0: 51\n 1: 19 27\n 2: 14 33\nIMBALANCE = 6.00000\n\nSet #3\n 0: 1 17\n 1: 2 13\n 2: 3 11\n 3: 5 7\n 4: 19\nIMBALANCE = 11.60000", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:10, vtotal_submit:50, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Central USA 1996", author:"", tag:["TEST"]}
{pid:1608, vid:1608, oj:"hdu", title:"Centipede Collisions", desc:"A small boy named Tommy has some toy centipedes that are a series of 1 centimeter segments. Tommy assembles his centipedes to any length he likes and places them on a 30 x 30 centimeter board that allows the centipedes to travel in 1 centimeter wide tracks that criss-cross the board. <br><br>The centipedes travel only parallel to either the x or y axis on the board. Centipede segments of the same centipede advance at the same time and centipedes advance in cyclic numerical order (all of centipede 0 first, then 1, etc.). When more than one segment of two or more centipedes occupy the same x,y coordinate, there is a centipede collision. <br><br>Anytime a collision occurs, all segments occupying the collistion site stop and continue to occupy the collision site. All remaining segments on a centipede detach from the segment involved in the collision and continue their march until another collision occurs or an existing collision site is encountered or until the segments fall off the edge of the board. Anytime a segment enters a collision site, it becomes part of the collision. <br><br>Since Tommy left home without his centipede set, his mother has hired you to write a simulation program for his entertainment. Your program will simulate his board with a text printout of his grids. For example, Tommy may simulate 5 centipedes on his board that start out as shown on the grid on the left and finish as shown on the grid on the right (note the example grid is only 10 x 10 whereas Tommy\'s is 30 x 30.) <br><br>9 . . . . . . . . . . . . . . . . . . . . <br><br>8 . . . . . . . . . . . . . . . . . . . . <br><br>7 1 1 1 1 1 . . . . . . . . . . X . . . X <br><br>6 . 0 . . . . . . . . . . . . . . . . . . <br><br>5 . 0 . . . . . . . 3 . . . . . . . . . . <br><br>4 . 0 . . . 2 . . . 3 . . . . . . . . . . <br><br>3 . 0 . . . 2 . . . 3 . . . . . . . . . . <br><br>2 . . . . . 2 . . . 3 . . . . . . . . . . <br><br>1 . . . . . 2 . . . 3 . . . . . . . . . . <br><br>0 . . . . . 2 4 4 4 3 . X . . . . . . . . <br><br>Y Y <br><br>/X /X <br><br><br>Where <br><br>0 represents a centipede segment traveling from top to bottom,<br><br>1 represents a centipede segment traveling from left to right,<br><br>2 represents a centipede segment traveling from bottom to top,<br><br>3 represents a centipede segment traveling from bottom to top,<br><br>4 represents a centipede segment traveling from right to left, and<br><br>X represents a collision site involving 2 or more segments.<br><br><br>Your program will simulate up to 10 centipedes that travel on a 30 x 30 board. Tommy has 100 segments that he may use in his simulation. Of course, no centipede can be longer than 30 segments. <br>", input:"Input to your program will consist of a series of simulation sets. The first line of each input set will be a single integer (1 &lt;= N &lt;= 10) representing the number of centipedes in the simulation. (Centipedes are numbered 0 through N-1 in the same order as the input.) <br><br>The next N lines will each represent one centipede and will contain a single direction character followed by 3 integers. The direction character can be `U\', `D\', `L\', or `R\' for ``Up&quot;, ``Down&quot;, ``Left&quot;, or ``Right&quot; respectively and indicate the direction of travel. The next integer (1 &lt;= L &lt;= 30) indicates the length of the centipede in segments. The second and third integers indicate the x,y coordinates of the lead segment (0 &lt;= x &amp; y &lt;= 29). The next L-1 segments of the centipede occupy the L-1 board positions extending in the opposite direction from the direction of travel starting adjacent to the lead segment. <br><br>You can be assured that no centipede segment will originate off the board nor will the original configuration involve any collisions. <br><br>", output:"For each input simulation set, you should print (exactly) the following lines as the first two lines of output (starting in column 4). <br><br>0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2<br>0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9<br><br>The next 30 lines represent the state of the board after the simulation has completed (all centipede segments have entered a collision site or fallen off the edge of the board). Columns 1 and 2 should contain the row number (rows are numbered 29 down to 00) with leading zeroes. Even numbered columns between 4 and 62 (inclusive) represent the contents of the board cells. Board cells can contain either an X or a period. A period represents an empty cell and X represents a cell that contains 2 or more centipede segments involved in a collision. The last line of each output set is a blank line. <br><br>Follow the Sample Output for the exact format of the expected output. <br><br>", sample_in:"10\nR 9 11 23\nU 8 11 17\nU 5 15 15\nU 5 15 8\nD 9 23 13\nU 6 23 6\nR 9 8 9\nL 13 17 0\nU 12 13 11\nL 5 20 9", sample_out:"   0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2\n   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n29 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n28 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n27 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n26 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n25 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n23 . . . . . . . . . . . X . . . X . . . . . . . . . . . . . .\n22 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n21 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n20 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n19 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n18 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n17 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n16 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n15 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n14 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n13 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n12 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n11 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n10 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n09 . . . . . . . . . . . . . X . X . . . . . . . X . . . . . .\n08 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n07 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n06 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n05 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n04 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n03 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n02 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n01 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n00 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:12, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"South Central USA 1996", author:"", tag:["TEST"]}
{pid:1609, vid:1609, oj:"hdu", title:"The Game of Master-Mind", desc:"If you want to buy a new cellular phone, there are many various types to choose from. To decide which one is the best for you, you have to consider several important things: its size and weight, battery capacity, WAP support, colour, price. One of the most important things is also the list of games the phone provides. Nokia is one of the most successful phone makers because of its famous Snake and Snake II. ACM wants to make and sell its own phone and they need to program several games for it. One of them is Master-Mind, the famous board logical game. <br><br>The game is played between two players. One of them chooses a secret code consisting of P ordered pins, each of them having one of the predefined set of C colours. The goal of the second player is to guess that secret sequence of colours. Some colours may not appear in the code, some colours may appear more than once. <br><br>The player makes guesses, which are formed in the same way as the secret code. After each guess, he/she is provided with an information on how successful the guess was. This feedback is called a hint. Each hint consists of B black points and W white points. The black point stands for every pin that was guessed right, i.e. the right colour was put on the right position. The white point means right colour but on the wrong position. For example, if the secret code is &quot;white, yellow, red, blue, white&quot; and the guess was &quot;white, red, white, white, blue&quot;, the hint would consist of one black point (for the white on the first position) and three white points (for the other white, red and blue colours). The goal is to guess the sequence with the minimal number of hints. <br><br>The new ACM phone should have the possibility to play both roles. It can make the secret code and give hints, but it can also make its own guesses. Your goal is to write a program for the latter case, that means a program that makes Master-Mind guesses. <br><br>", input:"There is a single positive integer T on the first line of input. It stands for the number of test cases to follow. Each test case describes one game situation and you are to make a guess. On the first line of each test case, there are three integer numbers, P, C and M. P ( 1 &lt;= P &lt;= 10) is the number of pins, C (1 &lt;= C &lt;= 100) is the number of colours, and M (1 &lt;= M &lt;= 100) is the number of already played guesses. <br><br>Then there are 2 x M lines, two lines for every guess. At the first line of each guess, there are P integer numbers representing colours of the guess. Each colour is represented by a number Gi, 1 &lt;= Gi &lt;= C. The second line contains two integer numbers, B and W, stating for the number of black and white points given by the corresponding hint. <br><br>Let\'s have a secret code S1, S2, ... SP and the guess G1, G2, ... GP. Then we can make a set H containing pairs of numbers (I,J) such that SI = GJ, and that any number can appear at most once on the first position and at most once on the second position. That means for every two different pairs from that set, (I1,J1) and (I2,J2), we have I1 &lt;&gt; I2 and J1 &lt;&gt; J2. Then we denote B(H) the number of pairs in the set, that meet the condition I = J, and W(H) the number of pairs with I &lt;&gt; J. <br><br>We define an ordering of every two possible sets H1 and H2. Let\'s say H1 &lt;= H2 if and only if one of the following holds: <br><br>B(H1) &lt; B(H2), or <br>B(H1) = B(H2) and W(H1) &lt;= W(H2)<br><br>Then we can find a maximal set Hmax according to this ordering. The numbers B(Hmax) and W(Hmax) are the black and white points for that hint.", output:"For every test case, print the line containing P numbers representing P colours of the next guess. Your guess must be valid according to all previous guesses and hints. The guess is valid if the sequence could be a secret code, i.e. the sequence was not eliminated by previous guesses and hints. <br><br>If there is no valid guess possible, output the sentence You are cheating!. If there are more valid guesses, output the one that is lexicographically smallest. I.e. find such guess G that for every other valid guess V there exists such a number I that: <br><br>GJ = VJ for every J&lt;I, and <br>GI&lt;VI. <br>", sample_in:"3\n4 3 2\n1 2 3 2\n1 1\n2 1 3 2\n1 1\n4 6 2\n3 3 3 3\n3 0\n4 4 4 4\n2 0\n8 9 3\n1 2 3 4 5 6 7 8\n0 0\n2 3 4 5 6 7 8 9\n1 0\n3 4 5 6 7 8 9 9\n2 0", sample_out:"1 1 1 3\nYou are cheating!\n9 9 9 9 9 9 9 9", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:7, vtotal_submit:12, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"Central Europe 2000 Regional Contest", author:"", tag:["TEST"]}
{pid:1610, vid:1610, oj:"hdu", title:"Hotline", desc:"Every customer sometimes needs help with new and unusual products. Therefore, hotline service is very important for every company. We need a single phone number where the customer can always find a friendly voice ready to help with anything. On the other hand, many people are needed to serve as hotline operators, and human resources are always very expensive. Moreover, it is not easy to pretend &quot;friendly voice&quot; at 4am and explain to a drunken man that you are really unable to give him the number to House of Parliament. It was also found that some of the questions repeat very often and it is very annoying to answer them again and again. <br><br>ACM is a modern company, wanting to solve its hotline problem. They want to decrease the number of human operators by creating a complex software system that would be able to answer most common questions. The customer\'s voice is analysed by a special Voice Recognition Module (VRM) and converted to a plain text. The text is then taken by an Artificial Automatic Adaptive Answering Algorithm (AAAAA). The most common questions are recognised and answered automatically. The replies are then converted to a sound by Text-to-Speech Module (TTS). <br><br>You are to write the AAAAA module. Because your algorithm should be adaptive, it has no explicit knowledge base. But it must be able to listen to sentences in English and remember the mentioned facts. Whenever the question is asked about such a fact, the system has to answer it properly. The VRM and TTS modules are already implemented, so the input and output of AAAAA will be in the text form. <br><br>", input:"There is a single positive integer T on the first line of input. It stands for the number of dialogues to follow. Each dialogue consists of zero or more lines, each of them containing one sentence: either statement or question. The statement ends with a dot character (.), the question ends with a question mark (?). No statement will appear more than once, however the questions can be repeated. There is one extra line after each dialogue. That line ends with an exclamation mark (!). <br><br>Sentences can contain words, spaces and punctuation characters (such as commas, colons, semicolons etc.). All words contain only letters of English alphabet and are case-sensitive. That means the same word is always written the same way, usually in lowercase. Acronyms, names and some other words can begin with capital letters. For simplicity, all sentences begin with a lowercase letter. Only if the first word should be written with a capital, the sentence begins with a capital letter. There are no unneeded spaces between words. No line will have more than 100 characters. There will be at most 100 statements per each test case. <br><br><br>Statements<br>Each statement has one of the following two forms (  denotes a space): <br>subject  predicate[s] [  object] . <br>subject  don\'t|doesn\'t  predicate [  object] . <br><br>The square brackets mark an optional part, the vertical line two possible variants. Subject is a single word, noun or pronoun in singular. Predicate is a verb (single word) denoting some activity. Object can be any text. Object does not contain any dots. Any pair &quot;verb + object&quot; determines unique activity. The same verb with different objects makes different independent activities, i.e. the different and independent meaning of the sentence. Sentence without any object can be considered as sentence with an empty object. The verb without an object has different and independent meaning than the same verb with any non-empty object. <br><br>The first variant of sentence denotes a positive statement. The word &quot;predicate[s]&quot; means verb that matches the subject of the sentence. If the subject is &quot;I&quot; or &quot;you&quot;, the verb has the same form as the infinitive. With any other subject, the letter &quot;s&quot; is appended on the end of the verb. Assume there are no irregular verbs. <br><br>The second variant is a negative statement. Verb &quot;don\'t&quot; or &quot;doesn\'t&quot; must also match the subject. The form &quot;don\'t&quot; is used with either &quot;I&quot; or &quot;you&quot;, &quot;doesn\'t&quot; is used in any other case. <br><br>A special generic subject &quot;everybody&quot; can be used. It means the activity holds for any subject. Other special subject is &quot;nobody&quot;. Such sentence also holds for any subject, but its meaning is negative. Both of these generic subjects can be used with the first variant only (without &quot;doesn\'t&quot;). The sentence &quot;nobody likes something&quot; is exactly equal to &quot;everybody doesn\'t like something&quot;, except the latter form will never occur in the input. <br><br><br>Questions<br>Each question has one of the following three forms: <br><br>1. <br>do|does  subject  predicate [  object] ? <br>2. <br>who  predicates [  object] ? <br>3. <br>what  do|does  subject do ? <br>The word &quot;do|does&quot; always matches the subject (&quot;do I?&quot;, &quot;do you?&quot;, &quot;does any other subject?&quot;). In the second type of question, predicate always matches the word &quot;who&quot;, i.e. the &quot;s&quot; is always appended. Generic subjects cannot be used in questions. <br><br>", output:"For each dialogue, your program must output the line Dialogue #D:, where D is the sequence number of dialogue, starting with 1. Then print exactly three lines for every question: the first line repeats the question, the second line contains the answer, and the third line is empty. Print nothing for statements. After each dialogue, print the same line with an exclamation mark that was in the input. Then print one extra empty line. Empty line contains a new-line character only. <br><br>The answer must be properly formated to be accepted by a TTS module. Only the statements appearing in the input before the answer are used for the corresponding reply. If there is any contradiction among statements, the reply is always I am abroad.. If the question and statements consider the special subject &quot;you&quot;, it must be replaced with &quot;I&quot; in the answer. If the question considers special subject &quot;I&quot;, it must be replaced with &quot;you&quot; in the answer. The verb must always match the subject of the sentence. The exact form of the correct answer depends on the type of question. <br><br><br>1. does subject predicate [object] ?<br>If there is any positive statement about the mentioned subject (or generic subject &quot;everybody&quot;), predicate and object, the answer is: <br>yes,  subject  predicate[s] [  object] . <br><br>If there is any negative statement about the mentioned subject (or generic subject &quot;nobody&quot;), predicate and object, the answer is: <br>no,  subject  don\'t|doesn\'t  predicate [  object] . <br><br>Otherwise, the answer is: maybe. <br><br>Subject in the answer is always the same subject as the subject of the question. <br><br><br>2. who predicates [object] ?<br>If there is a positive statement considering any subject, the specified predicate and object, the answer is: <br>subject  predicate[s] [  object] . <br><br>If two or more subjects match the activity, replace the subject in the answer with enumeration of all such subjects, in the same order as the corresponding statements have appeared in the input. Subjects are separated with comma and space, last two subjects are separated with the word &quot;and&quot;. If &quot;everybody&quot; belongs to the group of enumerated subjects, do not enumerate subjects, and print &quot;everybody&quot; only. If the enumeration contains at least two subjects, the predicate matches the plural subject (i.e. verb is without trailing &quot;s&quot;), otherwise it matches the only subject. <br>subject1 ,  subject2  and  subject3 predicate [  object] . <br><br>If there is a negative statement considering the generic subject &quot;nobody&quot;, the specified predicate and object, the answer is: <br>nobody  predicates [  object] . <br><br>Otherwise, the answer is: I don\'t know. <br><br><br>3. what does subject do ?<br>If there are one or more sentences (both positive and negative) considering the specified subject (or a generic subject &quot;everybody&quot; or &quot;nobody&quot;), all verbs and objects from such sentences must be included in a reply in the same order as the corresponding sentences have appeared in the input. No verb-object pair can be included more than once (the eventual second appearance must be skipped). The verb-object pairs are separated by a comma followed by a space, the last verb is separated by a comma and the word &quot;and&quot;. Please note the comma is printed here although there was no comma when separating the subjects in the previous type of answer (see above). The negative answers have the same form as the statements, that means the verb &quot;don\'t&quot; or &quot;doesn\'t&quot; is used: <br>subject [  don\'t|doesn\'t]  predicate1[s] [  object1] , <br>[  don\'t|doesn\'t]  predicate2[s] [  object2] , <br> and [  don\'t|doesn\'t]  predicate3[s] [  object3] . <br>subject [  don\'t|doesn\'t]  predicate1[s] [  object1] , <br> and [  don\'t|doesn\'t]  predicate2[s] [  object2] . <br>subject [  don\'t|doesn\'t]  predicate[s] [  object] . <br><br>Otherwise, the answer is: I don\'t know. <br><br>", sample_in:"1\nI like hotdogs.\nnobody likes to work.\neverybody smiles.\nwhat do I do?\nwho smiles?\nwhat do you do?\ndoes Joe smile?\ndo I like to work?\neverybody hurts sometimes.\nwho walks there?\nMichal walks there.\nwho walks there?\nwhat does Michal do?\ndo you understand?\nnobody walks there.\ndo you understand now?\nbye!", sample_out:"Dialogue #1:\nwhat do I do?\nyou like hotdogs, don\'t like to work, and smile.\n\nwho smiles?\neverybody smiles.\n\nwhat do you do?\nI don\'t like to work, and smile.\n\ndoes Joe smile?\nyes, Joe smiles.\n\ndo I like to work?\nno, you don\'t like to work.\n\nwho walks there?\nI don\'t know.\n\nwho walks there?\nMichal walks there.\n\nwhat does Michal do?\nMichal doesn\'t like to work, smiles, hurts sometimes, and walks there.\n\ndo you understand?\nmaybe.\n\ndo you understand now?\nI am abroad.\n\nbye!", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4, vtotal_submit:16, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Central Europe 2000 Regional Contest", author:"", tag:["TEST"]}
{pid:1611, vid:1611, oj:"hdu", title:"I-Keyboard", desc:"Most of you have probably tried to type an SMS message on the keypad of a cellular phone. It is sometimes very annoying to write longer messages, because one key must be usually pressed several times to produce a single letter. It is due to a low number of keys on the keypad. Typical phone has twelve keys only (and maybe some other control keys that are not used for typing). Moreover, only eight keys are used for typing 26 letters of an English alphabet. The standard assignment of letters on the keypad is shown in the left picture: <br><br><img src=data/images/1611-1.gif><br><br>There are 3 or 4 letters assigned to each key. If you want the first letter of any group, you press that key once. If you want the second letter, you have to press the key twice. For other letters, the key must be pressed three or four times. The authors of the keyboard did not try to optimise the layout for minimal number of keystrokes. Instead, they preferred the even distribution of letters among the keys. Unfortunately, some letters are more frequent than others. Some of these frequent letters are placed on the third or even fourth place on the standard keyboard. For example, S is a very common letter in an English alphabet, and we need four keystrokes to type it. If the assignment of characters was like in the right picture, the keyboard would be much more comfortable for typing average English texts. <br><br>ACM have decided to put an optimised version of the keyboard on its new cellular phone. Now they need a computer program that will find an optimal layout for the given letter frequency. We need to preserve alphabetical order of letters, because the user would be confused if the letters were mixed. But we can assign any number of letters to a single key. <br><br>", input:"There is a single positive integer T on the first line of input. It stands for the number of test cases to follow. Each test case begins with a line containing two integers K, L (1 &lt;= K &lt;= L &lt;= 90) separated by a single space. K is the number of keys, L is the number of letters to be mapped onto those keys. Then there are two lines. The first one contains exactly K characters each representing a name of one key. The second line contains exactly L characters representing names of letters of an alphabet. Keys and letters are represented by digits, letters (which are case-sensitive), or any punctuation characters (ASCII code between 33 and 126 inclusively). No two keys have the same character, no two letters are the same. However, the name of a letter can be used also as a name for a key. <br><br>After those two lines, there are exactly L lines each containing exactly one positive integer F1, F2, ... FL. These numbers determine the frequency of every letter, starting with the first one and continuing with the others sequentially. The higher number means the more common letter. No frequency will be higher than 100000. <br><br>", output:"Find an optimal keyboard for each test case. Optimal keyboard is such that has the lowest &quot;price&quot; for typing average text. The price is determined as the sum of the prices of each letter. The price of a letter is a product of the letter frequency (Fi) and its position on the key. The order of letters cannot be changed, they must be grouped in the given order. <br><br>If there are more solutions with the same price, we will try to maximise the number of letters assigned to the last key, then to the one before the last one etc. <br><br>More formally, you are to find a sequence P1, P2, ... PL representing the position of every letter on a particular key. The sequence must meet following conditions: <br><br>1) P1 = 1 <br>2) for each i&gt;1, either Pi = Pi-1+1 or Pi = 1 <br>3) there are at most K numbers Pi such that Pi = 1 <br>4) the sum of products SP =  Fi.Pi is minimal <br>5) for any other sequence Q meeting these criteria and with the same sum SQ = SP, there exists such M, 1 &lt;= M &lt;= L that for any J, M&lt;J &lt;= L, PJ = QJ, and PM&gt;QM. <br><br>The output for every test case must start with a single line saying Keypad #I:, where I is a sequential order of the test case, starting with 1. Then there must be exactly K lines, each representing one letter, in the same order that was used in input. Each line must contain the character representing the key, a colon, one space and a list of letters assigned to that particular key. Letters are not separated from each other. <br><br>Print one blank line after each test case, including the last one. <br><br>", sample_in:"1\n8 26\n23456789\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n3371\n589\n1575\n1614\n6212\n971\n773\n1904\n2989\n123\n209\n1588\n1513\n2996\n3269\n1080\n121\n2726\n3083\n4368\n1334\n518\n752\n427\n733\n871", sample_out:"Keypad #1:\n2: ABCD\n3: EFG\n4: HIJK\n5: LM\n6: NOPQ\n7: RS\n8: TUV\n9: WXYZ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:14, vtotal_submit:51, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Central Europe 2000 Regional Contest", author:"", tag:["TEST"]}
{pid:1612, vid:1612, oj:"hdu", title:"The Blocks Problem", desc:"Many areas of Computer Science use simple, abstract domains for both analytical and empirical studies. For example, an early AI study of planning and robotics (STRIPS) used a block world in which a robot arm performed tasks involving the manipulation of blocks. <br>In this problem you will model a simple block world under certain rules and constraints. Rather than determine how to achieve a specified state, you will ``program\'\' a robotic arm to respond to a limited set of commands<br><br>The problem is to parse a series of commands that instruct a robot arm in how to manipulate blocks that lie on a flat table. Initially there are n blocks on the table (numbered from 0 to n-1) with block bi adjacent to block bi+1 for all 0≤i&lt;n-1 as shown in the diagram below<br><img src=data/images/1612-1.gif><br>The valid commands for the robot arm that manipulates blocks are: <br><br>move a onto b <br>where a and b are block numbers, puts block a onto block b after returning any blocks that are stacked on top of blocks a and b to their initial positions. <br><br>move a over b <br>where a and b are block numbers, puts block a onto the top of the stack containing block b, after returning any blocks that are stacked on top of block a to their initial positions. <br><br>pile a onto b <br>where a and b are block numbers, moves the pile of blocks consisting of block a, and any blocks that are stacked above block a, onto block b. All blocks on top of block b are moved to their initial positions prior to the pile taking place. The blocks stacked above block a retain their order when moved. <br><br>pile a over b <br>where a and b are block numbers, puts the pile of blocks consisting of block a, and any blocks that are stacked above block a, onto the top of the stack containing block b. The blocks stacked above block a retain their original order when moved. <br><br>quit <br>terminates manipulations in the block world. <br><br>Any command in which a = b or in which a and b are in the same stack of blocks is an illegal command. All illegal commands should be ignored and should have no affect on the configuration of blocks. <br>", input:"The input begins with an integer n on a line by itself representing the number of blocks in the block world. You may assume that 0 &lt; n &lt; 25. <br>The number of blocks is followed by a sequence of block commands, one command per line. Your program should process all commands until the quit command is encountered. <br><br>You may assume that all commands will be of the form specified above. There will be no syntactically incorrect commands. <br>", output:"The output should consist of the final state of the blocks world. Each original block position numbered i (0≤i&lt;n-1 where n is the number of blocks) should appear followed immediately by a colon. If there is at least a block on it, the colon must be followed by one space, followed by a list of blocks that appear stacked in that position with each block number separated from other block numbers by a space. Don\'t put any trailing spaces on a line. <br><br>There should be one line of output for each block position (i.e., n lines of output where n is the integer on the first line of input). <br>", sample_in:"10\nmove 9 onto 1\nmove 8 over 1\nmove 7 over 1\nmove 6 over 1\npile 8 over 6\npile 8 over 5\nmove 2 over 1\nmove 4 over 9\nquit", sample_out:" 0: 0\n 1: 1 9 2 4\n 2:\n 3: 3\n 4:\n 5: 5 8 7 6\n 6:\n 7:\n 8:\n 9:", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8, vtotal_submit:323, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1613, vid:1613, oj:"hdu", title:"Ecological Bin Packing ", desc:"Background<br>Bin packing, or the placement of objects of certain weights into different bins subject to certain constraints, is an historically interesting problem. Some bin packing problems are NP-complete but are amenable to dynamic programming solutions or to approximately optimal heuristic solutions. <br><br>In this problem you will be solving a bin packing problem that deals with recycling glass. <br><br>Recycling glass requires that the glass be separated by color into one of three categories: brown glass, green glass, and clear glass. In this problem you will be given three recycling bins, each containing a specified number of brown, green and clear bottles. In order to be recycled, the bottles will need to be moved so that each bin contains bottles of only one color. <br><br>The problem is to minimize the number of bottles that are moved. You may assume that the only problem is to minimize the number of movements between boxes. <br><br>For the purposes of this problem, each bin has infinite capacity and the only constraint is moving the bottles so that each bin contains bottles of a single color. The total number of bottles will never exceed 2^31. <br>", input:"The input consists of a series of lines with each line containing 9 integers. The first three integers on a line represent the number of brown, green, and clear bottles (respectively) in bin number 1, the second three represent the number of brown, green and clear bottles (respectively) in bin number 2, and the last three integers represent the number of brown, green, and clear bottles (respectively) in bin number 3. For example, the line 10 15 20 30 12 8 15 8 31 <br><br>indicates that there are 20 clear bottles in bin 1, 12 green bottles in bin 2, and 15 brown bottles in bin 3. <br><br>Integers on a line will be separated by one or more spaces. Your program should process all lines in the input file. <br>", output:"For each line of input there will be one line of output indicating what color bottles go in what bin to minimize the number of bottle movements. You should also print the minimum number of bottle movements. <br><br>The output should consist of a string of the three upper case characters \'G\', \'B\', \'C\' (representing the colors green, brown, and clear) representing the color associated with each bin. <br><br>The first character of the string represents the color associated with the first bin, the second character of the string represents the color associated with the second bin, and the third character represents the color associated with the third bin. <br><br>The integer indicating the minimum number of bottle movements should follow the string. <br><br>If more than one order of brown, green, and clear bins yields the minimum number of movements then the alphabetically first string representing a minimal configuration should be printed. <br>", sample_in:"1 2 3 4 5 6 7 8 9\n5 10 5 20 10 5 10 20 10", sample_out:"BCG 30\nCBG 50", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:18, vtotal_submit:35, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1614, vid:1614, oj:"hdu", title:"Stacking Boxes", desc:"Some concepts in Mathematics and Computer Science are simple in one or two dimensions but become more complex when extended to arbitrary dimensions. Consider solving differential equations in several dimensions and analyzing the topology of an n-dimensional hypercube. The former is much more complicated than its one dimensional relative while the latter bears a remarkable resemblance to its ``lower-class\'\' cousin. <br><br>Consider an n-dimensional ``box\'\' given by its dimensions. In two dimensions the box (2,3) might represent a box with length 2 units and width 3 units. In three dimensions the box (4,8,9) can represent a box  4*8*9(length, width, and height). In 6 dimensions it is, perhaps, unclear what the box (4,5,6,7,8,9) represents; but we can analyze properties of the box such as the sum of its dimensions. <br><br>In this problem you will analyze a property of a group of n-dimensional boxes. You are to determine the longest nesting string of boxes, that is a sequence of boxesb1,b2,..bk  such bi,that each box  nests in box  b(i+1)( 1≤i&lt;k) . <br><br>A box D = ( d1,d2,...dn ) nests in a box E = ( e1,e2,...en ) if there is some rearrangement of the di, such that when rearranged each dimension is less than the corresponding dimension in box E. This loosely corresponds to turning box D to see if it will fit in box E. However, since any rearrangement suffices, box D can be contorted, not just turned (see examples below). <br><br>For example, the box D = (2,6) nests in the box E = (7,3) since D can be rearranged as (6,2) so that each dimension is less than the corresponding dimension in E. The box D = (9,5,7,3) does NOT nest in the box E = (2,10,6,8) since no rearrangement of D results in a box that satisfies the nesting property, but F = (9,5,7,1) does nest in box E since F can be rearranged as (1,9,5,7) which nests in E. <br><br>Formally, we define nesting as follows: box D = (d1,d2,....dn ) nests in box E = ( e1,e2,....en ) if there is a permutation π of 1..n  such that ( <img src=data/images/1614-1.gif> ) ``fits\'\' in ( e1,e2.....en ) i.e., if  for all  1≤i≤n. ", input:"The input consists of a series of box sequences. Each box sequence begins with a line consisting of the the number of boxes k in the sequence followed by the dimensionality of the boxes, n (on the same line.) <br><br>This line is followed by k lines, one line per box with the n measurements of each box on one line separated by one or more spaces. The i(th)  line in the sequence ( 1&lt;=i&lt;=k ) gives the measurements for i(th) the  box. <br><br>There may be several box sequences in the input file. Your program should process all of them and determine, for each sequence, which of the k boxes determine the longest nesting string and the length of that nesting string (the number of boxes in the string). <br><br>In this problem the maximum dimensionality is 10 and the minimum dimensionality is 1. The maximum number of boxes in a sequence is 30. <br>", output:"For each box sequence in the input file, output the length of the longest nesting string on one line followed on the next line by a list of the boxes that comprise this string in order. The ``smallest\'\' or ``innermost\'\' box of the nesting string should be listed first, the next box (if there is one) should be listed second, etc. <br><br>The boxes should be numbered according to the order in which they appeared in the input file (first box is box 1, etc.). <br><br>If there is more than one longest nesting string then any one of them can be output.<br>", sample_in:"5 2\n3 7\n8 10\n5 2\n9 11\n21 18\n8 6\n5 2 20 1 30 10\n23 15 7 9 11 3\n40 50 34 24 14 4\n9 10 11 12 13 14\n31 4 18 8 27 17\n44 32 13 19 41 19\n1 2 3 4 5 6\n80 37 47 18 21 9", sample_out:"5\n3 1 2 4 5\n4\n7 2 5 6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:18, vtotal_submit:186, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1615, vid:1615, oj:"hdu", title:"Fermat vs. Pythagoras", desc:"Computer generated and assisted proofs and verification occupy a small niche in the realm of Computer Science. The first proof of the four-color problem was completed with the assistance of a computer program and current efforts in verification have succeeded in verifying the translation of high-level code down to the chip level. <br><br>This problem deals with computing quantities relating to part of Fermat\'s Last Theorem: that there are no integer solutions of <img src=data/images/1615-1.gif> for n &gt; 2. <br><br>Given a positive integer N, you are to write a program that computes two quantities regarding the solution of <br><img src=data/images/1615-2.gif><br><br>where x, y, and z are constrained to be positive integers less than or equal to N. You are to compute the number of triples (x,y,z) such that x&lt;y&lt; z, and they are relatively prime, i.e., have no common divisor larger than 1. You are also to compute the number of values 0&lt;p≤n such that p is not part of any triple (not just relatively prime triples). <br><br>", input:"The input consists of a sequence of positive integers, one per line. Each integer in the input file will be less than or equal to 1,000,000. Input is terminated by end-of-file. ", output:"For each integer N in the input file print two integers separated by a space. The first integer is the number of relatively prime triples (such that each component of the triple is &lt;=N ). The second number is the number of positive integers &lt;=N that are not part of any triple whose components are all &lt;=N . There should be one output line for each input line. ", sample_in:"10\n25\n100", sample_out:"1 4\n4 9\n16 27", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:40, vtotal_submit:75, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1616, vid:1616, oj:"hdu", title:"SCUD Busters", desc:"Some problems are difficult to solve but have a simplification that is easy to solve. Rather than deal with the difficulties of constructing a model of the Earth (a somewhat oblate spheroid), consider a pre-Columbian flat world that is a 500 kilometer  500 kilometer square. <br><br>In the model used in this problem, the flat world consists of several warring kingdoms. Though warlike, the people of the world are strict isolationists; each kingdom is surrounded by a high (but thin) wall designed to both protect the kingdom and to isolate it. To avoid fights for power, each kingdom has its own electric power plant. <br><br>When the urge to fight becomes too great, the people of a kingdom often launch missiles at other kingdoms. Each SCUD missile (anitary leansing niversal estroyer) that lands within the walls of a kingdom destroys that kingdom\'s power plant (without loss of life). <br><br><br>Given coordinate locations of several kingdoms (by specifying the locations of houses and the location of the power plant in a kingdom) and missile landings you are to write a program that determines the total area of all kingdoms that are without power after an exchange of missile fire. <br><br>In the simple world of this problem kingdoms do not overlap. Furthermore, the walls surrounding each kingdom are considered to be of zero thickness. The wall surrounding a kingdom is the minimal-perimeter wall that completely surrounds all the houses and the power station that comprise a kingdom; the area of a kingdom is the area enclosed by the minimal-perimeter thin wall. <br><br>There is exactly one power station per kingdom. <br><br>There may be empty space between kingdoms. <br><br>", input:"The input is a sequence of kingdom specifications followed by a sequence of missile landing locations. <br><br>A kingdom is specified by a number N ( 3≤N≤10) on a single line which indicates the number of sites in this kingdom. The next line contains the x and y coordinates of the power station, followed by N-1 lines of x, y pairs indicating the locations of homes served by this power station. A value of -1 for N indicates that there are no more kingdoms. There will be at least one kingdom in the data set. <br><br>Following the last kingdom specification will be the coordinates of one or more missile attacks, indicating the location of a missile landing. Each missile location is on a line by itself. You are to process missile attacks until you reach the end of the file. <br><br>Locations are specified in kilometers using coordinates on a 500 km by 500 km grid. All coordinates will be integers between 0 and 500 inclusive. Coordinates are specified as a pair of integers separated by white-space on a single line. The input file will consist of up to 20 kingdoms, followed by any number of missile attacks. <br><br>", output:"The output consists of a single number representing the total area of all kingdoms without electricity after all missile attacks have been processed. The number should be printed with (and correct to) two decimal places", sample_in:"12\n3 3\n4 6\n4 11\n4 8\n10 6\n5 7\n6 6\n6 3\n7 9\n10 4\n10 9\n1 7\n5\n20 20\n20 40\n40 20\n40 40\n30 30\n3\n10 10\n21 10\n21 13\n-1\n5 5\n20 12", sample_out:"70.50\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Hint</div><i style=\'font-size:1px\'> </i>\nYou may or may not find the following formula useful. \nGiven a polygon described by the vertices v0,v1..vn such that v0=vn \nthe signed area of the polygon is given by \n<img src=\'data/images/1616-1.gif\'>\nwhere the x, y coordinates of vi=(xi,yi) ; \nthe edges of the polygon are from  v(i) to v(i+1)  for i=0..n-1 . \nIf the points describing the polygon are given in a counterclockwise direction, \nthe value of a will be positive, \nand if the points of the polygon are listed in a clockwise direction, \nthe value of a will be negative. ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:11, vtotal_submit:29, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1617, vid:1617, oj:"hdu", title:"Meta-Loopless Sorts", desc:"Sorting holds an important place in computer science. Analyzing and implementing various sorting algorithms forms an important part of the education of most computer scientists, and sorting accounts for a significant percentage of the world\'s computational resources. Sorting algorithms range from the bewilderingly popular Bubble sort, to Quicksort, to parallel sorting algorithms and sorting networks. In this problem you will be writing a program that creates a sorting program (a meta-sorter). <br><br>The problem is to create several programs whose output is a standard Pascal program that sorts n numbers where n is the only input to the program you will write. The Pascal programs generated by your program must have the following properties: <br><br>They must begin with program sort(input,output); <br><br>They must declare storage for exactly n integer variables. The names of the variables must come from the first n letters of the alphabet (a,b,c,d,e,f). <br><br>A single readln statement must read in values for all the integer variables. <br><br>Other than writeln statements, the only statements in the program are if then else statements. The boolean conditional for each if statement must consist of one strict inequality (either &lt; or &gt;) of two integer variables. <br><br>Exactly n! writeln statements must appear in the program. <br><br>Exactly three semi-colons must appear in the programs <br><br>1.after the program header: program sort(input,output); <br><br>2.after the variable declaration: ...: integer; <br><br>3.after the readln statement: readln(...); <br><br>No redundant comparisons of integer variables should be made. For example, during program execution, once it is determined that a &lt; b, variables a and b should not be compared again. <br><br>Every writeln statement must appear on a line by itself. <br><br>The programs must compile. Executing the program with input consisting of any arrangement of any n distinct integer values should result in the input values being printed in sorted order. <br>For those unfamiliar with Pascal syntax, the example at the end of this problem completely defines the small subset of Pascal needed. <br><br>", input:"The input consist on a number in the first line indicating the number M of programs to make, followed by a blank line. Then there are M test cases, each one consisting on a single integer n on a line by itself with 1 ≤ n ≤8. There will be a blank line between test cases. ", output:"The output is M compilable standard Pascal programs meeting the criteria specified above. Print a blank line between two consecutive programs. ", sample_in:"1\n\n3", sample_out:"program sort(input,output);\nvar\na,b,c : integer;\nbegin\n  readln(a,b,c);\n  if a &lt; b then\n    if b &lt; c then\n      writeln(a,b,c)\n    else if a &lt; c then\n      writeln(a,c,b)\n    else\n      writeln(c,a,b)\n  else\n    if a &lt; c then\n      writeln(b,a,c)\n    else if b &lt; c then\n      writeln(b,c,a)\n    else\n      writeln(c,b,a)\nend.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:9, vtotal_submit:92, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1618, vid:1618, oj:"hdu", title:"Climbing Trees", desc:"Expression trees, B and B* trees, red-black trees, quad trees, PQ trees; trees play a significant role in many domains of computer science. Sometimes the name of a problem may indicate that trees are used when they are not, as in the Artificial Intelligence planning problem traditionally called the Monkey and Bananas problem. Sometimes trees may be used in a problem whose name gives no indication that trees are involved, as in the Huffman code. <br><br>This problem involves determining how pairs of people who may be part of a ``family tree\'\' are related. <br><br>Given a sequence of child-parent pairs, where a pair consists of the child\'s name followed by the (single) parent\'s name, and a list of query pairs also expressed as two names, you are to write a program to determine whether the query pairs are related. If the names comprising a query pair are related the program should determine what the relationship is. Consider academic advisees and advisors as exemplars of such a single parent genealogy (we assume a single advisor, i.e., no co-advisors). <br><br><br>In this problem the child-parent pair  p q denotes that p is the child of q. In determining relationships between names we use the following definitions: <br><br>p is a 0-descendent of q (respectively 0-ancestor) if and only if the child-parent pair p q  (respectively q,p ) appears in the input sequence of child-parent pairs.<br>p is a k-descendent of q (respectively k-ancestor) if and only if the child-parent pair p r  (respectively  q r) appears in the input sequence and r is a (k-1)-descendent of q (respectively p is a (k-1)-ancestor of r). <br><br>For the purposes of this problem the relationship between a person p and a person q is expressed as exactly one of the following four relations: <br><br>1 child -- grand child, great grand child, great great grand child, etc. <br><br>By definition p is the ``child\'\' of q if and only if the pair  p q appears in the input sequence of child-parent pairs (i.e., p is a 0-descendent of q); p is the ``grand child\'\' of q if and only if p is a 1-descendent of q; and <br><br><img src=data/images/1618-1.gif><br><br>if and only if p is an (n+1)-descendent of q.<br><br>2 parent -- grand parent, great grand parent, great great grand parent, etc. <br>By definition p is the ``parent\'\' of q if and only if the pair  appears in the input sequence of child-parent pairs p q (i.e., p is a 0-ancestor of q); p is the ``grand parent\'\' of q if and only if p is a 1-ancestor of q; and <br><br><img src=data/images/1618-2.gif><br><br>if and only if p is an (n+1)-ancestor of q.<br><br>3 cousin --  0 th cousin,  1 st cousin, 2 nd  cousin, etc.; cousins may be once removed, twice removed, three times removed, etc. <br>By definition p and q are ``cousins\'\' if and only if they are related (i.e., there is a path from p to q in the implicit undirected parent-child tree). Let r represent the least common ancestor of p and q (i.e., no descendent of r is an ancestor of both p and q), where p is an m-descendent of r and q is an n-descendent of r. <br><br>Then, by definition, cousins p and q are `k th`  cousins\'\' if and only if k=min(n,m)<br> , and, also by definition, p and q are ``cousins removed j times\'\' if and only if  j=|n-m|.<br><br>4 sibling --  0 th cousins removed 0 times are ``siblings\'\' (they have the same parent). <br>", input:"The input consists of parent-child pairs of names, one pair per line. Each name in a pair consists of lower-case alphabetic characters or periods (used to separate first and last names, for example). Child names are separated from parent names by one or more spaces. Parent-child pairs are terminated by a pair whose first component is the string ``no.child\'\'. Such a pair is NOT to be considered as a parent-child pair, but only as a delimiter to separate the parent-child pairs from the query pairs. There will be no circular relationships, i.e., no name p can be both an ancestor and a descendent of the same name q. <br><br>The parent-child pairs are followed by a sequence of query pairs in the same format as the parent-child pairs, i.e., each name in a query pair is a sequence of lower-case alphabetic characters and periods, and names are separated by one or more spaces. Query pairs are terminated by end-of-file. <br><br>There will be a maximum of 300 different names overall (parent-child and query pairs). All names will be fewer than 31 characters in length. There will be no more than 100 query pairs. ", output:"For each query-pair p  q of names the output should indicate the relationship p is-the-relative-of q by the appropriate string of the form <br><br>child, grand child, great grand child, great great ...great grand child<br>parent, grand parent, great grand parent, great great ...great grand parent<br>sibling<br>n cousin removed m<br>no relation <br>If an m-cousin is removed 0 times then only m cousin should be printed, i.e., removed 0 should NOT be printed. Do not print st, nd, rd, th after the numbers", sample_in:"alonzo.church oswald.veblen\nstephen.kleene alonzo.church\ndana.scott alonzo.church\nmartin.davis alonzo.church\npat.fischer hartley.rogers\nmike.paterson david.park\ndennis.ritchie pat.fischer\nhartley.rogers alonzo.church\nles.valiant mike.paterson\nbob.constable stephen.kleene\ndavid.park hartley.rogers\nno.child no.parent\nstephen.kleene bob.constable\nhartley.rogers stephen.kleene\nles.valiant alonzo.church\nles.valiant dennis.ritchie\ndennis.ritchie les.valiant\npat.fischer michael.rabin", sample_out:"parent\nsibling\ngreat great grand child\n1 cousin removed 1\n1 cousin removed 1\nno relation", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2, vtotal_submit:34, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1619, vid:1619, oj:"hdu", title:"Unidirectional TSP", desc:"Problems that require minimum paths through some domain appear in many different areas of computer science. For example, one of the constraints in VLSI routing problems is minimizing wire length. The Traveling Salesperson Problem (TSP) -- finding whether all the cities in a salesperson\'s route can be visited exactly once with a specified limit on travel time -- is one of the canonical examples of an NP-complete problem; solutions appear to require an inordinate amount of time to generate, but are simple to check. <br><br>This problem deals with finding a minimal path through a grid of points while traveling only from left to right. <br><br>Given an m*n  matrix of integers, you are to write a program that computes a path of minimal weight. A path starts anywhere in column 1 (the first column) and consists of a sequence of steps terminating in column n (the last column). A step consists of traveling from column i to column i+1 in an adjacent (horizontal or diagonal) row. The first and last rows (rows 1 and m) of a matrix are considered adjacent, i.e., the matrix ``wraps\'\' so that it represents a horizontal cylinder. Legal steps are illustrated below. <br><br><br><img src=data/images/1619-1.gif><br><br>The weight of a path is the sum of the integers in each of the n cells of the matrix that are visited. <br><br>For example, two slightly different  5*6 matrices are shown below (the only difference is the numbers in the bottom row). <br><br><img src=data/images/1619-2.gif><br><br><br>The minimal path is illustrated for each matrix. Note that the path for the matrix on the right takes advantage of the adjacency property of the first and last rows. <br><br>", input:"The input consists of a sequence of matrix specifications. Each matrix specification consists of the row and column dimensions in that order on a line followed by  integers where m is the row dimension and n is the column dimension. The integers appear in the input in row major order, i.e., the first n integers constitute the first row of the matrix, the second n integers constitute the second row and so on. The integers on a line will be separated from other integers by one or more spaces. Note: integers are not restricted to being positive. There will be one or more matrix specifications in an input file. Input is terminated by end-of-file. <br><br>For each specification the number of rows will be between 1 and 10 inclusive; the number of columns will be between 1 and 100 inclusive. No path\'s weight will exceed integer values representable using 30 bits<br>", output:"Two lines should be output for each matrix specification in the input file, the first line represents a minimal-weight path, and the second line is the cost of a minimal path. The path consists of a sequence of n integers (separated by one or more spaces) representing the rows that constitute the minimal path. If there is more than one path of minimal weight the path that is lexicographically smallest should be output. <br><br>", sample_in:"5 6\n3 4 1 2 8 6\n6 1 8 2 7 4\n5 9 3 9 9 5\n8 4 1 3 2 6\n3 7 2 8 6 4\n5 6\n3 4 1 2 8 6\n6 1 8 2 7 4\n5 9 3 9 9 5\n8 4 1 3 2 6\n3 7 2 1 2 3\n2 2\n9 10 9 10", sample_out:"1 2 3 4 4 5\n16\n1 2 1 5 4 5\n11\n1 1\n19", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:52, vtotal_submit:136, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1620, vid:1620, oj:"hdu", title:"Mutant Flatworld Explorers", desc:"Robotics, robot motion planning, and machine learning are areas that cross the boundaries of many of the subdisciplines that comprise Computer Science: artificial intelligence, algorithms and complexity, electrical and mechanical engineering to name a few. In addition, robots as ``turtles\'\' (inspired by work by Papert, Abelson, and diSessa) and as ``beeper-pickers\'\' (inspired by work by Pattis) have been studied and used by students as an introduction to programming for many years. <br><br>This problem involves determining the position of a robot exploring a pre-Columbian flat world<br><br><br>Given the dimensions of a rectangular grid and a sequence of robot positions and instructions, you are to write a program that determines for each sequence of robot positions and instructions the final position of the robot. <br><br>A robot position consists of a grid coordinate (a pair of integers: x-coordinate followed by y-coordinate) and an orientation (N,S,E,W for north, south, east, and west). A robot instruction is a string of the letters \'L\', \'R\', and \'F\' which represent, respectively, the instructions: <br><br>Left: the robot turns left 90 degrees and remains on the current grid point.<br>Right: the robot turns right 90 degrees and remains on the current grid point.<br>Forward: the robot moves forward one grid point in the direction of the current orientation and mantains the same orientation. <br>The direction North corresponds to the direction from grid point (x,y) to grid point (x,y+1). <br><br>Since the grid is rectangular and bounded, a robot that moves ``off\'\' an edge of the grid is lost forever. However, lost robots leave a robot ``scent\'\' that prohibits future robots from dropping off the world at the same grid point. The scent is left at the last grid position the robot occupied before disappearing over the edge. An instruction to move ``off\'\' the world from a grid point from which a robot has been previously lost is simply ignored by the current robot. <br><br>", input:"The first line of input is the upper-right coordinates of the rectangular world, the lower-left coordinates are assumed to be 0,0. <br><br>The remaining input consists of a sequence of robot positions and instructions (two lines per robot). A position consists of two integers specifying the initial coordinates of the robot and an orientation (N,S,E,W), all separated by white space on one line. A robot instruction is a string of the letters \'L\', \'R\', and \'F\' on one line. <br><br>Each robot is processed sequentially, i.e., finishes executing the robot instructions before the next robot begins execution. <br><br>Input is terminated by end-of-file. <br><br>You may assume that all initial robot positions are within the bounds of the specified grid. The maximum value for any coordinate is 50. All instruction strings will be less than 100 characters in length<br>", output:"For each robot position/instruction in the input, the output should indicate the final grid position and orientation of the robot. If a robot falls off the edge of the grid the word ``LOST\'\' should be printed after the position and orientation. <br><br>", sample_in:"5 3\n1 1 E\nRFRFRFRF\n3 2 N\nFRRFLLFFRRFLL\n0 3 W\nLLFFFLFLFL", sample_out:"1 1 E\n3 3 N LOST\n2 3 S", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:13, vtotal_submit:59, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1621, vid:1621, oj:"hdu", title:"Pipe Fitters", desc:"Filters, or programs that pass ``processed\'\' data through in some changed form, are an important class of programs in the UNIX operating system. A pipe is an operating system concept that permits data to ``flow\'\' between processes (and allows filters to be chained together easily.) <br><br>This problem involves maximizing the number of pipes that can be fit into a storage container (but it\'s a pipe fitting problem, not a bin packing problem). <br><br>A company manufactures pipes of uniform diameter. All pipes are stored in rectangular storage containers, but the containers come in several different sizes. Pipes are stored in rows within a container so that there is no space between pipes in any row (there may be some space at the end of a row), i.e., all pipes in a row are tangent, or touch. Within a rectangular cross-section, pipes are stored in either a grid pattern or a skew pattern as shown below: the two left-most cross-sections are in a grid pattern, the two right-most cross-sections are in a skew pattern.<br><br><img src=data/images/1621-1.gif> <br><br>Note that although it may not be apparent from the diagram, there is no space between adjacent pipes in any row. The pipes in any row are tangent to (touch) the pipes in the row below (or rest on the bottom of the container). When pipes are packed into a container, there may be ``left-over\'\' space in which a pipe cannot be packed. Such left-over space is packed with padding so that the pipes cannot settle during shipping. <br>", input:"The input is a sequence of cross-section dimensions of storage containers. Each cross-section is given as two real values on one line separated by white space. The dimensions are expressed in units of pipe diameters. All dimensions will be less than  2^7. Note that a cross section with dimensions  a*b can also be viewed as a cross section with dimensions  b*a. ", output:"For each cross-section in the input, your program should print the maximum number of pipes that can be packed into that cross section. The number of pipes is an integer -- no fractional pipes can be packed. The maximum number is followed by the word ``grid\'\' if a grid pattern results in the maximal number of pipes or the word ``skew\'\' if a skew pattern results in the maximal number of pipes. If the pattern doesn\'t matter, that is the same number of pipes can be packed with either a grid or skew pattern, then the word ``grid\'\' should be printed. <br>", sample_in:"3 3\n2.9 10\n2.9 10.5\n11 11", sample_out:"9 grid\n29 skew\n30 skew\n126 skew", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:29, vtotal_submit:62, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1622, vid:1622, oj:"hdu", title:"Trees on the level", desc:"Trees are fundamental in many branches of computer science. Current state-of-the art parallel computers such as Thinking Machines\' CM-5 are based on fat trees. Quad- and octal-trees are fundamental to many algorithms in computer graphics. <br><br>This problem involves building and traversing binary trees. <br>Given a sequence of binary trees, you are to write a program that prints a level-order traversal of each tree. In this problem each node of a binary tree contains a positive integer and all binary trees have have fewer than 256 nodes. <br><br>In a level-order traversal of a tree, the data in all nodes at a given level are printed in left-to-right order and all nodes at level k are printed before all nodes at level k+1. <br><br>For example, a level order traversal of the tree <br><br><img src=data/images/1622-1.gif><br>is: 5, 4, 8, 11, 13, 4, 7, 2, 1. <br><br>In this problem a binary tree is specified by a sequence of pairs (n,s) where n is the value at the node whose path from the root is given by the string s. A path is given be a sequence of L\'s and R\'s where L indicates a left branch and R indicates a right branch. In the tree diagrammed above, the node containing 13 is specified by (13,RL), and the node containing 2 is specified by (2,LLR). The root node is specified by (5,) where the empty string indicates the path from the root to itself. A binary tree is considered to be completely specified if every node on all root-to-node paths in the tree is given a value exactly once. <br><br>", input:"The input is a sequence of binary trees specified as described above. Each tree in a sequence consists of several pairs (n,s) as described above separated by whitespace. The last entry in each tree is (). No whitespace appears between left and right parentheses. <br><br>All nodes contain a positive integer. Every tree in the input will consist of at least one node and no more than 256 nodes. Input is terminated by end-of-file. <br><br>", output:"For each completely specified binary tree in the input file, the level order traversal of that tree should be printed. If a tree is not completely specified, i.e., some node in the tree is NOT given a value or a node is given a value more than once, then the string ``not complete\'\' should be printed", sample_in:"(11,LL) (7,LLL) (8,R)\n(5,) (4,L) (13,RL) (2,LLR) (1,RRR) (4,RR) ()\n(3,L) (4,R) ()", sample_out:"5 4 8 11 13 4 7 2 1\nnot complete", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:85, vtotal_submit:304, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1623, vid:1623, oj:"hdu", title:"Searching Quickly", desc:"Searching and sorting are part of the theory and practice of computer science. For example, binary search provides a good example of an easy-to-understand algorithm with sub-linear complexity. Quicksort is an efficient O(nlongn) [average case] comparison based sort. <br><br>KWIC-indexing is an indexing method that permits efficient ``human search\'\' of, for example, a list of titles. <br><br>Given a list of titles and a list of ``words to ignore\'\', you are to write a program that generates a KWIC (Key Word In Context) index of the titles. In a KWIC-index, a title is listed once for each keyword that occurs in the title. The KWIC-index is alphabetized by keyword. <br><br>Any word that is not one of the ``words to ignore\'\' is a potential keyword. <br><br>For example, if words to ignore are ``the, of, and, as, a\'\' and the list of titles is: <br><br>Descent of Man<br>The Ascent of Man<br>The Old Man and The Sea<br>A Portrait of The Artist As a Young Man<br><br>A KWIC-index of these titles might be given by: <br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;portrait&nbsp;of&nbsp;the&nbsp;ARTIST&nbsp;as&nbsp;a&nbsp;young&nbsp;man&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;ASCENT&nbsp;of&nbsp;man&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DESCENT&nbsp;of&nbsp;man&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;descent&nbsp;of&nbsp;MAN&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;ascent&nbsp;of&nbsp;MAN&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;old&nbsp;MAN&nbsp;and&nbsp;the&nbsp;sea&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;portrait&nbsp;of&nbsp;the&nbsp;artist&nbsp;as&nbsp;a&nbsp;young&nbsp;MAN&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;OLD&nbsp;man&nbsp;and&nbsp;the&nbsp;sea&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;PORTRAIT&nbsp;of&nbsp;the&nbsp;artist&nbsp;as&nbsp;a&nbsp;young&nbsp;man&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the&nbsp;old&nbsp;man&nbsp;and&nbsp;the&nbsp;SEA&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;portrait&nbsp;of&nbsp;the&nbsp;artist&nbsp;as&nbsp;a&nbsp;YOUNG&nbsp;man", input:"The input is a sequence of lines, the string :: is used to separate the list of words to ignore from the list of titles. Each of the words to ignore appears in lower-case letters on a line by itself and is no more than 10 characters in length. Each title appears on a line by itself and may consist of mixed-case (upper and lower) letters. Words in a title are separated by whitespace. No title contains more than 15 words. <br><br>There will be no more than 50 words to ignore, no more than than 200 titles, and no more than 10,000 characters in the titles and words to ignore combined. No characters other than \'a\'-\'z\', \'A\'-\'Z\', and white space will appear in the input.<br>", output:"The output should be a KWIC-index of the titles, with each title appearing once for each keyword in the title, and with the KWIC-index alphabetized by keyword. If a word appears more than once in a title, each instance is a potential keyword. <br><br>The keyword should appear in all upper-case letters. All other words in a title should be in lower-case letters. Titles in the KWIC-index with the same keyword should appear in the same order as they appeared in the input file. In the case where multiple instances of a word are keywords in the same title, the keywords should be capitalized in left-to-right order. <br><br>Case (upper or lower) is irrelevant when determining if a word is to be ignored. <br><br>The titles in the KWIC-index need NOT be justified or aligned by keyword, all titles may be listed left-justified.<br>", sample_in:"is\nthe\nof\nand\nas\na\nbut\n::\nDescent of Man\nThe Ascent of Man\nThe Old Man and The Sea\nA Portrait of The Artist As a Young Man\nA Man is a Man but Bubblesort IS A DOG", sample_out:"a portrait of the ARTIST as a young man \nthe ASCENT of man \na man is a man but BUBBLESORT is a dog \nDESCENT of man \na man is a man but bubblesort is a DOG \ndescent of MAN \nthe ascent of MAN \nthe old MAN and the sea \na portrait of the artist as a young MAN \na MAN is a man but bubblesort is a dog \na man is a MAN but bubblesort is a dog \nthe OLD man and the sea \na PORTRAIT of the artist as a young man \nthe old man and the SEA \na portrait of the artist as a YOUNG man", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:15, vtotal_submit:87, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1624, vid:1624, oj:"hdu", title:"The Errant Physicist ", desc:"The well-known physicist Alfred E Neuman is working on problems that involve multiplying polynomials of x and y. For example, he may need to calculate <br><img src=data/images/1624-1.gif><br>getting the answer <br><br><img src=data/images/1624-2.gif><br><br>Unfortunately, such problems are so trivial that the great man\'s mind keeps drifting off the job, and he gets the wrong answers. As a consequence, several nuclear warheads that he has designed have detonated prematurely, wiping out five major cities and a couple of rain forests. <br><br>You are to write a program to perform such multiplications and save the world. <br>", input:"The file of input data will contain pairs of lines, with each line containing no more than 80 characters. The final line of the input file contains a # as its first character. Each input line contains a polynomial written without spaces and without any explicit exponentiation operator. Exponents are positive non-zero unsigned integers. Coefficients are also integers, but may be negative. Both exponents and coefficients are less than or equal to 100 in magnitude. Each term contains at most one factor in x and one in y. <br>", output:"Your program must multiply each pair of polynomials in the input, and print each product on a pair of lines, the first line containing all the exponents, suitably positioned with respect to the rest of the information, which is in the line below. <br><br><br>The following rules control the output format: <br><br>&nbsp;&nbsp;1.Terms in the output line must be sorted in decreasing order of powers of x and, for a given power of x, in increasing order of powers of y. <br>&nbsp;&nbsp;2.Like terms must be combined into a single term. For example, 40x2y3 - 38x2y3 is replaced by 2x2y3. <br>&nbsp;&nbsp;3.Terms with a zero coefficient must not be displayed.<br>&nbsp;&nbsp;4.Coefficients of 1 are omitted, except for the case of a constant term of 1. <br>&nbsp;&nbsp;5.Exponents of 1 are omitted. <br>&nbsp;&nbsp;6.Factors of x0 and y0 are omitted. <br>&nbsp;&nbsp;7.Binary pluses and minuses (that is the pluses and minuses connecting terms in the output) have a single blank column both before and after. <br>&nbsp;&nbsp;8.If the coefficient of the first term is negative, it is preceded by a unary minus in the first column, with no intervening blank column. Otherwise, the coefficient itself begins in the first output column. <br>&nbsp;&nbsp;9.The output can be assumed to fit into a single line of at most 80 charactes in length. <br>&nbsp;&nbsp;10.There should be no blank lines printed between each pair of output lines. <br>&nbsp;&nbsp;11.The pair of lines that contain a product should be the same length--trailing blanks should appear after the last non-blank character of the shorter line to achieve this. <br>", sample_in:"-yx8+9x3-1+y\nx5y+1+x3\n1\n1\n#", sample_out:"  13 2    11      8      6    5     5 2     3    3\n-x  y  - x  y + 8x y + 9x  - x y + x y  + 8x  + x y - 1 + y \n\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1, vtotal_submit:6, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1625, vid:1625, oj:"hdu", title:"Numbering Paths", desc:"Problems that process input and generate a simple ``yes\'\' or ``no\'\' answer are called decision problems. One class of decision problems, the NP-complete problems, are not amenable to general efficient solutions. Other problems may be simple as decision problems, but enumerating all possible ``yes\'\' answers may be very difficult (or at least time-consuming). <br><br>This problem involves determining the number of routes available to an emergency vehicle operating in a city of one-way streets.<br><br>Given the intersections connected by one-way streets in a city, you are to write a program that determines the number of different routes between each intersection. A route is a sequence of one-way streets connecting two intersections. <br><br>Intersections are identified by non-negative integers. A one-way street is specified by a pair of intersections. For example, j k indicates that there is a one-way street from intersection j to intersection k. Note that two-way streets can be modeled by specifying two one-way streets: j k and k j . <br><br>Consider a city of four intersections connected by the following one-way streets: <br><br>    0  1<br>    0  2<br>    1  2<br>    2  3<br><br>There is one route from intersection 0 to 1, two routes from 0 to 2 (the routes are 0-1-2 and 0-2 ), two routes from 0 to 3, one route from 1 to 2, one route from 1 to 3, one route from 2 to 3, and no other routes. <br>It is possible for an infinite number of different routes to exist. For example if the intersections above are augmented by the street  , there is still only one route from 0 to 1, but there are infinitely many different routes from 0 to 2. This is because the street from 2 to 3 and back to 2 can be repeated yielding a different sequence of streets and hence a different route. Thus the route 0-2-3-2-3-2 is a different route than 0-2-3-2 . <br>", input:"The input is a sequence of city specifications. Each specification begins with the number of one-way streets in the city followed by that many one-way streets given as pairs of intersections. Each pair j k represents a one-way street from intersection j to intersection k. In all cities, intersections are numbered sequentially from 0 to the ``largest\'\' intersection. All integers in the input are separated by whitespace. The input is terminated by end-of-file. <br><br>There will never be a one-way street from an intersection to itself. No city will have more than 30 intersections.<br>", output:"For each city specification, a square matrix of the number of different routes from intersection j to intersection k is printed. If the matrix is denoted M, then M[j][k] is the number of different routes from intersection j to intersection k. The matrix M should be printed in row-major order, one row per line. Each matrix should be preceded by the string ``matrix for city k\'\' (with k appropriately instantiated, beginning with 0). <br><br>If there are an infinite number of different paths between two intersections a -1 should be printed. DO NOT worry about justifying and aligning the output of each matrix. All entries in a row should be separated by whitespace. <br>", sample_in:"7 0 1 0 2 0 4 2 4 2 3 3 1 4 3\n5 \n0 2 \n0 1 1 5 2 5 2 1\n9\n0 1 0 2 0 3\n0 4 1 4 2 1\n2 0\n3 0\n3 1", sample_out:"matrix for city 0\n 0 4 1 3 2\n 0 0 0 0 0\n 0 2 0 2 1\n 0 1 0 0 0\n 0 1 0 1 0\nmatrix for city 1\n 0 2 1 0 0 3\n 0 0 0 0 0 1\n 0 1 0 0 0 2\n 0 0 0 0 0 0\n 0 0 0 0 0 0\n 0 0 0 0 0 0\nmatrix for city 2\n -1 -1 -1 -1 -1\n 0 0 0 0 1\n -1 -1 -1 -1 -1\n -1 -1 -1 -1 -1\n 0 0 0 0 0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:30, vtotal_submit:126, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1626, vid:1626, oj:"hdu", title:"Software CRC", desc:"You work for a company which uses lots of personal computers. Your boss, Dr Penny Pincher, has wanted to link the computers together for some time but has been unwilling to spend any money on the Ethernet boards you have recommended. You, unwittingly, have pointed out that each of the PCs has come from the vendor with an asynchronous serial port at no extra cost. Dr Pincher, of course, recognizes her opportunity and assigns you the task of writing the software necessary to allow communication between PCs. <br><br>You\'ve read a bit about communications and know that every transmission is subject to error and that the typical solution to this problem is to append some error checking information to the end of each message. This information allows the receiving program to detect when a transmission error has occurred (in most cases). So, off you go to the library, borrow the biggest book on communications you can find and spend your weekend (unpaid overtime) reading about error checking. <br><br>Finally you decide that CRC (cyclic redundancy check) is the best error checking for your situation and write a note to Dr Pincher detailing the proposed error checking mechanism noted below. <br><br>CRC Generation <br><br>The message to be transmitted is viewed as a long positive binary number. The first byte of the message is treated as the most significant byte of the binary number. The second byte is the next most significant, etc. This binary number will be called ``m\'\' (for message). Instead of transmitting ``m\'\' you will transmit a message, ``m2\'\', consisting of ``m\'\' followed by a two-byte CRC value. <br><br>The CRC value is chosen so that ``m2\'\' when divided by a certain 16-bit value ``g\'\' leaves a remainder of 0. This makes it easy for the receiving program to determine whether the message has been corrupted by transmission errors. It simply divides any message received by ``g\'\'. If the remainder of the division is zero, it is assumed that no error has occurred. <br><br>You notice that most of the suggested values of ``g\'\' in the book are odd, but don\'t see any other similarities, so you select the value 34943 for ``g\'\' (the generator value). <br>", input:"You are to devise an algorithm for calculating the CRC value corresponding to any message that might be sent. To test this algorithm you will write a program which reads lines (each line being all characters up to, but not including the end of line character) as input, and for each line calculates the CRC value for the message contained in the line, and writes the numeric value of the CRC bytes (in hexadecimal notation) on an output line. Each input line will contain no more than 1024 ASCII characters. The input is terminated by a line that contains a # in column 1. Note that each CRC printed should be in the range 0 to 34942 (decimal). <br>", output:"", sample_in:"this is a test\n \nA\n#", sample_out:"77 FD \n00 00\n0C 86", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:19, vtotal_submit:36, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1627, vid:1627, oj:"hdu", title:"Krypton Factor", desc:"You have been employed by the organisers of a Super Krypton Factor Contest in which contestants have very high mental and physical abilities. In one section of the contest the contestants are tested on their ability to recall a sequenace of characters which has been read to them by the Quiz Master. Many of the contestants are very good at recognising patterns. Therefore, in order to add some difficulty to this test, the organisers have decided that sequences containing certain types of repeated subsequences should not be used. However, they do not wish to remove all subsequences that are repeated, since in that case no single character could be repeated. This in itself would make the problem too easy for the contestants. Instead it is decided to eliminate all sequences containing an occurrence of two adjoining identical subsequences. Sequences containing such an occurrence will be called ``easy\'\'. Other sequences will be called ``hard\'\'. <br><br>For example, the sequence ABACBCBAD is easy, since it contains an adjoining repetition of the subsequence CB. Other examples of easy sequences are: <br><br>BB<br>ABCDACABCAB<br>ABCDABCD <br><br>Some examples of hard sequences are: <br><br>D<br>DC<br>ABDAB<br>CBABCBA <br>", input:"In order to provide the Quiz Master with a potentially unlimited source of questions you are asked to write a program that will read input lines that contain integers n and L (in that order), where n &gt; 0 and L is in the range  , and for each input line prints out the nth hard sequence (composed of letters drawn from the first L letters in the alphabet), in increasing alphabetical order (alphabetical ordering here corresponds to the normal ordering encountered in a dictionary), followed (on the next line) by the length of that sequence. The first sequence in this ordering is A. You may assume that for given n and L there do exist at least n hard sequences. <br><br>For example, with L = 3, the first 7 hard sequences are: <br><br>A <br>AB <br>ABA <br>ABAC <br>ABACA <br>ABACAB <br>ABACABA <br>As each sequence is potentially very long, split it into groups of four (4) characters separated by a space. If there are more than 16 such groups, please start a new line for the 17th group. <br><br>Therefore, if the integers 7 and 3 appear on an input line, the output lines produced should be <br><br><br>ABAC ABA<br>7<br>Input is terminated by a line containing two zeroes. Your program may assume a maximum sequence length of 80.<br>", output:"", sample_in:"30 3\n0 0", sample_out:"ABAC ABCA CBAB CABA CABC ACBA CABA\n28", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:35, vtotal_submit:144, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1628, vid:1628, oj:"hdu", title:"Roman Roulette", desc:"The historian Flavius Josephus relates how, in the Romano-Jewish conflict of 67 A.D., the Romans took the town of Jotapata which he was commanding. Escaping, Jospehus found himself trapped in a cave with 40 companions. The Romans discovered his whereabouts and invited him to surrender, but his companions refused to allow him to do so. He therefore suggested that they kill each other, one by one, the order to be decided by lot. Tradition has it that the means for effecting the lot was to stand in a circle, and, beginning at some point, count round, every third person being killed in turn. The sole survivor of this process was Josephus, who then surrendered to the Romans. Which begs the question: had Josephus previously practised quietly with 41 stones in a dark corner, or had he calculated mathematically that he should adopt the 31st position in order to survive? <br><br>Having read an account of this gruesome event you become obsessed with the fear that you will find yourself in a similar situation at some time in the future. In order to prepare yourself for such an eventuality you decide to write a program to run on your hand-held PC which will determine the position that the counting process should start in order to ensure that you will be the sole survivor. <br><br>In particular, your program should be able to handle the following variation of the processes described by Josephus. n &gt; 0 people are initially arranged in a circle, facing inwards, and numbered from 1 to n. The numbering from 1 to n proceeds consecutively in a clockwise direction. Your allocated number is 1. Starting with person number i, counting starts in a clockwise direction, until we get to person number k (k &gt; 0), who is promptly killed. We then proceed to count a further k people in a clockwise direction, starting with the person immediately to the left of the victim. The person number k so selected has the job of burying the victim, and then returning to the position in the circle that the victim had previously occupied. Counting then proceeeds from the person to his immediate left, with the kth person being killed, and so on, until only one person remains. <br><br>For example, when n = 5, and k = 2, and i = 1, the order of execution is 2, 5, 3, and 1. The survivor is 4.<br>", input:"Your program must read input lines containing values for n and k (in that order), and for each input line output the number of the person with which the counting should begin in order to ensure that you are the sole survivor. For example, in the above case the safe starting position is 3. Input will be terminated by a line containing values of 0 for n and k. <br><br>Your program may assume a maximum of 100 people taking part in this event.<br>", output:"", sample_in:"1 1\n1 5\n0 0", sample_out:"1\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:46, vtotal_submit:155, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1629, vid:1629, oj:"hdu", title:"The Psychic Poker Player", desc:"In 5-card draw poker, a player is dealt a hand of five cards (which may be looked at). The player may then discard between zero and five of his or her cards and have them replaced by the same number of cards from the top of the deck (which is face down). The object is to maximize the value of the final hand. The different values of hands in poker are given at the end of this problem. <br><br>Normally the player cannot see the cards in the deck and so must use probability to decide which cards to discard. In this problem, we imagine that the poker player is psychic and knows which cards are on top of the deck. Write a program which advises the player which cards to discard so as to maximize the value of the resulting hand. <br>", input:"Input will consist of a series of lines, each containing the initial five cards in the hand then the first five cards on top of the deck. Each card is represented as a two-character code. The first character is the face-value (A=Ace, 2-9, T=10, J=Jack, Q=Queen, K=King) and the second character is the suit (C=Clubs, D=Diamonds, H=Hearts, S=Spades). Cards will be separated by single spaces. Each input line will be from a single valid deck, that is there will be no duplicate cards in each hand and deck. <br><br>Each line of input should produce one line of output, consisting of the initial hand, the top five cards on the deck, and the best value of hand that is possible. Input is terminated by end of file. <br><br><br>Use the sample input and output as a guide. Note that the order of the cards in the player\'s hand is irrelevant, but the order of the cards in the deck is important because the discarded cards must be replaced from the top of the deck. Also note that examples of all types of hands appear in the sample output, with the hands shown in decreasing order of value. <br>", output:"", sample_in:"TH JH QC QD QS QH KH AH 2S 6S\n2H 2S 3H 3S 3C 2D 3D 6C 9C TH\n2H 2S 3H 3S 3C 2D 9C 3D 6C TH\n2H AD 5H AC 7H AH 6H 9H 4H 3C\nAC 2D 9C 3S KD 5S 4D KS AS 4C\nKS AH 2H 3C 4H KC 2C TC 2D AS\nAH 2C 9S AD 3C QH KS JS JD KD\n6C 9C 8C 2D 7C 2H TC 4C 9S AH\n3D 5S 2H QD TD 6S KH 9H AD QH", sample_out:"Hand: TH JH QC QD QS Deck: QH KH AH 2S 6S Best hand: straight-flush\nHand: 2H 2S 3H 3S 3C Deck: 2D 3D 6C 9C TH Best hand: four-of-a-kind\nHand: 2H 2S 3H 3S 3C Deck: 2D 9C 3D 6C TH Best hand: full-house\nHand: 2H AD 5H AC 7H Deck: AH 6H 9H 4H 3C Best hand: flush\nHand: AC 2D 9C 3S KD Deck: 5S 4D KS AS 4C Best hand: straight\nHand: KS AH 2H 3C 4H Deck: KC 2C TC 2D AS Best hand: three-of-a-kind\nHand: AH 2C 9S AD 3C Deck: QH KS JS JD KD Best hand: two-pairs\nHand: 6C 9C 8C 2D 7C Deck: 2H TC 4C 9S AH Best hand: one-pair\nHand: 3D 5S 2H QD TD Deck: 6S KH 9H AD QH Best hand: highest-card", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:13, vtotal_submit:27, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1630, vid:1630, oj:"hdu", title:"Bumpy Objects", desc:"<img src=data/images/1630-1.gif><br>Consider objects such as these. They are polygons, specified by the coordinates of a centre of mass and their vertices. In the figure, centres of mass are shown as black squares. The vertices will be numbered consecutively anti-clockwise as shown. <br><br>An object can be rotated to stand stably if two vertices can be found that can be joined by a straight line that does not intersect the object, and, when this line is horizontal, the centre of mass lies above the line and strictly between its endpoints. There are typically many stable positions and each is defined by one of these lines known as its base line. A base line, and its associated stable position, is identified by the highest numbered vertex touched by that line. <br><br>Write a program that will determine the stable position that has the lowest numbered base line. Thus for the above objects, the desired base lines would be 6 for object 1, 6 for object 2 and 2 for the square. You may assume that the objects are possible, that is they will be represented as non self-intersecting polygons, although they may well be concave. <br>", input:"Successive lines of a data set will contain: a string of less than 20 characters identifying the object; the coordinates of the centre of mass; and the coordinates of successive points terminated by two zeroes (0 0), on one or more lines as necessary. There may be successive data sets (objects). The end of data will be defined by the string \'#\'. <br><br>Output will consist of the identification string followed by the number of the relevant base line.<br>", output:"", sample_in:"Object2\n4 3\n3 2  5 2  6 1  7 1  6 3  4 7  1 1  2 1  0 0\nSquare \n2 2\n1 1  3 1  3 3  1 3  0 0\n#", sample_out:"Object2             6\nSquare              2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5, vtotal_submit:32, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1631, vid:1631, oj:"hdu", title:"Loglan-A Logical Language", desc:"Loglan is a synthetic speakable language designed to test some of the fundamental problems of linguistics, such as the Sapir Whorf hypothesis. It is syntactically unambiguous, culturally neutral and metaphysically parsimonious. What follows is a gross over-simplification of an already very small grammar of some 200 rules. <br><br>Loglan sentences consist of a series of words and names, separated by spaces, and are terminated by a period (.). Loglan words all end with a vowel; names, which are derived extra-linguistically, end with a consonant. Loglan words are divided into two classes--little words which specify the structure of a sentence, and predicates which have the form CCVCV or CVCCV where C represents a consonant and V represents a vowel (see examples later). <br><br>The subset of Loglan that we are considering uses the following grammar: <br><br><img src=data/images/1631-1.gif><br><br>Write a program that will read a succession of strings and determine whether or not they are correctly formed Loglan sentences.<br>", input:"Each Loglan sentence will start on a new line and will be terminated by a period (.). The sentence may occupy more than one line and words may be separated by more than one whitespace character. The input will be terminated by a line containing a single `#\'. You can assume that all words will be correctly formed. <br><br>Output will consist of one line for each sentence containing either `Good\' or `Bad!\'.<br>", output:"", sample_in:"la mutce bunbo mrenu bi ditca.\nla fumna bi le mrenu.\ndjan ga vedma le negro ketpi.\n#", sample_out:"Good\nBad!\nGood", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4, vtotal_submit:13, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1632, vid:1632, oj:"hdu", title:"Polygons", desc:"Given two convex polygons, they may or may not overlap. If they do overlap, they will do so to differing degrees and in different ways. Write a program that will read in the coordinates of the corners of two convex polygons and calculate the `exclusive or\' of the two areas, that is the area that is bounded by exactly one of the polygons. The desired area is shaded in the following diagram:<br><br><img src=data/images/1632-1.gif><br>", input:"Input will consist of pairs of lines each containing the number of vertices of the polygon, followed by that many pairs of integers representing the x,y coordinates of the corners in a clockwise direction. All the coordinates will be positive integers less than 100. For each pair of polygons (pair of lines in the data file), your program should print out the desired area correct to two decimal places. The input will end with a line containing a zero (0).<br>", output:"Output will consist of a single line containing the desired area written as a succession of eight (8) digit fields with two (2) digits after the decimal point. There will not be enough cases to need more than one line.<br>", sample_in:"3  5 5  8 1  2 3\n3  5 5  8 1  2 3\n4  1 2  1 4  5 4  5 2\n6  6 3  8 2  8 1  4 1  4 2  5 3\n0", sample_out:"    0.00   13.50", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:23, vtotal_submit:119, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1633, vid:1633, oj:"hdu", title:"Orchard Trees", desc:"An Orchardist has planted an orchard in a rectangle with trees uniformly spaced in both directions. Thus the trees form a rectangular grid and we can consider the trees to have integer coordinates. The origin of the coordinate system is at the bottom left of the following diagram: <br><img src=data/images/1633-1.gif><br>Consider that we now overlay a series of triangles on to this grid. The vertices of the triangle can have any real coordinates in the range 0.0 to 100.0, thus trees can have coordinates in the range 1 to 99. Two possible triangles are shown. <br><br>Write a program that will determine how many trees are contained within a given triangle. For the purposes of this problem, you may assume that the trees are of point size, and that any tree (point) lying exactly on the border of a triangle is considered to be in the triangle. <br>", input:"Input will consist of a series of lines. Each line will contain 6 real numbers in the range 0.00 to 100.00 representing the coordinates of a triangle. The entire file will be terminated by a line containing 6 zeroes (0 0 0 0 0 0). <br>", output:"Output will consist of one line for each triangle, containing the number of trees for that triangle right justified in a field of width 4. ", sample_in:"1.5 1.5  1.5 6.8  6.8 1.5\n10.7 6.9  8.5 1.5  14.5 1.5\n0 0 0 0 0 0", sample_out:"  15\n  17", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:27, vtotal_submit:127, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1634, vid:1634, oj:"hdu", title:"Forests", desc:"The saying ``You can\'t see the wood for the trees\'\' is not only a cliche, but is also incorrect. The real problem is that you can\'t see the trees for the wood. If you stand in the middle of a ``wood\'\' (in NZ terms, a patch of bush), the trees tend to obscure each other and the number of distinct trees you can actually see is quite small. This is especially true if the trees are planted in rows and columns (as in a pine plantation), because they tend to line up. The purpose of this problem is to find how many distinct trees you can see from an arbitrary point in a pine plantation (assumed to stretch ``for ever\'\'). <br><img src=data/images/1634-1.gif><br>You can only see a distinct tree if no part of its trunk is obscured by a nearer tree--that is if both sides of the trunk can be seen, with a discernible gap between them and the trunks of all trees closer to you. Also, you can\'t see a tree if it is apparently ``too small\'\'. For definiteness, ``not too small\'\' and ``discernible gap\'\' will mean that the angle subtended at your eye is greater than 0.01 degrees (you are assumed to use one eye for observing). Thus the two trees marked<img src=data/images/1634-2.gif>obscure at least the trees marked<img src=data/images/1634-3.gif>from the given view point. <br><br>Write a program that will determine the number of trees visible under these assumptions, given the diameter of the trees, and the coordinates of a viewing position. Because the grid is infinite, the origin is unimportant, and the coordinates will be numbers between 0 and 1. <br>", input:"Input will consist of a series of lines, each line containing three real numbers of the form 0.nn. The first number will be the trunk diameter--all trees will be assumed to be cylinders of exactly this diameter, with their centres placed exactly on the points of a rectangular grid with a spacing of one unit. The next two numbers will be the x and y coordinates of the observer. To avoid potential problems, say by being too close to a tree, we will guarantee that <img src=data/images/1634-4.gif> To avoid problems with trees being too small you may assume that<img src=data/images/1634-5.gif>. The file will be terminated by a line consisting of three zeroes. <br>", output:"Output will consist of a series of lines, one for each line of the input. Each line will consist of the number of trees of the given size, visible from the given position. <br>", sample_in:"0.10 0.46 0.38\n0 0 0", sample_out:"128", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:16, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1635, vid:1635, oj:"hdu", title:"Double Time ", desc:"In 45 BC a standard calendar was adopted by Julius Caesar--each year would have 365 days, and every fourth year have an extra day--the 29th of February. However this calendar was not quite accurate enough to track the true solar year, and it became noticeable that the onset of the seasons was shifting steadily through the year. In 1582 Pope Gregory XIII ruled that a new style calendar should take effect. From then on, century years would only be leap years if they were divisible by 400. Furthermore the current year needed an adjustment to realign the calendar with the seasons. This new calendar, and the correction required, were adopted immediately by Roman Catholic countries, where the day following Thursday 4 October 1582 was Friday 15 October 1582. The British and Americans (among others) did not follow suit until 1752, when Wednesday 2 September was followed by Thursday 14 September. (Russia did not change until 1918, and Greece waited until 1923.) Thus there was a long period of time when history was recorded in two different styles. <br><br>Write a program that will read in a date, determine which style it is in, and then convert it to the other style. <br>", input:"Input will consist of a series of lines, each line containing a day and date (such as Friday 25 December 1992). Dates will be in the range 1 January 1600 to 31 December 2099, although converted dates may lie outside this range. Note that all names of days and months will be in the style shown, that is the first letter will be capitalised with the rest lower case. The file will be terminated by a line containing a single `#\'. ", output:"Output will consist of a series of lines, one for each line of the input. Each line will consist of a date in the other style. Use the format and spacing shown in the example and described above. Note that there must be exactly one space between each pair of fields. To distinguish between the styles, dates in the old style must have an asterisk (`*\') immediately after the day of the month (with no intervening space). Note that this will not apply to the input. <br>", sample_in:"Saturday 29 August 1992\nSaturday 16 August 1992\nWednesday 19 December 1991\nMonday 1 January 1900\n#", sample_out:"Saturday 16* August 1992\nSaturday 29 August 1992\nWednesday 1 January 1992\nMonday 20* December 1899", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:11, vtotal_submit:29, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1636, vid:1636, oj:"hdu", title:"Route Finding", desc:"Many cities provide a comprehensive public transport system, often integrating bus routes, suburban commuter train services and underground railways. Routes on such systems can be categorised according to the stations or stops along them. We conventionally think of them as forming lines (where the vehicle shuttles from one end of the route to the other and returns), loops (where the two ends of the ``branch\'\' are the same and vehicles circle the system in both directions) and connections, where each end of the route connects with another route. Obviously all of these can be thought of as very similar, and can connect with each other at various points along their routes. Note that vehicles can travel in both directions along all routes, and that it is only possible to change between routes at connecting stations. <br><br>To simplify matters, each route is given a designation letter from the set `A\' to `Z\', and each station along a route will be designated by another letter from the set `a\' to `z\'. Connecting stations will have more than one designation. Thus an example could be: <br><img src=data/images/1636-1.gif><br><br>A common problem in such systems is finding a route between two stations. Once this has been done we wish to find the ``best\'\' route, where ``best\'\' means ``shortest time\'\'. <br><br>Write a program that will read in details of such a system and then will find the fastest routes between given pairs of stations. You can assume that the trip between stations always takes 1 unit of time and that changing between routes at a connecting station takes 3 units of time. <br>", input:"Input will consist of two parts. The first will consist of a description of a system, the second will consist of pairs of stations. The description will start with a number between 1 and 26 indicating how many routes there are in the system. This will be followed by that many lines, each describing a single route. Each line will start with the route identifier followed by a `:\' followed by the stations along that route, in order. Connections will be indicated by an `=\' sign followed by the complete alternative designation. All connections will be identified at least once, and if there are more than two lines meeting at a connection, some or of all the alternative designations may be identified together. That is, there may be sequences such as `...hc=Bg=Cc=Abd...\'. If the route forms a loop then the last station will be the same as the first. This is the only situation in which station letters will be repeated. The next portion of the input file will consist of a sequence of lines each containing two stations written contiguously. The file will be terminated by a line consisting of a single #. <br>", output:"Output will consist of a series of lines, one for each pair of stations in the input. Each line will consist of the time for the fastest route joining the two stations, right justified in a field of width 3, followed by a colon and a space and the sequence of stations representing the shortest journey. Follow the example shown below. Note that there will always be only one fastest route for any given pair of stations and that the route must start and finish at the named stations (not at any synonyms thereof), hence the time for the route must include the time for any inter-station transfers. <br><br>The example input below refers to the diagram given above. ", sample_in:"4\nA:fgmpnxzabjd=Dbf\nD:b=Adac=Ccf\nB:acd=Azefg=Cbh\nC:bac\nAgAa\nAbBh\nBhDf\n#", sample_out:"  5: Agfdjba\n  9: Abaz=Bdefgh\n 10: Bhg=Cbac=Dcf", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:35, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1637, vid:1637, oj:"hdu", title:"Calendar", desc:"Most of us have a calendar on which we scribble details of important events in our lives--visits to the dentist, the Regent 24 hour book sale, Programming Contests and so on. However there are also the fixed dates: partner\'s birthdays, wedding anniversaries and the like; and we also need to keep track of these. Typically we need to be reminded of when these important dates are approaching--the more important the event, the further in advance we wish to have our memories jogged. <br><br>Write a program that will provide such a service. The input will specify the year for which the calendar is relevant (in the range 1901 to 1999). Bear in mind that, within the range specified, all years that are divisible by 4 are leap years and hence have an extra day (February 29th) added. The output will specify ``today\'s\'\' date, a list of forthcoming events and an indication of their relative importance. <br>", input:"The first line of input will contain an integer representing the year (in the range 1901 to 1999). This will be followed by a series of lines representing anniversaries or days for which the service is requested. <br><br>An anniversary line will consist of the letter `A\'; three integer numbers (D, M, P) representing the date, the month and the importance of the event; and a string describing the event, all separated by one or more spaces. P will be a number between 1 and 7 (both inclusive) and represents the number of days before the event that the reminder service should start. The string describing the event will always be present and will start at the first non-blank character after the priority. <br><br>A date line will consist of the letter `D\' and the date and month as above. <br><br>All anniversary lines will precede any date lines. No line will be longer than 255 characters in total. The file will be terminated by a line consisting of a single #. <br>", output:"Output will consist of a series of blocks of lines, one for each date line in the input. Each block will consist of the requested date followed by the list of events for that day and as many following days as necessary. <br><br>The output should specify the date of the event (D and M), right justified in fields of width 3, and the relative importance of the event. Events that happen today should be flagged as shown below, events that happen tomorrow should have P stars, events that happen the day after tomorrow should have P-1 stars, and so on. If several events are scheduled for the same day, order them by relative importance (number of stars). <br><br>If there is still a conflict, order them by their appearance in the input stream. Follow the format used in the example below. Leave 1 blank line between blocks. <br>", sample_in:"1993\nA 23 12 5 Partner\'s birthday\nA 25 12 7    Christmas\nA 20 12 1 Unspecified Anniversary\nD 20 12\n#", sample_out:"Today is: 20 12\n 20 12 *TODAY* Unspecified Anniversary\n 23 12 ***     Partner\'s birthday\n 25 12 ***     Christmas", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:41, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1638, vid:1638, oj:"hdu", title:"Beggar My Neighbour  ", desc:"``Beggar My Neighbour\'\' (sometimes known as ``Strip Jack Naked\'\') is a traditional card game, designed to help teach beginners something about cards and their values. A standard deck is shuffled and dealt face down to the two players, the first card to the non-dealer, the second to the dealer, and so on until each player has 26 cards. The dealer receives the last card. The non-dealer starts the game by playing the top card of her deck (the second last card dealt) face up on the table. The dealer then covers it by playing her top card face up. Play continues in this fashion until a ``face\'\' card (Ace, King, Queen or Jack) is played. The next player must then ``cover\'\' that card, by playing one card for a Jack, two for a Queen, three for a King and four for an Ace. If a face card is played at any stage during this sequence, play switches and the other player must cover that card. When this sequence has ended, the player who exposed the last face card takes the entire heap, placing it face down under her existing deck. She then starts the next round by playing one card face up as before, and play continues until one player cannot play when called upon to do so, because they have no more cards. <br><br>Write a program that will simulate playing this game. Remember that a standard deck (or pack) of cards contains 52 cards. These are divided into 4 suits--Spades (<img src=data/images/1638-1.gif>), Hearts(<img src=data/images/1638-2.gif>),Diamonds(<img src=data/images/1638-3.gif>), and Clubs (<img src=data/images/1638-4.gif>).Within each suit there are 13 cards--Ace (A), 2-9, Ten (T), Jack (J), Queen (Q) and King (K). <br>", input:"Input will consist of a series of decks of cards. Each deck will give the cards in order as they would be dealt (that is in the example deck below, the non-dealer would start the game by playing the H2). Decks will occupy 4 lines with 13 cards on each. The designation of each card will be the suit (S, H, D, C) followed by the rank (A, 2-9, T, J, Q, K). There will be exactly one space between cards. The file will be terminated by a line consisting of a single #. <br>", output:"Output will consist of a series of lines, one for each deck in the input. Each line will consist of the number of the winning player (1 is the dealer, 2 is the first to play) and the number of cards in the winner\'s hand (ignoring any on the stack), right justified in a field of width 3. <br>", sample_in:"HA H3 H4 CA SK S5 C5 S6 C4 D5 H7 HJ HQ\nD4 D7 SJ DT H6 S9 CT HK C8 C9 D6 CJ C6\nS8 D8 C2 S2 S3 C7 H5 DJ S4 DQ DK D9 D3\nH9 DA SA CK CQ C3 HT SQ H8 S7 ST H2 D2\n#", sample_out:"1 44", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4, vtotal_submit:29, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1639, vid:1639, oj:"hdu", title:"City Directions ", desc:"When driving through a city, an intersection usually offers one the choice of going straight on or turning left or right through 90 degrees. However some cities have diagonal roads, thus at intersections involving these one may be able to turn through 45 degrees (``half\'\') or through 135 degrees (``sharp\'\'). <br><br>Consider such a city with Avenues running north-south, Streets running east-west and Boulevards running diagonally. The central Avenue and Street are labelled Zero (A0 and S0). Other roads are labelled relative to these, thus A3W is the third avenue to the west of A0. There are 6 Boulevards--two passing through the centre of the city, and 4 others, one in each quadrant. The diagram below shows the northwest quadrant of a small version of such a city. <br><img src=data/images/1639-1.gif><br>The roads marked in grey are considered to be throughways. These are elevated for most of their length, thus it is possible to cross them easily, however they always intersect each other at a circle, which is shared by all other roads that meet at that intersection. You may only enter or leave them by turning left (sharp left in the case of boulevards). You may not stop on them for any reason. There are no restrictions on turns for other roads. <br><br>This system allows a very simple method of determining one\'s current position and a way of arriving at one\'s destination. Position can be specified in terms of the last intersection you passed through (the numbers of the Avenue and Street that meet there) and your current heading, which can be one of: north (N), northeast (NE), east (E), southeast (SE), south (S), southwest (SW), west (W) and northwest (NW). Directions can then be given in terms of how many intersections to pass through and which turns to make. However, the locals have an infuriating habit of giving incorrect or invalid directions, although it cannot be determined whether this is deliberate or accidental. Directions should (but don\'t always) conform to the following simple grammar: <br><br>&lt;command&gt; ::= &lt;turn_command&gt;  &lt;straight_command&gt; <br>&lt;turn_command&gt; ::= TURN [HALF  SHARP] {LEFT  RIGHT} <br>&lt;straight_command&gt; ::= GO [STRAIGHT] n  n  99 <br><br>Write a program that will simulate driving through such a city, by tracking your position and heading as you follow a set of directions (commands). Each quadrant of the city will be 50 blocks by 50 blocks, thus the entire city will be 100 blocks by 100 blocks, the outer throughways will be labelled Fifty and the major and minor boulevards will cross at roads labelled Twentyfive. You will be told your starting position and heading and then given a series of directions. If a direction does not follow the above grammar, or would involve an illegal or impossible turn then ignore it. At no stage will directions take you out of the confines of the city. ", input:"Input will consist of a series of scenarios. <br><br>Each scenario will consist of a position and a heading and will be followed by a series of directions (commands), each on a separate line. If either of the roads involved is one of the central roads (A0, S0), they will be labelled N or E as appropriate. Note that you may assume that you have just left the intersection specified. The GO &lt;n&gt; command means that you pass through &lt;n&gt; intersections. <br><br>Each scenario will be terminated by a line consisting of the word STOP. <br><br>The file will be terminated by a line consisting of the word END only. <br><br>Input data will follow the format shown below, except that more than one space may occur where only one is shown. No line will be longer than 80 characters. ", output:"Output will consist of a series of lines, one for each scenario. Each line will consist of a position and a heading in the same format as the input. If the final stopping place is illegal, report `Illegal stopping place\' as the answer. <br>", sample_in:"A2W S1N E\nTURN SHARP LEFT\nGO 1\nTURN RIGHT\nTURN LEFT\nTURN SHARP LEFT\nGO 1\nTURN LEFT\nSTOP\nA2W S1N W\nGO STRAIGHT 2\nTURN LEFT\nGO ON 2\nTURN HALF LEFT\nTURN LEFT\nGO 2\nSTOP\nEND", sample_out:"A3W S1N E\nIllegal stopping place", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1, vtotal_submit:10, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1640, vid:1640, oj:"hdu", title:"String Computer", desc:"Extel have just brought out their newest computer, a string processing computer dubbed the X9091. It is hoped that it will have some value in cryptography and related fields. (It is rumoured that the Taiwanese are working on a clone that will correct Stage 1 essays, but we will ignore such vapourware). This computer will accept input strings and produce output strings from them, depending on the programs loaded into them at the time. The chip is the ultimate in RISC technology--it has only three transformation instructions: <br><br>Delete a character at a particular position.<br>Insert a character at a particular position.<br>Change the character at a particular position to a different character. <br><br>Programs for this machine are written in a form of machine code where each instruction has the format ZXdd--Z represents the code for the instruction (D, I or C), X is a character and dd represents a two digit number. A program is terminated by a special halt instruction consisting of the letter `E\'. Note that each instruction works on the string in memory at the time the instruction is executed. <br><br>To see how this all works consider the following example. It is desired to transform the string `abcde\' to the string `bcgfe\'. This could be achieved by a series of Change commands, but is not minimal. The following program is better. <br><img src=data/images/1640-1.gif><br><br>Write a program that will read in two strings (the input string and the target string) and will produce a minimal X9091 program necessary to transform the input string into the target string. Since there may be multiple solutions, only one should be produced. Any solution that satisfies these criteria will be accepted. ", input:"Input will consist of a series of lines, each line containing two strings separated by exactly one space. The strings will consist of no more than 20 lower case characters. The file will be terminated by a line consisting of a single #. ", output:"Output will consist of a series of lines, one for each line of the input. Each will consist of a program in X9091 language. ", sample_in:"abcde bcgfe\n#", sample_out:"Da01Cg03If04E", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1, vtotal_submit:30, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1641, vid:1641, oj:"hdu", title:"Stamps", desc:"The government of Nova Mareterrania requires that various legal documents have stamps attached to them so that the government can derive revenue from them. In terms of recent legislation, each class of document is limited in the number of stamps that may be attached to it. The government wishes to know how many different stamps, and of what values, they need to print to allow the widest choice of values to be made up under these conditions. Stamps are always valued in units of $1. <br><br>This has been analysed by government mathematicians who have derived a formula for n(h,k), where h is the number of stamps that may be attached to a document, k is the number of denominations of stamps available, and n is the largest attainable value in a continuous sequence starting from $1. For instance, if h=3, k=2 and the denominations are $1 and $4, we can make all the values from $1 to $6 (as well as $8, $9 and $12). However with the same values of h and k, but using $1 and $3 stamps we can make all the values from $1 to $7 (as well as $9). This is maximal, so n(3,2) = 7. <br><br>Unfortunately the formula relating n(h,k) to h, k and the values of the stamps has been lost--it was published in one of the government reports but no-one can remember which one, and of the three researchers who started to search for the formula, two died of boredom and the third took a job as a lighthouse keeper because it provided more social stimulation. <br><br>The task has now been passed on to you. You doubt the existence of a formula in the first place so you decide to write a program that, for given values of h and k, will determine an optimum set of stamps and the value of n(h,k). <br>", input:"Input will consist of several lines, each containing a value for h and k. The file will be terminated by two zeroes (0 0). For technical reasons the sum of h and k is limited to 9. (The President lost his little finger in a shooting accident and cannot count past 9). <br>", output:"Output will consist of a line for each value of h and k consisting of the k stamp values in ascending order right justified in fields 3 characters wide, followed by a space and an arrow (-&gt;) and the value of n(h,k) right justified in a field 3 characters wide. <br>", sample_in:"3 2\n0 0", sample_out:"  1  3 ->  7", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4, vtotal_submit:42, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1642, vid:1642, oj:"hdu", title:"The Sultan\'s Successors", desc:"The Sultan of Nubia has no children, so she has decided that the country will be split into up to k separate parts on her death and each part will be inherited by whoever performs best at some test. It is possible for any individual to inherit more than one or indeed all of the portions. To ensure that only highly intelligent people eventually become her successors, the Sultan has devised an ingenious test. In a large hall filled with the splash of fountains and the delicate scent of incense have been placed k chessboards. Each chessboard has numbers in the range 1 to 99 written on each square and is supplied with 8 jewelled chess queens. The task facing each potential successor is to place the 8 queens on the chess board in such a way that no queen threatens another one, and so that the numbers on the squares thus selected sum to a number at least as high as one already chosen by the Sultan. (For those unfamiliar with the rules of chess, this implies that each row and column of the board contains exactly one queen, and each diagonal contains no more than one.) <br><br>Write a program that will read in the number and details of the chessboards and determine the highest scores possible for each board under these conditions. (You know that the Sultan is both a good chess player and a good mathematician and you suspect that her score is the best attainable.) <br>", input:"Input will consist of k (the number of boards), on a line by itself, followed by k sets of 64 numbers, each set consisting of eight lines of eight numbers. Each number will be a positive integer less than 100.", output:"Output will consist of k numbers consisting of your k scores, each score on a line by itself and right justified in a field 5 characters wide. ", sample_in:"1\n 1  2  3  4  5  6  7  8\n 9 10 11 12 13 14 15 16\n17 18 19 20 21 22 23 24\n25 26 27 28 29 30 31 32\n33 34 35 36 37 38 39 40\n41 42 43 44 45 46 47 48\n48 50 51 52 53 54 55 56\n57 58 59 60 61 62 63 64", sample_out:"  260", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:7, vtotal_submit:99, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1643, vid:1643, oj:"hdu", title:"Xenosemantics", desc:"Contact with extra-terrestrial intelligence has been made at last!! A stream of messages has been discovered, apparently emanating from Procyon IV. After intensive study by the world\'s best xenosemanticists, the following definite conclusions on the format of the messages have been reached. The messages are streams of bits divided into groups of 8. Somewhat coincidentally the meaningful parts of the message map onto the lower case alphabet, although other characters sometimes intervene. Letters are organised into words separated by spacer letters. The spacer letter varies within a message, but a word which is delimited by a particular spacer pair does not contain that spacer letter within it. In addition the message is conceptually bounded by a pair of `joker\' letters or `wild spacers\' that can match any letter. For example, a message segment xwrxwtx contains 3 words--wr, wt, and rx; wrxwt is not a word in this segment of the message. If this segment appeared at the start of a message then xw and xwrxw could also be words. The words wr and rx overlap, while wt does not overlap any words in this message segment. While a word contains the same letters each time it appears in one message, the order of the letters may vary in different occurrences of the same word. Each message contains many words which are not ``true\'\' words in that they carry no meaning (like err.., umm.., etc in English). Every true word in the message contains at least two and no more than 250 letters, overlaps with another true word, and is repeated somewhere in the message (possibly with the letters in a different order). In the example above, wr and rx would both be true words if wr or rw, and rx or xr, occurred as words elsewhere in the message. The word wt would be a true word if wt or tw occurred elsewhere in the message, overlapping another true word. <br><br>Write a program that will read in messages and print out a list of the different true words contained in each message (using the spelling which occurs first), in the order the words first appear in the message. If the first appearances of two words overlap, then the word that finishes first precedes the other. Remember that both the start and the end of the message count as spacer letters. Your program must be able to process messages of up to 1000 letters. <br>", input:"Input will consist of one or more messages. Each message will consist of one or more lines. Each line will be no more than 60 characters long and will contain a mixture of lower case letters and other characters. If the last character of a line is a dash (-) then the message continues on the next line. All characters other than lower case `a\' to `z\' form no part of the message. The file will be terminated by a line consisting of a single #. ", output:"Output will consist of the true words for each message, in the correct order as specified above, one word per line. Terminate the list for each message by a line consisting of a single *. ", sample_in:"dyj@ttdi%sdort^jdyt*rFnn  trlnsvkGHoalexotrjxzasvs-\nozgpsi&lt;>:pkelaovo,.;\'slnxt\'][-prsjlntrjo\naaaaaaa\n#", sample_out:"dyj\nortj\nlnsvkoalexot\n*\n*", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1, vtotal_submit:8, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1644, vid:1644, oj:"hdu", title:"Car Trialling", desc:"Car trialling requires the following of carefully worded instructions. When setting a trial, the organiser places traps in the instructions to catch out the unwary. <br><br>Write a program to determine whether an instruction obeys the following rules, which are loosely based on real car trialling instructions. BOLD-TEXT indicates text as it appears in the instruction (case sensitive),  separates options of which exactly one must be chosen, and .. expands, so A..D is equivalent to A  B  C  D . <br><br>instruction = navigational  time-keeping  navigational AND time-keeping <br><br>navigational = directional  navigational AND THEN directional <br><br>directional = how direction  how direction where <br><br>how = GO  GO when  KEEP <br><br>direction = RIGHT  LEFT <br><br>when = FIRST  SECOND  THIRD <br><br>where = AT sign <br><br>sign = &quot;signwords&quot; <br><br>signwords = s-word  signwords s-word <br><br>s-word = letter  s-word letter <br><br>letter = A..Z  . <br><br>time-keeping = record  change <br><br>record = RECORD TIME <br><br>change = cas TO nnn KMH <br><br>cas = CHANGE AVERAGE SPEED  CAS <br><br>nnn = digit  nnn digit <br><br>digit = 0..9 Note that s-word and nnn are sequences of letters and digits respectively, with no intervening spaces. There will be one or more spaces between items except before a period (.), after the opening speech marks or before the closing speech marks. <br>", input:"Each input line will consist of not more than 75 characters. The input will be terminated by a line consisting of a single #. ", output:"The output will consist of a series of sequentially numbered lines, either containing the valid instruction, or the text Trap! if the line did not obey the rules. The line number will be right justified in a field of 3 characters, followed by a full-stop, a single space, and the instruction, with sequences of more than one space reduced to single spaces. ", sample_in:"KEEP LEFT AND THEN GO RIGHT\nCAS TO 20 KMH\nGO FIRST       RIGHT AT \"SMITH ST.\"  AND   CAS TO 20 KMH\nGO 2nd RIGHT\nGO LEFT AT \"SMITH STREET AND RECORD TIME\nKEEP RIGHT AND THEN RECORD TIME\n#", sample_out:"  1. KEEP LEFT AND THEN GO RIGHT\n  2. CAS TO 20 KMH\n  3. GO FIRST RIGHT AT \"SMITH ST.\" AND CAS TO 20 KMH\n  4. Trap!\n  5. Trap!\n  6. Trap!", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1, vtotal_submit:10, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1645, vid:1645, oj:"hdu", title:"Calculator Language", desc:"Calculator Language (CL) supports assignment, positive and negative integers and simple arithmetic. The allowable characters in a CL statement are thus: <br><br><img src=data/images/1645-1.gif><br><br>All operators have the same precedence and are right associative, thus 15 - 8 - 3 = 15 - (8 - 3) = 10. As one would expect, brackets will force the expression within them to be evaluated first. Brackets may be nested arbitrarily deeply. An expression never has two operators next to each other (even if separated by a bracket), an assignment operator is always immediately preceded by a variable and the leftmost operator on a line is always an assignment. For readability, spaces may be freely inserted into an expression, except between a negative sign and a number. A negative sign will not appear before a variable. All variables are initialised to zero (0) and retain their values until changed explicitly. <br><br>Write a program that will accept and evaluate expressions written in this language. Each expression occupies one line and contains at least one assignment operator, and maybe more. <br>", input:"Input will consist of a series of lines, each line containing a correct CL expression. No line will be longer than 100 characters. The file will be terminated by a line consisting of a single #. ", output:"Output will consist of a series of lines, one for each line of the input. Each line will consist of a list of the final values of all variables whose value changes as a result of the evaluation of that expression. If more than one variable changes value, they should be listed in alphabetical order, separated by commas. If a variable changes value more than once in an expression, only the final value is output. A variable is said to change value if its value after the expression has been evaluated is different from its value before the expression was evaluated. If no variables change value, then print the message `No Change\'. Follow the format shown below exactly. ", sample_in:"A = B = 4\nC = (D = 2)*_2\nC = D = 2 * _2\nF = C - D\nE = D * _10\nZ = 10 / 3\n#", sample_out:"A = 4, B = 4\nC = -4, D = 2\nD = -4\nNo Change\nE = 40\nZ = 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4, vtotal_submit:15, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1646, vid:1646, oj:"hdu", title:"Network Wars", desc:"It is the year 2126 and comet Swift-Tuttle has struck the earth as predicted. The resultant explosion emits a large cloud of high energy neutrons that eliminates all human life. The accompanying electro-magnetic storm causes two unusual events: many of the links between various parts of the electronic network are severed, and some postgraduate AI projects begin to merge and mutate, in much the same way as animal life did several million years ago. In a very short time two programs emerge, Paskill and Lisper, which move through the network marking each node they visit: Paskill activates a modified Prolog interpreter and Lisper activates the `Hello World\' program. However `Hello World\' has mutated into an endless loop that so ties up the node that no other program, not even Lisper, can re-enter that node and the Prolog interpreter immediately reverse compiles (and destroys) any program that enters. However, Paskill knows which nodes it has visited and never tries to re-enter them. Thus if Lisper attempts to enter a node already visited by Paskill it will be annihilated; neither can enter a node already visited by Lisper, if either (or both) cannot move both will halt and if they ever arrive at a node simultaneously they annihilate each other. Both programs move through the network at the same speed. <br><br><br>Write a program to simulate these events. All nodes in the the network are labelled with a single uppercase letter as shown below. When moving to the next node, Paskill searches alphabetically forwards from the current node, whereas Lisper searches alphabetically backwards from the current node, both wrapping round if necessary. Thus, (in the absence of the other) if Paskill enters the network below at A, it would visit the nodes in the order A, B, C, D, G, H, E, F; if Lisper enters the network at H it would visit them in the order H, G, E, F. Simulation stops when one or more of the above events occurs. If more than one event occurs, mention Paskill first. <br><br><img src=data/images/1646-1.gif><br>", input:"Input will consist of a series of lines. Each line will describe a network and indicate the starting nodes for the two programs. A network is described as a series of nodes separated by `;\' and terminated by a period (`.\'). Each node is described by its identifier, a `:\' and one or more of the nodes connected to it. Each link will be mentioned at least once, as will each node, although not all nodes will be `described\'. After the period will appear the labels of the starting nodes--first Paskill and then Lisper. No line will contain more than 255 characters. The file will be terminated by a line consisting of a single #. ", output:"Output will consist of one line for each network. Each line will specify the terminating event and the node where it occurs. The terminating event is one or two of the following: <br><br><br>Lisper destroyed in node ?<br>{Paskill/Lisper} trapped in node ?<br>Both annihilated in node ? <br>", sample_in:"A:BD;C:BD;F:E;G:DEH;H:EG. A H\nE:AB. A B\nB:ACD. B D\nA:B;B:C;D:E. A D\n#", sample_out:"Paskill trapped in node D Lisper trapped in node F\nBoth annihilated in node E\nLisper destroyed in node B\nLisper trapped in node E", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1, vtotal_submit:8, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1647, vid:1647, oj:"hdu", title:"Strategy", desc:"A well known psychology experiment involves people playing a game in which they can either trade with each other or attempt to cheat the other player. If both players TRADE then each gains one point. If one TRADEs and the other CHEATs then the TRADEr loses 2 points and the CHEATer wins 2. If both CHEAT then each loses 1 point. <br><br><br>There are a variety of different strategies for playing this game, although most people are either unable to find a winning strategy, or, having decided on a strategy, do not stick to it. Thus it is fairer to attempt to evaluate these strategies by simulation on a computer. Each strategy is simulated by an automaton. An automaton is characterised by a program incorporating the strategy, a memory for previous encounters and a count reflecting the score of that automaton. The count starts at zero and is altered according to the above rules after each encounter. The memory is able to determine what happened on up to the last two encounters with each other contender. <br><br><br>Write a program that will read in details of up to 10 different strategies, play each strategy against each other strategy 10 times and then print out the final scores. Strategies will be in the form of simple programs obeying the following grammar: <br><br><br>&lt;program&gt; ::= &lt;statement&gt;. <br>&lt;statement&gt; ::= &lt;command&gt;  &lt;ifstat&gt; <br>&lt;ifstat&gt; ::= IF &lt;condition&gt; THEN &lt;statement&gt; ELSE &lt;statement&gt; <br>&lt;condition&gt; ::= &lt;cond&gt;  &lt;cond&gt; &lt;op&gt; &lt;condition&gt; <br>&lt;op&gt; ::= AND  OR <br>&lt;cond&gt; ::= &lt;memory&gt; {=  #} {&lt;command&gt;  NULL} <br>&lt;memory&gt; ::= {MY  YOUR} LAST {1  2} <br>&lt;command&gt; ::= TRADE  CHEAT <br>Note that LAST1 refers to the previous encounter between these two automata, LAST2 to the encounter before that and that `MY\' and `YOUR\' have the obvious meanings. Spaces and line breaks may appear anywhere in the program and are for legibility only. The symbol `#\' means `is not equal to\'. NULL indicates that an encounter has not ocurred. The following are valid programs: <br><br><br>CHEAT.<br>IF MY LAST1 = CHEAT THEN TRADE ELSE CHEAT.<br>IFYOURLAST2=NULLTHENTRADEELSEIFYOURLAST1=TRADETHENTRADE<br>ELSECHEAT.<br>", input:"Input will consist of a series of programs. Each program will be no longer than 255 characters and may be split over several lines for convenience. There will be no more than 10 programs. The file will be terminated by a line containing only a single `#\'. <br><br>", output:"Output will consist of one line for each line of input. Each line will consist of the final score of the relevant program right justified in a field of width 3. ", sample_in:"CHEAT.\nIF MY LAST1 = CHEAT THEN TRADE ELSE CHEAT.\nIFYOURLAST2=NULLTHENTRADEELSEIFYOURLAST1=TRADETHENTRADE\nELSECHEAT.\n#", sample_out:"  1\n-12\n-13", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2, vtotal_submit:6, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1648, vid:1648, oj:"hdu", title:"Keywords ", desc:"Many researchers are faced with an ever increasing number of journal articles to read and find it difficult to locate papers of relevance to their particular lines of research. However, it is possible to subscribe to various services which claim that they will find articles that fit an `interest profile\' that you supply, and pass them on to you. One simple way of performing such a search is to determine whether a pair of keywords occurs `sufficiently\' close to each other in the title of an article. The threshold is determined by the researchers themselves, and refers to the number of words that may occur between the pair of keywords. Thus an archeologist interested in cave paintings could specify her profile as ``0 rock art\'\', meaning that she wants all titles in which the words ``rock\'\' and ``art\'\' appear with 0 words in between, that is next to each other. This would select not only ``Rock Art of the Maori\'\' but also ``Pop Art, Rock, and the Art of Hang-glider Maintenance\'\'. <br><br><br>Write a program that will read in a series of profiles followed by a series of titles and determine which of the titles (if any) are selected by each of the profiles. A title is selected by a profile if at least one pair of keywords from the profile is found in the title, separated by no more than the given threshold. For the purposes of this program, a word is a sequence of letters, preceded by one or more blanks and terminated by a blank or the end of line marker. <br><br>", input:"Input will consist of no more than 50 profiles followed by no more than 250 titles. Each profile and title will be numbered in the order of their appearance, starting from 1, although the numbers will not appear in the file. <br><br><br>Each profile will start with the characters ``P:\'\', and will consist of a number representing a threshold, followed by two or more keywords in lower case.<br>Each title will start with the characters ``T:\'\', and will consist of a string of characters terminated by ``|\'\'. The character ``|\'\' will not occur anywhere in a title except at the end. No title will be longer than 255 characters, and if necessary it will flow on to more than one line. No line will be longer than eighty characters and each continuation line of a title will start with at least one blank. Line breaks will only occur between words. <br><br>All non-alphabetic characters are to be ignored, thus the title ``Don\'t Rock -- the Boat as Metaphor in 1984\'\' would be treated as ``Dont Rock the Boat as Metaphor in\'\' and ``HP2100X\'\' will be treated as ``HPX\'\'. The file will be terminated by a line consisting of a single #. <br><br>", output:"Output will consist of a series of lines, one for each profile in the input. Each line will consist of the profile number (the number of its appearance in the input) followed by ``:\'\' and the numbers of the selected titles in numerical order, separated by commas and with no spaces. ", sample_in:"P: 0 rock art\nP: 3 concepts conceptions\nP: 1   art rock   metaphor concepts\nT: Rock Art of the Maori|\nT: Jazz and Rock - Art Brubeck and Elvis Presley|\nT: Don\'t Rock --- the Boat as Metaphor in 1984, Concepts\n   and (Mis)-Conceptions of an Art Historian.|\nT: Carved in Rock, The Art and Craft of making promises\n   believable when your `phone bills have gone\n   through the roof|\n#", sample_out:"1: 1,2\n2: \n3: 1,2,3,4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4, vtotal_submit:53, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1649, vid:1649, oj:"hdu", title:"City Navigation", desc:"Most US cities are constructed according to a very simple plan--they have Avenues running north and south, and Streets running east and west, enclosing square blocks. Avenues and Streets are numbered, with numbers increasing westward and southward. There are 50 driveways on each side of a block, numbered 00 to 98 on one side and 01 to 99 on the other. House numbers increase in the same directions as Street and Avenue numbers. If you are travelling in the direction of increasing numbers then odd numbers are on your right. Thus the house at 1288 16th Street (S16 1288) is located on 16th Street, west of 12th Avenue and east of 13th Avenue, and is on the right-hand side going east. The residence described as A11 1543 lies on 11th Avenue, south of 15th Street and north of 16th Street, and is on the right-hand side going south. Both of these are marked on the following typical street map: <br><br>Quiet suburbs are formed by the simple expedient of making some Avenues and Streets discontinuous as shown above. Note that Avenues and Streets keep the same name, even when there are places where they simply don\'t exist. It is difficult to get lost in such a city, as the address tells you exactly where to go. However, if you don\'t know the pattern of missing portions, you can spend a lot of time going into dead-end roads. <br><br><br>Write a program that will firstly read in a description of the `missing\' areas in a city and then a series of pairs of addresses, where an address is assumed to specify a driveway not necessarily a residence. For each pair of addresses the program must calculate the distance between them, by the shortest legal route. The distance is the number of driveways you pass (on your side of the road) excluding the source and destination. You may make the following assumptions: <br><br><img src=data/images/1649-1.gif> <br>You drive on the right hand side of the road.<br>You may not cross a lane of traffic except at an intersection, that is you must turn right when entering or leaving a driveway.<br>Driveways are located in the centres of their sections.<br>U-turns are illegal except at the end of cul de sacs.<br>Streets and Avenues are numbered from 00 to 49 and there are no roads beyond these bounds; however there are driveways on both sides of the bounding roads.<br>Sections on corners have two driveways.<br>A route exists between any pair of driveways. <br><br>", input:"Input will be divided into two portions: a ``missing road\'\' portion and an address portion, each terminated by a line consisting of a single `#\'. The ``missing road\'\' portion consists of a series of lines with each line containing a road identifier and a pair of house numbers. A road identifier is an `A\' or an `S\' (specifying an Avenue or a Street) followed by a number in the range 00 to 49. A house number is an even number in the range 0000 to 4898. The area between and including the specified numbers on the identified road is inaccessible. Note that the line goes directly across the street, thus if number 1612 is inaccessible, then so is 1613. Inaccessible portions run from the borders of sections not from driveways. There will be exactly one space separating parts of the input. <br><br><br>The address portion consists of a series of lines each line containing two addresses. An address is a road identifier (as above) followed by a number in the range 0000 to 4899. There will be exactly one space separating parts of the input. <br><br>", output:"Output consists of a series of lines, one for each line in the address portion of the input file. Each line contains the distance between the two houses specified in the input (the number of driveways passed) written as an integer, left justified. <br><br><br><br>Note: The following sample data matches the diagram on previous page. (Note the intersection of A13 and S17). <br>", sample_in:"A11 1612 1720\nA12 1508 1636\nS16 1152 1250\nS17 1048 1134\nS17 1272 1326\n#\nS16 1288 A11 1543\n#", sample_out:"213", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:11, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1650, vid:1650, oj:"hdu", title:"Eeny Meeny", desc:"In darkest &lt;name of continent/island deleted to prevent offence&gt; lived a tribe called the ``Eeny Meenys\'\'. They got this name from their way of choosing a chief for a year. It appears that a newspaper reporter visited the tribe and managed to get across a few ideas of civilisation, but apparently came to an unfortunate end before finishing the job. Thus the tribe no longer had a permanent chief; the chief\'s term was exactly one year. At the end of that time, they ate the current chief, and chose another chief. Their method of choosing a chief was the ``Eeny meeny miny mo\'\' method. All eligible tribal members (women were also eligible--one of the blessings of civilisation the tribe had adopted) stood in a circle, a starting place was chosen, and the chief medicine man (who was ineligible for chieftainship) went around counting out `E\', `e\', `n\', `y\', `M\', `e\', `e\', `n\', `y\', `M\',`i\', `n\', `y\', `M\', `o!\', `E\', `e\', `n\', `y\', `M\', `e\', `e\', `n\', `y\', `M\', `i\', `n\', `y\', `M\', `o!\', .... At every `o!\', the person indicated was pushed out of the circle which then closed up and the count restarted with his neighbour (the one who would have been `E\' anyway). This process continued until only one was left--the new chief. <br><br><br>While the chance of glory for a year makes the job of chief highly attractive to tribal members, you (possessing a computer decades before they were invented) find the brevity of the glory unappealing. You have managed to find out that the count this year will start with Mxgobgwq (a very large person), so you would like to know where not to stand. You don\'t know the direction, nor how many eligible people there are, but you can estimate the number (it is certainly less or equal than 1000000). <br><br><br>Write a program that will determine the `first\' (i.e. closest to Mxgobgwq) safe position to stand, regardless of the actual number of people and the direction of count (clockwise or anti-clockwise). <br><br>", input:"Input will consist of a series of lines, each line containing the upper and lower estimates of the number of eligible people (both numbers inclusive). The file will be terminated by a line containing two zeroes (0 0). <br><br>", output:"Output will consist of a series of lines, one for each line of the input. Each line will consist of a single number giving the number of the position closest to Mxgobgwq that will not be chosen as chief for any number in the given range and for either direction of elimination. If no position is safe then print &quot;Better estimate needed&quot;. <br><br>", sample_in:"80 150\n40 150\n0 0", sample_out:"1\nBetter estimate needed", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:9, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1651, vid:1651, oj:"hdu", title:"Hearts  ", desc:"There are 52 playing cards in a pack, divided into suits, and, within suits, into denominations. The suits are (in order, lowest to highest) Clubs, Diamonds, Hearts and Spades, abbreviated C, D, H and S. The 13 denominations (or face values) are (from lowest to highest): 2, 3, 4, 5, 6, 7, 8, 9, 10 (T), Jack (J), Queen (Q), King (K) and Ace(A). A higher card will beat a lower card in the same suit, but will not usually beat any other card in a different suit. An exception to this is the `trump\' suit--if a suit is designated to be a trump suit (by whatever means the rules of the game allow), then any card of that suit will beat any card of any other suit. <br><br><br>A simplified version of an old card game called Hearts is played as follows. The dealer deals cards clockwise, one by one, face downward, to four other players and himself, starting with the player on his left, who thus gets the first card, followed by the sixth, and so on, while the dealer gets the fifth card, followed by the tenth, and so on. When each player has 10 cards there will be two left--these are exposed and the suit of the one of higher denomination determines the trump suit. If there is a tie, then the highest ranking suit becomes the trump suit. <br><br><br>A `game\' consists of 10 `tricks\', each containing 5 cards, one from each player. For each trick, one player `leads\', i.e. plays a card face up on the table, the rest of the players then `follow\', in clockwise order. The player to the dealer\'s left leads to the first trick, thereafter the winner of each trick leads to the next trick. A player must follow suit if possible, i.e. play a card of the same suit as the one lead. If he cannot, then he must trump it (play a card of the designated trump suit). If he cannot trump it (because he has no cards in the trump suit), he discards a card. If a trick is trumped, then the person playing the highest trump wins the trick, otherwise the person playing the highest card of the correct suit wins it. <br><br><br>Strategies are as follows: <br><br><br>Leader: The leader always plays the highest card in his hand. If there is a tie and one of the cards is a trump card, then he leads the trump, otherwise he plays the highest ranking suit.<br>Follower: If possible he must play the highest card in his hand of the correct suit. If he has no cards in that suit then he plays the highest trump he has. If he cannot trump it he plays the highest card in his hand, breaking ties as previously specified. <br>When all the tricks have been played, each player examines the tricks he has taken and scores the face value of any Heart he has (Jack counts 11, Queen counts 12, King counts 13 and Ace counts 14). This score is recorded. <br><br><br>Write a program to simulate the playing of this game. <br><br>", input:"Input will consist of a series of decks of cards, each deck spread over four lines as shown below. The file will be terminated by a line consisting of a single #. ", output:"Output will consist of a series of lines, one for each deck in the input. Each line will consist of 5 numbers reflecting the scores of the individual players, starting with the dealer and proceeding clockwise through the rest of the players. Each score will consist of a number right justified in a field of width 3. ", sample_in:"TS QC 8S 8D QH 2D 3H KH 9H 2H TH KS KC\n9D JH 7H JD 2S QS TD 2C 4H 5H AD 4D 5D\n6D 4S 9S 5S 7S JS 8H 3D 8C 3S 4C 6S 9C\nAS 7C AH 6H KD JC 7D AC 5C TC QD 6C 3C\n#", sample_out:" 22  0 68  0 14", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2, vtotal_submit:8, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1652, vid:1652, oj:"hdu", title:"Bonus Bonds", desc:"The government of Impecunia does not levy any taxes, instead it raises money by the (sometimes forced) sale of Bonus Bonds. Originally the Bonds were numbered using a 7 digit number prefixed by a one digit code in the range 1 to 9 representing the region of Impecunia in which the bond was sold. However the scheme has proved so popular that the numbering scheme has been extended by a further two digits. To retain compatibility with the previous scheme, the 8th digit from the right (the third from the left) still designates the region of sale. At the same time, a `central\' region was created and has been given the designation 0. For security reasons no bond may be numbered with a number consisting entirely of zeroes, thus, although the original bonds all started from zero (since the region code was non-zero), the bonds from the central region start from 0000000001. <br><br><br>Each month, the winning numbers are drawn for each region independently. The equipment generates a stream of single digits and it would appear to be simple enough to collect these together in groups of ten and compare the results with the list of Bond-holders. However, the equipment is a little antiquated and is liable to various breakdowns, thus it is desirable to only generate numbers that lie within the allocated range and with the same distributions of digits at each position as would be found by examining all the bonds sold for that region. Thus if we wish to draw N numbers for a given region, the equipment is set to generate 10 streams of N digits, one for each position. The first winning number is then made up by taking the first digit from each stream, the second winning number is composed of the second digit in each stream, and so on. For each stream, the equipment is adjusted so that the distribution of digits it generates closely matches the actual distributions of digits in that position on the allocated Bonds. The state auditors generate a table of these distributions so that the two may be compared. <br><br><br>Write a program that will generate the table for the state auditors for any given draw. For each region, the program will read the serial number of the next bond to be sold in that region so that it can calculate the distributions. Since the output is voluminous, your program will only need to print the digit distribution for a particular digit position. <br><br>", input:"Input will consist of a series of lines, each line consisting of a ten digit number representing the next bond number to be sold in a particular region and an integer in the range 1 to 10 representing the desired character position. It is possible that some regions will appear more than once in the input stream, and that others will not appear at all. The file will be terminated by a line consisting of 0000000000 0. <br><br>", output:"Output will consist of a series of tables, one for each line of the input. Each table will consist of ten rows, one for each digit in the range 0 to 9. Each row will consist of a single number giving the numbers of times that digit appears in the sequence numbers at the desired position. Each number will be right justified in a field of width 11. Separate tables by one blank line. <br><br>", sample_in:"4810000000 1\n0000000000 0", sample_out:"  100000000\n  100000000\n  100000000\n  100000000\n   80000000\n          0\n          0\n          0\n          0\n          0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:19, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1653, vid:1653, oj:"hdu", title:"Laser Lines", desc:"A computer chip manufacturer has discovered a new way to combine opto-electronics and ordinary electronics by forming light-emitting and receiving nodes on the surface of the chip. These can be used to send messages to each other in a direct line-of-sight manner, thereby speeding up operation considerably by allowing a much greater density of information transfer. One difficulty is that the nodes must all be able to send messages to each other; no node should block the line-of-sight between two other nodes. The manufacturing method ensures that the nodes will be positioned exactly on the points of a lattice covering the chip, so their coordinates are given by integers between 0 and 9999 (inclusive) except that for technical reasons no node can appear at point (0, 0). <br><br><br>Write a program that will read in sets of coordinates of these nodes and determine whether any of them lie on lines containing three or more nodes. Because of the layout method used, it is envisaged that there may well be several lines containing three nodes, but that `longer\' lines will be increasingly rare. However, no line will contain more than 10 points. <br><br>", input:"Input will consist of a series of data sets, each set containing the coordinates of between 3 and 300 points (both inclusive). Each set will start on a new line. <br><br>The coordinates will be pairs of integers in the range 0 to 9999 and each set will be terminated by a pair of zeroes (0 0). Successive numbers will be separated by one or more spaces; in addition a data set may be split into several lines, such splits will only occur between coordinate pairs and never between the elements of a coordinate pair. The entire file will also be terminated by a pair of zeroes (0 0). <br><br>Note that there will be several test cases, but only one will contain more than 100 points.<br>", output:"Output, for each set, is either the message &quot;No lines were found&quot;, or the message &quot;The following lines were found:&quot;, followed by the sets of points lying on straight lines, each set ordered first by x, and if the x\'s are equal, then by y. <br><br>All coordinates are in a field of width 4, and are separated by a comma; the points are delimited by brackets, with no spaces between successive points. The lines themselves are ordered in a similar manner to the points on each line; i.e. by considering the first point on each line, and if more than one line starts at that point, by considering the second point on the line. <br><br>", sample_in:"  5 5 8 7 14 11 4 8   20 15\n12 6  18 21 0  0\n5 5 8 8 14 13 0 0\n5 5 25 17 20 23 10 11 20 14 15 11 0 0\n0 0", sample_out:"The following lines were found: \n(   4,   8)(   8,   7)(  12,   6)\n(   5,   5)(   8,   7)(  14,  11)(  20,  15)\n(  12,   6)(  14,  11)(  18,  21)\nNo lines were found\nThe following lines were found: \n(   5,   5)(  10,  11)(  20,  23)\n(   5,   5)(  15,  11)(  20,  14)(  25,  17)", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:20, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1654, vid:1654, oj:"hdu", title:"Roman Numerals", desc:"The original system of writing numbers used by the early Romans was simple but cumbersome. Various letters were used to represent important numbers, and these were then strung together to represent other numbers with the values decreasing monotonically from left to right. The letters they used and the numbers that were represented are given in the following table.<br>I&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;V&nbsp;5&nbsp;<br>X&nbsp;10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;L&nbsp;50&nbsp;<br>C&nbsp;100&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;D&nbsp;500&nbsp;<br>M&nbsp;1000&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>Thus 1993 was written as MDCCCCLXXXXIII. This system was then superseded by a partially place-oriented system, whereby if the above rule of decreasing values was broken, it meant that the immediately preceding (lower) value was deemed to be `negative\' and was subtracted from the higher (out of place) value. In this system 1993 was usually written as MCMXCIII. There is still some controversy as to which letters could precede which other letters, but for the purposes of this problem we will assume the following restrictions: <br><br><br>1. <br>A letter from the left column can never appear more than three times in a row, and there can never be more than one other occurrence of that letter. <br><br>2. <br>A letter from the right column can never appear more than once. <br><br>3. <br>Once a letter has been used in a `negative\' position, all subsequent characters (apart from the one immediately following) may not be greater than that character. <br>Thus we could write MXMIII for 1993 or CCXCIV for 294, however we could not write ILV for 54, nor could we write LIL for 99. Note that 299 could be written as CCXCIX or CCIC <br><br><br><br>Given a Roman sum, we can either interpret it as such or as an encoding of an Arabic sum. Thus V+V=X could be interpreted as an ambiguous encoding of an Arabic sum with V  {1, 2, 3, 4} and X = 2 * V. Similarly, X+X=XX could be interpreted as a correct Roman sum but an impossible Arabic encoding (apart from the trivial encoding X = 0) and XX+XX=MXC as an incorrect Roman sum, but a valid encoding with M = 1, X = 9, and C = 8. <br><br><br><br>Write a program that will read in sums in Roman numerals and determine whether or not they are correct as Roman sums and also whether they are impossible, ambiguous or valid as Arabic encodings. Assume that zero will never appear on its own or as a leading digit, and that no two Roman numerals map onto the same Arabic digit. <br><br>", input:"Input will consist of a series of lines, each line consisting of an apparent Roman sum, i.e. a valid Roman number, a plus sign (+), another valid Roman number, an equal sign (=) and another valid Roman number. No Roman number will contain more than 9 letters. The file will be terminated by a line consisting of a single #. ", output:"Output will consist of a series of lines, one for each line of the input, and each containing two words. The first word will be one of (Correct, Incorrect) depending on whether the Roman sum is or is not correct. The second word will be separated from the first by exactly one space and will be one of the set (impossible, ambiguous, valid) depending on the Arabic sum. ", sample_in:"V+V=X\nX+X=XX\nXX+XX=MXC\n#", sample_out:"Correct ambiguous\nCorrect impossible\nIncorrect valid", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:25, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1655, vid:1655, oj:"hdu", title:"Pascal Program Lengths", desc:"Your local computer user\'s group publishes a quarterly newsletter, and in each issue there is a small Turbo Pascal programming problem to be solved by the membership. Members submit their solutions to the problem to the newsletter editor, and the member submitting the shortest solution to the problem receives a prize. <br><br><br>The length of a program is measured in units. The unit count is determined by counting all occurrences of reserved words, identifiers, constants, left parentheses, left brackets, and the following operators: +, -, *, /, =, &lt;, &gt;, &lt;=, &gt;=, &lt;&gt;, @, ^, and :=. Comments are ignored, as are all other symbols not falling into one of the categories mentioned above. The program with the lowest unit count is declared the winner. Two or more programs with equal unit counts split the prize for the quarter. <br><br><br>In an effort to speed the judging of the contest, your team has been asked to write a program that will determine the length of a series of Pascal programs and print the number of units in each. <br><br>", input:"Input to your program will be a series of Turbo Pascal programs. Each program will be terminated by a line containing tilde characters in the first two columns, followed by the name of the submitting member. Each of these programs will be syntactically correct and use the standard symbols for comments (braces) and subscripts (square brackets). <br><br>", output:"For each program, you are print a separate line containing the name of the submitting member and the unit count of the program. Use a format identical to that of the sample below.", sample_in:"PROGRAM SAMPLEINPUT;\n\nVAR\n  TEMP : RECORD\n    FIRST, SECOND : REAL;\n    END;\n\nBEGIN {Ignore this }\nTEMP.FIRST := 5.0E-2;\nREADLN (TEMP.SECOND); \nWRITELN (\'THE ANSWER IS\', TEMP.FIRST * TEMP.SECOND : 7 : 3)\nEND.\n~~A. N. Onymous", sample_out:"Program by A. N. Onymous contains 29 units.\n\n\nNote: Here are some additional notes on Turbo Pascal for those not familiar with the language: \n\nIdentifiers start with an underscore (_) or a letter (upper or lower case) which is followed by zero or more characters that are underscores, letters or digits.\nThe delimiter for the beginning and ending of a string constant is the single forward quote (\'). Each string is entirely on a single source line (that is a string constant cannot begin on one line and continue on the next). If \'\' appears within a string then it represents a single \' character that is part of the string. A string constant consisting of a single \' character is, therefore, represented by \'\'\'\' in a Turbo Pascal program. The empty string is allowed.\nThe most general form of a numeric constant is illustrated by the constant 10.56E-15. The 10 is the integral part (1 or more digits) and is always present. The .56 is the decimal part and is optional. The E-15 is the exponent and it is also optional. It begins with an upper or lower case E, which is followed by a sign (+ or -). The sign is optional.\nTurbo Pascal supports hexadecimal integer constants which consist of a $ followed by one or more hex digits (`0\' to `9\', `a\' to `f\', `A\' to `F\'). For example, $a9F is a legal integer constant in Turbo Pascal.\nThe only comment delimiters that you should recognise are {}, and not (**). Comments do not nest.\n`+\' and `-\' should be considered as operators wherever possible. For example in \nx := -3 the `-\' and the `3\' are separate tokens.\nSubranges of ordinal types can be expressed as lower..upper. For example, 1..10 is a subrange involving the integers from 1 to 10.\nAll tokens not mentioned anywhere above consist of a single character. ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:79, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1656, vid:1656, oj:"hdu", title:"Synchronous Design ", desc:"The designers of digital integrated circuits (IC) are very concerned about the correctness of their designs because, unlike software, ICs cannot be easily tested. Real tests are not possible until the design has been finalized and the IC has been produced. <br><br><br>To simulate the behavior of a digital IC and to more or less guarantee that the final chip will work, all of today\'s digital ICs are based on a synchronous design. <br><img src=data/images/1656-1.gif><br>Figure: The critical path (dashed line) takes 43ns to settle<br>In a synchronous design, an external clock signal triggers the IC to go from a well defined and stable state to the next one. On the active edge of the clock, all input and output signals and all internal nodes are stable in either the high or low state. Between two consecutive edges of the clock, the signals and nodes are allowed to change and may take any intermediate state. The behavior of a synchronous network is predictable and will not fail due to hazards or glitches introduced by irregularities of the real circuit. <br><br><br>To analyze whether an IC has a synchronous design, we distinguish between synchronous and  . Flip flops are synchronous nodes. On the active edge of the clock, the output of the flip flop changes to the state of the input and holds that state throughout the next clock cycle. Synchronous nodes are connected to the clock signal. <br><br><br>Simple gates like ANDs or ORs are asynchronous nodes. Their output changes - with a short delay - whenever one of their inputs changes. During that transition phase, the output can even go into some undefined or intermediate state. <br><br><br>For simplicity, we assume that all inputs of the circuits are directly connected to the output of a synchronous node outside the circuit and that all outputs of the circuit are directly connected to the input of a synchronous node outside the circuit. <br><br>For an IC to have a synchronous design, mainly two requirements must be met: <br><br><br>The  introduced between two synchronous nodes must be smaller or equal than the clock period so there is enough time for nodes to become stable. In figure 1, the round-ended boxes are asynchronous nodes whereas the square boxes are synchronous nodes. The delay introduced on the dashed path is 43ns and exceeds the given clock period of 30ns.<br>There may be  composed exclusively of asynchronous nodes. In the real circuit such cycles could oscillate. In figure 2, the dashed path constitutes a cycle of asynchronous nodes. <br>Figure 3 shows a circuit with a synchronous design. It does not contain cycles composed of asynchronous nodes and the longest path between two synchronous nodes is shorter than the clock period of 30ns. <br><img src=data/images/1656-2.gif> <br>Figure: The design contains a cycle (dashed line)<br><img src=data/images/1656-3.gif> <br>Figure: A synchronous design<br>Your are to write a program that decides for a given IC whether it has a synchronous design or not. You are given a network of synchronous and asynchronous nodes, a delay for each node, some inputs and outputs and the clock period. <br><br>You may safely assume that <br><br><br>the delays introduced between any input and any output of the same node are equal, i.e. equal to the delay given for that node,<br>synchronous nodes have no delay at all,<br>all connections between two nodes connect an output to an input. <br><br><br><br>", input:"The input file contains several circuits. The first line gives the number of circuits in the file. <br><br><br>For each circuit in the file, the first line contains the clock period for the circuit, given as an integer number in nanoseconds. The next line gives the number of nodes. The following lines each contain a node, described by a letter and a integer number. The letter is \'i\' for an input, \'o\' for an output, \'a\' for an asynchronous node and \'s\' for a synchronous node. The number gives the delay introduced by the node as an integer number in nanoseconds (only meaningful for an asynchronous node). Nodes are implicitly numbered, starting at zero. <br><br>After the nodes, the number of connections for the circuit follows. Each following line contains a pair of integer numbers denoting a connection between the output and the input of two nodes. The connection links an output of the node given by the first number and an input of the node given by the second number. <br><br><br>The clock signal is not given in the input file. We assume that all synchronous nodes are properly connected to the clock signal.<br>", output:"For each circuit in the input file, your output file should contain a line with one of the following messages: <br><br><br>&quot;Synchronous design. Maximum delay: &lt;ss&gt;.&quot; if the circuit has a synchronous design. <br>&lt;ss&gt; should be replaced by the longest delay found on any path between two synchronous nodes.<br><br>&quot;Circuit contains cycle.&quot; if the circuit contains a cycle composed exclusively of asynchronous nodes.<br>&quot;Clock period exceeded.&quot; if there is a path between two synchronous nodes that is longer than the given clock period and there are no cycles composed of asynchronous nodes. <br>", sample_in:"1\n30\n10\ni 0\ni 0\ni 0\ni 0\no 0\no 0\na 9\na 11\na 8\ns 0\n9\n0 8\n1 7\n2 6\n3 6\n6 7\n7 8\n8 4\n7 9\n9 5", sample_out:"Synchronous design. Maximum delay: 28.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:8, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
No Such Problem Called HDU 1657.<br>
{pid:1658, vid:1658, oj:"hdu", title:"Triangle  ", desc:"A triangle is a basic shape of planar geometry. It consists of three straight lines and three angles in between. Figure 1 shows how the sides and angles are usually labeled.<br><center><img src=data/images/1658-6.gif></center><br>Figure: Triangle<br><center><img src=data/images/1658-1.gif><br><img src=data/images/1658-2.gif><br><img src=data/images/1658-3.gif><br><img src=data/images/1658-4.gif><br><img src=data/images/1658-5.gif></center><br>The values of a, b, c,  ,  , and  form a set of six parameters that fully define a triangle. If a large enough subset of these parameters is given, the missing ones can be calculated by using the formulas above. <br><br><br>You are to write a program that calculates the missing parameters for a given subset of the six parameters of a triangle. For some sets of parameters, it is not possible to calculate the triangle because either too few is known about the triangle or the parameters would lead to an invalid triangle. The sides of a valid triangle are greater than 0 and the angles are greater than 0 and less than  . Your program should detect this case and output: &quot;Invalid input.&quot; The same phrase should be output if more than the minimal set needed to compute the triangle is given but the parameters conflict with each other, e.g. all three angles are given but their sum is greater than  . <br><br><br>Other sets of parameters can lead to more than one but still a finite number of valid solutions for the triangle. In such a case, your program should output: &quot;More than one solution.&quot; <br><br>In all other cases, your program should compute the missing parameters and output all six parameters<br><br><br><br>", input:"The first line of the input file contains a number indicating the number of parameter sets to follow. Each following line consists of six numbers, separated by a single blank character. The numbers are the values for the parameters a,  , b,  , c, and  respectively. The parameters are labeled as shown in figure 1. A value of -1 indicates that the corresponding parameter is undefined and has to be calculated. All floating-point numbers include at least eight significant digits. ", output:"Your program should output a line for each set of parameters found in the input file. If a unique solution for a valid triangle can be found for the given parameters, your program should output the six parameters a,  , b,  , c,  , separated by a blank character. Otherwise the line should contain the phrase <br><br>&quot;More than one solution.&quot; or <br><br>&quot;Invalid input.&quot; <br><br>as explained above. <br><br><br>The numbers in the output file should include at least six significant digits. Your calculations should be precise enough to get the six most significant digits correct (i.e. a relative error of 0.000001 is allowed). <br><br>", sample_in:"4\n47.9337906847 0.6543010109 78.4455517579 1.4813893731 66.5243757656 1.0059022695\n62.72048064 2.26853639 -1.00000000 0.56794657 -1.00000000 -1.00000000\n15.69326944 0.24714213 -1.00000000 1.80433105 66.04067877 -1.00000000\n72.83685175 1.04409241 -1.00000000 -1.00000000 -1.00000000 -1.00000000", sample_out:"47.933791 0.654301 78.445552 1.481389 66.524376 1.005902\n62.720481 2.268536 44.026687 0.567947 24.587225 0.305110\nInvalid input.\nInvalid input.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:35, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1659, vid:1659, oj:"hdu", title:"Spreadsheet", desc:"In 1979, Dan Bricklin and Bob Frankston wrote VisiCalc, the first spreadsheet application. It became a huge success and, at that time, was the killer application for the Apple II computers. Today, spreadsheets are found on most desktop computers. <br><br><br>The idea behind spreadsheets is very simple, though powerful. A spreadsheet consists of a table where each cell contains either a number or a formula. A formula can compute an expression that depends on the values of other cells. Text and graphics can be added for presentation purposes. <br><br><br>You are to write a very simple spreadsheet application. Your program should accept several spreadsheets. Each cell of the spreadsheet contains either a numeric value (integers only) or a formula, which only support sums. After having computed the values of all formulas, your program should output the resulting spreadsheet where all formulas have been replaced by their value. <br><img src=data/images/1659-1.gif><br>Figure: Naming of the top left cells<br>", input:"The first line of the input file contains the number of spreadsheets to follow. A spreadsheet starts with a line consisting of two integer numbers, separated by a space, giving the number of columns and rows. The following lines of the spreadsheet each contain a row. A row consists of the cells of that row, separated by a single space. <br><br><br>A cell consists either of a numeric integer value or of a formula. A formula starts with an equal sign (=). After that, one or more cell names follow, separated by plus signs (+). The value of such a formula is the sum of all values found in the referenced cells. These cells may again contain a formula. There are no spaces within a formula. <br><br>You may safely assume that there are no cyclic dependencies between cells. So each spreadsheet can be fully computed. <br><br><br>The name of a cell consists of one to three letters for the column followed by a number between 1 and 999 (including) for the row. The letters for the column form the following series: A, B, C, ..., Z, AA, AB, AC, ..., AZ, BA, ..., BZ, CA, ..., ZZ, AAA, AAB, ..., AAZ, ABA, ..., ABZ, ACA, ..., ZZZ. These letters correspond to the number from 1 to 18278. The top left cell has the name A1. See figure 1. <br><br>", output:"The output of your program should have the same format as the input, except that the number of spreadsheets and the number of columns and rows are not repeated. Furthermore, all formulas should be replaced by their value.", sample_in:"1\n4 3\n10 34 37 =A1+B1+C1\n40 17 34 =A2+B2+C2\n=A1+A2 =B1+B2 =C1+C2 =D1+D2", sample_out:"10 34 37 81\n40 17 34 91\n50 51 71 172", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:10, vtotal_submit:29, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1660, vid:1660, oj:"hdu", title:"Peter\'s Calculator", desc:"Unfortunately, Peter\'s Calculator broke down last week. Now Peter is left with his computer, which has no calculator application, and paper and pencil, which is too tiresome for an engineer. As one of Peter\'s friends, you are asked to write him a calculator application. After talking to him, you figure out the following: <br><br>Peter does only integer arithmetic. The operations he needs are addition, subtraction and multiplication.<br>He would like to use an arbitrary number of variables whose names are not longer than 50 characters.<br>His main way of doing calculations are to type in a few formulas and to assign them to variables. Some formulas are complicated expressions, which can refer to yet undefined variables, while other formulas consist of a single number. Then Peter asks for the value of some variables, i.e. he evaluates the formulas.<br>Peters wants to redefine some variables and then to reevaluate formulas that depend on these variables. <br>The input strictly adheres to the following syntax (given in EBNF): <br>file = line { line } &lt;EOF&gt;.<br>line = [ assignment | print | reset ] &lt;CR&gt;.<br>assignment = var &quot;:=&quot; expression.<br>print = &quot;PRINT&quot; var.<br>reset = &quot;RESET&quot;.<br>expression = term { addop term }.<br>term = factor { mulop factor }.<br>factor = &quot;(&quot; expression &quot;)&quot; | var | number.<br>addop = &quot;+&quot; | &quot;-&quot;.<br>mulop = &quot;*&quot;.<br>In the Extended Backus-Naur Formalism (EBNF), A = B C declares that the grammatical construct A consists of a B followed by a C . A = B | C means that A consists of a B or, alternatively, of a C . A = [ B ] defines construct A to be either a B or nothing and A = B tells you that A consists of the concatenation of any number of B\'s (including none). <br><br><br>The production var stands for the name of a variable, which starts with a letter followed by up to 49 letters or digits. Letters may be uppercase or lowercase. The production number stands for a integer number. The precise syntax for these productions are given below. The case of letters is important for both variables and statements. <br><br><br>var = letter { letter | digit }.<br>number = [ &quot;-&quot; ] digit { digit }.<br>letter = &quot;A&quot; | &quot;B&quot; | ... | &quot;Z&quot; | &quot;a&quot; | &quot;b&quot; | ... | &quot;z&quot;.<br>digit = &quot;0&quot; | &quot;1&quot; | ... | &quot;8&quot; | &quot;9&quot;.<br><br>Between the parts of a grammatical construct but not within the names of variables or integer numbers, any number of spaces may appear. &lt;EOF&gt; stands for the end of the input file and &lt;CR&gt; stands for the new-line character. All lines in the input file are shorter than 200 characters. <br><br><br>The value of a variable is said to be undefined: <br><br>if it has not yet been defined or it refers to a variable, which has not yet been defined;<br>if the definition of the variable contains a cycle. <br>Your are to write a program that implements Peter\'s calculator. It should store all variable definitions and for each &quot;PRINT&quot; statement evaluate the specified variable based on the latest variable definitions. If your program encounters a &quot;RESET&quot; statement, it should delete all stored variables so that all variables become undefined. <br>", input:"The input file contains calculations adhering to the syntax given above. Each line contains either an assignment to a variable, a &quot;PRINT&quot; statement, a &quot;RESET&quot; statement or nothing. <br><br>", output:"For each &quot;PRINT&quot; statement found in the input file, your program should output a line containing the numerical value of the specified variable or the word &quot;UNDEF&quot; if the variable is undefined.", sample_in:"a := b + c\nb := 3\nc := 5\nPRINT d\nPRINT a\nb := 8\nPRINT a\nRESET\nPRINT a", sample_out:"UNDEF\n8\n13\nUNDEF", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:20, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"uva", author:"", tag:["TEST"]}
{pid:1661, vid:1661, oj:"hdu", title:"Amphiphilic Carbon Molecules ", desc:"Shanghai Hypercomputers, the world\'s largest computer chip manufacturer, has invented a new class of nanoparticles called Amphiphilic Carbon Molecules (ACMs). ACMs are semiconductors. It means that they can be either conductors or insulators of electrons, and thus possess a property that is very important for the computer chip industry. They are also amphiphilic molecules, which means parts of them are hydrophilic while other parts of them are hydrophobic. Hydrophilic ACMs are soluble in polar solvents (for example, water) but are insoluble in nonpolar solvents (for example, acetone). Hydrophobic ACMs, on the contrary, are soluble in acetone but insoluble in water. Semiconductor ACMs dissolved in either water or acetone can be used in the computer chip manufacturing process. <br><br>As a materials engineer at Shanghai Hypercomputers, your job is to prepare ACM solutions from ACM particles. You go to your factory everyday at 8 am and find a batch of ACM particles on your workbench. You prepare the ACM solutions by dripping some water, as well as some acetone, into those particles and watch the ACMs dissolve in the solvents. You always want to prepare unmixed solutions, so you first separate the ACM particles by placing an Insulating Carbon Partition Card (ICPC) perpendicular to your workbench. The ICPC is long enough to completely separate the particles. You then drip water on one side of the ICPC and acetone on the other side. The ICPC helps you obtain hydrophilic ACMs dissolved in water on one side and hydrophobic ACMs dissolved in acetone on the other side. If you happen to put the ICPC on top of some ACM particles, those ACMs will be right at the border between the water solution and the acetone solution, and they will be dissolved. Fig.1 shows your working situation. <br><br><br><center><img src=data/images/1661-1.jpg></center><br><br>Your daily job is very easy and boring, so your supervisor makes it a little bit more challenging by asking you to dissolve as much ACMs into solution as possible. You know you have to be very careful about where to put the ICPC since hydrophilic ACMs on the acetone side, or hydrophobic ACMs on the water side, will not dissolve. As an experienced engineer, you also know that sometimes it can be very difficult to find the best position for the ICPC, so you decide to write a program to help you. You have asked your supervisor to buy a special digital camera and have it installed above your workbench, so that your program can obtain the exact positions and species (hydrophilic or hydrophobic) of each ACM particle in a 2D pictures taken by the camera. The ICPC you put on your workbench will appear as a line in the 2D pictures. <br><br><center><img src=data/images/1661-2.jpg></center>", input:"There will be no more than 10 test cases. Each case starts with a line containing an integer N, which is the number of ACM particles in the test case. N lines then follow. Each line contains three integers x, y, r, where (x, y) is the position of the ACM particle in the 2D picture and r can be 0 or 1, standing for the hydrophilic or hydrophobic type ACM respectively. The absolute value of x, y will be no larger than 10000. You may assume that N is no more than 1000. N = 0 signifies the end of the input and need not be processed. Fig.2 shows the positions of ACM particles and the best ICPC position for the last test case in the sample input. ", output:"For each test case, output a line containing a single integer, which is the maximum number of dissolved ACM particles. ", sample_in:"3\n0 0 0\n0 1 0\n2 2 1\n4\n0 0 0\n0 4 0\n4 0 0\n1 2 1\n7\n-1 0 0\n1 2 1\n2 3 0\n2 1 1\n0 3 1\n1 4 0\n-1 2 0\n0", sample_out:"3\n3\n6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:10, vtotal_submit:94, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"2004 Asia Regional Shanghai", author:"", tag:["TEST"]}
{pid:1662, vid:1662, oj:"hdu", title:"Link and Pop -- the Block Game", desc:"Recently, Robert found a new game on the Internet that is the newest version of `Link and Pop\'. The game rule is very simple. Initially, a board of size n×m is filled with n×m blocks. Each of these blocks has a symbol on it. All you need to do is to find a pair of blocks with the same symbol on them, which can be linked with a line that consists of at most three straight horizontal or vertical line segments. Note that the line segments cannot cross the other blocks on the board (see fig.1 for some examples of possible links, note that some blocks have been already removed from the board). <br><center><img src=data/images/1662-1.jpg></center><br><br><br><br><br>If you successfully find such a pair of blocks, the two blocks can be popped (that is, removed) together. After this, some of the blocks may be moved to new positions on the board following the rules described later. Then, you can start to find the next pair. The game continues until there are no block left on the board or you cannot find such a pair. <br><br>The blocks are moved according to the following rules. First, each block have a static moving attribute, which is one of `up\', `down\', `left\', `right\' and `stand still\'. After a pair of block is removed, the blocks are checked one by one to see whether they can be moved towards the direction of its moving attribute. The blocks in the top row are checked first. Inside the same row, the blocks on the left are checked first. If the adjacent position at the direction of the block\'s moving attribute is not occupied, the block will be moved to that position immediately. No block can be moved beyond the boundary of the game board. Of course, a block with attribute `stand still\' will always stay at its original position. After all the blocks are checked, which is called a turn of checking, another turn of checking is started. This continues until no more blocks can be moved to a new position following the moving rules. Note that inside each turn of checking, each of the blocks is checked and possibly moved only once. Blocks must not be checked and moved on its new position in one turn of checking. <br><br>Robert felt that the game was very interesting. However, after some time of playing, he found that when the size of the board is rather large, finding a pair of block becomes a very tough work. Further more, he often gets a `Game Over\' because of no more blocks can be popped. Robert felt that it is not his fault that not all the blocks are being popped. It is only that there is a great chance that the game cannot be finished if the blocks are placed randomly at first. However, it will be very time consuming to prove this by playing the game many times. So, Robert asks you to write a program for him that will simulate his behavior in the game and see if the game can be finished. <br><br>In order to make such a program possible, Robert summarizes his rules of selecting block pairs as follows. First, the pair of blocks that can be linked with one straight line segment must be found and popped first, because such kind of pairs are easy to find. Next, if such a pair does not exist, the pairs that can be linked by two straight line segments must be found and popped. Finally, if both of the two kinds of pairs do not exist, the pairs that can be linked by three straight line segments must be found and popped. If more than one pair that can be linked with the same number of straight line segments exists, the pair that contains a block, which is positioned at the most top row (or most left if two more blocks are positioned in the same row), will be selected first. If this rule still cannot break the tie (more than one pair may share one block that is positioned at the most top, left position), the other block in these pairs are compared according to the same rules. Fig.2 shows a trace of a mini game of \'Link and Pop\' that follows the above rules. <br><center><img src=data/images/1662-2.jpg></center><br><br>", input:"The input contains no more than 30 test cases. The first line of each test case contains 2 integers n, m (1&lt;=n, m&lt;=30), which is the size of the board. After this line, there will be n more lines. Each of these lines contains m strings, separated by single spaces. Each of these strings represents one block in the initial configuration. Each string always consists of two capital letters. The first letter is the symbol of the block. The second letter is always one of the letters `U\',`D\',`L\',`R\' and `S\', which shows the block\'s moving attribute: up, down, left, right, and stand still respectively. There are no blank lines between test cases. The input ends with a line of two 0\'s: `0 0\'.", output:"For each test case, first output the test case number. After this line, you must output the final configuration of the board with n lines, each containing m characters. If there is a block on the position, output the symbol of the block. If there is no block on the position, output a period instead. Do not output blank lines between test cases. ", sample_in:"3 3\nAD AU CL\nHS GU HL\nCS FD GS\n1 2\nBS BL\n0 0", sample_out:"Case 1\n...\n...\n.F.\nCase 2\n..", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:7, vtotal_submit:17, special_status:0, time_limit:10000, mem_limit:32768, hint:"", source:"2004 Asia Regional Shanghai", author:"", tag:["TEST"]}
{pid:1663, vid:1663, oj:"hdu", title:"The Counting Problem", desc:"Given two integers a and b, we write the numbers between a and b, inclusive, in a list. Your task is to calculate the number of occurrences of each digit. For example, if a = 1024 and b = 1032, the list will be <br><br><br>1024 1025 1026 1027 1028 1029 1030 1031 1032 <br><br>there are ten 0\'s in the list, ten 1\'s, seven 2\'s, three 3\'s, and etc.", input:"The input consists of up to 500 lines. Each line contains two numbers a and b where 0 &lt; a, b &lt; 100000000. The input is terminated by a line `0 0\', which is not considered as part of the input.", output:"For each pair of input, output a line containing ten numbers separated by single spaces. The first number is the number of occurrences of the digit 0, the second is the number of occurrences of the digit 1, etc.", sample_in:"1 10\n44 497\n346 542\n1199 1748\n1496 1403\n1004 503\n1714 190\n1317 854\n1976 494\n1001 1960\n0 0", sample_out:"1 2 1 1 1 1 1 1 1 1\n85 185 185 185 190 96 96 96 95 93\n40 40 40 93 136 82 40 40 40 40\n115 666 215 215 214 205 205 154 105 106\n16 113 19 20 114 20 20 19 19 16\n107 105 100 101 101 197 200 200 200 200\n413 1133 503 503 503 502 502 417 402 412\n196 512 186 104 87 93 97 97 142 196\n398 1375 398 398 405 499 499 495 488 471\n294 1256 296 296 296 296 287 286 286 247", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:107, vtotal_submit:368, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"2004 Asia Regional Shanghai", author:"", tag:["TEST"]}
{pid:1664, vid:1664, oj:"hdu", title:"Different Digits", desc:"Given a positive integer n, your task is to find a positive integer m, which is a multiple of n, and that m contains the least number of different digits when represented in decimal. For example, number 1334 contains three different digits 1, 3 and 4.", input:"The input consists of no more than 50 test cases. Each test case has only one line, which contains a positive integer n ( 1&lt;=n &lt; 65536). There are no blank lines between cases. A line with a single `0\' terminates the input. ", output:"For each test case, you should output one line, which contains m. If there are several possible results, you should output the smallest one. Do not output blank lines between cases. ", sample_in:"7 \n15 \n16 \n101 \n0", sample_out:"7\n555\n16\n1111", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:85, vtotal_submit:558, special_status:0, time_limit:4000, mem_limit:32768, hint:"", source:"2004 Asia Regional Shanghai", author:"", tag:["TEST"]}
{pid:1665, vid:1665, oj:"hdu", title:"That Nice Euler Circuit", desc:"Little Joey invented a scrabble machine that he called Euler, after the great mathematician. In his primary school Joey heard about the nice story of how Euler started the study about graphs. The problem in that story was - let me remind you - to draw a graph on a paper without lifting your pen, and finally return to the original position. Euler proved that you could do this if and only if the (planar) graph you created has the following two properties: (1) The graph is connected; and (2) Every vertex in the graph has even degree. <br><br><br><br>Joey\'s Euler machine works exactly like this. The device consists of a pencil touching the paper, and a control center issuing a sequence of instructions. The paper can be viewed as the infinite two-dimensional plane; that means you do not need to worry about if the pencil will ever go off the boundary. <br><br>In the beginning, the Euler machine will issue an instruction of the form (X0, Y0) which moves the pencil to some starting position (X0, Y0). Each subsequent instruction is also of the form (X\', Y\'), which means to move the pencil from the previous position to the new position (X\', Y\'), thus draw a line segment on the paper. You can be sure that the new position is different from the previous position for each instruction. At last, the Euler machine will always issue an instruction that move the pencil back to the starting position (X0, Y0). In addition, the Euler machine will definitely not draw any lines that overlay other lines already drawn. However, the lines may intersect. <br><br>After all the instructions are issued, there will be a nice picture on Joey\'s paper. You see, since the pencil is never lifted from the paper, the picture can be viewed as an Euler circuit. <br><br>Your job is to count how many pieces (connected areas) are created on the paper by those lines drawn by Euler. ", input:"There are no more than 25 test cases. Ease case starts with a line containing an integer N &gt;= 4, which is the number of instructions in the test case. The following N pairs of integers give the instructions and appear on a single line separated by single spaces. The first pair is the first instruction that gives the coordinates of the starting position. You may assume there are no more than 300 instructions in each test case, and all the integer coordinates are in the range (-300, 300). The input is terminated when N is 0. ", output:"For each test case there will be one output line in the format <br><br>Case x: There are w pieces., <br><br>where x is the serial number starting from 1. <br><br>Note: The figures below illustrate the two sample input cases. <br><br><center><img src=data/images/1665-1.jpg></center>", sample_in:"5\n0 0 0 1 1 1 1 0 0 0\n7\n1 1 1 5 2 1 2 5 5 1 3 5 1 1\n0", sample_out:"Case 1: There are 2 pieces.\nCase 2: There are 5 pieces.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:30, vtotal_submit:76, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"2004 Asia Regional Shanghai", author:"", tag:["TEST"]}
{pid:1666, vid:1666, oj:"hdu", title:"The Floor Bricks", desc:"Robert decided to decorate his new room with a cool pattern on the floor, composed with colorful floor bricks. After several days\' work, he finally felt satisfied with the pattern he created with the odd shaped bricks. Soon, he found a problem. As the border of the pattern is not a perfect rectangle, the floor is not filled with bricks completely. However, since the shapes of the bricks are quite odd, it is not an easy work to fill the floor with these bricks completely. (Although a brick with a unit size is provided, this kind of brick is quite expensive usually. Fig.1 shows an example of a set of bricks) As Robert was very proud of his brick pattern, he refuses to modify even one brick in his pattern in order to satisfy the need of filling the floor completely. Instead, he asked you to find solutions for him to fill the rest part of the floor completely with the given bricks so that the Gils needed to buy these bricks are minimized. Of course, the bricks can not overlap each other to fill the floor. Please note that the bricks can be rotated, but cannot be flipped over. In addition, you may assume that all kinds of bricks can be contained within a 3×3 square box. <br><br><center><img src=data/images/1666-1.jpg></center><br>As the pattern of bricks covers most areas of the floor, the uncovered part of the floor is actually located at the bottom border of the rectangular shaped floor. Therefore, an uncovered part like the one in Fig.2 can be described with a series of integers, which represents the number of square blocks missed in each column, starting from the left. Thus, the shape in Fig.2 can be described with 11 integers: 2 2 1 2 3 5 2 3 3 4 1. In addition, you may assume that these integers are no larger than 5. Fig.3 shows a solution to fill the floor with the brick set in Fig.1 that costs minimal Gils. <br><center><img src=data/images/1666-2.jpg></center><br><center><img src=data/images/1666-3.jpg></center><br>", input:"The input consists of at most 20 test cases. The first line of each test case contains an integer n ( 1&lt;=n&lt;=1000), which is the width of the floor. The second line contains n integers, separated by single spaces. These integers describe the shape of the uncovered floor as mentioned above. The third line contains an integer m ( 1&lt;=m&lt;=100), which is the number of bricks available. After this is the detailed description of the m bricks. <br><br>Each brick description consists of 4 lines. The first line is a positive integer, which is the price of that brick in Gils. After this line, there are three lines, each consisting of three characters, which describe the shape of the brick. A dot character represents a space in the shape and a sharp character # represents a square block in the shape. You can be sure that the blocks are always connected to form the brick. <br><br>There is a line containing a zero after the last test case, which signifies the end of the input and should not be processed. <br>", output:"For each test case, output a line `Need at least g Gil(s).\', where g is the minimal Gils needed to fill the floor with the given bricks. If the floor cannot be filled with the given bricks, output `Impossible.\' instead. Do not output blank lines between cases. <br><br>", sample_in:"11\n1 4 3 3 2 5 3 2 1 2 2\n4\n2\n#..\n#..\n##.\n3\n.#.\n.##\n.#.\n5\n...\n#..\n##.\n9\n...\n.#.\n...\n1\n1\n1\n1\n..#\n...\n...\n1\n1\n1\n1\n.##\n...\n...\n0", sample_out:"Need at least 28 Gil(s).\nNeed at least 1 Gil(s).\nImpossible.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:7, vtotal_submit:24, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"2004 Asia Regional Shanghai", author:"", tag:["TEST"]}
{pid:1667, vid:1667, oj:"hdu", title:"The Rotation Game", desc:"The rotation game uses a # shaped board, which can hold 24 pieces of square blocks (see Fig.1). The blocks are marked with symbols 1, 2 and 3, with exactly 8 pieces of each kind. <br><center><img src=data/images/1667-1.jpg></center><br>Initially, the blocks are placed on the board randomly. Your task is to move the blocks so that the eight blocks placed in the center square have the same symbol marked. There is only one type of valid move, which is to rotate one of the four lines, each consisting of seven blocks. That is, six blocks in the line are moved towards the head by one block and the head block is moved to the end of the line. The eight possible moves are marked with capital letters A to H. Figure 1 illustrates two consecutive moves, move A and move C from some initial configuration. <br>", input:"The input consists of no more than 30 test cases. Each test case has only one line that contains 24 numbers, which are the symbols of the blocks in the initial configuration. The rows of blocks are listed from top to bottom. For each row the blocks are listed from left to right. The numbers are separated by spaces. For example, the first test case in the sample input corresponds to the initial configuration in Fig.1. There are no blank lines between cases. There is a line containing a single `0\' after the last test case that ends the input. <br><br>", output:"For each test case, you must output two lines. The first line contains all the moves needed to reach the final configuration. Each move is a letter, ranging from `A\' to `H\', and there should not be any spaces between the letters in the line. If no moves are needed, output `No moves needed\' instead. In the second line, you must output the symbol of the blocks in the center square after these moves. If there are several possible solutions, you must output the one that uses the least number of moves. If there is still more than one possible solution, you must output the solution that is smallest in dictionary order for the letters of the moves. There is no need to output blank lines between cases. <br><br>", sample_in:"1 1 1 1 3 2 3 2 3 1 3 2 2 3 1 2 2 2 3 1 2 1 3 3\n1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3\n0", sample_out:"AC\n2\nDDHH\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:172, vtotal_submit:793, special_status:0, time_limit:15000, mem_limit:150000, hint:"", source:"2004 Asia Regional Shanghai", author:"", tag:["TEST"]}
{pid:1668, vid:1668, oj:"hdu", title:"Islands and Bridges ", desc:"Given a map of islands and bridges that connect these islands, a Hamilton path, as we all know, is a path along the bridges such that it visits each island exactly once. On our map, there is also a positive integer value associated with each island. We call a Hamilton path the best triangular Hamilton path if it maximizes the value described below. <br><br>Suppose there are n islands. The value of a Hamilton path C1C2...Cn is calculated as the sum of three parts. Let Vi be the value for the island Ci. As the first part, we sum over all the Vi values for each island in the path. For the second part, for each edge CiCi+1 in the path, we add the product Vi*Vi+1. And for the third part, whenever three consecutive islands CiCi+1Ci+2 in the path forms a triangle in the map, i.e. there is a bridge between Ci and Ci+2, we add the product Vi*Vi+1*Vi+2. <br><br>Most likely but not necessarily, the best triangular Hamilton path you are going to find contains many triangles. It is quite possible that there might be more than one best triangular Hamilton paths; your second task is to find the number of such paths. <br><br><br><br>Input<br>The input file starts with a number q (q&lt;=20) on the first line, which is the number of test cases. Each test case starts with a line with two integers n and m, which are the number of islands and the number of bridges in the map, respectively. The next line contains n positive integers, the i-th number being the Vi value of island i. Each value is no more than 100. The following m lines are in the form x y, which indicates there is a (two way) bridge between island x and island y. Islands are numbered from 1 to n. You may assume there will be no more than 13 islands. <br><br><br>", input:"The input file starts with a number q (q&lt;=20) on the first line, which is the number of test cases. Each test case starts with a line with two integers n and m, which are the number of islands and the number of bridges in the map, respectively. The next line contains n positive integers, the i-th number being the Vi value of island i. Each value is no more than 100. The following m lines are in the form x y, which indicates there is a (two way) bridge between island x and island y. Islands are numbered from 1 to n. You may assume there will be no more than 13 islands. <br>", output:"For each test case, output a line with two numbers, separated by a space. The first number is the maximum value of a best triangular Hamilton path; the second number should be the number of different best triangular Hamilton paths. If the test case does not contain a Hamilton path, the output must be `0 0\'. <br><br>Note: A path may be written down in the reversed order. We still think it is the same path. <br>", sample_in:"2\n3 3\n2 2 2\n1 2\n2 3\n3 1\n4 6\n1 2 3 4\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4", sample_out:"22 3\n69 1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:36, vtotal_submit:159, special_status:0, time_limit:4000, mem_limit:65536, hint:"", source:"2004 Asia Regional Shanghai", author:"", tag:["TEST"]}
{pid:1669, vid:1669, oj:"hdu", title:"Jamie\'s Contact Groups ", desc:"Jamie is a very popular girl and has quite a lot of friends, so she always keeps a very long contact list in her cell phone. The contact list has become so long that it often takes a long time for her to browse through the whole list to find a friend\'s number. As Jamie\'s best friend and a programming genius, you suggest that she group the contact list and minimize the size of the largest group, so that it will be easier for her to search for a friend\'s number among the groups. Jamie takes your advice and gives you her entire contact list containing her friends\' names, the number of groups she wishes to have and what groups every friend could belong to. Your task is to write a program that takes the list and organizes it into groups such that each friend appears in only one of those groups and the size of the largest group is minimized. <br>", input:"There will be at most 20 test cases. Ease case starts with a line containing two integers N and M. where N is the length of the contact list and M is the number of groups. N lines then follow. Each line contains a friend\'s name and the groups the friend could belong to. You can assume N is no more than 1000 and M is no more than 500. The names will contain alphabet letters only and will be no longer than 15 characters. No two friends have the same name. The group label is an integer between 0 and M - 1. After the last test case, there is a single line `0 0\' that terminates the input.<br>", output:"For each test case, output a line containing a single integer, the size of the largest contact group. <br>", sample_in:"3 2\nJohn 0 1\nRose 1\nMary 1\n5 4\nACM 1 2 3\nICPC 0 1\nAsian 0 2 3\nRegional 1 2\nShangHai 0 2\n0 0", sample_out:"2\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:65, vtotal_submit:340, special_status:0, time_limit:7000, mem_limit:65535, hint:"", source:"2004 Asia Regional Shanghai", author:"", tag:["TEST"]}
No Such Problem Called HDU 1670.<br>
{pid:1671, vid:1671, oj:"hdu", title:"Phone List", desc:"Given a list of phone numbers, determine if it is consistent in the sense that no number is the prefix of another. Let’s say the phone catalogue listed these numbers:<br>1. Emergency 911<br>2. Alice 97 625 999<br>3. Bob 91 12 54 26<br>In this case, it’s not possible to call Bob, because the central would direct your call to the emergency line as soon as you had dialled the first three digits of Bob’s phone number. So this list would not be consistent.<br>", input:"The first line of input gives a single integer, 1 &lt;= t &lt;= 40, the number of test cases. Each test case starts with n, the number of phone numbers, on a separate line, 1 &lt;= n &lt;= 10000.  Then follows n lines with one unique phone number on each line. A phone number is a  sequence of at most ten digits.", output:"For each test case, output “YES” if the list is consistent, or “NO” otherwise.", sample_in:"2\n3\n911\n97625999\n91125426\n5\n113\n12340\n123440\n12345\n98346", sample_out:"NO\nYES", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1597, vtotal_submit:8358, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（3）", author:"", tag:["TEST"]}
{pid:1672, vid:1672, oj:"hdu", title:"Cuckoo Hashing", desc:"One of the most fundamental data structure problems is the dictionary problem: given a set D of words you want to be able to quickly determine if any given query string q is present in the dictionary D or not. Hashing is a well-known solution for the problem. The idea is to create a function h : <img src=data/images/C114_1002_1.gif>from all strings to the integer range 0, 1, .., n-1, i.e. you describe a fast deterministic program which takes a string as input and outputs an integer between 0 and n?1. Next you allocate an empty hash table T of size n and for each word w in D, you set T[h(w)] = w. Thus, given a query string q, you only need to calculate h(q) and see if T[h(q)] equals q, to determine if q is in the dictionary. <br>Seems simple enough, but aren’t we forgetting something? Of course, what if two words in D map to the same location in the table? This phenomenon, called collision, happens fairly often (remember the Birthday paradox: in a class of 24 pupils there is more than 50% chance that two of them share birthday). On average you will only be able to put roughly sqrt(n)-sized dictionaries into the table without getting collisions, quite poor space usage!<br>A stronger variant is Cuckoo Hashing^1. The idea is to use two hash functions h1 and h2. Thus each string maps to two positions in the table. A query string q is now handled as follows: you compute both h1(q) and h2(q), and if T[h1(q)] = q, or T[h2(q)] = q, you conclude that q is in D. The name “Cuckoo Hashing” stems from the process of creating the table. Initially you have an empty table. You iterate over the words d in D, and insert them one by one. If T[h1(d)] is free, you set T[h1(d)] = d. Otherwise if T[h2(d)] is free, you set T[h2(d)] = d. If both are occupied however, just like the cuckoo with other birds’ eggs, you evict the word r in T[h1(d)] and set T[h1(d)] = d. Next you put r back into the table in its alternative place (and if that entry was already occupied you evict that word and move it to its alternative place, and so on). Of course, we may end up in an infinite loop here, in which case we need to rebuild the table with other choices of hash functions. The good news is that this will not happen with great probability even if D contains up to n/2 words!", input:"On the first line of input is a single positive integer 1 &lt;= t &lt;= 50 specifying the number of test cases to follow. Each test case begins with two positive integers 1 &lt;= m &lt;= n &lt;= 10000 on a line of itself, m telling the number of words in the dictionary and n the size of the hash table in the test case. Next follow m lines of which the i:th describes the i:th word di in the dictionary D by two non-negative integers h1(di) and h2(di) less than n giving the two hash function values of the word di. The two values may be identical.", output:"For each test case there should be exactly one line of output either containing the string “successful hashing” if it is possible to insert all words in the given order into the table, or the string “rehash necessary” if it is impossible.", sample_in:"2\n3 3\n0 1\n1 2\n2 0\n5 6\n2 3\n3 1\n1 2\n5 1\n2 5", sample_out:"successful hashing\nrehash necessary", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:42, vtotal_submit:137, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（3）", author:"", tag:["TEST"]}
{pid:1673, vid:1673, oj:"hdu", title:"Optimal Parking", desc:"When shopping on Long Street, Michael usually parks his car at some random location, and then walks to the stores he needs.<br>Can you help Michael choose a place to park which minimises the distance he needs to walk on his shopping round?<br>Long Street is a straight line, where all positions are integer.<br>You pay for parking in a specific slot, which is an integer position on Long Street. Michael does not want to pay for more than one parking though. He is very strong, and does not mind carrying all the bags around.<br>", input:"The first line of input gives the number of test cases, 1 &lt;= t &lt;= 100. There are two lines for each test case. The first gives the number of stores Michael wants to visit, 1 &lt;= n &lt;= 20, and the second gives their n integer positions on Long Street, 0 &lt;= xi &lt;= 99.<br>", output:"Output for each test case a line with the minimal distance Michael must walk given optimal parking.", sample_in:"2\n4\n24 13 89 37\n6\n7 30 41 14 39 42", sample_out:"152\n70", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1120, vtotal_submit:1462, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（3）", author:"", tag:["TEST"]}
{pid:1674, vid:1674, oj:"hdu", title:"Copying DNA", desc:"Evolution is a seemingly random process which works in a way which resembles certain approaches we use to get approximate solutions to hard combinatorial problems. You are now to do something completely different.<br>Given a DNA string S from the alphabet {A,C,G,T}, find the minimal number of copy operations needed to create another string T. You may reverse the strings you copy, and copy both from S and the pieces of your partial T. You may put these pieces together at any time. You may only copy contiguous parts of your partial T, and all copied strings must be used in your final T. Example:<br>From S = “ACTG” create T = “GTACTATTATA”<br>1. Get GT......... by copying and reversing “TG” from S.<br>2. Get GTAC....... by copying “AC” from S.<br>3. Get GTAC...TA.. by copying “TA” from the partial T.<br>4. Get GTAC...TAAT by copying and reversing “TA” from the partial T.<br>5. Get GTACAATTAAT by copying “AAT” from the partial T.<br>", input:"The first line of input gives a single integer, 1 &lt;= t &lt;= 100, the number of test cases. Then follow, for each test case, a line with the string S of length 1 &lt;= m &lt;= 18, and a line with the string T of length 1 &lt;= n &lt;= 18.<br>", output:"Output for each test case the number of copy operations needed to create T from S, or “impossible” if it cannot be done.<br>", sample_in:"5\nACGT\nGTAC\nA\nC\nACGT\nTGCA\nACGT\nTCGATCGA\nA\nAAAAAAAAAAAAAAAAAA", sample_out:"2\nimpossible\n1\n4\n6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:21, vtotal_submit:116, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（3）", author:"", tag:["TEST"]}
{pid:1675, vid:1675, oj:"hdu", title:"Circle of Debt", desc:"The three friends Alice, Bob, and Cynthia always seem to get in situations where there are debts to be cleared among themselves. Of course, this is the “price” of hanging out a lot: it only takes a few resturant visits, movies, and drink rounds to get an unsettled balance. So when they meet as usual every Friday afternoon they begin their evening by clearing last week’s debts. To satisfy their mathematically inclined minds they prefer clearing their debts using as little money transaction as possible, i.e. by exchanging as few bank notes and coins as necessary. To their surprise, this can sometimes by harder than it sounds. Suppose that Alice owes Bob 10 crowns and this is the three friends’ only uncleared debt, and Alice has a 50 crown note but nothing smaller, Bob has three 10 crown coins and ten 1 crown coins, and Cynthia has three 20 crown notes. The best way to clear the debt is for Alice to give her 50 crown note to Cynthia, Cynthia to give two 20 crown notes to Alice and one to Bob, and Bob to give one 10 crown coin to Cynthia, involving a total of only five notes/coins changing owners. Compare this to the straightforward solution of Alice giving her 50 crown note to Bob and getting Bob’s three 10 crown notes and all his 1 crown coins for a total of fourteen notes/coins being exchanged!<br>", input:"On the first line of input is a single positive integer, 1 &lt;= t &lt;= 50, specifying the number of test cases to follow. Each test case begins with three integers ab, bc, ca &lt;= 1000 on a line of itself. ab is the amount Alice owes Bob (negative if it is Bob who owes Alice money), bc the amount Bob owes Cynthia (negative if it is Cynthia who is in debt to Bob), and ca the amount Cynthia owes Alice (negative if it is Alice who owes Cynthia).<br>Next follow three lines each with six non-negative integers a100, a50, a20, a10, a5, a1, b100, . . . , b1, and c100, . . . c1, respectively, where a100 is the number of 100 crown notes Alice got, a50 is the number of her 50 crown notes, and so on. Likewise, b100, . . . , b1 is the amount of notes/coins of different value Bob got, and c100, . . . , c1 describes Cynthia’s money. Each of them has at most 30 coins (i.e. a10+a5+a1, b10+b5+b1, and c10+c5+c1 are all less than or equal to 30) and the total amount of all their money together (Alice’s plus Bob’s plus Cynthia’s) is always less than 1000 crowns.<br>", output:"For each test case there should be one line of output containing the minimum number of bank notes and coins needed to settle the balance. If it is not possible at all, output the string “impossible”.<br>", sample_in:"3\n10 0 0\n0 1 0 0 0 0\n0 0 0 3 0 10\n0 0 3 0 0 0\n-10 -10 -10\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n-10 10 10\n3 0 0 0 2 0\n0 2 0 0 0 1\n0 0 1 1 0 3", sample_out:"5\n0\nimpossible", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8, vtotal_submit:18, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（3）", author:"", tag:["TEST"]}
{pid:1676, vid:1676, oj:"hdu", title:"Full Tank?", desc:"After going through the receipts from your car trip through Europe this summer, you realised that the gas prices varied between the cities you visited. Maybe you could have saved some money if you were a bit more clever about where you filled your fuel?<br>To help other tourists (and save money yourself next time), you want to write a program for finding the cheapest way to travel between cities, filling your tank on the way. We assume that all cars use one unit of fuel per unit of distance, and start with an empty gas tank.<br>", input:"The first line of input gives 1 &lt;= n &lt;= 1000 and 0 &lt;= m &lt;= 10000, the number of cities and roads. Then follows a line with n integers 1 &lt;= pi &lt;= 100, where pi is the fuel price in the ith city. Then follow m lines with three integers 0 &lt;= u, v &lt; n and 1 &lt;= d &lt;= 100, telling that there is a road between u and v with length d. Then comes a line with the number 1 &lt;= q &lt;= 100, giving the number of queries, and q lines with three integers 1 &lt;= c &lt;= 100, s and e, where c is the fuel capacity of the vehicle, s is the starting city, and e is the goal.<br>", output:"For each query, output the price of the cheapest trip from s to e using a car with the given capacity, or “impossible” if there is no way of getting from s to e with the given car.", sample_in:"5 5\n10 10 20 12 13\n0 1 9\n0 2 8\n1 2 1\n1 3 11\n2 3 7\n2\n10 0 3\n20 1 4", sample_out:"170\nimpossible", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:43, vtotal_submit:147, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（3）", author:"", tag:["TEST"]}
{pid:1677, vid:1677, oj:"hdu", title:"Nested Dolls", desc:"Dilworth is the world’s most prominent collector of Russian nested dolls: he literally has thousands of them! You know, the wooden hollow dolls of different sizes of which the smallest doll is contained in the second smallest, and this doll is in turn contained in the next one and so forth. One day he wonders if there is another way of nesting them so he will end up with fewer nested dolls? After all, that would make his collection even more magnificent! He unpacks each nested doll and measures the width and height of each contained doll. A doll with width w1 and height h1 will fit in another doll of width w2 and height h2 if and only if w1 &lt; w2 and h1 &lt; h2. Can you help him calculate the smallest number of nested dolls possible to assemble from his massive list of measurements?<br>", input:"On the first line of input is a single positive integer 1 &lt;= t &lt;= 20 specifying the number of test cases to follow. Each test case begins with a positive integer 1 &lt;= m &lt;= 20000 on a line of itself telling the number of dolls in the test case. Next follow 2m positive integers w1, h1,w2, h2, . . . ,wm, hm, where wi is the width and hi is the height of doll number i. 1 &lt;= wi, hi &lt;= 10000 for all i.<br>", output:"For each test case there should be one line of output containing the minimum number of nested dolls possible.<br>", sample_in:"4\n3\n20 30 40 50 30 40\n4\n20 30 10 10 30 20 40 50\n3\n10 30 20 20 30 10\n4\n10 10 20 30 40 50 39 51", sample_out:"1\n2\n3\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:355, vtotal_submit:2190, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（3）", author:"", tag:["TEST"]}
{pid:1678, vid:1678, oj:"hdu", title:"Shopaholic", desc:"Lindsay is a shopaholic. Whenever there is a discount of the kind where you can buy three items and only pay for two, she goes completely mad and feels a need to buy all items in the store. You have given up on curing her for this disease, but try to limit its effect on her wallet. <br>You have realized that the stores coming with these offers are quite  elective when it comes to which items you get for free; it is always the cheapest ones. As an example, when your friend comes to the counter with seven items, costing 400, 350, 300, 250, 200, 150, and 100 dollars, she will have to pay 1500 dollars. In this case she got a discount of 250 dollars. You realize that if she goes to the counter three times, she might get a bigger discount. E.g. if she goes with the items that costs 400, 300 and 250, she will get a discount of 250 the first round. The next round she brings the item that costs 150 giving no extra discount, but the third round she takes the last items that costs 350, 200 and 100 giving a discount of an additional 100 dollars, adding up to a total discount of 350.<br>Your job is to find the maximum discount Lindsay can get.", input:"The first line of input gives the number of test scenarios, 1 &lt;= t &lt;= 20. Each scenario consists of two lines of input. The first gives the number of items Lindsay is buying, 1 &lt;= n &lt;= 20000. The next line gives the prices of these items, 1 &lt;= pi &lt;= 20000.<br>", output:"For each scenario, output one line giving the maximum discount Lindsay can get by selectively choosing which items she brings to the counter at the same time.<br>", sample_in:"1\n6\n400 100 200 350 300 250", sample_out:"400", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:669, vtotal_submit:1433, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（3）", author:"", tag:["TEST"]}
{pid:1679, vid:1679, oj:"hdu", title:"Moogle", desc:"You got the original idea of making map software, called Moogle Maps, for the new cool Maple mPhone. It will even be capable of indicating the location of a house address like ”Main Street 13”. However, since the mPhone has limited storage capacity, you need to reduce the data amount. You don’t want to store the exact location of every single house number. Instead only a subset of the house numbers will be stored exactly, and the others will be linearly interpolated. <br>So you want to select house numbers that will minimise the average interpolation error, given how many house locations you have capacity to store. We view the street as a straight line, and you will always store the first and the last house location. <br>Given that you’ve stored the locations xi and xj for the houses with numbers i and j respectively, but no other house in between, the interpolated value for a house with number k with i &lt; k &lt; j is xi + (xj - xi) * (k-i)/(j-i).<br>", input:"The first line of input gives a single integer, 1 &lt;= t &lt;= 50, the number of test cases.<br>For each test case, there are two lines. The first contains 2 &lt;= h &lt;= 200 and 2 &lt;= c &lt;= h, where h is the number of houses in the street and c is the number of house locations that can be stored. The second contains h integers in increasing order giving the location of the h houses. Each location is in the interval [0, 1000000].<br>", output:"For each test case, output the average interpolation error over all the h houses for the optimal selection of c house locations to store. The output should be given with four decimal places, but we will accept inaccuracies of up to ±0.001.<br>", sample_in:"2\n4 3\n0 9 20 40\n10 4\n0 10 19 30 40 90 140 190 202 210", sample_out:"0.2500\n0.3000", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:44, vtotal_submit:240, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（3）", author:"", tag:["TEST"]}
{pid:1680, vid:1680, oj:"hdu", title:"Cheesy Chess", desc:"Any similarity of this problem to the game Chess is completely coincidental.<br><br>Cheesy Chess is a simple two-person game. It is played on an 8 × 8 board. Each player has one piece. The players take turns in moving their respective pieces.<br><br>The first player, say White, has a king. In one move, it can move one position in any of the eight directions, horizontally, vertically or diagonally, as long as it stays on the board. The second player, say Black, has a pawn. In one move, it can move exactly one position downwards. In fact, the pieces have to make such moves. They may not stay at their positions.<br><br>The White king is said to capture the Black pawn, if it moves onto the position currently occupied by the pawn. The aim of the White king is to do exactly this. The aim of the Black pawn is to reach the bottom line of the board safely. As we will see later, however, there are also other ways for White and Black to win.<br><br>The game is complicated by the presence of forbidden fields and dangerous fields. A forbidden field is a position on the board where neither the White king, nor the Black pawn may come. A dangerous field is a position where the Black pawn may come, but where the White king may not move onto.<br><br>In addition to the fixed dangerous fields, which are dangerous for the entire game, there are (at most) two other, floating dangerous fields, which depend on the position of the Black pawn. They are adjacent to the pawn’s position: the position to the bottom left and bottom right of the pawn, for as far as these positions exist within the boundaries of the board and are not forbidden. All other positions are called open fields, even if they are occupied by either of the pieces.<br><br>For example, we may have the following situation, where forbidden fields, dangerous fields and open fields are denoted by \'F\', \'D\' and \'.\', respectively, the White king is denoted by \'K\' and the Black pawn is denoted by \'P\'.<br><br><img src=data/images/1680_1.jpg><br><br>This illustration does not reveal whether the positions occupied by the White king and the Black pawn are dangerous or open, and whether the dangerous fields adjacent to the position of the pawn are fixed dangerous fields or not.<br><br>Due to a move of the Black pawn, the White king’s position may become dangerous. This is not a problem: in the next move, the White king has to move to another, open field anyway. The White king blocks the Black pawn, if Black is to move, but the position below the pawn is occupied by the White king. In this case, the pawn cannot move.<br><br>The game ends, when<br><br>the White king captures the Black pawn; in this case, White wins;<br>the White king is to move, but cannot move to an open field; in this case, Black wins;<br>the Black pawn is to move, but cannot move to an open field or a dangerous field; if the pawn is at the bottom line of the board, then Black wins, otherwise White wins.<br>You have to find out which player will win, given that White is the first player to move and given that White plays optimally.<br><br>", input:"The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:<br><br>A description of the board, consisting of 8 lines, corresponding to the 8 lines of the board, from top to bottom. Each line contains a string of 8 characters from {\'F\', \'D\', \'.\'}. Here, \'F\' denotes a forbidden field, \'D\' denotes a fixed dangerous field and \'.\' (a period) denotes an open field.<br><br>Of course, an open field may become dangerous due to the position of the Black pawn.<br><br>One line with two integers xK and yK (1 ≤ xK, yK ≤ 8), separated by a single space, specifying the initial position of the White king. Here, xK denotes the column (counted from the left) and yK denotes the row (counted from below).<br><br>This initial position is neither a forbidden field, nor a fixed dangerous field.<br><br>One line with two integers xP and yP (1 &lt;= xP, yP &lt;= 8), separated by a single space, specifying the initial position of the Black pawn. Here, xP denotes the column (counted from the left) and yP denotes the row (counted from below).<br><br>This initial position is not a forbidden field, and is different from the initial position of the White king.<br><br>", output:"For every test case in the input file, the output should contain a single line containing the string &quot;White&quot; (if White wins) or &quot;Black&quot; (if Black wins).<br><br>", sample_in:"2\n........\n.......D\n........\n.....F..\n..DDD...\n..DFDD..\n..DDD...\n........\n7 6\n3 7\n........\n........\n........\n........\n........\n........\n........\n........\n3 1\n6 3", sample_out:"Black\nWhite", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:37, vtotal_submit:126, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"华东区大学生程序设计邀请赛_热身赛", author:"", tag:["TEST"]}
{pid:1681, vid:1681, oj:"hdu", title:"Frobenius", desc:"The Frobenius problem is an old problem in mathematics, named after the German mathematician G. Frobenius (1849–1917).<br><br>Let a1, a2, …, an be integers larger than 1, with greatest common divisor (gcd) 1. Then it is known that there are finitely many integers larger than or equal to 0, that cannot be expressed as a linear combination w1a1 + w2a2 + … + wnan using integer coefficients wi ≥ 0. The largest of such nonnegative integers is known as the Frobenius number of a1, a2, …, an (denoted by F(a1, a2, …, an)). So: F(a1, a2, …, an) is the largest nonnegative integer that cannot be expressed as a nonnegative integer linear combination of a1, a2, …, an.<br><br>For n = 2 there is a simple formula for F(a1, a2). However, for n ≥ 3 it is much more complicated. For n = 3 only for some special choices of a1, a2, a3 formulas exist. For n &gt; 4 no formulas are known at all.<br><br>We will consider here the Frobenius problem for n = 4. In this case our version of the problem can be formulated as follows. Let four integers a, b, c and d be given, with a, b, c, d &gt; 1 and gcd(a, b, c, d) = 1. We want to know two things.<br><br>How many nonnegative integers less than or equal to 1,000,000 cannot be expressed as a nonnegative integer linear combination of the values a, b, c and d?<br>Is the Frobenius number of a, b, c and d less than or equal to 1,000,000 and if so, what is its value?", input:"The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:<br><br>One line, containing four integers a, b, c, d (with 1 &lt; a, b, c, d ≤ 10, 000 and gcd(a, b, c, d) = 1), separated by single spaces.<br>", output:"For every test case in the input file, the output should contain two lines.<br><br>The first line contains the number of integers between 0 and 1,000,000 (boundaries included) that cannot be expressed as a*w + b*x + c*y + d*z, where w, x, y, z are nonnegative (meaning ≥ 0) integers.<br>The second line contains the Frobenius number if this is less than or equal to 1,000,000 and otherwise &amp;#8722;1, meaning that the Frobenius number of a, b, c and d is larger than 1,000,000.<br>", sample_in:"3\n8 5 9 7\n5 8 5 5\n1938 1939 1940 1937", sample_out:"6\n11\n14\n27\n600366\n-1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:81, vtotal_submit:151, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"华东区大学生程序设计邀请赛_热身赛", author:"", tag:["TEST"]}
{pid:1682, vid:1682, oj:"hdu", title:"Mineshaft", desc:"A plumber has been hired to build an air pipe through a mineshaft from the bottom to the surface. The mineshaft was built without modern technology, so it winds its way up through the earth. Because it is very time consuming to bring the tools necessary to bend the pipe below the surface, the plumber wants to minimize the number of bends in the pipeline.<br><br>For example, for the mineshaft in the first picture below, the minimal number of bends in a pipeline from the bottom to the surface is two. Different optimal solutions exist, one of which is shown in the second picture. The bullets indicate the bends in the pipeline.<br><br><img src=data/images/1682_1.jpg><br><br>The two walls of the mineshaft are formed by sequences of straight segments. The numbers of segments in the two sequences may be different. Further, the horizontal distance between the walls of the mineshaft may vary, but is always positive. Both walls start at the same level and end at the same level.<br><br>On the way from the bottom of the mineshaft to the surface, the level (the y-coordinate) increases with every segment of a wall. Hence, the mineshaft does not have horizontal plateaus or ‘ceilings’, and at no point does it go back down again.<br><br>For the purpose of this task, you may assume the diameter of the pipeline to be 0. At no point may the pipeline cross the walls. In order to attach the pipeline firmly to the wall, each segment of the pipeline has to touch the walls at (at least) two different places. However, the bending points of the pipeline are weak. They cannot be used to attach the pipeline to the walls. The end points of the pipeline, though, at the bottom and the top of the mineshaft, may be used to attach a segment to the walls.<br><br>Hence, the solution in the third picture above (also having two bends) is not allowed, because the lowest segment of the pipeline can be attached to the walls at only one place: at the bottom of the right wall.<br><br>The pipeline must start anywhere at the bottom of the mineshaft, and must end anywhere on the imaginary line between the top of the left wall and the top of the right wall. Note, however, that the endpoints of the pipeline may only be used to attach the pipeline, if they touch a wall. In particular, the endpoint at the bottom cannot be attached to any position at the bottom which is not the bottom of a wall.<br><br>Finally, the angle that the pipeline makes at a bending point can take any value satisfying &amp;#8722;180° &lt; α &lt; 180° and (of course) α ≠ 0.<br><br>Note that sometimes it may be useful to have the pipeline intersect with itself. For example, in the mineshaft below, this is needed to get from the bottom to the top of the mineshaft with only three bends.<br><br><img src=data/images/1682_2.jpg><br>", input:"The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:<br><br>One line with one integer N1 (2 ≤ N1 ≤ 25): the number of points describing the left wall of the mineshaft.<br><br>N1 lines with the coordinates of the points describing the left wall of the mineshaft, from the bottom to the top. The ith line contains two integers xi and yi (-1,000 ≤ xi ≤ 1,000 and 0 ≤ yi ≤ 1,000) separated by a single space: the x- and y-coordinate of the point, respectively.<br><br>The y-coordinates are monotonically increasing: y1 &lt; y2 &lt; … &lt; yN1.<br><br>One line with one integer N2 (2 ≤ N2 ≤ 25): the number of points describing the right wall of the mineshaft.<br><br>N2 lines with the coordinates of the points describing the right wall of the mineshaft, from the bottom to the top. The ith line contains two integers x′i and y′i (-1,000 ≤ x′i ≤ 1,000 and 0 ≤ y′i ≤ 1,000) separated by a single space: the x- and y-coordinate of the point, respectively.<br><br>The y-coordinates are monotonically increasing: y′1 &lt; y′2 &lt; … &lt; y′N2.<br><br>We always have x1 &lt; x′1, y1 = y′1, xN1 &lt; x′N2, and yN1 = y′N2. The walls described by the sequences of points do not cross or even touch each other.<br><br>", output:"For every test case in the input file, the output should contain a single number, on a single line: the minimum number of bends in the pipeline to make it from the bottom of the mineshaft to the top, under the conditions from the problem description.<br><br>", sample_in:"2\n7\n4 0\n8 2\n3 7\n5 9\n3 12\n6 14\n4 16\n5\n7 0\n10 2\n6 6\n10 12\n8 16\n6\n-10 10\n-10 20\n10 22\n5 27\n0 37\n5 47\n8\n-8 10\n-8 16\n3 17\n9 19\n14 24\n18 32\n18 40\n11 47", sample_out:"2\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2, vtotal_submit:6, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"华东区大学生程序设计邀请赛_热身赛", author:"", tag:["TEST"]}
{pid:1683, vid:1683, oj:"hdu", title:"Colour sequence", desc:"We have a pile of cards consisting of 100 cards that are coloured on both sides. There is a finite number of colours (at most 26). In addition there are special cards called jokers. Jokers have a joker sign on both sides, which can assume any of the possible colours. We consider here a one-player card game, in which the player is challenged to derive a given colour sequence from a given row of cards, following certain rules.<br><br>Before the actual beginning of the game a colour sequence S of length at most 100 (not containing a joker) is given. Furthermore a number of cards are chosen from the pile and are put in a row. The sides turned upwards form a row of colours. Now the aim for the player is to create the colour sequence S with the cards from the row in the following way. For each card in the row the player decides whether or not to turn it over. When the card is turned over, only the colour on the other side is visible. Jokers may be part of the row of cards.<br><br>These steps lead to the final sequence of colours formed by the visible side of the cards in the row. If the player has been able to turn the cards in such a way that the pre-given colour sequence S is contained (from left to right) in the final row of colours, the player wins. If not, he loses. In matching the pre-given colour sequence to the row, cards in the row may be skipped, as long as the relative order of the colours is preserved. A joker can assume any colour. For example, the colour sequence (red, blue, yellow) is contained in (green, joker, blue, red, yellow), and (blue, green, blue, green) is contained in (red, blue, joker, yellow, joker, blue, green, green).<br><br>Your job is to find out if the player can win, given the colour sequence S and the row of cards chosen from the pile. This means that the sequence of colours that are face up is known, and so are the colours on the other side of these cards.<br><br>", input:"The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:<br><br>One line describing the colour sequence S. This line contains a string of m (with 1 ≤ m ≤ 100) characters from the set {\'A\', \'B\', …, \'Z\'}, denoting the colours. Different colours correspond to different characters. For example: &quot;BGBG&quot; denotes the sequence blue, green, blue, green.<br><br>Two lines, corresponding to the row of cards chosen from the pile. Each of these lines contains a string of k (1 ≤ k ≤ 100) characters from the set {\'A\', \'B\', …, \'Z\', \'*\'}. The character \'*\' denotes a joker, which can play the role of any of the possible colours.<br><br><br>The string in the first line corresponds to the row of colours on the visible side of the cards. The string in the second line corresponds to the row of colours on the hidden side of the cards.<br><br>So for the ith card in the row, the first line gives the colour of the side turned upwards and the second line shows the colour of the side face down. Obviously the strings on both lines have the same length. Furthermore, a \'*\' in one line (denoting a joker) always corresponds to a \'*\' in the other line at the corresponding position.<br><br>", output:"For every test case in the input file, the output should contain one line. This line contains &quot;win&quot; if the colour sequence S can be achieved by the player by turning the right cards upside down, and &quot;lose&quot; if this is not the case.<br><br>", sample_in:"3\nRBY\nB*RRB\nG*BRY\nBGBG\nRZ*Y*PGG\nAB*Y*BCB\nBAPC\nBUBCDAPVDAVVDLPF\nVLDCUSPGLSGPPVDD", sample_out:"win\nwin\nlose", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:106, vtotal_submit:207, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"华东区大学生程序设计邀请赛_热身赛", author:"", tag:["TEST"]}
{pid:1684, vid:1684, oj:"hdu", title:"Projects", desc:"In a certain week, a company wants to finish m projects. To this end, the company can employ at most n people from the unemployment agency for a period of one week. Each external employee will cost the company salary euro, unless the project in which he/she is involved is not completed in time. In that case no payment is due.<br><br>For each project the company knows from experience the probability that the project will be completed within a week, as a function of the number of employees working on it. These probabilities are given as percentages pij, where i (with 1 ≤ i ≤ m) is the number of the project and j is the number of people working on it. Of course, when nobody is working on a project i, the probability pi0 is zero percent.<br><br>If project i is indeed finished within a week, the company earns reward(i) euro; if it is not ready in time, the company has to pay a fine of punishment(i) euro.<br><br>Of course the company wants to maximise its total expected profit1 at the end of the week by finding the optimal number of external employees to hire, and how to divide them over the projects. The optimal number of employees is the total number of people needed to achieve the maximal expected profit. Your task in this matter is to calculate this optimal number of external employees. Remember that at most n people are available. Furthermore: if a person is employed, he/she works on one and only one project.<br><br><br>--------------------------------------------------------------------------------<br><br>1Let p (0 &lt; p &lt; 1) be the probability that a job is finished in time, and let E1 be the profit in that case. Furthermore, let E2 be the (negative) profit in case the job is not finished in time. Then the expected profit for this particular job is p*E1 + (1 - p)*E2.<br><br>", input:"The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:<br><br>One line with one integer m with 1 ≤ m ≤ 100: the number of projects.<br>One line with one integer n with 0 ≤ n ≤ 100: the maximal number of available employees.<br>One line with one integer salary with 0 ≤ salary ≤ 1,000: the salary of one employee. Remember that the salary is given in euros.<br>m lines, each line corresponding to a project i, containing n integers pi1, pi2, …, pin (the percentages, with 0 ≤ pi1, pi2, …, pin ≤ 100), followed by two integers corresponding to the reward and the punishment for project i. All values are separated by single spaces. Both reward and punishment are given in euros and are between 0 and 100,000 (boundaries included).<br>", output:"For every test case in the input file, the output should contain two lines.<br><br>The first line contains the maximal expected profit in eurocents.<br>The second line contains the total number of external employees that must be hired in order to achieve this maximal expected profit. If the maximal expected profit can be achieved by different (total) numbers of employees, then these different numbers must be given in increasing order. Numbers have to be separated by single spaces.<br>", sample_in:"3\n1\n4\n200\n90 100 100 100 2000 0\n2\n2\n100\n80 80 2100 500\n0 100 1700 500\n3\n4\n100\n100 80 80 70 1000 100\n100 90 80 90 500 50\n100 70 60 50 700 100", sample_out:"162000\n1\n100000\n1 2\n190000\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:48, vtotal_submit:138, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"华东区大学生程序设计邀请赛_热身赛", author:"", tag:["TEST"]}
{pid:1685, vid:1685, oj:"hdu", title:"Booksort", desc:"The Leiden University Library has millions of books. When a student wants to borrow a certain book, he usually submits an online loan form. If the book is available, then the next day the student can go and get it at the loan counter. This is the modern way of borrowing books at the library.<br><br>There is one department in the library, full of bookcases, where still the old way of borrowing is in use. Students can simply walk around there, pick out the books they like and, after registration, take them home for at most three weeks.<br><br>Quite often, however, it happens that a student takes a book from the shelf, takes a closer look at it, decides that he does not want to read it, and puts it back. Unfortunately, not all students are very careful with this last step. Although each book has a unique identification code, by which the books are sorted in the bookcase, some students put back the books they have considered at the wrong place. They do put it back onto the right shelf. However, not at the right position on the shelf.<br><br>Other students use the unique identification code (which they can find in an online catalogue) to find the books they want to borrow. For them, it is important that the books are really sorted on this code. Also for the librarian, it is important that the books are sorted. It makes it much easier to check if perhaps some books are stolen: not borrowed, but yet missing.<br><br>Therefore, every week, the librarian makes a round through the department and sorts the books on every shelf. Sorting one shelf is doable, but still quite some work. The librarian has considered several algorithms for it, and decided that the easiest way for him to sort the books on a shelf, is by sorting by transpositions: as long as the books are not sorted,<br><br>take out a block of books (a number of books standing next to each other),<br>shift another block of books from the left or the right of the resulting ‘hole’, into this hole,<br>and put back the first block of books into the hole left open by the second block.<br>One such sequence of steps is called a transposition.<br><br>The following picture may clarify the steps of the algorithm, where X denotes the first block of books, and Y denotes the second block.<br><br><img src=data/images/1685_1.jpg><br><br>Of course, the librarian wants to minimize the work he has to do. That is, for every bookshelf, he wants to minimize the number of transpositions he must carry out to sort the books. In particular, he wants to know if the books on the shelf can be sorted by at most 4 transpositions. Can you tell him?<br><br>", input:"The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:<br><br>One line with one integer n with 1 ≤ n ≤ 15: the number of books on a certain shelf.<br>One line with the n integers 1, 2, …, n in some order, separated by single spaces: the unique identification codes of the n books in their current order on the shelf.<br>", output:"For every test case in the input file, the output should contain a single line, containing:<br><br>if the minimal number of transpositions to sort the books on their unique identification codes (in increasing order) is T ≤ 4, then this minimal number T;<br>if at least 5 transpositions are needed to sort the books, then the message &quot;5 or more&quot;.<br>", sample_in:"3\n6\n1 3 4 6 2 5\n5\n5 4 3 2 1\n10 \n6 8 5 3 4 7 2 9 1 10", sample_out:"2\n3\n5 or more", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:41, vtotal_submit:177, special_status:0, time_limit:10000, mem_limit:102400, hint:"", source:"华东区大学生程序设计邀请赛_热身赛", author:"", tag:["TEST"]}
{pid:1686, vid:1686, oj:"hdu", title:"Oulipo", desc:"The French author Georges Perec (1936–1982) once wrote a book, La disparition, without the letter \'e\'. He was a member of the Oulipo group. A quote from the book:<br><br>Tout avait Pair normal, mais tout s’affirmait faux. Tout avait Fair normal, d’abord, puis surgissait l’inhumain, l’affolant. Il aurait voulu savoir où s’articulait l’association qui l’unissait au roman : stir son tapis, assaillant à tout instant son imagination, l’intuition d’un tabou, la vision d’un mal obscur, d’un quoi vacant, d’un non-dit : la vision, l’avision d’un oubli commandant tout, où s’abolissait la raison : tout avait l’air normal mais…<br><br>Perec would probably have scored high (or rather, low) in the following contest. People are asked to write a perhaps even meaningful text on some subject with as few occurrences of a given “word” as possible. Our task is to provide the jury with a program that counts these occurrences, in order to obtain a ranking of the competitors. These competitors often write very long texts with nonsense meaning; a sequence of 500,000 consecutive \'T\'s is not unusual. And they never use spaces.<br><br>So we want to quickly find out how often a word, i.e., a given string, occurs in a text. More formally: given the alphabet {\'A\', \'B\', \'C\', …, \'Z\'} and two finite strings over that alphabet, a word W and a text T, count the number of occurrences of W in T. All the consecutive characters of W must exactly match consecutive characters of T. Occurrences may overlap.<br><br>", input:"The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:<br><br>One line with the word W, a string over {\'A\', \'B\', \'C\', …, \'Z\'}, with 1 ≤ |W| ≤ 10,000 (here |W| denotes the length of the string W).<br>One line with the text T, a string over {\'A\', \'B\', \'C\', …, \'Z\'}, with |W| ≤ |T| ≤ 1,000,000.<br>", output:"For every test case in the input file, the output should contain a single number, on a single line: the number of occurrences of the word W in the text T.<br><br>", sample_in:"3\nBAPC\nBAPC\nAZA\nAZAZAZA\nVERDI\nAVERDXIVYERDIAN", sample_out:"1\n3\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:926, vtotal_submit:3905, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"华东区大学生程序设计邀请赛_热身赛", author:"", tag:["TEST"]}
{pid:1687, vid:1687, oj:"hdu", title:"Lucky Light", desc:"We have a (point) light source at position (xL, yL) with yL &gt; 0, and a finite series of line segments, all of finite non-zero length, given by the coordinates of their two endpoints. These endpoints are all different. The line segments are all situated above the x-axis (y &gt; 0).<br><br>The segments cast their shadows onto the x-axis. We assume that the shadows of two segments either do not overlap at all, or have an overlap that has some non-zero width (they do not just touch). We also assume that for each segment its shadow is more than just one point, i.e., there is no segment that is directed toward the light source. The height of the light source (yL) is at least 1 unit larger than the y-coordinates of the endpoints of the line segments. This guarantees that indeed each line segment has a bounded shadow on the x-axis.<br><br>The collection of shadows divides the x-axis into dark and lighted areas (intervals). The problem is to determine the number of lighted areas — which is at least 2 (if there is at least one line segment, otherwise it is 1).<br><br>In the picture below the three line segments A, B and C cause three lighted areas, as indicated.<br><br><img src=data/images/1687_1.jpg><br>", input:"The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:<br><br>One line with one integer n with 0 ≤ n ≤ 100: the number of line segments.<br>One line with two integers xL and yL, the coordinates of the light source, separated by a single space. The coordinates satisfy -100 ≤ xL ≤ 100 and 1 ≤ yL ≤ 1,000.<br>n lines, each containing four integers xi, yi, ui and vi, separated by single spaces, that specify x- and y-coordinates of the two endpoints (xi, yi) and (ui, vi) of the ith line segment, where -100 ≤ xi, ui ≤ 100 and 0 &lt; yi, vi &lt; yL, for 1 ≤ i ≤ n.<br>", output:"For every test case in the input file, the output should contain a single number, on a single line: the number of lighted areas.<br><br>", sample_in:"2\n3\n50 60\n55 45 30 35\n64 39 92 18\n20 30 40 16\n2\n-10 50\n-10 1 10 11\n-10 11 10 1", sample_out:"3\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:56, vtotal_submit:248, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"华东区大学生程序设计邀请赛_热身赛", author:"", tag:["TEST"]}
{pid:1688, vid:1688, oj:"hdu", title:"Sightseeing", desc:"Tour operator Your Personal Holiday organises guided bus trips across the Benelux. Every day the bus moves from one city S to another city F. On this way, the tourists in the bus can see the sights alongside the route travelled. Moreover, the bus makes a number of stops (zero or more) at some beautiful cities, where the tourists get out to see the local sights.<br><br>Different groups of tourists may have different preferences for the sights they want to see, and thus for the route to be taken from S to F. Therefore, Your Personal Holiday wants to offer its clients a choice from many different routes. As hotels have been booked in advance, the starting city S and the final city F, though, are fixed. Two routes from S to F are considered different if there is at least one road from a city A to a city B which is part of one route, but not of the other route.<br><br>There is a restriction on the routes that the tourists may choose from. To leave enough time for the sightseeing at the stops (and to avoid using too much fuel), the bus has to take a short route from S to F. It has to be either a route with minimal distance, or a route which is one distance unit longer than the minimal distance. Indeed, by allowing routes that are one distance unit longer, the tourists may have more choice than by restricting them to exactly the minimal routes. This enhances the impression of a personal holiday.<br><br><img src=data/images/1688_1.jpg><br><br>For example, for the above road map, there are two minimal routes from S = 1 to F = 5: 1 → 2 → 5 and 1 → 3 → 5, both of length 6. There is one route that is one distance unit longer: 1 → 3 → 4 → 5, of length 7.<br><br>Now, given a (partial) road map of the Benelux and two cities S and F, tour operator Your Personal Holiday likes to know how many different routes it can offer to its clients, under the above restriction on the route length.<br><br>", input:"The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:<br><br>One line with two integers N and M, separated by a single space, with 2 ≤ N ≤ 1,000 and 1 ≤ M ≤ 10, 000: the number of cities and the number of roads in the road map.<br><br>M lines, each with three integers A, B and L, separated by single spaces, with 1 ≤ A, B ≤ N, A ≠ B and 1 ≤ L ≤ 1,000, describing a road from city A to city B with length L.<br><br>The roads are unidirectional. Hence, if there is a road from A to B, then there is not necessarily also a road from B to A. There may be different roads from a city A to a city B.<br><br>One line with two integers S and F, separated by a single space, with 1 ≤ S, F ≤ N and S ≠ F: the starting city and the final city of the route.<br><br>There will be at least one route from S to F.<br><br>", output:"For every test case in the input file, the output should contain a single number, on a single line: the number of routes of minimal length or one distance unit longer. Test cases are such, that this number is at most 10^9 = 1,000,000,000.<br><br>", sample_in:"2\n5 8\n1 2 3\n1 3 2\n1 4 5\n2 3 1\n2 5 3\n3 4 2\n3 5 4\n4 5 3\n1 5\n5 6\n2 3 1\n3 2 1\n3 1 10\n4 5 2\n5 2 7\n5 2 7\n4 1", sample_out:"3\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:162, vtotal_submit:600, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"华东区大学生程序设计邀请赛_热身赛", author:"", tag:["TEST"]}
{pid:1689, vid:1689, oj:"hdu", title:"Alien’s Necklace", desc:"JYY is taking a trip to Mars. To get accepted by the Martians, he decided to make a magic necklace for their king. (Otherwise, JYY will be eaten) Now, he has collected many magic balls, and he is going to string them up.<br>    Unfortunately, only particular pairs of balls can be adjacent in the necklace, otherwise they will explode. Notice that the first and the last ball in the necklace are also adjacent. Besides, the Martians think even numbers are unlucky, so the number of balls in the necklace must be odd. (Of course each ball can be used only once)<br>    A necklace contains at least 3 balls. Because the balls are really precious, JYY wants the necklace has as few balls as possible. (Then he can give rest balls to his GF)<br>    So JYY wonders the number of balls he has to use to make this necklace.<br>", input:"The input consists of several test cases. There is a single number above all, the number of cases. There are no more than 20 cases.<br>    For each input, the first line contains 2 numbers N and M, N is the number of balls JYY collected, and M is the pairs of compatible balls. Balls are numbered from 1 to N. Followed M lines, each contains 2 numbers A and B, means that ball A and ball B are compatible. For each case, 0 &lt; N &lt;= 1,000, 0 &lt; M &lt;= 20,000.<br>", output:"If the gift can\'t be done, just print &quot;Poor JYY.&quot; in a line, otherwise, print the minimal number of balls in the necklace. Use the format in the example.<br>", sample_in:"2\n5 6\n1 2\n2 4\n1 3\n3 5\n4 3\n4 5\n2 1\n1 2", sample_out:"Case 1: JYY has to use 3 balls.\nCase 2: Poor JYY.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:219, vtotal_submit:1497, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"2008 “Sunline Cup” National Invitational Contest", author:"", tag:["TEST"]}
{pid:1690, vid:1690, oj:"hdu", title:"Bus System", desc:"Because of the huge population of China, public transportation is very important. Bus is an important transportation method in traditional public transportation system. And it’s still playing an important role even now.<br>The bus system of City X is quite strange. Unlike other city’s system, the cost of ticket is calculated based on the distance between the two stations. Here is a list which describes the relationship between the distance and the cost.<br><br><center><img src=data/images/C116-1002-1.JPG></center><br><br>Your neighbor is a person who is a really miser. He asked you to help him to calculate the minimum cost between the two stations he listed. Can you solve this problem for him?<br>To simplify this problem, you can assume that all the stations are located on a straight line. We use x-coordinates to describe the stations’ positions.<br>", input:"The input consists of several test cases. There is a single number above all, the number of cases. There are no more than 20 cases.<br>Each case contains eight integers on the first line, which are L1, L2, L3, L4, C1, C2, C3, C4, each number is non-negative and not larger than 1,000,000,000. You can also assume that L1&lt;=L2&lt;=L3&lt;=L4.<br>Two integers, n and m, are given next, representing the number of the stations and questions. Each of the next n lines contains one integer, representing the x-coordinate of the ith station. Each of the next m lines contains two integers, representing the start point and the destination.<br>In all of the questions, the start point will be different from the destination.<br>For each case,2&lt;=N&lt;=100,0&lt;=M&lt;=500, each x-coordinate is between -1,000,000,000 and 1,000,000,000, and no two x-coordinates will have the same value.<br>", output:"For each question, if the two stations are attainable, print the minimum cost between them. Otherwise, print “Station X and station Y are not attainable.” Use the format in the sample.<br>", sample_in:"2\n1 2 3 4 1 3 5 7\n4 2\n1\n2\n3\n4\n1 4\n4 1\n1 2 3 4 1 3 5 7\n4 1\n1\n2\n3\n10\n1 4", sample_out:"Case 1:\nThe minimum cost between station 1 and station 4 is 3.\nThe minimum cost between station 4 and station 1 is 3.\nCase 2:\nStation 1 and station 4 are not attainable.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:782, vtotal_submit:5853, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Sunline Cup” National Invitational Contest", author:"", tag:["TEST"]}
{pid:1691, vid:1691, oj:"hdu", title:"Chinese Chess", desc:"Chinese chess, or Xiangqi is an extremely popular game in the Eastern Hemisphere. It is currently played by millions (or tens of millions) in China\'s mainland, Taiwan, Thailand, Singapore, Vietnam, Hong Kong and other Asian countries. Chinese chess has remained in its present form for centuries.<br>The name Chinese chess has an interesting origin. Of China\'s four traditional arts -- qin (music), qi (strategy games), shu (calligraphy) and hua (brush painting) -- the second term, qi, provides the final syllable of Chinese chess.<br><br>Here’s some more information about Chinese chess.<br><br><b>Chinese chess Board</b><br><br><img src=data/images/C116-1003-1.JPG><br><br><b>Pieces</b><br>Each player has the following pieces: <br>2 Rooks (R) (or chariots) <br>2 Knights (N) (or horses) <br>2 Elephants (M) (or bishops or ministers) <br>2 Mandarins (G) (or advisors or assistants or guards) <br>1 King (K) (or generals) <br>2 Cannons (C)   <br>5 Pawns (P) (or soldiers) <br><br><img src=data/images/C116-1003-2.JPG><br><br><b>Rules</b><br>a) The object of the game is to checkmate or stalemate the opponent. This is accomplished by: <br>Placing the opponent in check so that he has no legal move to get out of the check. <br>Stalemating your opponent so that he has no legal move (when you stalemate your opponent, you win--it is not a draw as in chess). <br>b) Red usually moves first. <br>c) You cannot check your opponent indefinitely by moving the same piece to the same squares (resulting in perpetual check and a draw in chess). You cannot put the opponent in check more than 3 times in a row with the same piece without either side moving any other piece. <br>d) Similar to the rule above, you cannot indefinitely &quot;chase&quot; an opposing piece from one square to another if your opponent has no other way to avoid losing the piece. The idea of this rule and the rule above is to avoid perpetual check draws. Some of these situations can be complicated but usually the person who is initiating the perpetual move loop must break it off. <br>e) The two kings cannot face each other on the same column without any pieces between them.<br>f) When neither side can capture the opposing king, the game is a draw. <br><br><br>Now your group is developing a Chinese chess software. It’s your task to write a program to check if the moves are legal or not. To simplify this problem, you needn’t to consider the rule b, c, d, f. It means that the result is not important. The only thing you need to do is to judge if the moves are legal. A move is illegal if:<br>a)&nbsp;&nbsp;The given coordinates of original and final position are illegal. Such as the position is out of the board, the original position is empty or your opponent’s piece or the final position is your own piece.<br>b)&nbsp;&nbsp;The move breaks the move rules and rules above (except rule b, c, d, f)<br>c)&nbsp;&nbsp;Something special, if after one move, one of the player’s king has been eaten, if it\'s the last move, it’s legal, or the next move is illegal. (look at the sample for more details)<br>", input:"&nbsp;&nbsp;The input consists of several test cases. There is a single number above all, the number of cases. There are no more than 300 cases.<br>&nbsp;&nbsp;Each case starts with the initial chess board. There are 10 rows and 9 columns. 0 represents empty point. 1, 2, 3, 4, 5, 6, 7 represent red king, mandarin, elephant, knight, rook, cannon, pawn while 8, 9, 10, 11, 12, 13, 14 represent black pieces. Then two numbers N and K ( ): n is the number of moves and if K=0 red moves first, if K=1 black moves first. Next N lines follow, each containing four integers, representing the coordinates of original position and final position. You may assume that the initial board is always legal. For more details, the board of figure 1 is:<br>12 11 10 9 8 9 10 11 12<br>0 0 0 0 0 0 0 0 0<br>0 13 0 0 0 0 0 13 0<br>14 0 14 0 14 0 14 0 14<br>0 0 0 0 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0<br>7 0 7 0 7 0 7 0 7<br>0 6 0 0 0 0 0 6 0<br>0 0 0 0 0 0 0 0 0<br>5 4 3 2 1 2 3 4 5<br>", output:"If all of the moves are legal, print “Legal move”. If step x is the first illegal move, then print “Illegal move on step x”. If there are several moves are illegal, print the first illegal move only. Use the format in the sample.", sample_in:"3\n0 0 0 9 8 0 0 0 0\n0 0 0 0 9 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 11 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 2 0 0 0 5\n0 0 0 2 1 0 0 0 0\n3 1\n7 8 8 6\n9 9 9 6\n8 6 10 5\n0 0 0 0 8 0 0 0 0\n0 0 0 0 7 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 14 1 0 0 0 0\n1 0\n2 5 1 5\n0 0 0 0 8 0 0 0 0\n0 0 0 0 7 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 14 1 0 0 0 0\n2 0\n2 5 1 5\n10 4 10 5", sample_out:"Case 1: Illegal move on step 3\nCase 2: Legal move\nCase 3: Illegal move on step 2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:74, vtotal_submit:791, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Sunline Cup” National Invitational Contest", author:"", tag:["TEST"]}
{pid:1692, vid:1692, oj:"hdu", title:"Destroy the Well of Life", desc:"In the game of DotA (Defense of the Ancient), there are two opposite legions called The Sentinel and The Scourage. <br>Now The Scourage has made a big success and The Sentinel is at stake!<br>So The Sentinel must destroy the Well of Life of The Scourage.<br>The chief of The Sentinel, Prophet, asks EarthShaker to do this arduous task.<br><br>There are N Wells of Life of The Scourage (The Wells of Life are numbered from 1 to N), and EarthShaker’s task is to destroy the Nth Well of Life.<br>The following information is known about each Well of Life:<br>Wi – the weight of water on i-th Well of Life before it is destroyed.<br>Li – if the weight of water on i-th Well of Life is more than Li, the i-th Well of Life will be destroyed and the water of it will pours to the (i + 1)-th Well of Life.<br>Pi – EarthShaker has a skill called Echo-Slam, the i-th Well of Life will be immediately destroyed when he uses Echo-Slam to it and the water of it will pours to the (i + 1)-th Well of Life. For the i-th Well of Life, the energy that EarthShaker need to use Echo-Slam to destroy it is Pi. <br><br>Can you tell EarthShaker the minimum amount of energy needed to destroy the Nth Well of Life? <br><br><center><img src=data/images/C116-1004-1.JPG></center><br>", input:"The input consists of several test cases. There is a single number on the first line, the number of cases. There are no more than 10 cases.<br>Each case contains a natural number N on the first line, 1&lt;=N&lt;=100,000.<br>Following N lines contains three numbers Wi, Li, Pi (Wi&lt;=Li, 0&lt;=Wi, Li, Pi &lt;=20,000), representing the information of the i-th Well of Life.<br>", output:"For each case, print a number in a line representing the least amount of energy EarthShaker needed to use, so as to destroy the Nth Well of Life. Use the format in the sample.<br>", sample_in:"1\n3\n1000 1000 1 \n0 1000 2 \n2 10 100", sample_out:"Case 1: Need to use 3 mana points.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:218, vtotal_submit:837, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"2008 “Sunline Cup” National Invitational Contest", author:"", tag:["TEST"]}
{pid:1693, vid:1693, oj:"hdu", title:"Eat the Trees", desc:"Most of us know that in the game called DotA(Defense of the Ancient), Pudge is a strong hero in the first period of the game. When the game goes to end however, Pudge is not a strong hero any more.<br>So Pudge’s teammates give him a new assignment—Eat the Trees!<br><br>    The trees are in a rectangle N * M cells in size and each of the cells either has exactly one tree or has nothing at all. And what Pudge needs to do is to eat all trees that are in the cells.<br>    There are several rules Pudge must follow:<br>I. Pudge must eat the trees by choosing a circuit and he then will eat all trees that are in the chosen circuit.<br>II. The cell that does not contain a tree is unreachable, e.g. each of the cells that is through the circuit which Pudge chooses must contain a tree and when the circuit is chosen, the trees which are in the cells on the circuit will disappear.<br>III. Pudge may choose one or more circuits to eat the trees.<br><br>Now Pudge has a question, how many ways are there to eat the trees?<br>At the picture below three samples are given for N = 6 and M = 3(gray square means no trees in the cell, and the bold black line means the chosen circuit(s))<br><br><center><img src=data/images/C116-1005-1.JPG></center><br>", input:"The input consists of several test cases. The first line of the input is the number of the cases. There are no more than 10 cases.<br>For each case, the first line contains the integer numbers N and M, 1&lt;=N, M&lt;=11. Each of the next N lines contains M numbers (either 0 or 1) separated by a space. Number 0 means a cell which has no trees and number 1 means a cell that has exactly one tree.<br>", output:"For each case, you should print the desired number of ways in one line. It is guaranteed, that it does not exceed 2<sup>63</sup> – 1. Use the format in the sample.", sample_in:"2\n6 3\n1 1 1\n1 0 1\n1 1 1\n1 1 1\n1 0 1\n1 1 1\n2 4\n1 1 1 1\n1 1 1 1", sample_out:"Case 1: There are 3 ways to eat the trees.\nCase 2: There are 2 ways to eat the trees.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:511, vtotal_submit:2136, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"2008 “Sunline Cup” National Invitational Contest", author:"", tag:["TEST"]}
{pid:1694, vid:1694, oj:"hdu", title:"Final Challenge", desc:"Definite integral is an important part of Mathematical Analysis. During Mathematical Analysis lessons, students always find it quite hard to calculate the definite integral. And the software Mathematic is so complex that very few students can master its usage.<br><br>So can you develop a simple tool to help the students calculate the definite integral? It’s the final challenge in this contest. This task requires many skills and is so challenging that probably only the god can solve it in 5 hours. Can you solve it and become a god-like person?<br><br><br>Next is the format for all functions in this challenge:<br>There are six types of basic elementary function:<br>1、&nbsp;&nbsp;constant function: C;<br>2、&nbsp;&nbsp;power function: x^C;<br>3、&nbsp;&nbsp;exponential function: e^x;<br>4、&nbsp;&nbsp;logarithmic function: ln(x);<br>5、&nbsp;&nbsp;trigonometric function: sin(x), cos(x), tan(x), cot(x), sec(x), cot(x);<br>6、&nbsp;&nbsp;inverse circular trigonometric function: asin(x), acos(x), atan(x).<br>C is a constant number between -100 and 100.<br><br>Elementary function is basic elementary function and their composite functions. There are ten types of composite functions. (A and B represent elementary functions)<br>1、&nbsp;&nbsp;A+B;<br>2、&nbsp;&nbsp;A-B;<br>3、&nbsp;&nbsp;-A;<br>4、&nbsp;&nbsp;A*B;<br>5、&nbsp;&nbsp;A/B;<br>6、&nbsp;&nbsp;A^B;<br>7、&nbsp;&nbsp;e^A;<br>8、&nbsp;&nbsp;ln(A);<br>9、&nbsp;&nbsp;sin(A), cos(A), tan(A), cot(A), sec(A), csc(A);<br>10、&nbsp;&nbsp;asin(A), acos(A), atan(A).<br>Arithmetic priority: () &gt; ^ &gt; *, / &gt; +,-<br><br>In this problem, the task can be proper integral, improper integral; it is also possible that its indefinite integral isn’t even an elementary function. But you can assume that, if the integrating range is [a,b], then (a,b) will be a subset of the function’s definitions. You can also assume that for any improper integral, the result of it will converge. Finally, it is guaranteed that the final result is between -10,000 and 10,000.<br><br><br>", input:"The input consists of several test cases. There is a single number above all, the number of cases. There are no more than 50 cases.<br>Each case contains two lines. The first line contains the function f(x) in the format above. There are no more than 300 letters each. There aren’t any whitespaces in the function.<br>The second line contains two floating numbers, a and b, －10,100 &lt;= a, b &lt;= 10,000 representing the integrating range. Notice that a and b can also be INF, -INF representing ∞ and -∞.<br>", output:"For each case, print the value of <img src=data/images/C116-1006-1.JPG> . The answer should be rounded to six digits to the right of the decimal point. Use the format in the sample.<br>", sample_in:"3\nx\n1 2\nsin(x)^2/(sin(x)+cos(x))\n0 1.5707963268\ne^(-x)\n0 INF", sample_out:"Case 1: 1.500000\nCase 2: 0.623225\nCase 3: 1.000000", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:37, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"2008 “Sunline Cup” National Invitational Contest", author:"", tag:["TEST"]}
{pid:1695, vid:1695, oj:"hdu", title:"GCD", desc:"Given 5 integers: a, b, c, d, k, you\'re to find x in a...b, y in c...d that GCD(x, y) = k. GCD(x, y) means the greatest common divisor of x and y. Since the number of choices may be very large, you\'re only required to output the total number of different number pairs.<br>Please notice that, (x=5, y=7) and (x=7, y=5) are considered to be the same.<br><br><b>Yoiu can assume that a = c = 1 in all test cases.</b><br>", input:"The input consists of several test cases. The first line of the input is the number of the cases. There are no more than 3,000 cases.<br>Each case contains five integers: a, b, c, d, k, 0 &lt; a &lt;= b &lt;= 100,000, 0 &lt; c &lt;= d &lt;= 100,000, 0 &lt;= k &lt;= 100,000, as described above.<br>", output:"For each test case, print the number of choices. Use the format in the example.<br>", sample_in:"2\n1 3 1 5 1\n1 11014 1 14409 9", sample_out:"Case 1: 9\nCase 2: 736427\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>For the first sample input, all the 9 pairs of numbers are (1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 5), (3, 4), (3, 5).</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:723, vtotal_submit:4878, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"2008 “Sunline Cup” National Invitational Contest", author:"", tag:["TEST"]}
{pid:1696, vid:1696, oj:"hdu", title:"Help the People Been Trapped", desc:"Full Score of Fear, the Movie 12 of Detective Conan has been published recently.<br><center><img src=data/images/C116-1008-1.JPG></center><br><br>Before going to the concert, Conan had been attacked and was unconscious. But Ran wasn’t aware of Conan’s disappearance. Then they went into the odeum, and the concert started.<br>Suddenly, the bombs in the odeum blasted and the whole building was on fire. All the audiences are trapped in the odeum, include Mouri Ran and Haibara Ai. Thousands of people are in danger now.<br><br>After the explosion, some walls have collapsed and blocked the way. Now Conan gets a map from the police, and he knows the location of all the hindrances. Also, he knows that Ran is a karate superior, and she can destroy some hindrances. (Horrific) As destroying the hindrance is a hard job, Conan wants to find a way to get out of the odeum crossing the least number of hindrances.<br><br>But the odeum is so large that it’s not an easy work to find that way. Can you help Conan and the people trapped in the odeum?<br>", input:"The input consists of several test cases. The first line of the input is the number of the cases. There are no more than 20 cases.<br>Each case contains an integer M on its first line, which is the number of the hindrances. 0&lt;=M&lt;=4000.<br>The next m lines describe m hindrances each. Each line contains four integers in each, x1, y1, x2, y2, means that there is a hindrance from (x1, y1) to (x2, y2). The hindrances will not cross each other, but they can meet at the end point.<br>The last line contains two integers, x, y, means that the people are trapped at point (x, y). You can assume that this point will not be on any of the hindrances.<br>Every coordinate is between -10,000 and 10,000.<br>", output:"For each case, print the least number of hindrances need to be destroyed. (If you need to cross an end point, it should be counted multiple times; look at the second sample for more details) Use the format in the sample.<br>", sample_in:"3\n0\n0 0\n12\n0 0 2 0\n2 0 4 0\n0 2 2 2\n2 2 4 2\n0 4 2 4\n2 4 4 4\n0 0 0 2\n0 2 0 4\n2 0 2 2\n2 2 2 4\n4 0 4 2\n4 2 4 4\n1 1\n6\n0 2 1 0\n0 2 -1 0\n1 0 -1 0\n0 2 -2 -1\n0 2 2 -1\n-2 -1 2 -1\n0 1", sample_out:"Case 1: Need to destroy 0 hindrances.\nCase 2: Need to destroy 1 hindrances.\nCase 3: Need to destroy 2 hindrances.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4, vtotal_submit:93, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Sunline Cup” National Invitational Contest", author:"", tag:["TEST"]}
{pid:1697, vid:1697, oj:"hdu", title:"Iron Chain", desc:"In physics class, the teacher shows us an interesting physics experiment. He hangs an iron chain on a fixed point on the wall. (Look at the right picture for more details). If the lengths of the iron chains on the left side and right side are different, the gravity forces the iron chain to drop to the floor and hits the sensor. Then the computer shows the F-t functional image on the screen. The teacher wants to teach you momentum and its conservation:<img src=data/images/C116-1009-1.JPG><br>But you are not interested in this at all. The thing you want to know is how long it takes for the iron chain to drop to the floor.<br><center><img src=data/images/C116-1009-2.JPG></center><br><br>You can assume that the iron chain is well-mixed, and you can ignore the friction between the iron chain and the fixed point on the wall. The friction between the chain and the air needn’t be taken into account either. The fixed point is a particle whose radius is 0. And the acceleration of gravity, or so-called g, is 9.80665m/s<sup>2</sup> in this problem.", input:"The input consists of several test cases. There is a single number above all, the number of cases. There are no more than 20 cases.<br>Each case contains three integer numbers a, b, h. Look at the picture above for their meaning. 1&lt;=a+b&lt;=5000,a+b&lt;=h&lt;=10000. <br>", output:"For each case, if the chain can reach the floor, print” The iron chain will reach the floor after t seconds.”, otherwise, print” The iron chain will not reach the floor at all!” instead. And the answer should be rounded to three digits to the right of the decimal point. Use the format in the sample.<br>", sample_in:"2\n0 10 20\n1 3 4", sample_out:"Case 1: The iron chain will reach the floor after 1.428 seconds.\nCase 2: The iron chain will reach the floor after 0.595 seconds.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:66, vtotal_submit:254, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Sunline Cup” National Invitational Contest", author:"", tag:["TEST"]}
{pid:1698, vid:1698, oj:"hdu", title:"Just a Hook", desc:"In the game of DotA, Pudge’s meat hook is actually the most horrible thing for most of the heroes. The hook is made up of several consecutive metallic sticks which are of the same length.<br><br><center><img src=data/images/C116-1010-1.JPG></center><br><br>Now Pudge wants to do some operations on the hook.<br><br>Let us number the consecutive metallic sticks of the hook from 1 to N. For each operation, Pudge can change the consecutive metallic sticks, numbered from X to Y, into cupreous sticks, silver sticks or golden sticks.<br>The total value of the hook is calculated as the sum of values of N metallic sticks. More precisely, the value for each kind of stick is calculated as follows:<br><br>For each cupreous stick, the value is 1.<br>For each silver stick, the value is 2.<br>For each golden stick, the value is 3.<br><br>Pudge wants to know the total value of the hook after performing the operations.<br>You may consider the original hook is made up of cupreous sticks.<br>", input:"The input consists of several test cases. The first line of the input is the number of the cases. There are no more than 10 cases.<br>For each case, the first line contains an integer N, 1&lt;=N&lt;=100,000, which is the number of the sticks of Pudge’s meat hook and the second line contains an integer Q, 0&lt;=Q&lt;=100,000, which is the number of the operations.<br>Next Q lines, each line contains three integers X, Y, 1&lt;=X&lt;=Y&lt;=N, Z, 1&lt;=Z&lt;=3, which defines an operation: change the sticks numbered from X to Y into the metal kind Z, where Z=1 represents the cupreous kind, Z=2 represents the silver kind and Z=3 represents the golden kind.<br>", output:"For each case, print a number in a line representing the total value of the hook after the operations. Use the format in the example.<br>", sample_in:"1\n10\n2\n1 5 2\n5 9 3", sample_out:"Case 1: The total value of the hook is 24.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3140, vtotal_submit:14517, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"2008 “Sunline Cup” National Invitational Contest", author:"", tag:["TEST"]}
{pid:1699, vid:1699, oj:"hdu", title:"The comment in cpp", desc:"In C++ ,there are two styles of comment, one is a stream of characters enclosed by &quot;/*&quot; and &quot;*/&quot;, and the other is a single line beginning with &quot;//&quot;. Comments will not be nested as in c++. <br>Your task is to deal with these comments, which is to capitalize all the letters in a comment and count the number of occurrence of comments.<br>To simplify your task, you may assume that comments will not appear in constant strings.<br>", input:"The first line speicifies the number of test cases T (T &lt;= 10). Each test case begins with a number L (L &lt;= 100), the number of lines of the C++ code, following L lines which is the body of the code. The length of each line of the code will not exceed 200.", output:"For each test case, output the number occurrence of comments you\'ve found and then the resulting text of your processing. <font color=red>print a line after each test case.</font><br>", sample_in:"2\n1\n/*hduacm\n1\n/*hduacm //hduacm */", sample_out:"0\n/*hduacm\n\n1\n/*HDUACM //HDUACM */", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:26, vtotal_submit:232, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（4）", author:"", tag:["TEST"]}
{pid:1700, vid:1700, oj:"hdu", title:"Points on Cycle ", desc:"There is a cycle with its center on the origin.<br>Now give you a point on the cycle, you are to find out the other two points on it, to maximize the sum of the distance between each other<br>you may assume that the radius of the cycle will not exceed 1000.", input:"There are T test cases, in each case there are 2 decimal number representing the coordinate of the given point.", output:"For each testcase you are supposed to output the coordinates of both of the unknow points by 3 decimal places of precision <br>Alway output the lower one first(with a smaller Y-coordinate value), if they have the same Y value output the one with a smaller X. <br><br><div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>NOTE</i></div>when output, if the absolute difference between the coordinate values X1 and X2 is smaller than 0.0005, we assume they are equal.</div> ", sample_in:"2\n1.500 2.000\n563.585 1.251", sample_out:"0.982 -2.299 -2.482 0.299\n-280.709 -488.704 -282.876 487.453", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:373, vtotal_submit:1445, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（1）", author:"", tag:["TEST"]}
{pid:1701, vid:1701, oj:"hdu", title:"ACMer", desc:"There are at least P% and at most Q% students of HDU are ACMers, now I want to know how many students HDU have at least?", input:"The input contains multiple test cases.<br>The first line has one integer,represent the number of test cases.<br>The following N lines each line contains two numbers P and Q(P &lt; Q),which accurate up to 2 decimal places.", output:"For each test case, output the minumal number of students in HDU.", sample_in:"1\n13.00 14.10", sample_out:"15", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1283, vtotal_submit:3376, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（1）", author:"", tag:["TEST"]}
{pid:1702, vid:1702, oj:"hdu", title:"ACboy needs your help again!", desc:"ACboy was kidnapped!! <br>he miss his mother very much and is very scare now.You can\'t image how dark the room he was put into is, so poor :(.<br>   As a smart ACMer, you want to get ACboy out of the monster\'s labyrinth.But when you arrive at  the gate of the maze, the monste say :&quot; I have heard that you are very clever, but if can\'t solve my problems, you will die with ACboy.&quot;<br>  The problems of the monster is shown on the wall:<br>  Each problem\'s first line is a integer N(the number of commands), and a word &quot;FIFO&quot; or &quot;FILO&quot;.(you are very happy because you know &quot;FIFO&quot; stands for &quot;First In First Out&quot;, and &quot;FILO&quot; means &quot;First In Last Out&quot;).<br>  and the following N lines, each line is &quot;IN M&quot; or &quot;OUT&quot;, (M represent a integer).<br>  and the answer of a problem is a passowrd of a door, so if you want to rescue ACboy, answer the problem carefully!", input:"The input contains multiple test cases.<br>The first line has one integer,represent the number oftest cases.<br>And the input of each subproblem are described above.", output:"For each command &quot;OUT&quot;, you should output a integer depend on the word is &quot;FIFO&quot; or &quot;FILO&quot;, or a word &quot;None&quot; if you don\'t have any integer.", sample_in:"4\n4 FIFO\nIN 1\nIN 2\nOUT\nOUT\n4 FILO\nIN 1\nIN 2\nOUT\nOUT\n5 FIFO\nIN 1\nIN 2\nOUT\nOUT\nOUT\n5 FILO\nIN 1\nIN 2\nOUT\nIN 3\nOUT", sample_out:"1\n2\n2\n1\n1\n2\nNone\n2\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1082, vtotal_submit:2838, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（1）", author:"", tag:["TEST"]}
{pid:1703, vid:1703, oj:"hdu", title:"PBD", desc:"PrisonBreak is a popular TV programme in HDU. ACboy likes it very much, and he join a PrisonBreak discussing team called &quot;PBD&quot;.Every Tuesday night, a lot of PBDers will contact with each other to discuss the newest plot of PrisonBreak season2. Generally speaking, every PBDer has distinct ideas about the play, so everyone want to know all the others\' ideas. For example, when ACboy contract with Sam, ACboy will tell all the  ideas he konws to Sam, and Sam will also tell  all the  ideas he konws to ACboy, and the call costs 5 yuan. <br> If there are N people in the &quot;PBD&quot; team, what is the minimum cost to let everyone knows all the others\' ideas?", input:"The input contains multiple test cases.<br>Each test case contains a number N, means there are N people in the &quot;PBD&quot; team.N = 0 ends the input.(A call cost 5 yuan).<br>", output:"for each case, output a integer represent the minimum cost to let everyone knows all the others\' ideas.", sample_in:"1\n2\n3\n4\n0", sample_out:"0\n5\n15\n20\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nIf there are 2 people, for example, named A, B. Then A calls B, then A and B will know each other\'s ideas, so it only\n needs one call, so the minimum cost is 1*5 = 5 yuan.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:197, vtotal_submit:685, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（1）", author:"", tag:["TEST"]}
{pid:1704, vid:1704, oj:"hdu", title:"Rank", desc:"there are N ACMers in HDU team.<br>  ZJPCPC Sunny Cup 2007 is coming, and lcy want to select some excellent ACMers to attend the contest. There have been M matches since the last few days(No two ACMers will meet each other at two matches, means between two ACMers there will be at most one match). lcy also asks&quot;Who is the winner between A and B?&quot; But sometimes you can\'t answer lcy\'s query, for example, there are 3 people, named A, B, C.and 1 match was held between A and B, in the match A is the winner, then if lcy asks &quot;Who is the winner between A and B&quot;, of course you can answer &quot;A&quot;, but if lcy ask &quot;Who is the winner between A and C&quot;, you can\'t tell him the answer.<br> As lcy\'s assistant, you want to know how many queries at most you can\'t tell lcy(ask A B, and ask B A is the same; and lcy won\'t ask the same question twice).", input:"The input contains multiple test cases.<br>The first line has one integer,represent the number of test cases.<br>Each case first contains two integers N and M(N , M &lt;= 500), N is the number of ACMers in HDU team, and M is the number of matchs have been held.The following M lines, each line means a match and it contains two integers A and B, means A wins the match between A and B.And we define that if A wins B, and B wins C, then A wins C.", output:"For each test case, output a integer which represent the max possible number of queries that you can\'t tell lcy.", sample_in:"3\n3 3\n1 2\n1 3\n2 3\n3 2\n1 2\n2 3\n4 2\n1 2\n3 4", sample_out:"0\n0\n4\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nin the case3, if lcy ask (1 3 or 3 1) (1 4 or 4 1) (2 3 or 3 2) (2 4 or 4 2), then you can\'t tell him who is the winner.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:266, vtotal_submit:1045, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（1）", author:"", tag:["TEST"]}
{pid:1705, vid:1705, oj:"hdu", title:"Count the grid", desc:"A lattice point is an ordered pair (x, y) where x and y are both integers. Given the coordinates of the vertices of a triangle (which happen to be lattice points), you are to count the number of lattice points which lie completely inside of the triangle (points on the edges or vertices of the triangle do not count).", input:"The input test file will contain multiple test cases. Each input test case consists of six integers x1, y1, x2, y2, x3, and y3, where (x1, y1), (x2, y2), and (x3, y3) are the coordinates of vertices of the triangle. All triangles in the input will be non-degenerate (will have positive area), and －15000 ≤ x1, y1, x2, y2, x3, y3 ≤ 15000. The end-of-file is marked by a test case with x1 =  y1 = x2 = y2 = x3 = y3 = 0 and should not be processed.<br><br>", output:"For each input case, the program should print the number of internal lattice points on a single line.", sample_in:"0 0 1 0 0 1\n0 0 5 0 0 5\n0 0 0 0 0 0", sample_out:"0\n6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:62, vtotal_submit:234, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（1）", author:"", tag:["TEST"]}
{pid:1706, vid:1706, oj:"hdu", title:"The diameter of graph", desc:"The graph diameter is the length of the &quot;longest shortest path&quot; between any two vertices of a graph. In other words, a graph\'s diameter is the longest path which must be traversed in order to travel from any vertex to another when paths which backtrack, detour, or loop are excluded from consideration.<br> Given an undirected graph, your mission is to count the number of diameters of it.", input:"The input contains multiple test cases.  <br>For each test case, it contains n+1 lines. <br>Line 1: two integers m, n (2&lt;= m &lt;= 100, 1 &lt;= n &lt;= 4000) indicating that there are m vertices and n edges in the city. <br>Line 2~n+1: each contains three integers i, j, d (1 &lt;= i, j &lt;= m, 1 &lt;= d &lt;= 100), indicating that there is an edge of length d connecting vertex i and vertex j. ", output:"Output the value of the diameter and the number of diameters in a single line, separated by a single space.", sample_in:"4 5 \n1 2 1 \n2 3 1 \n3 4 1 \n1 4 1 \n1 3 2 ", sample_out:"2 5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:31, vtotal_submit:266, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（1）", author:"", tag:["TEST"]}
{pid:1707, vid:1707, oj:"hdu", title:"Spring-outing Decision", desc:"Now is spring ! The sunshine is warm , the flowers is coming out . How lovely it is! So my classmates and I want to go out for a spring-outing.<br><br>But we all select courses ourselves. We don\'t have classes at the same time.Now our monitor has a big trouble in arranging the time of the spring-outing.<br><br>Can you help him?<br><br>I will give you our courses information and the time of the spring-outing.You just need to tell me that who can\'t go with us. <br>", input:"The first line contains an integer CA which indicates the number of test cases.<br>Then CA cases follow.<br>Each case contains two parts,the students\' courses information and the query.<br><br>In the first part ,first there is an integer N（N&lt;200） which means the number of the student,and then comes the N students’ courses information.<br>A student\'s courses information is in this format:<br><br>line1:   name K<br>line2:   day1 b1 e1<br>.....<br>lineK+1: dayK bK eK<br><br>The first line of a student\'s courses infomation contains his name(less than 20 characters and in lowercase) and the number(K,K&lt;1000) of his courses . Then next K lines describe his courses. Each Line contain three integers indicate the day of a week( 1 &lt;= day &lt;= 7 means Monday to Sunday ), the begin time and the end time of the course.<br>To make the problem easier,the begin time and the end time will be in the range from 1 to 11 .(Because in HDU,there is 11 classes one day).<br><br>In the query part , first there is an integer Q which means the query number,and then Q lines follow.<br>A query contains three integers which means the day ,the begin time and the end time of the spring-outing.And the time is described as the courses.<br>Notice,everyone may have more than one course at the same time for some special reasons.<br>", output:"For each query , just print the names of the students who can\'t go out for a spring-outing in a line in lexicographic order.<br>Please separate two names with a blank.<br>If all of the students have time to go , just print &quot;None&quot; in a line.<br>", sample_in:"1\n3\nlinle 3\n1 1 2\n2 3 4\n3 8 10\nlaili 1\n4 1 4\nxhd 2\n1 2 4\n4 5 6\n3\n1 2 2\n4 4 5\n5 1 2", sample_out:"linle xhd\nlaili xhd\nNone", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:113, vtotal_submit:320, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-Spring Programming Contest", author:"", tag:["TEST"]}
{pid:1708, vid:1708, oj:"hdu", title:"Fibonacci String", desc:"After little Jim learned Fibonacci Number in the class , he was very interest in it.<br>Now he is thinking about a new thing -- Fibonacci String .<br><br>He defines : str[n] = str[n-1] + str[n-2] ( n &gt; 1 ) <br><br>He is so crazying that if someone gives him two strings str[0] and str[1], he will calculate the str[2],str[3],str[4] , str[5].... <br><br>For example :<br>If str[0] = &quot;ab&quot;; str[1] = &quot;bc&quot;;<br>he will get the result , str[2]=&quot;abbc&quot;, str[3]=&quot;bcabbc&quot; , str[4]=&quot;abbcbcabbc&quot; …………;<br><br>As the string is too long ,Jim can\'t write down all the strings in paper. So he just want to know how many times each letter appears in Kth Fibonacci String . Can you help him ?<br>", input:"The first line contains a integer N which indicates the number of test cases.<br>Then N cases follow.<br>In each case,there are two strings str[0], str[1] and a integer K (0 &lt;= K &lt; 50) which are separated by a blank.<br>The string in the input will only contains less than 30 low-case letters.<br>", output:"For each case,you should count how many times each letter appears in the Kth Fibonacci String and print out them in the format &quot;X:N&quot;. <br>If you still have some questions, look the sample output carefully.<br>Please output a blank line after each test case.<br><br>To make the problem easier, you can assume the result will in the range of int. <br>", sample_in:"1\nab bc 3", sample_out:"a:1\nb:3\nc:2\nd:0\ne:0\nf:0\ng:0\nh:0\ni:0\nj:0\nk:0\nl:0\nm:0\nn:0\no:0\np:0\nq:0\nr:0\ns:0\nt:0\nu:0\nv:0\nw:0\nx:0\ny:0\nz:0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:877, vtotal_submit:3055, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-Spring Programming Contest", author:"", tag:["TEST"]}
{pid:1709, vid:1709, oj:"hdu", title:"The Balance", desc:"Now you are asked to measure a dose of medicine with a balance and a number of weights. Certainly it is not always achievable. So you should find out the qualities which cannot be measured from the range [1,S]. S is the total quality of all the weights.<br>", input:"The input consists of multiple test cases, and each case begins with a single positive integer N (1&lt;=N&lt;=100) on a line by itself indicating the number of weights you have. Followed by N integers Ai (1&lt;=i&lt;=N), indicating the quality of each weight where 1&lt;=Ai&lt;=100.<br>", output:"For each input set, you should first print a line specifying the number of qualities which cannot be measured. Then print another line which consists all the irrealizable qualities if the number is not zero.<br>", sample_in:"3\n1 2 4\n3\n9 2 1", sample_out:"0\n2\n4 5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1218, vtotal_submit:5063, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-Spring Programming Contest", author:"", tag:["TEST"]}
{pid:1710, vid:1710, oj:"hdu", title:"Binary Tree Traversals", desc:"A binary tree is a finite set of vertices that is either empty or consists of a root r and two disjoint binary trees called the left and right subtrees. There are three most important ways in which the vertices of a binary tree can be systematically traversed or ordered. They are preorder, inorder and postorder. Let T be a binary tree with root r and subtrees T1,T2.<br><br>In a preorder traversal of the vertices of T, we visit the root r followed by visiting the vertices of T1 in preorder, then the vertices of T2 in preorder.<br><br>In an inorder traversal of the vertices of T, we visit the vertices of T1 in inorder, then the root r, followed by the vertices of T2 in inorder.<br><br>In a postorder traversal of the vertices of T, we visit the vertices of T1 in postorder, then the vertices of T2 in postorder and finally we visit r.<br><br>Now you are given the preorder sequence and inorder sequence of a certain binary tree. Try to find out its postorder sequence.<br><center><img src=data/images/C57-1005-1.jpg></center>", input:"The input contains several test cases. The first line of each test case contains a single integer n (1&lt;=n&lt;=1000), the number of vertices of the binary tree. Followed by two lines, respectively indicating the preorder sequence and inorder sequence. You can assume they are always correspond to a exclusive binary tree.<br>", output:"For each test case print a single line specifying the corresponding postorder sequence.<br>", sample_in:"9\n1 2 4 7 3 5 8 9 6\n4 7 2 1 8 5 9 3 6", sample_out:"7 4 2 8 9 5 6 3 1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:764, vtotal_submit:2896, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-Spring Programming Contest", author:"", tag:["TEST"]}
{pid:1711, vid:1711, oj:"hdu", title:"Number Sequence", desc:"Given two sequences of numbers : a[1], a[2], ...... , a[N], and b[1], b[2], ...... , b[M] (1 &lt;= M &lt;= 10000, 1 &lt;= N &lt;= 1000000). Your task is to find a number K which make a[K] = b[1], a[K + 1] = b[2], ...... , a[K + M - 1] = b[M]. If there are more than one K exist, output the smallest one.<br>", input:"The first line of input is a number T which indicate the number of cases. Each case contains three lines. The first line is two numbers N and M (1 &lt;= M &lt;= 10000, 1 &lt;= N &lt;= 1000000). The second line contains N integers which indicate a[1], a[2], ...... , a[N]. The third line contains M integers which indicate b[1], b[2], ...... , b[M]. All integers are in the range of [-1000000, 1000000].<br>", output:"For each test case, you should output one line which only contain K described above. If no such K exists, output -1 instead.<br>", sample_in:"2\n13 5\n1 2 1 2 3 1 2 3 1 3 2 1 2\n1 2 3 1 3\n13 5\n1 2 1 2 3 1 2 3 1 3 2 1 2\n1 2 3 2 1", sample_out:"6\n-1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2226, vtotal_submit:9404, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"HDU 2007-Spring Programming Contest", author:"", tag:["TEST"]}
{pid:1712, vid:1712, oj:"hdu", title:"ACboy needs your help", desc:"ACboy has N courses this term, and he plans to spend at most M days on study.Of course,the profit he will gain from different course depending on the days he spend on it.How to arrange the M days for the N courses to maximize the profit?<br>", input:"The input consists of multiple data sets. A data set starts with a line containing two positive integers N and M, N is the number of courses, M is the days ACboy has.<br>Next follow a matrix A[i][j], (1&lt;=i&lt;=N&lt;=100,1&lt;=j&lt;=M&lt;=100).A[i][j] indicates if ACboy spend j days on ith course he will get profit of value A[i][j].<br>N = 0 and M = 0 ends the input.<br>", output:"For each data set, your program should output a line which contains the number of the max profit ACboy will gain.<br>", sample_in:"2 2\n1 2\n1 3\n2 2\n2 1\n2 1\n2 3\n3 2 1\n3 2 1\n0 0", sample_out:"3\n4\n6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1008, vtotal_submit:3458, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-Spring Programming Contest", author:"", tag:["TEST"]}
{pid:1713, vid:1713, oj:"hdu", title:"相遇周期", desc:"2007年3月26日，在中俄两国元首的见证下，中国国家航天局局长孙来燕与俄罗斯联邦航天局局长别尔米诺夫共同签署了《中国国家航天局和俄罗斯联邦航天局关于联合探测火星-火卫一合作的协议》，确定中俄双方将于2009年联合对火星及其卫星“火卫一”进行探测。<br><br>而卫星是进行这些探测的重要工具，我们的问题是已知两颗卫星的运行周期，求它们的相遇周期。<br>", input:"输入数据的第一行为一个正整数T, 表示测试数据的组数. 然后是T组测试数据. 每组测试数据包含两组正整数，用空格隔开。每组包含两个正整数，表示转n圈需要的天数(26501/6335，表示转26501圈要6335天)，用\'/\'隔开。<br>", output:"对于每组测试数据, 输出它们的相遇周期，如果相遇周期是整数则用整数表示，否则用最简分数表示。<br>", sample_in:"2\n26501/6335 18468/42\n29359/11479 15725/19170", sample_out:"81570078/7\n5431415", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:716, vtotal_submit:1677, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-Spring Programming Contest", author:"", tag:["TEST"]}
{pid:1714, vid:1714, oj:"hdu", title:"RedField", desc:"As the graph you see below, we named the red part &quot;RedField&quot;.The read part is the intersection of an ellipse and a triangle.Now, 8600\'s not good at math, so he wants you to help him calculate the area of the &quot;RedField&quot;.<br><center><img src=data/images/C57-1009-1.jpg></center>", input:"The first line of input contains n, the number of test cases. n lines follow.Each test case contains four numbers a, b, x, y(0 &lt; b &lt;= a &lt;= x),and a is the lenth of OA, b is the lenth of OB,and x, y representing the coordinate of the point P.<br>", output:"For each test case, output the area of the &quot;RedField&quot;,accurate up to 2 decimal places.<br>", sample_in:"1\n1.00 1.00 2.00 2.00", sample_out:"0.39", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:156, vtotal_submit:658, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007-Spring Programming Contest", author:"", tag:["TEST"]}
{pid:1715, vid:1715, oj:"hdu", title:"大菲波数", desc:"Fibonacci数列，定义如下：<br>f(1)=f(2)=1<br>f(n)=f(n-1)+f(n-2)  n&gt;=3。<br>计算第n项Fibonacci数值。<br>", input:"输入第一行为一个整数N，接下来N行为整数Pi（1&lt;=Pi&lt;=1000）。<br>", output:"输出为N行，每行为对应的f(Pi)。<br>", sample_in:"5\n1\n2\n3\n4\n5", sample_out:"1\n1\n2\n3\n5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2464, vtotal_submit:9881, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（2）", author:"", tag:["TEST"]}
{pid:1716, vid:1716, oj:"hdu", title:"排列2", desc:"Ray又对数字的列产生了兴趣：<br>现有四张卡片，用这四张卡片能排列出很多不同的4位数，要求按从小到大的顺序输出这些4位数。<br>", input:"每组数据占一行，代表四张卡片上的数字（0&lt;=数字&lt;=9），如果四张卡片都是0，则输入结束。<br>", output:"对每组卡片按从小到大的顺序输出所有能由这四张卡片组成的4位数，千位数字相同的在同一行，同一行中每个四位数间用空格分隔。<br>每组输出数据间空一行，最后一组数据后面没有空行。<br>", sample_in:"1 2 3 4\n1 1 2 3\n0 1 2 3\n0 0 0 0", sample_out:"1234 1243 1324 1342 1423 1432\n2134 2143 2314 2341 2413 2431\n3124 3142 3214 3241 3412 3421\n4123 4132 4213 4231 4312 4321\n\n1123 1132 1213 1231 1312 1321\n2113 2131 2311\n3112 3121 3211\n\n1023 1032 1203 1230 1302 1320\n2013 2031 2103 2130 2301 2310\n3012 3021 3102 3120 3201 3210", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1205, vtotal_submit:3798, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（2）", author:"", tag:["TEST"]}
{pid:1717, vid:1717, oj:"hdu", title:"小数化分数2", desc:"Ray 在数学课上听老师说，任何小数都能表示成分数的形式，他开始了化了起来，很快他就完成了，但他又想到一个问题，如何把一个循环小数化成分数呢?<br>请你写一个程序不但可以将普通小数化成最简分数，也可以把循环小数化成最简分数。<br>", input:"第一行是一个整数N，表示有多少组数据。<br>每组数据只有一个纯小数，也就是整数部分为0。小数的位数不超过9位，循环部分用()括起来。<br>", output:"对每一个对应的小数化成最简分数后输出，占一行。", sample_in:"3\n0.(4)\n0.5\n0.32(692307)", sample_out:"4/9\n1/2\n17/52", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:818, vtotal_submit:2602, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（2）", author:"", tag:["TEST"]}
{pid:1718, vid:1718, oj:"hdu", title:"Rank", desc:"Jackson wants to know his rank in the class. The professor has posted a list of student numbers and marks. Compute Jackson’s rank in class; that is, if he has the top mark(or is tied for the top mark) his rank is 1; if he has the second best mark(or is tied) his rank is 2, and so on.<br>", input:"The input consist of several test cases. Each case begins with the student number of Jackson, an integer between 10000000 and 99999999. Following the student number are several lines, each containing a student number between 10000000 and 99999999 and a mark between 0 and 100. A line with a student number and mark of 0 terminates each test case. There are no more than 1000 students in the class, and each has a unique student number.<br>", output:"For each test case, output a line giving Jackson’s rank in the class.", sample_in:"20070101\n20070102 100\n20070101 33\n20070103 22\n20070106 33\n0 0", sample_out:"2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1119, vtotal_submit:3308, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（2）", author:"", tag:["TEST"]}
{pid:1719, vid:1719, oj:"hdu", title:"Friend", desc:"Friend number are defined recursively as follows.<br>(1) numbers 1 and 2 are friend number;<br>(2) if a and b are friend numbers, so is ab+a+b;<br>(3) only the numbers defined in (1) and (2) are friend number.<br>Now your task is to judge whether an integer is a friend number.<br>", input:"There are several lines in input, each line has a nunnegative integer a, 0&lt;=a&lt;=2^30.<br>", output:"For the number a on each line of the input, if a is a friend number, output “YES!”, otherwise output “NO!”.<br>", sample_in:"3\n13121\n12131", sample_out:"YES!\nYES!\nNO!", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:702, vtotal_submit:1679, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（2）", author:"", tag:["TEST"]}
{pid:1720, vid:1720, oj:"hdu", title:"A+B Coming", desc:"Many classmates said to me that A+B is must needs.<br>If you can’t AC this problem, you would invite me for night meal. ^_^<br>", input:"Input may contain multiple test cases. Each case contains A and B in one line.<br>A, B are hexadecimal number.<br>Input terminates by EOF.<br>", output:"Output A+B in decimal number in one line.", sample_in:"1 9\nA B\na b", sample_out:"10\n21\n21", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2878, vtotal_submit:5111, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HZIEE 2007 Programming Contest", author:"", tag:["TEST"]}
{pid:1721, vid:1721, oj:"hdu", title:"Bother", desc:"随着物理学的发展，科学家们发现了越来越多的粒子。有一天，筱莜在做实验的时候发现了一种麻烦的粒子，因为这些粒子必须成对产生或消失。<br>面对这些粒子，筱莜开始头痛，怎么放置这些粒子才能让他们都消失呢？<br>经过很多天的努力，筱莜终于设计出了一个实验装置，它是一个的立方体，编号A,B,C,……H,如图所示，<br><center><img src=data/images/C61-1002-1.JPG></center><br>每个顶点上都有一定数量的“麻烦”子，不同顶点初始的“麻烦”子数量可能不同。每次可以选择两个相邻的顶点，让他们同时产生或者消失。例如：每个照相机里的初始粒子数为1，0，1，0，3，1，0，0，那么一个合法的操作顺序为：EF-,EA-,AD+,AE-,DC-(EF-表示点E、F减少同样数目的粒子，＋表示同样数目增加)。这样所有的粒子都消失了。<br>因为有时给出的粒子数不能全部消失，这事又让筱莜头痛了，现在请你帮助小兔判断一下，给出的粒子最后能不能都消失掉。<br>", input:"多组输入，每组数据为8个数字（int范围内）,以－1结束.", output:"如果能使所有粒子都消失，输出“All the seeds can be cleared away!”,否则输出“Sorry,it can\'t be cleared away!”。", sample_in:"1 0 1 0 3 1 0 0\n28 74 11 80 75 30 63 1\n-1", sample_out:"All the seeds can be cleared away!\nSorry,it can\'t be cleared away!\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>我们可以将立方体的8个顶点染成红色和蓝色，要求任意两个相邻的顶点颜色补同。\n若A,B,C,D的粒子数分别是a，b，c，d，A,C同色，\n我们可以通过运输将C点的粒子都移到A点（先让A,B同时增加c个粒子，然后将B,C同时减少c个粒子，\n此时A，B，C，D的粒子为，a＋c，b，0，d），这样我们解决这个问题就简单多了。</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:232, vtotal_submit:300, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HZIEE 2007 Programming Contest", author:"", tag:["TEST"]}
{pid:1722, vid:1722, oj:"hdu", title:"Cake", desc:"一次生日Party可能有p人或者q人参加,现准备有一个大蛋糕.问最少要将蛋糕切成多少块(每块大小不一定相等),才能使p人或者q人出席的任何一种情况,都能平均将蛋糕分食. <br>", input:"每行有两个数p和q.<br>", output:"输出最少要将蛋糕切成多少块.<br>", sample_in:"2 3", sample_out:"4\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>将蛋糕切成大小分别为1/3,1/3,1/6,1/6的四块即满足要求.\n当2个人来时，每人可以吃1/3+1/6=1/2 , 1/2块。\n当3个人来时，每人可以吃1/6+1/6=1/3 , 1/3, 1/3块。</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:796, vtotal_submit:1805, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HZIEE 2007 Programming Contest", author:"", tag:["TEST"]}
{pid:1723, vid:1723, oj:"hdu", title:"Distribute Message", desc:"The contest’s message distribution is a big thing in prepare. Assuming N students stand in a row, from the row-head start transmit message, each person can transmit message to behind M personals, and how many ways could row-tail get the message?<br>", input:"Input may contain multiple test cases. Each case contains N and M in one line. (0&lt;=M&lt;N&lt;=30)<br>When N=0 and M=0, terminates the input and this test case is not to be processed. <br>", output:"Output the ways of the Nth student get message.<br>", sample_in:"4 1\n4 2\n0 0", sample_out:"1\n3\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>4 1 : A->B->C->D\n4 2 : A->B->C->D, A->C->D, A->B->D\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:436, vtotal_submit:1184, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HZIEE 2007 Programming Contest", author:"", tag:["TEST"]}
{pid:1724, vid:1724, oj:"hdu", title:"Ellipse", desc:"Math is important!! Many students failed in 2+2’s mathematical test, so let\'s AC this problem to mourn for our lost youth..<br>Look this sample picture:<br><br><center><img src=data/images/C61-1005-1.JPG></center><br><br>A ellipses in the plane and center in point O. the L,R lines will be vertical through the X-axis. The problem is calculating the blue intersection area. But calculating the intersection area is dull, so I have turn to you, a talent of programmer. Your task is tell me the result of calculations.(defined PI=3.14159265 , The area of an ellipse A=PI*a*b )<br>", input:"Input may contain multiple test cases. The first line is a positive integer N, denoting the number of test cases below. One case One line. The line will consist of a pair of integers a and b, denoting the ellipse equation <img src=data/images/C61-1005-2.JPG>, A pair of integers l and r, mean the L is (l, 0) and R is (r, 0).   (-a &lt;= l &lt;= r &lt;= a).", output:"For each case, output one line containing a float, the area of the intersection, accurate to three decimals after the decimal point.", sample_in:"2\n2 1 -2 2\n2 1 0 2", sample_out:"6.283\n3.142", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:280, vtotal_submit:1091, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HZIEE 2007 Programming Contest", author:"", tag:["TEST"]}
{pid:1725, vid:1725, oj:"hdu", title:"Find minimal sum", desc:"每一个正整数都可以表示成m = An-1(n-1)! + An-2(n-2)! + An-3(n-3)! + ... + A1, (0&lt;=Ai&lt;=i, j =1, 2, ..., n-1)的形式. 但是对于一个给定的正整数, ACboy的老师要他找出最小的min(An-1 + An-2 + .. + A1)满足m = An-1(n-1)! + An-2(n-2)! + An-3(n-3)! + ... + A1.<br>你能帮帮他吗?<br>", input:"输入首先给出一个N, 代表有N个测试实例。<br>接下来的N行, 每行包括一个正整数M (1 &lt;= M &lt; 2^32). <br><br>", output:"对于每个测试实例输出min(An-1 + An-2 + .. + A1).<br>", sample_in:"3\n2\n3\n100", sample_out:"1\n2\n6\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>对于2, 可以写成3 = 1*2!, 所以答案为1.\n对于3, 可以写成3 = 1*2! + 1*1!, 所以答案为2.\n对于100, 可以写成100 = 4*4! + 2*2!, 所以答案为6.</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:400, vtotal_submit:626, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HZIEE 2007 Programming Contest", author:"", tag:["TEST"]}
{pid:1726, vid:1726, oj:"hdu", title:"God’s cutter", desc:"有一张长纸条, 上面写有n(0&lt;n&lt;=100)个大写字母, 它们或者是X, 或者是O.<br>现在需要将其剪成许多小长条, 使得每个小长条上的字串都关于其中心对称.<br>例如: O, XX, OXO, XOXXOX等. 求满足要求的最少剪裁次数.<br>", input:"每行表示一组测试数据, 给出一个只包含O和X的字符串. <br>", output:"对每组测试数据输出一个数, 表示最小剪裁次数.<br>", sample_in:"XOOXO\nXXOXOO\nXOXOXOX", sample_out:"1\n2\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:98, vtotal_submit:191, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HZIEE 2007 Programming Contest", author:"", tag:["TEST"]}
{pid:1727, vid:1727, oj:"hdu", title:"Hastiness", desc:"How many problems did you AC?<br>When you read this problem, don’t hasty and careless, this is also simple, haha, I didn’t cheat you.<br>The game over soon, WisKey starts using English begin countdown. He not only have no gene in math, but also bad in English. Fortunately, He met you who have gift in programming. So please help him to translate. <br>", input:"Give you an integer T, output T in English, and note that all of words are lower case. (0&lt;=T&lt;=9999)<br>", output:"One answer One line.<br>Details see sample.<br>", sample_in:"2034\n1234\n123\n24\n0", sample_out:"two thousand and thirty-four\none thousand and two hundred and thirty-four\none hundred and twenty-three\ntwenty-four\nzero", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:436, vtotal_submit:1305, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HZIEE 2007 Programming Contest", author:"", tag:["TEST"]}
{pid:1728, vid:1728, oj:"hdu", title:"逃离迷宫", desc:"　　给定一个m × n (m行, n列)的迷宫，迷宫中有两个位置，gloria想从迷宫的一个位置走到另外一个位置，当然迷宫中有些地方是空地，gloria可以穿越，有些地方是障碍，她必须绕行，从迷宫的一个位置，只能走到与它相邻的4个位置中,当然在行走过程中，gloria不能走到迷宫外面去。令人头痛的是，gloria是个没什么方向感的人，因此，她在行走过程中，不能转太多弯了，否则她会晕倒的。我们假定给定的两个位置都是空地，初始时，gloria所面向的方向未定，她可以选择4个方向的任何一个出发，而不算成一次转弯。gloria能从一个位置走到另外一个位置吗？", input:"　　第1行为一个整数t (1 ≤ t ≤ 100),表示测试数据的个数，接下来为t组测试数据，每组测试数据中，<br>　　第1行为两个整数m, n (1 ≤ m, n ≤ 100),分别表示迷宫的行数和列数，接下来m行，每行包括n个字符，其中字符\'.\'表示该位置为空地，字符\'*\'表示该位置为障碍，输入数据中只有这两种字符，每组测试数据的最后一行为5个整数k, x<sub>1</sub>, y<sub>1</sub>, x<sub>2</sub>, y<sub>2</sub> (1 ≤ k ≤ 10, 1 ≤ x<sub>1</sub>, x<sub>2</sub> ≤ n, 1 ≤ y<sub>1</sub>, y<sub>2</sub> ≤ m),其中k表示gloria最多能转的弯数，(x<sub>1</sub>, y<sub>1</sub>),  (x<sub>2</sub>, y<sub>2</sub>)表示两个位置，其中x<sub>1</sub>，x<sub>2</sub>对应列，y<sub>1</sub>, y<sub>2</sub>对应行。<br>", output:"　　每组测试数据对应为一行，若gloria能从一个位置走到另外一个位置，输出“yes”，否则输出“no”。", sample_in:"2\n5 5\n...**\n*.**.\n.....\n.....\n*....\n1 1 1 1 3\n5 5\n...**\n*.**.\n.....\n.....\n*....\n2 1 1 1 3", sample_out:"no\nyes", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1542, vtotal_submit:12732, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"“网新恩普杯”杭州电子科技大学程序设计邀请赛", author:"", tag:["TEST"]}
{pid:1729, vid:1729, oj:"hdu", title:"Stone Game", desc:"This game is a two-player game and is played as follows:<br><br>1. There are n boxes; each box has its size. The box can hold up to s stones if the size is s.<br>2. At the beginning of the game, there are some stones in these boxes.<br>3. The players take turns choosing a box and put a number of stones into the box. The number mustn’t be great than the square of the number of stones before the player adds the stones. For example, the player can add 1 to 9 stones if there are 3 stones in the box. Of course, the total number of stones mustn’t be great than the size of the box.<br>4.Who can’t add stones any more will loss the game.<br><br>Give an Initial state of the game. You are supposed to find whether the first player will win the game if both of the players make the best strategy.<br>", input:"The input file contains several test cases.<br>Each test case begins with an integer N, 0 &lt; N ≤ 50, the number of the boxes.<br>In the next N line there are two integer si, ci (0 ≤ ci ≤ si ≤ 1,000,000) on each line, as the size of the box is si and there are ci stones in the box.<br>N = 0 indicates the end of input and should not be processed.<br>", output:"For each test case, output the number of the case on the first line, then output “Yes” (without quotes) on the next line if the first player can win the game, otherwise output “No”.", sample_in:"3\n2 0\n3 3\n6 2\n2\n6 3\n6 3\n0", sample_out:"Case 1:\nYes\nCase 2:\nNo", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:469, vtotal_submit:2327, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"“网新恩普杯”杭州电子科技大学程序设计邀请赛", author:"", tag:["TEST"]}
{pid:1730, vid:1730, oj:"hdu", title:"Northcott Game", desc:"　　Tom和Jerry正在玩一种Northcott游戏，可是Tom老是输，因此他怀疑这个游戏是不是有某种必胜策略，郁闷的Tom现在向你求救了，你能帮帮他么？<br>游戏规则是这样的：<br>　　如图所示，游戏在一个n行m列（1 ≤ n ≤ 1000且2 ≤ m ≤ 100）的棋盘上进行，每行有一个黑子（黑方）和一个白子（白方）。执黑的一方先行，每次玩家可以移动己方的任何一枚棋子到同一行的任何一个空格上，当然这过程中不许越过该行的敌方棋子。双方轮流移动，直到某一方无法行动为止，移动最后一步的玩家获胜。Tom总是先下（黑方）。图1是某个初始局面，图二是Tom移动一个棋子后的局面（第一行的黑子左移两步）。<br><br><center><img src=data/images/C63-1003-1.png><br><br>图1</center><br><br><center><img src=data/images/C63-1003-2.png><br><br>图2</center><br>", input:"　　输入数据有多组。每组数据第一行为两个整数n和m，由空格分开。接下来有n行，每行两个数Ti，Ji (1 ≤ Ti, Ji ≤ m)分别表示Tom和Jerry在该行棋子所处的列数。<br>　　<b>注意：各组测试数据之间有不定数量的空行。你必须处理到文件末。</b><br>", output:"对于每组测试数据输出一行你的结果。如果当前局面下Tom有必胜策略则输出“I WIN!”，否则输出“BAD LUCK!”。", sample_in:"3 6\n4 5\n1 2\n1 2\n\n3 6\n4 5\n1 3\n1 2", sample_out:"BAD LUCK!\nI WIN!", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:829, vtotal_submit:2485, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"“网新恩普杯”杭州电子科技大学程序设计邀请赛", author:"", tag:["TEST"]}
{pid:1731, vid:1731, oj:"hdu", title:"Bob and Alice’s Meet", desc:"Bob and Alice are quite closely friends. They are both intersted on Researching ciper. As everybody knows , they ,of course, are experienced computer users. So they always communicate their new reaserches on ciyper by Internet. But now, unfortunetly, their country is suffering from a cruel war caused by nucleus. However the enemy state is so powerful much more than their motherland. So after several months Bob and Alice\'s country is controled by enemy on many areas, including network. Any communications on the network are highly suspiciously. If anybody uncareful,he may lost  his life! This situation is so dangerious to computer users. So Bob\'s mother and Alice\'s father make a decision together for their childern --- forbid them to use computer again. Bob and Alice can\'t disobey this dicesion ,but they also don\'t want to pause their new research. So they also make a decison together --- to meet at somewhere personally ,and , of coure,don\'t let their parents konw.<br><br>Now , Bob and Alice fasten the last chance on network communication to confirm  the place they will meet at in the next days. The city they lived , has many roads and hotels. Of course, they can\'t talk just on the roads, and they also can\'t enter any buildings except hotels. So  they decide to meet in a certain hotel in their city. As they know,the city\'s building pattern is very regular like a rectangle with many griddings in it. And all hotels and houses are built in lines and columns, so are roads.  So they can only walk straightly by lines or columns.  While it is a mountainly city, every buliding  may has a different height above sea level.If you walk form a  hotel with a height  x at an initial speed v<sub>0</sub> to a hotel with a height y, then  the speed on this road is surposed to be v<sub>0</sub> × 2<sup><i>(x-y)</i></sup> .  We already know that Bob lives in the city\'s left-up corner,and Alice lives in the right-down corner. The buliding in the grid  among their houses  are all hotels.  and the length of the road  between two neighbor( four directions connected) hotel is alway a same value L, and they set up at their own initial speed  at the same time.<br> <br>Now , they want to pick a  path which will take them  a fastest time  to meet each other.  Pitfully  for them ,can you help them to commpute the minmum time to meet ? You should always remember that ,they only meet at a certain hotel ,so maybe one of them will reach a hotel and don\'t walk again to wait the other one to arrive.<br>", input:"There will be more than a test case. every case data goes like below:<br><br>Line 1 : Four space-separated integers: N, V<sub>b</sub>, V<sub>a</sub>, L. <br>N is the size of the rectangle of Bob and Alice\'s city. Va is Alice\'s initial speed, while V<sub>b</sub> is Bob\'s initial speed. L is the length between two neighbor hotels .<br><br>Line 2 ~ Line N + 1 : every line has N space-separated integers,each one represents a hotel\'s height.  <br><br>N = 0 indicates the end of input and should not be processed. <br>", output:"For each case , ouput an interger in a separated line which  is the  time they take to meet each other.The answer must round to three decimal places.<br>", sample_in:"3 1 1 1\n1 2 3\n3 2 1\n1 2 1\n0 0 0 0", sample_out:"4.000", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:10, vtotal_submit:133, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"“网新恩普杯”杭州电子科技大学程序设计邀请赛", author:"", tag:["TEST"]}
{pid:1732, vid:1732, oj:"hdu", title:"Push Box", desc:"Push Box is a classic puzzle game. This game play in a grid, there are five types of block in it, the player, the box, the hole, empty place, and the wall. In every step, player can move up, down, left, or right, if the target place is empty. Moreover, if a box in the target place, and the next place in that direction is empty, player can move to the target place, and then push the box to the next place. Remember, both of the player and boxes can\'t move out of the grid, or you may assume that there is a wall suround the whole grid. The objective of this game is to push every box to a hole. Now, your problem is to find the strategy to achieve the goal with shortest steps, supposed there are exactly three boxes.", input:"The input consists of several test cases. Each test case start with a line containing two number, n, m(1 &lt; n, m ≤ 8), the rows and the columns of grid. Then n lines follow, each contain exact m characters, representing the type of block in it. (for empty place, X for player, * for box, # for wall, @ for hole). Each case contain exactly one X, three *, and three @. The input end with EOF.", output:"You have to print the length of shortest strategy in a single line for each case. (-1 if no such strategy)", sample_in:"4 4\n....\n..*@\n..*@\n.X*@\n\n6 6\n...#@.\n@..*..\n#*##..\n..##*#\n..X...\n.@#...", sample_out:"7\n11", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:222, vtotal_submit:952, special_status:0, time_limit:1000, mem_limit:65535, hint:"", source:"“网新恩普杯”杭州电子科技大学程序设计邀请赛", author:"", tag:["TEST"]}
{pid:1733, vid:1733, oj:"hdu", title:"Escape", desc:"Loneknight hates attending class very much. Every time he is attending class, when he feel tiresome with the class, he start planning the shortest path he can escape from the classroom. Therefore, he can escape from classroom so quickly that he is always the first one escape from the classroom after the class finishes. He is very proud of this fact. <br><br>One day, loneknight is day dreaming in class, and planning the shortest path for escaping. Suddently, an issue come into his mind, if everyone in the classroom want to escape as soon as possible just as loneknight, what will happend? As a kind man, loneknight want to plan a strategy that will let everyone escape from the classroom with minimum time consume. But after dozens of minutes of consideration, loneknight find this problem so difficult for him.<br><br> Now, as the best friend of him, please design a algorithm to solve this problem for him. Note that, at every time unit, everyone can move seperately up, down, left, right one unit, or stay in the old position. In addtion, no one can move to a wall or out of the room, the only way to escape is go through a gate. Moreover, at every time unit, a position can only contain a person, including gates. That means if in time t, a person escape thourgh gate g, no one can go into g in time t, but can go into g in t + 1. Now, it\'s your job to calculate the minimum time required to escape for everyone. ", input:"The input consists of several test cases. Each test case start with a line containing two number, n, m (1 &lt; n, m &lt;= 16), the rows and the columns of the room. Then n lines follow, each contain exact m characters, representing th type of unitin it. (. for empty place, X for human, # for wall, @ for gate). Input is end with EOF.", output:"You have to print the shortest time needed for everyone escape from the roomin a single line for each case. (-1 if impossible)", sample_in:"4 4\n.@..\n.X..\n....\n....\n\n4 4\n.@..\n.XX.\n.XX.\n..@.\n\n4 4\n.@..\n.#..\n#X#.\n.#..", sample_out:"1\n2\n-1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:125, vtotal_submit:1030, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"“网新恩普杯”杭州电子科技大学程序设计邀请赛", author:"", tag:["TEST"]}
{pid:1734, vid:1734, oj:"hdu", title:"Power Word", desc:"Recently, loneknight is interesting in investigating the power of word. After several weeks of research, He recognize that there are some magic words in the world, if a word contains a magic word as its substring, it will have magic power. For example, if the word \'magic\' is magic word, then the word \'magic\', \'amagic\', \'xxmagic\', \'magiczz\' are all power words. <br><br>In addition to this finding, he also find that the index of a powerword has a important impact on the power of word. The index of a power word define as follow: given the set of magic words, if we list all the powerword contain one or more magic word as substring in a list lexicographically from short length to long, the curring position of a word in the list is its index. So, if the magic words are \'magic\' and \'hello\', then word have index 1 is \'hello\', the word have index 2 is \'magic\', the word have index 3 is \'ahello\' ... (only consider the lowercase words) .<br><br>Now, loneknight have find a way to calculate the the indices of the most powerful words, he want to find what the actually word is. Can you help him?", input:"The input consists of several test cases. Each case contain exactly two line, first line contains the magic words, words are seperated by spaces, the length of each word is at least 1 and at most 5, and the word contain only lowercase characters, the second line contains the indices, indices are seperated by spaces each index in the range [1, 2<sup><i>32</i></sup>-1]. (Each line contains at most 10 words or numbers) Your job is to find the powerful word according the indices. The input end with a ling contain &quot;-1&quot;.", output:"For each case, please print the powerful words in a single line seperated by one space without trailing space, according to the order in the input.", sample_in:"hello magic\n1 2 3\nhello magic\n4294967295\nhello magic\n67 141\n-1", sample_out:"hello magic ahello\nyskwojhello\nmagico ahellou", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1, vtotal_submit:36, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"“网新恩普杯”杭州电子科技大学程序设计邀请赛", author:"", tag:["TEST"]}
{pid:1735, vid:1735, oj:"hdu", title:"字数统计", desc:"　　一天，淘气的Tom不小心将水泼到了他哥哥Jerry刚完成的作文上。原本崭新的作文纸顿时变得皱巴巴的，更糟糕的是由于水的关系，许多字都看不清了。可怜的Tom知道他闯下大祸了，等Jerry回来一定少不了一顿修理。现在Tom只想知道Jerry的作文被“破坏”了多少。<br>　　Jerry用方格纸来写作文，每行有L个格子。（图1显示的是L = 10时的一篇作文，’X’表示该格有字，该文有三个段落）。<br><br><center><img src=data/images/C63-1008-1.png><br><br>图1</center><br><br><center><img src=data/images/C63-1008-2.png><br><br>图2</center><br><br>　　图2显示的是浸水后的作文 ，‘O’表示这个位置上的文字已经被破坏。可是Tom并不知道原先哪些格子有文字，哪些没有，他唯一知道的是原文章分为M个段落，并且每个段落另起一行，空两格开头，段落内部没有空格（注意：任何一行只要开头的两个格子没有文字就可能是一个新段落的开始，例如图2中可能有4个段落）。<br>　　Tom想知道至少有多少个字被破坏了，你能告诉他吗？<br>", input:"　　测试数据有多组。每组测试数据的第一行有三个整数：N（作文的行数1 ≤ N ≤ 10000），L（作文纸每行的格子数10 ≤ L ≤ 100），M（原文的段落数1 ≤ M ≤ 20）,用空格分开。<br>　　接下来是一个N × L的位矩阵(A<sub>ij</sub>)（相邻两个数由空格分开），表示被破坏后的作文。其中Aij取0时表示第i行第j列没有文字（或者是看不清了），取1时表示有文字。你可以假定：每行至少有一个1，并且所有数据都是合法的。<br>", output:"　　对于每组测试输出一行，一个整数，表示至少有多少文字被破坏。", sample_in:"10 10 3\n0 0 0 1 1 1 0 1 1 0\n1 1 0 0 0 1 1 1 0 0\n0 0 1 1 0 0 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n1 0 1 0 1 1 1 0 0 0\n1 1 0 0 1 1 1 1 1 1\n1 1 1 1 1 1 1 0 0 0\n0 0 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n0 0 0 0 1 1 1 1 1 0", sample_out:"19", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:226, vtotal_submit:1191, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"“网新恩普杯”杭州电子科技大学程序设计邀请赛", author:"", tag:["TEST"]}
{pid:1736, vid:1736, oj:"hdu", title:"美观化文字", desc:"请看下面两段文字：<br><br>Kenny喊道：&quot;我来了!&quot;<br><br>Kenny喊道：“我来了！”<br><br>前面一段文字中由于在中文中使用了英文标点，显得不太美观。本题中你的任务是让任意一段文字美观化。美观化具体要求为将以下字符（串）转换为对应的中文字符：<br><br><pre><br>英文 中文<br> ,    ，<br> .    。<br> !    ！<br> &quot;    “或” <br>&lt;&lt;   《<br>&gt;&gt;    》<br> ?    ？<br></pre>", input:"输入文字只有一段。文字中可能含有中英文、符号以及控制符（换行、空格、制表符等）。", output:"按照要求输出美化后的文字段。<b>你不用翻译以上指定的符号之外的所有字符</b>。", sample_in:"Kenny喊道：\"我来了!\"", sample_out:"Kenny喊道：“我来了！”\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\n你可以认为所有中文字符由两个字节组成，首字节的ASCII值都大于127（也可以理解为signed char型小于0）\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:466, vtotal_submit:2842, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"“网新恩普杯”杭州电子科技大学程序设计邀请赛", author:"", tag:["TEST"]}
No Such Problem Called HDU 1737.<br>
No Such Problem Called HDU 1738.<br>
No Such Problem Called HDU 1739.<br>
No Such Problem Called HDU 1740.<br>
No Such Problem Called HDU 1741.<br>
No Such Problem Called HDU 1742.<br>
No Such Problem Called HDU 1743.<br>
No Such Problem Called HDU 1744.<br>
No Such Problem Called HDU 1745.<br>
No Such Problem Called HDU 1746.<br>
No Such Problem Called HDU 1747.<br>
No Such Problem Called HDU 1748.<br>
No Such Problem Called HDU 1749.<br>
No Such Problem Called HDU 1750.<br>
No Such Problem Called HDU 1751.<br>
No Such Problem Called HDU 1752.<br>
{pid:1753, vid:1753, oj:"hdu", title:"大明A+B", desc:"话说，经过了漫长的一个多月，小明已经成长了许多，所以他改了一个名字叫“大明”。<br>这时他已经不是那个只会做100以内加法的那个“小明”了，现在他甚至会任意长度的正小数的加法。<br><br>现在，给你两个正的小数A和B，你的任务是代表大明计算出A+B的值。<br>", input:"本题目包含多组测试数据，请处理到文件结束。<br>每一组测试数据在一行里面包含两个长度不大于400的正小数A和B。", output:"请在一行里面输出输出A+B的值，请输出最简形式。详细要求请见Sample Output。<br>", sample_in:"1.1 2.9\n1.1111111111 2.3444323343\n1 1.1", sample_out:"4\n3.4555434454\n2.1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1922, vtotal_submit:7166, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（6）_linle专场", author:"", tag:["TEST"]}
{pid:1754, vid:1754, oj:"hdu", title:"I Hate It", desc:"很多学校流行一种比较的习惯。老师们很喜欢询问，从某某到某某当中，分数最高的是多少。<br>这让很多学生很反感。<br><br>不管你喜不喜欢，现在需要你做的是，就是按照老师的要求，写一个程序，模拟老师的询问。当然，老师有时候需要更新某位同学的成绩。", input:"本题目包含多组测试，请处理到文件结束。<br>在每个测试的第一行，有两个正整数 N 和 M ( 0&lt;N&lt;=200000,0&lt;M&lt;5000 )，分别代表学生的数目和操作的数目。<br>学生ID编号分别从1编到N。<br>第二行包含N个整数，代表这N个学生的初始成绩，其中第i个数代表ID为i的学生的成绩。<br>接下来有M行。每一行有一个字符 C (只取\'Q\'或\'U\') ，和两个正整数A，B。<br>当C为\'Q\'的时候，表示这是一条询问操作，它询问ID从A到B(包括A,B)的学生当中，成绩最高的是多少。<br>当C为\'U\'的时候，表示这是一条更新操作，要求把ID为A的学生的成绩更改为B。<br>", output:"对于每一次询问操作，在一行里面输出最高成绩。", sample_in:"5 6\n1 2 3 4 5\nQ 1 5\nU 3 6\nQ 3 4\nQ 4 5\nU 2 9\nQ 1 5", sample_out:"5\n6\n5\n9\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Huge input,the C function scanf() will work better than cin</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4484, vtotal_submit:31433, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（6）_linle专场", author:"", tag:["TEST"]}
{pid:1755, vid:1755, oj:"hdu", title:"A Number Puzzle", desc:"Lele 最近上课的时候都很无聊，所以他发明了一个数字游戏来打发时间。<br><br>这个游戏是这样的，首先，他拿出几张纸片，分别写上0到9之间的任意数字(可重复写某个数字)，然后，他叫同学随便写两个数字X和K。Lele要做的事情就是重新拼这些纸牌，组成数字 T ，并且 T + X 是 K 的正整数倍。<br><br>有时候，当纸片很多的时候，Lele经常不能在一节课之内拼出来，但是他又想知道答案，所以，他想请你帮忙写一个程序来计算答案。<br>", input:"本题目包含多组测试数据，请处理到文件结束。<br>每组数据第一行包含两个整数 N和M(0&lt;N&lt;9,0&lt;M&lt;2000)，分别代表纸片的数目和询问的数目。<br>第二行包含N个整数分别代表纸片上写的数字，每个数字可能取0～9。<br>接下来有M行询问，每个询问给出两个整数X和K(0&lt;=x&lt;10^9,0&lt;K&lt;100)。<br><br>注意：在拼纸片的时候，每张纸片都必须用上，且T首位不能为0", output:"对于每次询问，如果能够用这些纸片拼出符合答案的T，就输出结果T。如果有多个结果，就输出符合要求的最小的T。<br>如果不能拼出，就输出&quot;None&quot;。<br>", sample_in:"4 3\n1 2 3 4\n5 7\n33 6\n12 8", sample_out:"1234\nNone\n1324", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:170, vtotal_submit:822, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（6）_linle专场", author:"", tag:["TEST"]}
{pid:1756, vid:1756, oj:"hdu", title:"Cupid\'s Arrow", desc:"传说世上有一支丘比特的箭，凡是被这支箭射到的人，就会深深的爱上射箭的人。<br>世上无数人都曾经梦想得到这支箭。Lele当然也不例外。不过他想，在得到这支箭前，他总得先学会射箭。<br>日子一天天地过，Lele的箭术也越来越强，渐渐得，他不再满足于去射那圆形的靶子，他开始设计各种各样多边形的靶子。<br>不过，这样又出现了新的问题，由于长时间地练习射箭，Lele的视力已经高度近视，他现在甚至无法判断他的箭射到了靶子没有。所以他现在只能求助于聪明的Acmers，你能帮帮他嘛？<br>", input:"本题目包含多组测试，请处理到文件结束。<br>在每组测试的第一行，包含一个正整数N(2&lt;N&lt;100),表示靶子的顶点数。<br>接着N行按顺时针方向给出这N个顶点的x和y坐标(0&lt;x,y&lt;1000)。<br>然后有一个正整数M，表示Lele射的箭的数目。<br>接下来M行分别给出Lele射的这些箭的X,Y坐标(0&lt;X,Y&lt;1000)。", output:"对于每枝箭，如果Lele射中了靶子，就在一行里面输出&quot;Yes&quot;,否则输出&quot;No&quot;。<br>", sample_in:"4\n10 10\n20 10\n20 5\n10 5\n2\n15 8\n25 8", sample_out:"Yes\nNo", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:182, vtotal_submit:866, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（6）_linle专场", author:"", tag:["TEST"]}
{pid:1757, vid:1757, oj:"hdu", title:"A Simple Math Problem", desc:"Lele now is thinking about a simple function f(x).<br><br>If x &lt; 10 f(x) = x.<br>If x &gt;= 10 f(x) = a0 * f(x-1) + a1 * f(x-2) + a2 * f(x-3) + …… + a9 * f(x-10);<br>And ai(0&lt;=i&lt;=9) can only be 0 or 1 .<br><br>Now, I will give a0 ~ a9 and two positive integers k and m ,and could you help Lele to caculate f(k)%m.<br>", input:"The problem contains mutiple test cases.Please process to the end of file.<br>In each case, there will be two lines.<br>In the first line , there are two positive integers k and m. ( k&lt;2*10^9 , m &lt; 10^5 )<br>In the second line , there are ten integers represent a0 ~ a9.<br>", output:"For each case, output f(k) % m in one line.", sample_in:"10 9999\n1 1 1 1 1 1 1 1 1 1\n20 500\n1 0 1 0 1 0 1 0 1 0", sample_out:"45\n104", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:796, vtotal_submit:2150, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（6）_linle专场", author:"", tag:["TEST"]}
{pid:1758, vid:1758, oj:"hdu", title:"Two Brothers", desc:"Though Yueyue and Lele are brothers , they are very different.<br>For example, Yueyue is very hard in study, especially in writing compositions. To make the composition looks nice , he will not use the same word twice. While Lele is very lazy, and he sometimes copys his brother\'s homework.<br><br>Last week, their teacher asked them to write a composition named &quot;My Mother&quot;, they handed the same composition. The teacher was very angry , but Lele just answered &quot;We have the same mother , why should our compositions be different ?&quot;<br><br>Now,the teacher is asking Yueyue and Lele to write the compositions again, and he wants to calculate the length of longest common subsequence of words occuring in the two compositions. Can you help him ?", input:"There will be many test cases in the problem.Please process to the end of file.<br>Each case contains two lines.<br>The first line means Yueyue\'s composition and the second line means Lele\'s composition.<br>Each composition will contains no more than 10^4 words . And each word will contains less than 40 characters.Each character will only be in a~z or A~Z.<br>Two words will be separated by a blank.<br><br>To make the problem easier, there will be a &quot;#&quot; at the end of each composition.<br>", output:"For each case , output a integer in a line represents the length of longest common subsequence of words occuring in the their compositions. <br>", sample_in:"aa bb cc #\naa cc bb #", sample_out:"2\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Huge input,the C function scanf() will work better than cin</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:29, vtotal_submit:496, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（6）_linle专场", author:"", tag:["TEST"]}
{pid:1759, vid:1759, oj:"hdu", title:"Matrix Revolution", desc:"Lele 现在不仅会整数A+B，A*B，还会矩阵A+B，矩阵A*B。<br><br>一天，Lele在百无聊赖的时候，突然想起一个很无聊的问题。<br>对于给定的一个矩阵A，A+A^2+A^3+...+A^K 是多少呢？<br>其中A^2 表示两个矩阵的乘积A*A，A^3表示三个矩阵的乘积A*A*A，依此类推。<br><br>由于这个计算结果太大了，Lele无法把整个结果写出来，但是，他还是想请你告诉他，结果矩阵中到底有多少个非零元素。", input:"本题目包含多组测试，请处理到文件结束。<br>在每个测试数据的第一行，有三个整数N,M,和K(0&lt;N&lt;1000,0&lt;=M&lt;10*N,N&lt;K&lt;10^100)，其中N代表矩阵A的大小是N*N，K是题目中所描述的K。<br>接下来有M行，每行有三个整数a,b,c(0&lt;=a,b,&lt;N 且a!=b,0&lt;c&lt;10^9)表示矩阵中第a行第b列的值为c。(矩阵的行数和列数都是从0开始计数)<br><br>你可以假定矩阵中主对角线上的数都是1，其余没有提到的元素都是0。", output:"对于每一组测试数据，请在一行里输出结果矩阵里的非0元素的个数。", sample_in:"3 4 4\n1 2 1\n2 1 1\n0 1 1\n0 2 1", sample_out:"7\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Huge input,the C function scanf() will work better than cin</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:30, vtotal_submit:203, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（6）_linle专场", author:"", tag:["TEST"]}
{pid:1760, vid:1760, oj:"hdu", title:"A New Tetris Game", desc:"曾经，Lele和他姐姐最喜欢，玩得最久的游戏就是俄罗斯方块(Tetris)了。<br>渐渐得，Lele发觉，玩这个游戏只需要手快而已，几乎不用经过大脑思考。<br>所以，Lele想出一个新的玩法。<br><br>Lele和姐姐先拿出一块长方形的棋盘，这个棋盘有些格子是不可用的，剩下的都是可用的。Lele和姐姐拿出俄罗斯方块里的正方形方块(大小为2*2的正方形方块)轮流往棋盘里放，要注意的是，放进去的正方形方块不能叠在棋盘不可用的格子上，也不能叠在已经放了的正方形方块上。<br>到最后，谁不能再放正方形方块，谁就输了。<br><br>现在，假设每次Lele和姐姐都很聪明，都能按最优策略放正方形，并且每次都是Lele先放正方形，你能告诉他他是否一定能赢姐姐吗？<br>", input:"本题目包含多组测试，请处理到文件结束。<br>每组测试第一行包含两个正整数N和M(0&lt;N*M&lt;50)分别代表棋盘的行数和列数。<br>接下来有N行，每行M个0或1的数字代表整个棋盘。<br>其中0是代表棋盘该位置可用，1是代表棋盘该位置不可用<br><br>你可以假定，每个棋盘中，0的个数不会超过40个。", output:"对于每一组测试，如果Lele有把握获胜的话，在一行里面输出&quot;Yes&quot;，否则输出&quot;No&quot;。<br>", sample_in:"4 4\n0000\n0000\n0000\n0000\n4 4\n0000\n0010\n0100\n0000", sample_out:"Yes\nNo", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:282, vtotal_submit:1001, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（6）_linle专场", author:"", tag:["TEST"]}
{pid:1761, vid:1761, oj:"hdu", title:"Spring-outing Decision(2)", desc:"历经千辛万苦，ACgirl 终于定好了时间，在那一天，她们班全班的人都有时间去春游。<br>正当 ACgirl 以为春游的安排就这样搞定的时候，又出现了一个新的问题。<br>原来，她们班的同学并不是很和睦，而是分裂成一个个小团体。<br><br>对每个人来说，都有喜欢和讨厌的人。当有他喜欢的人去春游时，他就会跟着他一起去。反之，当有他讨厌的人去春游时，他则不会去春游。而去春游的人当中既有他喜欢的人又有他讨厌的人 或者 既没他喜欢的人也没他讨厌的人的时候，他就会保持自己最近的决定。<br><br>现在，身为辅导员的 ACgirl 正在统计人数。她按下面这样的方法统计人数。刚开始，她有一张初始的名单，这张名单里记录着一开始就要去春游的人。然后，她拿出一张白纸，把上次的要去春游人的名单给每个同学看，并且记录下现在要去春游的人。她重复该步骤 M 次。<br><br>现在 ACgirl 又需要你帮忙了，她想知道她做了这M次询问以后，最后去春游的都有谁。<br>", input:"本题目包含多组测试，请处理到文件结束。<br>每组测试第一行包含两个正整数N和M(N,M&lt;=100)。其中N表示ACgirl班里一共有多少人，M表示ACgirl一共做了多少次询问。<br>接下来给出这N个学生的信息。<br> 每个学生的信息的第一行是这个学生的名字(长度不大于20，均由小写字母构成)。<br> 第二行刚开始有一个正整数 P (P &lt; N) ，表示这个学生有多少个喜欢的人，这一行接下来有 P 个名字，表示他所喜欢的人。<br> 第三行刚开始有一个正整数 Q (Q &lt; N)，表示这个学生有多少个讨厌的人，这一行接下来有 Q 个名字，表示他讨厌的人。<br>在每个测试的最后一行，会给出初始决定去春游的名单。<br>同样，先有一个正整数 R ( R &lt; N ) , 表示初始要去的人数，接下来给出这 R 个人的姓名。<br><br>输入数据保证，同一个班里不会出现两个名字相同的人，一个人也不会既喜欢，又恨一个人,当然，他也不会喜欢或讨厌自己。同样，在初始名单里，不会出现两个重复的名字。<br>", output:"对于每组测试，请在一行里面请按字典序输出经过 M 次询问，最后决定要去春游的人的名字。<br>两个名字之间用一个空格分开。<br>如果最后没有一个人去春游，请输出&quot;None&quot;(不带引号)。<br>", sample_in:"4 1\na\n1 b\n1 c\nb\n1 a\n1 c\nc\n1 a\n1 d\nd\n1 b\n1 a\n2 a d", sample_out:"a b", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:49, vtotal_submit:210, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（6）_linle专场", author:"", tag:["TEST"]}
No Such Problem Called HDU 1762.<br>
No Such Problem Called HDU 1763.<br>
No Such Problem Called HDU 1764.<br>
No Such Problem Called HDU 1765.<br>
No Such Problem Called HDU 1766.<br>
No Such Problem Called HDU 1767.<br>
No Such Problem Called HDU 1768.<br>
No Such Problem Called HDU 1769.<br>
No Such Problem Called HDU 1770.<br>
No Such Problem Called HDU 1771.<br>
No Such Problem Called HDU 1772.<br>
No Such Problem Called HDU 1773.<br>
No Such Problem Called HDU 1774.<br>
No Such Problem Called HDU 1775.<br>
No Such Problem Called HDU 1776.<br>
No Such Problem Called HDU 1777.<br>
No Such Problem Called HDU 1778.<br>
No Such Problem Called HDU 1779.<br>
No Such Problem Called HDU 1780.<br>
No Such Problem Called HDU 1781.<br>
No Such Problem Called HDU 1782.<br>
No Such Problem Called HDU 1783.<br>
No Such Problem Called HDU 1784.<br>
{pid:1785, vid:1785, oj:"hdu", title:"You Are All Excellent", desc:"本次集训队共有30多人参加，毫无疑问，你们都是很优秀的，但是由于参赛名额有限，只能选拔部分队员参加省赛。从学校的角度，总是希望选拔出最优秀的18人组成6支队伍来代表学校。但是，大家也知道，要想做到完全客观，是一件很难的事情。因为选拔的标准本身就很难统一。<br>为了解决这个难题，我现在把问题作了简化，现在假设每个队员都是二维平面中的一个点，用(xi,yi)坐标来表示，一个队员的能力可以用他到原点的欧几里德距离来表示。由于这种排名标准太~客观了，新队员很难有出头的机会，很多人很是郁闷。特别是一个废话不是很多、不是特别暴躁、号称盖帽高手的伪**就很有意见，他现在要求改革排名规则，并且自己提出了一套号称绝对公正的方案：<br>现在不是用一个点来表示一个队员了，而是用原点到该队员所在的点所构成的向量来表示一个队员。如果该向量和X正轴夹角比较小的话，就说他的能力比较高，排名就应该靠前。<br>这就是著名的“伪氏规则”（说实话，这规则我有点怀疑其客观性，因为我知道他的坐标是(3.1,0.1)...）<br>", input:"输入数据包含多组测试实例，每个实例的第一行是一个整数n（n&lt;=100）,表示集训队员的人数，紧接着的一行是2*n个数，表示n个队员的坐标值（x1,y1,x2,y2...xn,yn），n为负数的时候表示输入数据的结束。<br>特别说明，所有的y坐标均为正数，并且所有的坐标值都是有一位小数的浮点数。<br>", output:"对于每个测试实例，请在一行内输出排名后的坐标，坐标之间用一个空格隔开。特别地，你可以假设根据“伪氏排名规则”结果唯一。<br>", sample_in:"3\n5.0 4.0 3.1 0.1 2.0 2.0\n-1", sample_out:"3.1 0.1 5.0 4.0 2.0 2.0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:697, vtotal_submit:2583, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（10）_以此感谢DOOMIII", author:"", tag:["TEST"]}
{pid:1786, vid:1786, oj:"hdu", title:"Tempter of the Bone again", desc:"Ignatius found some bones in an ancient maze, which fascinated him a lot. However, when he picked them up, the maze began to shake, and Ignatius could feel the ground sinking. He realized that the bone was a trap, and he tried desperately to get out of this maze.<br>Suddenly, Ignatius heard a very very cool voice, and he recognize that it comes from Beelzebub feng5166:“I know that you like bone, and even I know your nick name is wishingbone. Today, I give you a chance to survive: there are N kinds of bones here and the number of each kind bone is enough, their weights are Wi pounds (1&lt;=i&lt;=N), your bag has a volume of M pounds, and I also know that you will spend 3 seconds time when you pick up any one bone. Today, you must fill up your bag as quick as you can, otherwise, the maze is your place of the death!”. <br>Oh, my god! Can the poor Ignatius survive? Please help him!<br>Note: You are guarantied that solution always exist for every test case. <br>", input:"The input consists of multiple test cases. The first line of each test case contains two integers N and M (1 &lt; N &lt; 10; 0 &lt; M &lt; 1000000000), which denote the kinds of the bone and the capacity of the bag respectively. The next line give N integers W1…Wn (1&lt;=wi&lt;=100), which indicate the weights of bones<br>The input is terminated with two 0\'s. This test case is not to be processed.<br>", output:"For each test case, print the minimal time Ignatius will spend when he can survive. One line per case.<br>", sample_in:"2 20\n1 5\n0 0", sample_out:"12", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:67, vtotal_submit:281, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（10）_以此感谢DOOMIII", author:"", tag:["TEST"]}
{pid:1787, vid:1787, oj:"hdu", title:"GCD Again", desc:"Do you have spent some time to think and try to solve those unsolved problem after one ACM contest?<br>No? Oh, you must do this when you want to become a &quot;Big Cattle&quot;.<br>Now you will find that this problem is so familiar:<br>The greatest common divisor GCD (a, b) of two positive integers a and b, sometimes written (a, b), is the largest divisor common to a and b. For example, (1, 2) =1, (12, 18) =6. (a, b) can be easily found by the Euclidean algorithm. Now I am considering a little more difficult problem: <br>Given an integer N, please count the number of the integers M (0&lt;M&lt;N) which satisfies (N,M)&gt;1.<br>This is a simple version of problem “GCD” which you have done in a contest recently,so I name this problem “GCD Again”.If you cannot solve it still,please take a good think about your method of study.<br>Good Luck!<br>", input:"Input contains multiple test cases. Each test case contains an integers N (1&lt;N&lt;100000000). A test case containing 0 terminates the input and this test case is not to be processed.<br>", output:"For each integers N you should output the number of integers M in one line, and with one line of output for each line in input. <br>", sample_in:"2\n4\n0", sample_out:"0\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:607, vtotal_submit:2218, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（10）_以此感谢DOOMIII", author:"", tag:["TEST"]}
{pid:1788, vid:1788, oj:"hdu", title:"Chinese remainder theorem again", desc:"我知道部分同学最近在看中国剩余定理，就这个定理本身，还是比较简单的：<br>假设m1,m2,…,mk两两互素，则下面同余方程组：<br>x≡a1(mod m1)<br>x≡a2(mod m2)<br>…<br>x≡ak(mod mk)<br>在0&lt;=&lt;m1m2…mk内有唯一解。<br>记Mi=M/mi(1&lt;=i&lt;=k),因为（Mi,mi）=1,故有二个整数pi,qi满足Mipi+miqi=1,如果记ei=Mi/pi,那么会有：<br>ei≡0(mod mj),j!=i<br>ei≡1(mod mj),j=i<br>很显然，e1a1+e2a2+…+ekak就是方程组的一个解，这个解加减M的整数倍后就可以得到最小非负整数解。<br>这就是中国剩余定理及其求解过程。<br>现在有一个问题是这样的：<br>一个正整数N除以M1余(M1 - a)，除以M2余(M2-a), 除以M3余(M3-a),总之， 除以MI余(MI-a),其中（a&lt;Mi&lt;100 i=1,2,…I）,求满足条件的最小的数。 <br>", input:"输入数据包含多组测试实例，每个实例的第一行是两个整数I(1&lt;I&lt;10)和a,其中，I表示M的个数，a的含义如上所述，紧接着的一行是I个整数M1,M1...MI，I=0 并且a=0结束输入，不处理。<br>", output:"对于每个测试实例，请在一行内输出满足条件的最小的数。每个实例的输出占一行。<br>", sample_in:"2 1\n2 3\n0 0", sample_out:"5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:434, vtotal_submit:1450, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（10）_以此感谢DOOMIII", author:"", tag:["TEST"]}
{pid:1789, vid:1789, oj:"hdu", title:"Doing Homework again", desc:"Ignatius has just come back school from the 30th ACM/ICPC. Now he has a lot of homework to do. Every teacher gives him a deadline of handing in the homework. If Ignatius hands in the homework after the deadline, the teacher will reduce his score of the final test. And now we assume that doing everyone homework always takes one day. So Ignatius wants you to help him to arrange the order of doing homework to minimize the reduced score. ", input:"The input contains several test cases. The first line of the input is a single integer T that is the number of test cases. T test cases follow.<br>Each test case start with a positive integer N(1&lt;=N&lt;=1000) which indicate the number of homework.. Then 2 lines follow. The first line contains N integers that indicate the deadlines of the subjects, and the next line contains N integers that indicate the reduced scores.<br>", output:"For each test case, you should output the smallest total reduced score, one line per test case.<br>", sample_in:"3\n3\n3 3 3\n10 5 1\n3\n1 3 1\n6 2 3\n7\n1 4 6 4 2 4 3\n3 2 1 7 6 5 4", sample_out:"0\n3\n5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1946, vtotal_submit:5309, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（10）_以此感谢DOOMIII", author:"", tag:["TEST"]}
{pid:1790, vid:1790, oj:"hdu", title:"10_1006 Problem F", desc:"", input:"", output:"", sample_in:"", sample_out:"", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:18, special_status:1, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1791, vid:1791, oj:"hdu", title:"Where is the little Jgshining?", desc:"When Jgshining is a baby, he already showed his high intelligence. For example ,when somebody asked him“Who do you love, Dad? Mom?”,He always answered:“Both!”.When he stayed together with Mom, Dad and brother, he always selects a position from where it is the same distance to all three people. Now, you are given the positions of dad, mom and brother, please print the point where Jgshining will select?<br>If there is no this kind of position, please output “No this position”, otherwise, you should print this point.<br>", input:"Input contains an integer N in the first line, which indicates the number of test data. And then N lines follow. Each line consists of three pairs of numbers xi and yi, separated by a space. <br>", output:"For each test data you should output the point where Jgshining will select,please output the point which has minimal distance from three people if more than one point satisfy the question. One line per case.<br>", sample_in:"2\n0 0 1 0 0 1\n0 0 1 0 2 0", sample_out:"0.5 0.5\nNo this position", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:36, vtotal_submit:157, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007省赛集训队练习赛（10）_以此感谢DOOMIII", author:"", tag:["TEST"]}
{pid:1792, vid:1792, oj:"hdu", title:"A New Change Problem", desc:"Now given two kinds of coins A and B,which satisfy that GCD(A,B)=1.Here you can assume that there are enough coins for both kinds.Please calculate the maximal value that you cannot pay and  the total number that you cannot pay.", input:"The input will consist of a series of pairs of integers A and B, separated by a space, one pair of integers per line. <br>", output:"For each pair of input integers A and B you should output the the maximal value that you cannot pay and  the total number that you cannot pay, and with one line of output for each line in input. ", sample_in:"2 3\n3 4", sample_out:"1 1\n5 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:309, vtotal_submit:722, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"lcy", tag:["TEST"]}
{pid:1793, vid:1793, oj:"hdu", title:"Minimal search cost", desc:"&nbsp;&nbsp;As we know, we need to spend O(n) time in the abstract finding a key(every two keys are different) in a non-sorted array. But if we make up a BST(binary search tree) before, then for each access, you need to spend log(N) time to do it. And for each access, there exists a road from the root node to the target node, whose length Ci is the number of the edges of the road. <br>&nbsp;&nbsp;Because there is an accessing frequency Fi for each key. And the total value of the tree is defined as following rule: SUM=Sigma(Ci*Fi), for i from 0 to N-1, N is the number of the keys. You need to find the minimal value M_SUM to make up a tree.<br><br><img src=data/images/C125_1001_1.JPG><br><br><img src=data/images/C125_1001_2.JPG><br>", input:"&nbsp;&nbsp;There are a lot of cases. In each case, in the first line, there is an integer N to represent the number of keys. In the second line, there are N sorted integers Ki. In the third line, there are N integers Fi, which are the accessing frequency. 0&lt;N&lt;=1000, 0&lt;=Fi&lt;65536.<br>", output:"For each case, just output the minimal search cost.", sample_in:"5\n1 2 3 4 5\n2 5 4 9 6", sample_out:"23", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:62, vtotal_submit:327, special_status:0, time_limit:4000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（4）", author:"", tag:["TEST"]}
{pid:1794, vid:1794, oj:"hdu", title:"方格填数", desc:"&nbsp;&nbsp;给你一个N*N的方格，里面都是非负整数（小于32768），我们定义这个方格的总和为：其中的任何一个S*S（1&lt;=S&lt;=N）的子方格中的数字的总和。由于中间有K（0&lt;=K&lt;=N*N）个单位方格中的数字是0，因此现在给定你M（K&lt;=M&amp;&amp;M&lt;=10000）个正整数（小于32768），你可以从中选择K个，来填入原来的N*N的值为0的单位方格中，从而最大化的增加我们定义的方格的总和。", input:"&nbsp;&nbsp;这里有T组测试数据，第一行输入T，T&lt;=100。对于测试数据，先输入一个N（N&lt;=30），然后输入一个N*N的矩阵，中间含0的元素，然后给定一个M，后一行输入M个正整数。", output:"&nbsp;&nbsp;对于每组测试数据，输出能够最大的增加的值。", sample_in:"1\n3\n1 2 3\n4 0 2\n0 2 7\n4\n2 9 4 7", sample_out:"75", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:84, vtotal_submit:451, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（4）", author:"", tag:["TEST"]}
{pid:1795, vid:1795, oj:"hdu", title:"The least one", desc:"&nbsp;&nbsp;In the RPG game “go back ice age”(I decide to develop the game after my undergraduate education), all heros have their own respected value, and the skill of killing monsters is defined as the following rule: one hero can kill the monstrers whose respected values are smaller then himself and the two respected values has none common factor but 1, so the skill is the same as the number of the monsters he can kill. Now each kind of value of the monsters come. And your hero have to kill at least M ones. To minimize the damage of the battle, you should dispatch a hero with minimal respected value. Which hero will you dispatch ? There are Q battles, in each battle, for i from 1 to Q, and your hero should kill Mi ones at least. You have all kind of heros with different respected values, and the values(heros’ and monsters’) are positive.", input:"&nbsp;&nbsp;The first line has one integer Q, then Q lines follow. In the Q lines there is an integer Mi, 0&lt;Q&lt;=1000000, 0&lt;Mi&lt;=10000.<br>", output:"&nbsp;&nbsp;For each case, there are Q results, in each result, you should output the value of the hero you will dispatch to complete the task.", sample_in:"2\n3\n7", sample_out:"5\n11", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:75, vtotal_submit:341, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（4）", author:"", tag:["TEST"]}
{pid:1796, vid:1796, oj:"hdu", title:"How many integers can you find", desc:"&nbsp;&nbsp;Now you get a number N, and a M-integers set, you should find out how many integers which are small than N, that they can divided exactly by any integers in the set. For example, N=12, and M-integer set is {2,3}, so there is another set {2,3,4,6,8,9,10}, all the integers of the set can be divided exactly by 2 or 3. As a result, you just output the number 7.", input:"&nbsp;&nbsp;There are a lot of cases. For each case, the first line contains two integers N and M. The follow line contains the M integers, and all of them are different from each other. 0&lt;N&lt;2^31,0&lt;M&lt;=10, and the M integer are non-negative and won’t exceed 20.", output:"&nbsp;&nbsp;For each case, output the number.", sample_in:"12 2\n2 3", sample_out:"7", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:489, vtotal_submit:3508, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（4）", author:"", tag:["TEST"]}
{pid:1797, vid:1797, oj:"hdu", title:"Match the string", desc:"&nbsp;&nbsp;Sometimes we need to check that if a given string matches a format string or not. Look at the format string: (a)*(b)+(c)?(f|d), * represents the substring in the brackets before appears any times, if the format string is (ab)* ,then string “ababab” or null string match the format string .And + represents the substring in the brackets appears one or more times, for the format (ab)+ , the null string can’t match the format string. And the ? represents the substring in the brackets before appears none or once , and when you get the symbol |, either the substring s1(left of  the symbol | ) appear once, or the substring s2(right of the symbol) appear once, but they don’t appear together. For example, (f|h) represent that either ‘f’ or ‘h’ appears for once.", input:"&nbsp;&nbsp;In the first line, there is N represents the case number. Then N lines follow, in each line, there is a string. The length of each string won’t exceed 100000, and 1&lt;=N&lt;=1000. The letters appear in the string are only lower letters.", output:"&nbsp;&nbsp;The format string is given before and won’t be changed. The format string is <font color=red>(a)*aba((b)?(d)+)?h((f)|(k))+</font><br>&nbsp;&nbsp;For each case, just print “YES” if the input string mathes the format string, or “NO”.<br>", sample_in:"4\nabahf\naababdddhffkk\nbabbbdh\naaaaaaaaabahffffffff", sample_out:"YES\nYES\nNO\nYES", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:178, vtotal_submit:583, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（4）", author:"", tag:["TEST"]}
{pid:1798, vid:1798, oj:"hdu", title:"Tell me the area", desc:"&nbsp;&nbsp;&nbsp;&nbsp;There are two circles in the plane (shown in the below picture), there is a common area between the two circles. The problem is easy that you just tell me the common area.<br><img src=data/images/C125_1007_1.jpg><br>", input:"There are many cases. In each case, there are two lines. Each line has three numbers: the coordinates (X and Y) of the centre of a circle, and the radius of the circle.", output:"For each case, you just print the common area which is rounded to three digits after the decimal point. For more details, just look at the sample.", sample_in:"0 0 2\n2 2 1", sample_out:"0.108", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:361, vtotal_submit:1637, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（4）", author:"", tag:["TEST"]}
{pid:1799, vid:1799, oj:"hdu", title:"循环多少次？", desc:"&nbsp;&nbsp;我们知道，在编程中，我们时常需要考虑到时间复杂度，特别是对于循环的部分。例如，<br>如果代码中出现<br>for(i=1;i&lt;=n;i++) OP ;<br>那么做了n次OP运算，如果代码中出现<br>fori=1;i&lt;=n; i++)<br>&nbsp;&nbsp;for(j=i+1;j&lt;=n; j++) OP;<br>那么做了n*(n-1)/2 次OP 操作。<br>现在给你已知有m层for循环操作，且每次for中变量的起始值是上一个变量的起始值＋1（第一个变量的起始值是1），终止值都是一个输入的n，问最后OP有总共多少计算量。<br>", input:"&nbsp;&nbsp;有T组case，T&lt;=10000。每个case有两个整数m和n，0&lt;m&lt;=2000，0&lt;n&lt;=2000.", output:"&nbsp;&nbsp;对于每个case，输出一个值，表示总的计算量，也许这个数字很大，那么你只需要输出除1007留下的余数即可。", sample_in:"2\n1 3\n2 3", sample_out:"3\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:727, vtotal_submit:2477, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Insigma International Cup” Zhejiang Collegiate Programming Contest - Warm Up（4）", author:"", tag:["TEST"]}
{pid:1800, vid:1800, oj:"hdu", title:"Flying to the Mars", desc:"<center><img src=data/images/1800-1.jpg></center><br>In the year 8888,  the Earth is ruled by the PPF Empire . As the population growing , PPF needs to find more land for the newborns . Finally , PPF decides to attack Kscinow who ruling  the Mars . Here the problem comes! How can the soldiers reach the Mars ?  PPF convokes his soldiers and asks for their suggestions . “Rush … ” one soldier answers. “Shut up ! Do I have to remind you that there isn’t any road to the Mars from here!” PPF replies. “Fly !” another answers. PPF smiles :“Clever guy ! Although we haven’t got wings , I can buy some magic broomsticks from HARRY POTTER to help you .” Now , it’s time to learn to fly on a broomstick ! we assume that one soldier has one level number indicating his degree. The soldier who has a higher level could teach the lower , that is to say the former’s level &gt; the latter’s .  But the lower can’t teach the higher. One soldier can have only one teacher at most , certainly , having no teacher is also legal. Similarly one soldier can have only one student at most while having no student is also possible. Teacher can teach his student on the same broomstick .Certainly , all the soldier must have practiced on the broomstick before they fly to the Mars!  Magic broomstick is expensive !So , can you help PPF to calculate the minimum number of the broomstick needed .<br>For example : <br>There are 5 soldiers (A B C D E)with level numbers : 2 4 5 6 4;<br>One method :<br>C could teach B; B could teach A; So , A B C are eligible to study on the same broomstick.<br>D could teach E;So D E are eligible to study on the same broomstick;<br>Using this method , we need 2 broomsticks.<br>Another method:<br>D could teach A; So A D are eligible to study on the same broomstick.<br>C could teach B; So B C are eligible to study on the same broomstick.<br>E with no teacher or student are eligible to study on one broomstick.<br>Using the method ,we need 3 broomsticks.<br>……<br><br>After checking up all possible method, we found that 2 is the minimum number of broomsticks needed. <br>", input:"Input file contains multiple test cases.  <br>In a test case,the first line contains a single positive number N indicating the number of soldiers.(0&lt;=N&lt;=3000)<br>Next N lines :There is only one nonnegative integer on each line , indicating the level number for each soldier.( less than 30 digits);<br>", output:"For each case, output the minimum number of broomsticks on a single line.", sample_in:"4\n10\n20\n30\n04\n5\n2\n3\n4\n3\n4", sample_out:"1\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1598, vtotal_submit:9214, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"PPF@JLU", tag:["TEST"]}
{pid:1801, vid:1801, oj:"hdu", title:"Annoying painting tool", desc:"Maybe you wonder what an annoying painting tool is? First of all, the painting tool we speak of supports only black and white. Therefore, a picture consists of a rectangular area of pixels, which are either black or white. Second, there is only one operation how to change the colour of pixels: <br><br>Select a rectangular area of r rows and c columns of pixels, which is completely inside the picture. As a result of the operation, each pixel inside the selected rectangle changes its colour (from black to white, or from white to black). <br><br>Initially, all pixels are white. To create a picture, the operation described above can be applied several times. Can you paint a certain picture which you have in mind?<br><br>", input:"The input contains several test cases. Each test case starts with one line containing four integers n, m, r and c. (1 ≤ r ≤ n ≤ 100, 1 ≤ c ≤ m ≤ 100), The following n lines each describe one row of pixels of the painting you want to create. The i<sup>th</sup> line consists of m characters describing the desired pixel values of the i<sup>th</sup> row in the finished painting (\'0\' indicates white, \'1\' indicates black). <br><br>The last test case is followed by a line containing four zeros. <br><br>", output:"For each test case, print the minimum number of operations needed to create the painting, or -1 if it is impossible. <br><br>", sample_in:"3 3 1 1\n010\n101\n010\n4 3 2 1\n011\n110\n011\n110\n3 4 2 2\n0110\n0111\n0000\n0 0 0 0", sample_out:"4\n6\n-1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:171, vtotal_submit:305, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（1）", author:"", tag:["TEST"]}
{pid:1802, vid:1802, oj:"hdu", title:"Black and white painting", desc:"You are visiting the Centre Pompidou which contains a lot of modern paintings. In particular you notice one painting which consists solely of black and white squares, arranged in rows and columns like in a chess board (no two adjacent squares have the same colour). By the way, the artist did not use the tool of problem A to create the painting.<br><br>Since you are bored, you wonder how many 8 × 8 chess boards are embedded within this painting. The bottom right corner of a chess board must always be white.<br><br>", input:"The input contains several test cases. Each test case consists of one line with three integers n, m and c. (8 ≤ n, m ≤ 40000), where n is the number of rows of the painting, and m is the number of columns of the painting. c is always 0 or 1, where 0 indicates that the bottom right corner of the painting is black, and 1 indicates that this corner is white. <br><br>The last test case is followed by a line containing three zeros. <br><br>", output:"For each test case, print the number of chess boards embedded within the given painting. <br><br>", sample_in:"8 8 0\n8 8 1\n9 9 1\n40000 39999 0\n0 0 0", sample_out:"0\n1\n2\n799700028", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:180, vtotal_submit:289, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（1）", author:"", tag:["TEST"]}
{pid:1803, vid:1803, oj:"hdu", title:"Cylinder", desc:"Using a sheet of paper and scissors, you can cut out two faces to form a cylinder in the following way: <br><br>1. Cut the paper horizontally (parallel to the shorter side) to get two rectangular parts. <br>2. From the first part, cut out a circle of maximum radius. The circle will form the bottom of the cylinder. <br>3. Roll the second part up in such a way that it has a perimeter of equal length with the circle\'s circumference, and attach one end of the roll to the circle. Note that the roll may have some overlapping parts in order to get the required length of the perimeter. <br>Given the dimensions of the sheet of paper, can you calculate the biggest possible volume of a cylinder which can be constructed using the procedure described above? <br><br>", input:"The input consists of several test cases. Each test case consists of two numbers w and h (1 ≤ w ≤ h ≤ 100), which indicate the width and height of the sheet of paper. <br><br>The last test case is followed by a line containing two zeros. <br><br>", output:"For each test case, print one line with the biggest possible volume of the cylinder. Round this number to 3 places after the decimal point. <br><br>", sample_in:"10 10\n10 50\n10 30\n0 0", sample_out:"54.247\n785.398\n412.095\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nIn the first case, the optimal cylinder has a radius of about 1.591549, \nin the second case, the optimal cylinder has a radius of 5, \nand in the third case, the optimal cylinder has a radius of about 3.621795. \n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:91, vtotal_submit:272, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（1）", author:"", tag:["TEST"]}
{pid:1804, vid:1804, oj:"hdu", title:"Deli Deli", desc:"Mrs. Deli is running the delicatessen store &quot;Deli Deli&quot;. Last year Mrs. Deli has decided to expand her business and build up an online store. She has hired a programmer who has implemented the online store. <br><br>Recently some of her new online customers complained about the electronic bills. The programmer had forgotten to use the plural form in case that an item is purchased multiple times. Unfortunaly the programmer of Mrs. Deli is on holiday and now it is your task to implement this feature for Mrs. Deli. Here is a description how to make the plural form: <br><br>1. If the word is in the list of irregular words replace it with the given plural. <br>2. Else if the word ends in a consonant followed by &quot;y&quot;, replace &quot;y&quot; with &quot;ies&quot;. <br>3. Else if the word ends in &quot;o&quot;, &quot;s&quot;, &quot;ch&quot;, &quot;sh&quot; or &quot;x&quot;, append &quot;es&quot; to the word. <br>4. Else append &quot;s&quot; to the word. <br>", input:"The first line of the input file consists of two integers L and N (0 ≤ L ≤ 20, 1 ≤ N ≤ 100). The following L lines contain the description of the irregular words and their plural form. Each line consists of two words separated by a space character, where the first word is the singular, the second word the plural form of some irregular word. After the list of irregular words, the following N lines contain one word each, which you have to make plural. You may assume that each word consists of at most 20 lowercase letters from the english alphabet (\'a\' to \'z\'). <br><br>", output:"Print N lines of output, where the i<sup>th</sup> line is the plural form of the  i<sup>th</sup> input word. <br><br>", sample_in:"3 7\nrice rice\nspaghetti spaghetti\noctopus octopi\nrice\nlobster\nspaghetti\nstrawberry\noctopus\npeach\nturkey", sample_out:"rice\nlobsters\nspaghetti\nstrawberries\noctopi\npeaches\nturkeys", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:639, vtotal_submit:1360, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（1）", author:"", tag:["TEST"]}
{pid:1805, vid:1805, oj:"hdu", title:"Expressions", desc:"Arithmetic expressions are usually written with the operators in between the two operands (which is called infix notation). For example, (x+y)*(z-w) is an arithmetic expression in infix notation. However, it is easier to write a program to evaluate an expression if the expression is written in postfix notation (also known as reverse polish notation). In postfix notation, an operator is written behind its two operands, which may be expressions themselves. For example, x y + z w - * is a postfix notation of the arithmetic expression given above. Note that in this case parentheses are not required. <br><br>To evaluate an expression written in postfix notation, an algorithm operating on a stack can be used. A stack is a data structure which supports two operations: <br><br>1. push: a number is inserted at the top of the stack. <br>2. pop: the number from the top of the stack is taken out. <br>During the evaluation, we process the expression from left to right. If we encounter a number, we push it onto the stack. If we encounter an operator, we pop the first two numbers from the stack, apply the operator on them, and push the result back onto the stack. More specifically, the following pseudocode shows how to handle the case when we encounter an operator O: <br><br>a := pop();<br>b := pop();<br>push(b O a);<br>The result of the expression will be left as the only number on the stack. <br><br>Now imagine that we use a queue instead of the stack. A queue also has a push and pop operation, but their meaning is different: <br><br>1. push: a number is inserted at the end of the queue. <br>2. pop: the number from the front of the queue is taken out of the queue. <br>Can you rewrite the given expression such that the result of the algorithm using the queue is the same as the result of the original expression evaluated using the algorithm with the stack? <br><br>", input:"The first line of the input contains a number T (T ≤ 200). The following T lines each contain one expression in postfix notation. Arithmetic operators are represented by uppercase letters, numbers are represented by lowercase letters. You may assume that the length of each expression is less than 10000 characters. <br><br>", output:"For each given expression, print the expression with the equivalent result when using the algorithm with the queue instead of the stack. To make the solution unique, you are not allowed to assume that the operators are associative or commutative. <br><br>", sample_in:"2\nxyPzwIM\nabcABdefgCDEF", sample_out:"wzyxIPM\ngfCecbDdAaEBF", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:79, vtotal_submit:218, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（1）", author:"", tag:["TEST"]}
{pid:1806, vid:1806, oj:"hdu", title:"Frequent values", desc:"You are given a sequence of n integers a<sub>1</sub>  , a<sub>2</sub>  , ... , a<sub>n</sub>  in non-decreasing order. In addition to that, you are given several queries consisting of indices i and j (1 ≤ i ≤ j ≤ n). For each query, determine the most frequent value among the integers a<sub>i</sub>  , ... , a<sub>j</sub> . <br><br>", input:"The input consists of several test cases. Each test case starts with a line containing two integers n and q (1 ≤ n, q ≤ 100000). The next line contains n integers a<sub>1</sub> , ... , a<sub>n</sub>(-100000 ≤ a<sub>i</sub> ≤ 100000, for each i ∈ {1, ..., n}) separated by spaces. You can assume that for each i ∈ {1, ..., n-1}: a<sub>i</sub> ≤ a<sub>i</sub>+1. The following q lines contain one query each, consisting of two integers i and j (1 ≤ i ≤ j ≤ n), which indicate the boundary indices for the query. <br><br>The last test case is followed by a line containing a single 0. <br><br>", output:"For each query, print one line with one integer: The number of occurrences of the most frequent value within the given range. <br>", sample_in:"10 3\n-1 -1 1 1 1 1 3 10 10 10\n2 3\n1 10\n5 10\n0", sample_out:"1\n4\n3\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nA naive algorithm may not run in time! \n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:197, vtotal_submit:1012, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（1）", author:"", tag:["TEST"]}
{pid:1807, vid:1807, oj:"hdu", title:"Grocery store", desc:"A cashier in a grocery store seems to have difficulty in distinguishing the multiplication symbol and the addition symbol. To make things easier for him, you want to buy goods in such a way that the product of their prices is the same as the sum of their prices. <br><br>Of course, if you buy only one item, this is always true. With two items and three items, it still seems quite a boring task to you, so now you are interested in finding possible prices of four items such that the sum of the four prices is equal to the product of the four prices. You should consider the prices are in  with two digits after the decimal point. Obviously, each product costs at least one cent.<br>", input:"This problem has no input.", output:"Print all solutions which have a sum of the four items of at most 20.00 . For each solution, print one line with the prices of the four items in non-decreasing order, with one space character between them. You may print the solutions in any order, but make sure to print each solution only once. ", sample_in:"0.50 1.00 2.50 16.00\n1.25 1.60 1.75 1.84\n1.25 1.40 1.86 2.00\n...", sample_out:"", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:9, vtotal_submit:176, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（1）", author:"", tag:["TEST"]}
{pid:1808, vid:1808, oj:"hdu", title:"Halloween treats", desc:"Every year there is the same problem at Halloween: Each neighbour is only willing to give a certain total number of sweets on that day, no matter how many children call on him, so it may happen that a child will get nothing if it is too late. To avoid conflicts, the children have decided they will put all sweets together and then divide them evenly among themselves. From last year\'s experience of Halloween they know how many sweets they get from each neighbour. Since they care more about justice than about the number of sweets they get, they want to select a subset of the neighbours to visit, so that in sharing every child receives the same number of sweets. They will not be satisfied if they have any sweets left which cannot be divided. <br><br>Your job is to help the children and present a solution. <br><br>", input:"The input contains several test cases. <br>The first line of each test case contains two integers c and n (1 ≤ c ≤ n ≤ 100000), the number of children and the number of neighbours, respectively. The next line contains n space separated integers a<sub>1</sub> , ... , a<sub>n</sub>  (1 ≤ a<sub>i</sub>  ≤ 100000 ), where a<sub>i</sub> represents the number of sweets the children get if they visit neighbour i. <br><br>The last test case is followed by two zeros. <br><br>", output:"For each test case output one line with the indices of the neighbours the children should select (here, index i corresponds to neighbour i who gives a total number of a<sub>i</sub> sweets). If there is no solution where each child gets at least one sweet, print &quot;no sweets&quot; instead. Note that if there are several solutions where each child gets at least one sweet, you may print any of them.<br>", sample_in:"4 5\n1 2 3 7 5\n3 6\n7 11 2 5 13 17\n0 0", sample_out:"3 5\n2 3 4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:76, vtotal_submit:447, special_status:1, time_limit:1000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（1）", author:"", tag:["TEST"]}
{pid:1809, vid:1809, oj:"hdu", title:"A New Tetris Game(2)", desc:"自从Lele发明了新的类俄罗斯游戏 A New Tetris Game 后，他整日整夜得玩，现在渐渐的，他发现这个游戏也不过如此，为了加大点难度，他制定了一套新的规则：<br><br>首先，Lele和姐姐拿出N个长方形的棋盘，这些棋盘中有些格子是不可用的，剩下的都是可用的。每次Lele和姐姐轮流从N个棋盘里选出一个棋盘，拿出俄罗斯方块里的正方形方块(大小为2*2的正方形方块)往这个棋盘里放，要注意的是，放进去的正方形方块不能叠在棋盘不可用的格子上，也不能叠在已经放了的正方形方块上。<br>到最后，谁不能再放正方形方块，谁就输了。<br><br>现在，假设每次Lele和姐姐都很聪明，都能按最优策略放正方形，并且每次都是Lele先放正方形，你能告诉他他是否一定能赢姐姐吗？<br>", input:"本题目包含多组测试，请处理到文件结束。<br>每组测试第一行包含一个正整数N(N&lt;30)，表示棋盘的输个数<br>接下来有N个棋盘的描述。<br>对于每个棋盘，第一行有两个整数R,C(R*C&lt;50),分别表示棋盘的行数和列数。然后有R行，每行C个字符来表示这个棋盘。<br>其中0是代表棋盘该位置可用，1是代表棋盘该位置不可用<br><br>你可以假设，每个棋盘中，0的个数不会超过40个。<br><br>", output:"对于每一组测试，如果Lele有把握获胜的话，在一行里面输出&quot;Yes&quot;，否则输出&quot;No&quot;。<br>", sample_in:"2\n4 4\n0000\n0000\n0000\n0000\n4 4\n0000\n0010\n0100\n0000\n1\n4 4\n0000\n0010\n0100\n0000", sample_out:"Yes\nNo", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:164, vtotal_submit:832, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（2）", author:"", tag:["TEST"]}
{pid:1810, vid:1810, oj:"hdu", title:"Rating of Tetris", desc:"话说Lele发明了 New Tetris 这个游戏后，经过两天的小推广，立刻风靡亚洲。<br><br>为了更好的把这个游戏推广到全世界，Lele从Topcoder获得灵感，开发了一套系统量化并记录下每个人在每天的水平（定义为Rating），这样好让选手更好的分析自己并促进自己成长。为了更精确，Lele系统里的Rating并不像Topcoder里只采用整数，而是采用了小数，甚至可能存在负数（比得实在太差了）。<br><br>突然有一天，无聊到发慌的Lele看了一下自己的Rating，竟然很神奇的符合下面这个函数：<br><br><center><img src=data/images/C89-1003-1.jpg></center><br><br>其中变量x的代表是哪一天，并且可以看作弧度用于sin函数的计算。函数F(x)表示在x天时的Rating。<br><br>Lele又定义了一个概念，Rating和。出于某种特殊原因，Lele把从日期A到日期B的Rating和定义为从时间A到时间B（包括）的每一天的Rating中，除掉最高的3个Rating，剩下其他Rating的和。<br><br>现在给你两个日期A和B，请你计算这段时间内Lele的Rating和<br>", input:"本题目包含多组测试，请处理到文件结束。<br>每组测试包含两个正整数A,B（0&lt;A,B&lt;1000001），并且题目保证这个时间间隔大于3天<br>", output:"对于每组测试，在一行里面输出该范围之内Lele的Rating和。<br>四舍五入至小数点后一位。<br>", sample_in:"1 5\n1 1000000", sample_out:"-5.4\n-4990444779.0\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\n请注意该题目的内存限制\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:121, vtotal_submit:533, special_status:0, time_limit:3000, mem_limit:1024, hint:"", source:"HDOJ 2007 Summer Exercise（2）", author:"", tag:["TEST"]}
{pid:1811, vid:1811, oj:"hdu", title:"Rank of Tetris", desc:"自从Lele开发了Rating系统，他的Tetris事业更是如虎添翼，不久他遍把这个游戏推向了全球。<br><br>为了更好的符合那些爱好者的喜好，Lele又想了一个新点子：他将制作一个全球Tetris高手排行榜，定时更新，名堂要比福布斯富豪榜还响。关于如何排名，这个不用说都知道是根据Rating从高到低来排，如果两个人具有相同的Rating，那就按这几个人的RP从高到低来排。<br><br>终于，Lele要开始行动了，对N个人进行排名。为了方便起见，每个人都已经被编号，分别从0到N-1,并且编号越大，RP就越高。<br>同时Lele从狗仔队里取得一些（M个）关于Rating的信息。这些信息可能有三种情况，分别是&quot;A &gt; B&quot;,&quot;A = B&quot;,&quot;A &lt; B&quot;，分别表示A的Rating高于B,等于B,小于B。<br><br>现在Lele并不是让你来帮他制作这个高手榜，他只是想知道，根据这些信息是否能够确定出这个高手榜，是的话就输出&quot;OK&quot;。否则就请你判断出错的原因，到底是因为信息不完全（输出&quot;UNCERTAIN&quot;），还是因为这些信息中包含冲突（输出&quot;CONFLICT&quot;）。<br>注意，如果信息中同时包含冲突且信息不完全，就输出&quot;CONFLICT&quot;。<br>", input:"本题目包含多组测试，请处理到文件结束。<br>每组测试第一行包含两个整数N,M(0&lt;=N&lt;=10000,0&lt;=M&lt;=20000),分别表示要排名的人数以及得到的关系数。<br>接下来有M行，分别表示这些关系<br>", output:"对于每组测试，在一行里按题目要求输出", sample_in:"3 3\n0 > 1\n1 &lt; 2\n0 > 2\n4 4\n1 = 2\n1 > 3\n2 > 0\n0 > 1\n3 3\n1 > 0\n1 > 2\n2 &lt; 1", sample_out:"OK\nCONFLICT\nUNCERTAIN", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:624, vtotal_submit:4280, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（2）", author:"", tag:["TEST"]}
{pid:1812, vid:1812, oj:"hdu", title:"Count the Tetris", desc:"话说就是因为这个游戏，Lele已经变成一个名人，每当他一出现在公共场合，就有无数人找他签名，挑战。<br><br>为了防止引起社会的骚动，Lele决定还是乖乖呆在家里。<br><br>在家很无聊，Lele可不想像其他人一样每天没事在家数钱玩，于是他就开始数棋盘。他想知道，一个有N×N个格子的正方形棋盘，每个格子可以用C种不同颜色来染色，一共可以得到多少种不同的棋盘。如果一个棋盘，经过任意旋转，反射后变成另一个棋盘，这两个棋盘就是属于同一种棋盘。<br><br>比如当N=C=2的时候，有下面六种不同的棋盘<br><br><center><img src=data/images/C89-1004-1.jpg></center><br><br>现在告诉你N和C，请你帮帮Lele算算，到底有多少种不同的棋盘<br>", input:"本题目包含多组测试，请处理到文件结束。<br>每组测试数据包含两个正整数N和C(0&lt;N,C,&lt;31),分别表示棋盘的大小是N×N，用C种颜色来进行染色。<br>", output:"对于每组测试，在一行里输出答案。<br>", sample_in:"2 2\n3 1", sample_out:"6\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:233, vtotal_submit:1693, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（2）", author:"", tag:["TEST"]}
{pid:1813, vid:1813, oj:"hdu", title:"Escape from Tetris", desc:"由于整日整夜地对着这个棋盘，Lele终于走火入魔。每天一睡觉，他就会梦到自己会被人被扔进一个棋盘中，一直找不到出路，然后从梦中惊醒。久而久之，Lele被搞得精神衰弱。梦境是否会成为现实，谁也说不准，不过不怕一万只怕万一。现在Lele每次看到一个棋盘，都会想象一下自己被关进去以后要如何逃生。<br><br>Lele碰到的棋盘都是正方形的，其中有些格子是坏的，不可以走，剩下的都是可以走的。只要一走到棋盘的边沿（最外面的一圈），就算已经逃脱了。Lele梦见自己一定会被扔在一个可以走的格子里，但是不确定具体是哪一个，所以他要做好被扔在任意一个格子的准备。<br><br>现在Lele请你帮忙，对于任意一个棋盘，找出一个最短的序列，序列里可以包括&quot;north&quot;(地图里向上),&quot;east&quot;(地图里向右),&quot;south&quot;(地图里向下),&quot;west&quot;(地图里向左)，这四个方向命令。不论Lele被扔在棋盘里的哪个好的格子里，都能按这个序列行走逃出棋盘。<br>逃脱的具体方法是：不论Lele被扔在哪里，Lele按照序列里的方向命令一个一个地走，每个命令走一格，如果走的时候会碰到坏的格子，则忽略这条命令。当然，如果已经逃脱了，就可以不考虑序列中剩下的命令了。<br>", input:"本题目包含多组测试，请处理至文件结束。<br>每组测试第一行包含一个正整数 N (0&lt;N&lt;9)，代表棋盘的大小是 N*N<br>接下来有N行，每行N个字符代表这个棋盘。<br>其中0代表该位置是好的，可以走，1代表该位置是坏的，不可以走。<br><br>题目数据保证，对于任意一个棋盘，都存在题目中所要求的序列<br>", output:"对于每组数据，输出题目所要求的序列，序列中每个元素一行。<br>如果存在两个符合要求的序列，请输出字典序最小的那个序列。<br><br>两个测试之间请用一个空行隔开。<br>", sample_in:"4\n1101\n0001\n1100\n1001", sample_out:"east\nnorth", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:98, vtotal_submit:730, special_status:0, time_limit:4000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（2）", author:"", tag:["TEST"]}
{pid:1814, vid:1814, oj:"hdu", title:"Peaceful Commission", desc:"The Public Peace Commission should be legislated in Parliament of The Democratic Republic of Byteland according to The Very Important Law. Unfortunately one of the obstacles is the fact that some deputies do not get on with some others. <br><br>The Commission has to fulfill the following conditions: <br>1.Each party has exactly one representative in the Commission, <br>2.If two deputies do not like each other, they cannot both belong to the Commission. <br><br>Each party has exactly two deputies in the Parliament. All of them are numbered from 1 to 2n. Deputies with numbers 2i-1 and 2i belong to the i-th party . <br><br>Task <br>Write a program, which: <br>1.reads from the text file SPO.IN the number of parties and the pairs of deputies that are not on friendly terms, <br>2.decides whether it is possible to establish the Commission, and if so, proposes the list of members, <br>3.writes the result in the text file SPO.OUT. <br>", input:"In the first line of the text file SPO.IN there are two non-negative integers n and m. They denote respectively: the number of parties, 1 &lt;= n &lt;= 8000, and the number of pairs of deputies, who do not like each other, 0 &lt;= m &lt;=2 0000. In each of the following m lines there is written one pair of integers a and b, 1 &lt;= a &lt; b &lt;= 2n, separated by a single space. It means that the deputies a and b do not like each other. <br>There are multiple test cases. Process to end of file. <br>", output:"The text file SPO.OUT should contain one word NIE (means NO in Polish), if the setting up of the Commission is impossible. In case when setting up of the Commission is possible the file SPO.OUT should contain n integers from the interval from 1 to 2n, written in the ascending order, indicating numbers of deputies who can form the Commission. Each of these numbers should be written in a separate line. If the Commission can be formed in various ways, your program may write mininum number sequence. <br>", sample_in:"3 2\n1 3\n2 4", sample_out:"1\n4\n5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:187, vtotal_submit:1500, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"POI 2001", author:"", tag:["TEST"]}
{pid:1815, vid:1815, oj:"hdu", title:"Building roads", desc:"Farmer John\'s farm has N barns, and there are some cows that live in each barn. The cows like to drop around, so John wants to build some roads to connect these barns. If he builds roads for every pair of different barns, then he must build N * (N - 1) / 2 roads, which is so costly that cheapskate John will never do that, though that\'s the best choice for the cows. <br><br>Clever John just had another good idea. He first builds two transferring point S1 and S2, and then builds a road connecting S1 and S2 and N roads connecting each barn with S1 or S2, namely every barn will connect with S1 or S2, but not both. So that every pair of barns will be connected by the roads. To make the cows don\'t spend too much time while dropping around, John wants to minimize the maximum of distances between every pair of barns. <br><br>That\'s not the whole story because there is another troublesome problem. The cows of some barns hate each other, and John can\'t connect their barns to the same transferring point. The cows of some barns are friends with each other, and John must connect their barns to the same transferring point. What a headache! Now John turns to you for help. Your task is to find a feasible optimal road-building scheme to make the maximum of distances between every pair of barns as short as possible, which means that you must decide which transferring point each barn should connect to. <br><br>We have known the coordinates of S1, S2 and the N barns, the pairs of barns in which the cows hate each other, and the pairs of barns in which the cows are friends with each other. <br><br>Note that John always builds roads vertically and horizontally, so the length of road between two places is their Manhattan distance. For example, saying two points with coordinates (x1, y1) and (x2, y2), the Manhattan distance between them is |x1 - x2| + |y1 - y2|. <br><br>", input:"The first line of input consists of 3 integers N, A and B (2 &lt;= N &lt;= 500, 0 &lt;= A &lt;= 1000, 0 &lt;= B &lt;= 1000), which are the number of barns, the number of pairs of barns in which the cows hate each other and the number of pairs of barns in which the cows are friends with each other. <br><br>Next line contains 4 integer sx1, sy1, sx2, sy2, which are the coordinates of two different transferring point S1 and S2 respectively. <br><br>Each of the following N line contains two integer x and y. They are coordinates of the barns from the first barn to the last one. <br><br>Each of the following A lines contains two different integers i and j(1 &lt;= i &lt; j &lt;= N), which represent the i-th and j-th barns in which the cows hate each other. <br><br>The same pair of barns never appears more than once. <br><br>Each of the following B lines contains two different integers i and j(1 &lt;= i &lt; j &lt;= N), which represent the i-th and j-th barns in which the cows are friends with each other. The same pair of barns never appears more than once. <br><br>You should note that all the coordinates are in the range [-1000000, 1000000]. <br>", output:"You just need output a line containing a single integer, which represents the maximum of the distances between every pair of barns, if John selects the optimal road-building scheme. Note if there is no feasible solution, just output -1. <br>", sample_in:"4 1 1\n12750 28546 15361 32055\n6706 3887\n10754 8166\n12668 19380\n15788 16059\n3 4\n2 3", sample_out:"53246", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:84, vtotal_submit:481, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"POJ Monthly - 2006.01.22 - zhucheng", author:"", tag:["TEST"]}
{pid:1816, vid:1816, oj:"hdu", title:"Get Luffy Out *", desc:"Ratish is a young man who always dreams of being a hero. One day his friend Luffy was caught by Pirate Arlong. Ratish set off at once to Arlong\'s island. When he got there, he found the secret place where his friend was kept, but he could not go straight in. He saw a large door in front of him and two locks in the door. Beside the large door, he found a strange rock, on which there were some odd words. The sentences were encrypted. But that was easy for Ratish, an amateur cryptographer. After decrypting all the sentences, Ratish knew the following facts: <br><br>Behind the large door, there is a nesting prison, which consists of M floors. Each floor except the deepest one has a door leading to the next floor, and there are two locks in each of these doors. Ratish can pass through a door if he opens either of the two locks in it. There are 2N different types of locks in all. The same type of locks may appear in different doors, and a door may have two locks of the same type. There is only one key that can unlock one type of lock, so there are 2N keys for all the 2N types of locks. These 2N keys were made N pairs,one key may be appear in some pairs, and once one key in a pair is used, the other key will disappear and never show up again. <br><br>Later, Ratish found N pairs of keys under the rock and a piece of paper recording exactly what kinds of locks are in the M doors. But Ratish doesn\'t know which floor Luffy is held, so he has to open as many doors as possible. Can you help him to choose N keys to open the maximum number of doors?<br>", input:"There are several test cases. Every test case starts with a line containing two positive integers N (1 &lt;= N &lt;= 2^10) and M (1 &lt;= M &lt;= 2^11) separated by a space, the first integer represents the number of types of keys and the second integer represents the number of doors. The 2N keys are numbered 0, 1, 2, ..., 2N - 1. Each of the following N lines contains two integers, which are the numbers of two keys in a pair. After that, each of the following M lines contains two integers, which are the numbers of two keys corresponding to the two locks in a door. You should note that the doors are given in the same order that Ratish will meet. A test case with N = M = 0 ends the input, and should not be processed.<br>", output:"For each test case, output one line containing an integer, which is the maximum number of doors Ratish can open.<br>", sample_in:"3 6\n0 3\n1 2\n4 5\n0 1\n0 2\n4 1\n4 2\n3 5\n2 2\n0 0", sample_out:"4\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>题目有更改！</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:89, vtotal_submit:393, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"Beijing 2005", author:"", tag:["TEST"]}
{pid:1817, vid:1817, oj:"hdu", title:"Necklace of Beads", desc:"Beads of red, blue or green colors are connected together into a circular necklace of n beads ( n &lt; 40 ). If the repetitions that are produced by rotation around the center of the circular necklace or reflection to the axis of symmetry are all neglected, how many different forms of the necklace are there? <br><br><center><img src=data/images/1817-1.jpg></center><br>", input:"The input has several lines, and each line contains the input data n. <br>-1 denotes the end of the input file. <br><br>", output:"The output should contain the output data: Number of different forms, in each line correspondent to the input data.", sample_in:"4\n5\n-1", sample_out:"21\n39", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:91, vtotal_submit:353, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1818, vid:1818, oj:"hdu", title:"It\'s not a Bug, It\'s a Feature!", desc:"It is a curious fact that consumers buying a new software product generally do not expect the software to be bug-free. Can you imagine buying a car whose steering wheel only turns to the right? Or a CD-player that plays only CDs with country music on them? Probably not. But for software systems it seems to be acceptable if they do not perform as they should do. In fact, many software companies have adopted the habit of sending out patches to fix bugs every few weeks after a new product is released (and even charging money for the patches). <br>Tinyware Inc. is one of those companies. After releasing a new word processing software this summer, they have been producing patches ever since. Only this weekend they have realized a big problem with the patches they released. While all patches fix some bugs, they often rely on other bugs to be present to be installed. This happens because to fix one bug, the patches exploit the special behavior of the program due to another bug. <br><br>More formally, the situation looks like this. Tinyware has found a total of n bugs B = {b1, b2, ..., bn} in their software. And they have released m patches p1, p2, ..., pm. To apply patch pi to the software, the bugs Bi+ in B have to be present in the software, and the bugs Bi- in B must be absent (of course Bi+ ∩ Bi- = Φ). The patch then fixes the bugs Fi- in B (if they have been present) and introduces the new bugs Fi+ in B (where, again, Fi+ ∩ Fi- = Φ). <br><br>Tinyware\'s problem is a simple one. Given the original version of their software, which contains all the bugs in B, it is possible to apply a sequence of patches to the software which results in a bug- free version of the software? And if so, assuming that every patch takes a certain time to apply, how long does the fastest sequence take? <br><br>", input:"The input contains several product descriptions. Each description starts with a line containing two integers n and m, the number of bugs and patches, respectively. These values satisfy 1 &lt;= n &lt;= 20 and 1 &lt;= m &lt;= 100. This is followed by m lines describing the m patches in order. Each line contains an integer, the time in seconds it takes to apply the patch, and two strings of n characters each. <br><br>The first of these strings describes the bugs that have to be present or absent before the patch can be applied. The i-th position of that string is a ``+\'\' if bug bi has to be present, a ``-\'\' if bug bi has to be absent, and a `` 0\'\' if it doesn\'t matter whether the bug is present or not. <br><br>The second string describes which bugs are fixed and introduced by the patch. The i-th position of that string is a ``+\'\' if bug bi is introduced by the patch, a ``-\'\' if bug bi is removed by the patch (if it was present), and a ``0\'\' if bug bi is not affected by the patch (if it was present before, it still is, if it wasn\'t, is still isn\'t). <br><br>The input is terminated by a description starting with n = m = 0. This test case should not be processed. <br>", output:"For each product description first output the number of the product. Then output whether there is a sequence of patches that removes all bugs from a product that has all n bugs. Note that in such a sequence a patch may be used multiple times. If there is such a sequence, output the time taken by the fastest sequence in the format shown in the sample output. If there is no such sequence, output ``Bugs cannot be fixed.\'\'. <br><br>Print a blank line after each test case. <br>", sample_in:"3 3\n1 000 00-\n1 00- 0-+\n2 0-- -++\n4 1\n7 0-0+ ----\n0 0", sample_out:"Product 1\nFastest sequence takes 8 seconds.\n\nProduct 2\nBugs cannot be fixed.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:46, vtotal_submit:147, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"Southwestern European Regional Contest 1998", author:"", tag:["TEST"]}
{pid:1819, vid:1819, oj:"hdu", title:"Bishops", desc:"Yesterday was Sam\'s birthday. The most interesting gift was definitely the chessboard. Sam quickly learned the rules of chess and defeated his father, all his friends, his little sister, and now no one wants to play with him any more. <br><br>So he decided to play with another birthday gift – a Book of Math Problems for Young Mathematicians. He opened the book somewhere in the middle and read the following problem: &quot;How many knights can be placed on a chessboard without threatening each other?&quot; After a while he realized that this was trivial and moved on to the next problem: &quot;How many bishops can be placed on a chessboard without threatening each other?&quot;. Sam is in trouble here. He is not able to solve this problem and needs your help. <br><br><b>Task Specification</b><br><br>Sam\'s chessboard has size N×N. A bishop can move to any distance in any of the four diagonal directions. A bishop threatens another bishop if it can move to the other bishop\'s position. Your task is to compute the maximum number of bishops that can be placed on a chessboard in such a way that no two bishops threaten each other. <br><br>", input:"The input file consists of several lines. The line number i contains a single number representing the size( &lt;10^100) of the i-th chessboard.", output:"The output file should contain the same number of lines as the input file. The i-th line should contain one number – the maximum number of bishops that can be placed on i-th chessboard without threatening each other. <br>", sample_in:"2\n3", sample_out:"2\n4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:19, vtotal_submit:50, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"IPSC 2004", author:"", tag:["TEST"]}
{pid:1820, vid:1820, oj:"hdu", title:"Little Bishops", desc:"A bishop is a piece used in the game of chess which is played on a board of square grids. A bishop can only move diagonally from its current position and two bishops attack each other if one is on the path of the other. In the following figure, the dark squares represent the reachable locations for bishop <b>B1</b> form its current position.  The figure also shows that the bishops <b>B1</b> and <b>B2</b> are in attacking positions whereas <b>B1</b> and <b>B3</b> are not. <b>B2</b> and <b>B3</b> are also in non-attacking positions. <br><br><center><img src=data/images/1820-1.jpg></center><br><br>Now, given two numbers <b>n</b> and <b>k</b>, your job is to determine the number of ways one can put <b>k</b> bishops on an <b>n × n</b> chessboard so that no two of them are in attacking positions. ", input:"The input file may contain multiple test cases. Each test case occupies a single line in the input file and contains two integers <b>n (1 ≤ n ≤ 8)</b> and <b>k (0 ≤ k ≤ n2)</b>. <br><br>A test case containing two zeros for <b>n</b> and <b>k</b> terminates the input and you won’t need to process this particular input.<br>", output:"For each test case in the input print a line containing the total number of ways one can put the given number of bishops on a chessboard of the given size so that no two of them are in attacking positions. You may safely assume that this number will be less than 10^15.", sample_in:"8 6\n4 4\n0 0", sample_out:"5599888\n260", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:31, vtotal_submit:158, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"UVA", author:"", tag:["TEST"]}
{pid:1821, vid:1821, oj:"hdu", title:"Get The Treasure", desc:"One day, a team of archaeologists found a figure and some ancient charactors at a relique. The figure was made up of n points distributing on a circle symmetrically.<br>After investigating the charactors, they got to know that a treasure was hid beneath the figure. In order to open the door to the treasure, they must redraw all the lines between any two points in the figure with some colors. If the figure was right, the door would open.<br>Now they want to know how many times they have to try at most to open the door, and they ask you for help.<br>", input:"Each test case contains an integer n and a string S in a line. n is the number of points in the figure and S is a string made up of distinct capital letters, each indicating a color that can be used to redraw the figure. 3 &lt;= n &lt;= 50. <br>", output:"Each case outputs the maximum times they may try in one line. Note that two figures are considered the same if one can be obtained by having rotation and mirroring on the other one. ", sample_in:"3 BW\n3 RGB\n4 RG", sample_out:"4\n10\n19", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4, vtotal_submit:17, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"ZOJ Monthly - October 2006", author:"", tag:["TEST"]}
{pid:1822, vid:1822, oj:"hdu", title:"Earn more money", desc:"渴望占有愈多而愈脆弱。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 安妮宝贝<br><br>古有Bill gates辍学创业，今有Wiskey创作卖书。但是如今网络写手太多，Wiskey愁着自己写的书没人买，所以特地到网络上搜集了许多信息，最后发现最大的竞争对手是来自距离地球有一亿亿光年的伽玛星球的U.F.O集团，据说都是吃泡面不眨眼的家伙。为了使自己的利益最大化，Wiskey开始思考着对策，但是U.F.O集团也不是专吃方便面的，她们也会往自己利益最大化的方向前进，两者轮流决策，不能改变对方的决策，并且两者的决策信息是公开的。请各位看官预测下Wiskey和U.F.O竞争的最后结果。<br><img src=data/images/C90-1001-1.JPG><br><br>假如U.F.O和Wiskey从（400，400）开始，U.F.O先开始。对于U.F.O来说，（600，400）能是她们最大利益为50，轮到Wiskey决策，他会选择（600，800）收益45，U.F.O继续选择（800，800），而Wiskey再选择（800，600），此时Wiskey收益50，而U.F.O收益45。但对于U.F.O来说（800，600）这也是她们在Wiskey选择600的前提下自己的最优决策。这样U.F.O和Wiskey的竞争会稳定下来，最终的利益分配为（45，50）。当两者的利益已经最大化了，决策就会停止，这个点在博弈中就是Nash均衡点。<br>给你两人的收益表，请计算出Nash均衡点。<br>", input:"第一个数字T，表示测试数据数目。每个测试数据包含X和Y，表示U.F.O有X种决策，Wiskey有Y种决策，接下来是X×Y的矩阵，表示U.F.O的收益表，最后是Y×X的矩阵，表示Wiskey的收益表。<br>", output:"如果只有一个点请输出最终利益分配，其余答案则输出“Have XX Nash Points.”，一个答案一行。<br>", sample_in:"2\n3 3\n10 15 10\n50 40 15\n40 45 35\n\n45 15 10\n50 40 50\n40 45 35\n\n3 3\n10 15 10\n50 40 50\n40 45 35\n\n45 15 10\n50 40 50\n40 45 35", sample_out:"45 50\nHave 2 Nash Points.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:27, vtotal_submit:124, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（3）- Hold by Wiskey", author:"", tag:["TEST"]}
{pid:1823, vid:1823, oj:"hdu", title:"Luck and Love", desc:"世界上上最远的距离不是相隔天涯海角<br>而是我在你面前<br>可你却不知道我爱你<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;―― 张小娴<br><br>前段日子，枫冰叶子给Wiskey做了个征婚启事，聘礼达到500万哦，天哪，可是天文数字了啊，不知多少MM蜂拥而至，顿时万人空巷，连扫地的大妈都来凑热闹来了。―_―|||<br>由于人数太多，Wiskey实在忙不过来，就把统计的事情全交给了枫冰叶子，自己跑回家休息去了。这可够枫冰叶子忙的了，他要处理的有两类事情，一是得接受MM的报名，二是要帮Wiskey查找符合要求的MM中缘分最高值。<br>", input:"本题有多个测试数据，第一个数字M，表示接下来有连续的M个操作，当M＝0时处理中止。<br>接下来是一个操作符C。<br>当操作符为‘I’时，表示有一个MM报名，后面接着一个整数，H表示身高，两个浮点数，A表示活泼度，L表示缘分值。 （100&lt;=H&lt;=200， 0.0&lt;=A，L&lt;=100.0）<br>当操作符为‘Q’时，后面接着四个浮点数，H1，H2表示身高区间，A1，A2表示活泼度区间，输出符合身高和活泼度要求的MM中的缘分最高值。 （100&lt;=H1，H2&lt;=200， 0.0&lt;=A1，A2&lt;=100.0）<br>所有输入的浮点数，均只有一位小数。<br>", output:"对于每一次询问操作，在一行里面输出缘分最高值，保留一位小数。<br>对查找不到的询问，输出-1。<br>", sample_in:"8\nI 160 50.5 60.0\nI 165 30.0 80.5\nI 166 10.0 50.0\nI 170 80.5 77.5\nQ 150 166 10.0 60.0\nQ 166 177 10.0 50.0\nI 166 40.0 99.9\nQ 166 177 10.0 50.0\n0", sample_out:"80.5\n50.0\n99.9", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:524, vtotal_submit:4861, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（3）- Hold by Wiskey", author:"", tag:["TEST"]}
{pid:1824, vid:1824, oj:"hdu", title:"Let\'s go home", desc:"小时候，乡愁是一枚小小的邮票，我在这头，母亲在那头。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 余光中<br><br>集训是辛苦的，道路是坎坷的，休息还是必须的。经过一段时间的训练，lcy决定让大家回家放松一下，但是训练还是得照常进行，lcy想出了如下回家规定，每一个队（三人一队）或者队长留下或者其余两名队员同时留下；每一对队员，如果队员A留下，则队员B必须回家休息下，或者B留下，A回家。由于今年集训队人数突破往年同期最高记录，管理难度相当大，lcy也不知道自己的决定是否可行，所以这个难题就交给你了，呵呵，好处嘛~，免费**漂流一日。<br>", input:"第一行有两个整数，T和M，1&lt;=T&lt;=1000表示队伍数，1&lt;=M&lt;=5000表示对数。<br>接下来有T行，每行三个整数，表示一个队的队员编号，第一个队员就是该队队长。<br>然后有M行，每行两个整数，表示一对队员的编号。<br>每个队员只属于一个队。队员编号从0开始。<br>", output:"可行输出yes，否则输出no，以EOF为结束。<br>", sample_in:"1 2\n0 1 2\n0 1\n1 2\n\n2 4\n0 1 2\n3 4 5\n0 3\n0 4\n1 3\n1 4", sample_out:"yes\nno", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:260, vtotal_submit:1243, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（3）- Hold by Wiskey", author:"", tag:["TEST"]}
{pid:1825, vid:1825, oj:"hdu", title:"Work, work", desc:"锄禾日当午，汗滴禾下土。<br>谁念盘中餐，粒粒皆辛苦。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— 李绅<br><br>Wiskey终于回到学校了，听说实验室来了一位领导－阿柯，是lcy手下的一名得力干将，专门管教那些不爱干净的ACMer。最重要的是lcy亲授于她一把传说中的实验室钥匙，江湖上传言“武林至尊，实验室钥匙，号令天下，谁敢不从，扫帚不出，谁与争锋？”。看来Wiskey这次难逃一劫了。<br><br>今天，阿柯命令Wiskey打扫，不仅得实验室清理干净，还得把一教整幢楼都要打扫一遍！！假设一教是一个N*N*N立方体，每个空间是1*1*1的单位立方。Wiskey的体力是有限的，一开始的体力是0，每个单位立方有一个整数，正数表示需要花费的体力数，负数表示偷懒所得到的体力数，但是当花费的体力数&gt;=M时，说明Wiskey的体力到极限了，不能再继续扫下去了。Wiskey可以从任意一个单位立方开始。Wiskey扫地有个习惯，他所打扫的区域是一个由完整单位立方所组成的长方体空间。他不知道一教是否有那么一个区域他没有办法清理，那就请好心的你帮Wiskey算一算。<br>", input:"多个CASE，第一行输入两个正数N和M，（N&lt;=50）表示空间长度，M表示体力极限值。<br>接下来就有N个矩阵，每个矩阵表示立方体的一个层面。每个层面都是N*N的平面面积。<br>每个单位立方体力数T（-1000&lt; T &lt;1000）<br>", output:"如果有那么一个长方体区域是Wiskey不能打扫的，那输出what a pity.<br>其余的输出no problem.<br>一个答案一行。<br>", sample_in:"2 5\n1 -1\n0 3\n\n-1 -1\n3 -1\n\n2 6\n1 -1\n0 3\n\n-1 -1\n3 -1", sample_out:"what a pity.\nno problem.\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>If use C++ return TLE, you could try G++ instead</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:12, vtotal_submit:209, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（3）- Hold by Wiskey", author:"", tag:["TEST"]}
{pid:1826, vid:1826, oj:"hdu", title:"Happy Birthday", desc:"一声欢笑一段岁月<br>一天又添一年年纪<br>一场相逢一群朋友<br>一生永伴一窝萝卜<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— Wiskey祝<br><br>兔子生日罗，大家为她准备了个篝火晚会来庆祝，晚会上大家手拉着手围着篝火玩报数游戏，每个人都被编了个号，因为今天兔子是主角，所以她站在中间，左右都是比她编号大的人，其他人也按着这个规则牵手，即编号小的站中间，左右手各拉着一个比自己编号大的人（不是手牵着手），或者不拉着任何一个人，不形成环。报数游戏规则如下，一个人要等左手边的人报完，再报出自己的编号，接着就是右手边的人报，如果谁傻在那，不知道该谁报的就得出来表演节目。玩了一会后，兔子就感觉没意思了，她换了个规则，先报出自己的编号，再左边的人报数，然后右边。每次都是从兔子开始，兔子是这群人里编号最小的。<br>Wiskey向来对数字不敏感，虽然他运气很好的通过了第一种规则游戏的考验，但并不表示也能顺利通过第二种规则游戏。现在你的任务就是告诉Wiskey他在第二个序列中的位置。<br>", input:"第一行两个整数N和M (N&lt;50000)，表示人数，M表示Wiskey的编号。<br>接下有N个整数，表示编号，每个人的编号都不同 。", output:"输出Wiskey在第二种规则报数序列中的位置。<br>", sample_in:"6 5\n0 2 1 4 5 3\n\n6 5\n4 2 5 1 3 6", sample_out:"6\n4\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>The first sample\'s second sequence is 0,1,2,3,4,5\nPlease note the Memory Limitation</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:33, vtotal_submit:214, special_status:0, time_limit:1000, mem_limit:1024, hint:"", source:"HDOJ 2007 Summer Exercise（3）- Hold by Wiskey", author:"", tag:["TEST"]}
{pid:1827, vid:1827, oj:"hdu", title:"Summer Holiday", desc:"To see a World in a Grain of Sand <br>And a Heaven in a Wild Flower, <br>Hold Infinity in the palm of your hand <br>And Eternity in an hour. <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—— William Blake<br><br>听说lcy帮大家预定了新马泰7日游，Wiskey真是高兴的夜不能寐啊，他想着得快点把这消息告诉大家，虽然他手上有所有人的联系方式，但是一个一个联系过去实在太耗时间和电话费了。他知道其他人也有一些别人的联系方式，这样他可以通知其他人，再让其他人帮忙通知一下别人。你能帮Wiskey计算出至少要通知多少人，至少得花多少电话费就能让所有人都被通知到吗？<br>", input:"多组测试数组，以EOF结束。<br>第一行两个整数N和M（1&lt;=N&lt;=1000, 1&lt;=M&lt;=2000），表示人数和联系对数。<br>接下一行有N个整数，表示Wiskey联系第i个人的电话费用。<br>接着有M行，每行有两个整数X，Y，表示X能联系到Y，但是不表示Y也能联系X。<br>", output:"输出最小联系人数和最小花费。<br>每个CASE输出答案一行。<br>", sample_in:"12 16\n2 2 2 2 2 2 2 2 2 2 2 2 \n1 3\n3 2\n2 1\n3 4\n2 4\n3 5\n5 4\n4 6\n6 4\n7 4\n7 12\n7 8\n8 7\n8 9\n10 9\n11 10", sample_out:"3 6", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:370, vtotal_submit:1325, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDOJ 2007 Summer Exercise（3）- Hold by Wiskey", author:"", tag:["TEST"]}
{pid:1828, vid:1828, oj:"hdu", title:"Picture ", desc:"A number of rectangular posters, photographs and other pictures of the same shape are pasted on a wall. Their sides are all vertical or horizontal. Each rectangle can be partially or totally covered by the others. The length of the boundary of the union of all rectangles is called the perimeter. <br><br>Write a program to calculate the perimeter. An example with 7 rectangles is shown in Figure 1. <br><br><center><img src=data/images/1828-1.jpg></center><br><br>The corresponding boundary is the whole set of line segments drawn in Figure 2. <br><br><center><img src=data/images/1828-2.jpg></center><br><br>The vertices of all rectangles have integer coordinates. ", input:"Your program is to read from standard input. The first line contains the number of rectangles pasted on the wall. In each of the subsequent lines, one can find the integer coordinates of the lower left vertex and the upper right vertex of each rectangle. The values of those coordinates are given as ordered pairs consisting of an x-coordinate followed by a y-coordinate. <br><br>0 &lt;= number of rectangles &lt; 5000 <br>All coordinates are in the range [-10000,10000] and any existing rectangle has a positive area.<br><br>Please process to the end of file.", output:"Your program is to write to standard output. The output must contain a single line with a non-negative integer which corresponds to the perimeter for the input rectangles.", sample_in:"7\n-15 0 5 10\n-5 8 20 25\n15 -4 24 14\n0 -6 16 4\n2 15 10 22\n30 10 36 20\n34 0 40 16", sample_out:"228", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:647, vtotal_submit:2374, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"IOI 1998", author:"", tag:["TEST"]}
{pid:1829, vid:1829, oj:"hdu", title:"A Bug\'s Life ", desc:"<b>Background </b><br>Professor Hopper is researching the sexual behavior of a rare species of bugs. He assumes that they feature two different genders and that they only interact with bugs of the opposite gender. In his experiment, individual bugs and their interactions were easy to identify, because numbers were printed on their backs. <br><br><b>Problem </b><br>Given a list of bug interactions, decide whether the experiment supports his assumption of two genders with no homosexual bugs or if it contains some bug interactions that falsify it.<br>", input:"The first line of the input contains the number of scenarios. Each scenario starts with one line giving the number of bugs (at least one, and up to 2000) and the number of interactions (up to 1000000) separated by a single space. In the following lines, each interaction is given in the form of two distinct bug numbers separated by a single space. Bugs are numbered consecutively starting from one.", output:"The output for every scenario is a line containing &quot;Scenario #i:&quot;, where i is the number of the scenario starting at 1, followed by one line saying either &quot;No suspicious bugs found!&quot; if the experiment is consistent with his assumption about the bugs\' sexual behavior, or &quot;Suspicious bugs found!&quot; if Professor Hopper\'s assumption is definitely wrong.", sample_in:"2\n3 3\n1 2\n2 3\n1 3\n4 2\n1 2\n3 4", sample_out:"Scenario #1:\nSuspicious bugs found!\n\nScenario #2:\nNo suspicious bugs found!\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>Huge input,scanf is recommended.</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1160, vtotal_submit:7094, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"TUD Programming Contest 2005, Darmstadt, Germany", author:"", tag:["TEST"]}
No Such Problem Called HDU 1830.<br>
No Such Problem Called HDU 1831.<br>
No Such Problem Called HDU 1832.<br>
No Such Problem Called HDU 1833.<br>
No Such Problem Called HDU 1834.<br>
No Such Problem Called HDU 1835.<br>
{pid:1836, vid:1836, oj:"hdu", title:"Another Convex Polygon Problem", desc:"You are given a convex polygon with N vertices and M straight lines which divide the polygon into several regions. You must compute the number of regions into which the polygon is divided by the straight lines.<br>", input:"The first line of input contains the number T of test cases. The next lines describe the T test cases. The first line of each test case contains two integer numbers, separated by one blank:  the number N of vertices of the convex polygon (3 &lt;= N &lt;= 10) and the number M of straight lines (0 &lt;= M &lt;= 10). The next N lines contain 2 integer numbers X and Y, denoting the coordinates of some vertex of the polygon. The vertices are given in clockwise or anti-clockwise order.  Each of the next M lines contains 4 integer numbers: x<sub>1</sub> y<sub>1</sub> x<sub>2</sub> y<sub>2</sub>. (x<sub>1</sub>,y<sub>1</sub>) and (x<sub>1</sub>,y<sub>1</sub>) are two different points on the straight line. All the X and Y coordinates in the input file are in the range -20…20.", output:"For each test case print a line having the following format: “Number of regions=XXX.”, where XXX is replaced by the number of regions into which the polygon is divided.<br>", sample_in:"2\n3 0\n0 0\n1 1\n1 0\n3 3\n0 0\n1 1\n1 0\n1 2 3 4\n1 2 3 4\n1 2 3 4", sample_out:"Number of regions=1.\nNumber of regions=1.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:22, vtotal_submit:199, special_status:0, time_limit:1000, mem_limit:65535, hint:"", source:"Politehnica University of Bucharest Local Team Contest 2007", author:"", tag:["TEST"]}
{pid:1837, vid:1837, oj:"hdu", title:"Breweries", desc:"People drink a lot of beer in Romania. For each city i of the N cities of the country (numbered from 1 to N), the amount of beer B<sub>i</sub> demanded by its inhabitants is known. In order to satisfy the overall demand, a famous beer company wishes to build K breweries in K distinct cities of Romania. From these breweries, beer will be transported to other cities using the existing road network. Each road connects two distinct cities and has a certain length. Because of the recent floods, the road network of Romania has the shape of a tree: that is, there is exactly one path between any pair of cities. Let’s condier a city i and a brewery located in a city X, which is the closest brewery to i. The cost of transporting beer to the city i is dist(i,X)*B<sub>i</sub>, where dist(i,X) is the distance between city i and city X. The beer company wants to choose the locations of the K breweries in such a way that the maximum cost of transporting beer to any city in the country is minimized.", input:"The first line of input contains an integer number T, representing the number of test cases to follow. The first line of each test case contains 2 integer numbers: N (1&lt;=N&lt;=100.000) and K (1&lt;=K&lt;=N). The next N lines contain the beer demands of each city: the i<sup>th</sup> of these lines contains the value B<sub>i</sub> (1&lt;=B<sub>i</sub>&lt;=10.000). The next N-1 lines contain 3 integers each: A, B and L (1&lt;=L&lt;=10.000), meaning that there exists a road of length L between city A and city B.", output:"For each of the T test cases, in the order given in the input, print one line containing the minimum value for the maximum cost of transporting beer, in the case of an optimal placement of the breweries.<br>", sample_in:"1\n4 2\n3\n4\n2\n7\n1 2 10\n2 3 21\n2 4 57", sample_out:"42\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nExplanation for sample input and output:\nThe tree is presented in the figure below. The cities where the breweries were built are colored in yellow (the darker color). \nThe cost of beer transportation equal to 42 is achieved between city 3 and the brewery located in city 2.\n<center><img src=\'data/images/C92-1002-1.jpg\'></center>\n\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:6, vtotal_submit:137, special_status:0, time_limit:15000, mem_limit:65535, hint:"", source:"Politehnica University of Bucharest Local Team Contest 2007", author:"", tag:["TEST"]}
{pid:1838, vid:1838, oj:"hdu", title:"Chessboard", desc:"A chessboard is a NxN binary matrix with rows and columns numbered from 1 to N. Each position of the matrix is black (1) if the sum of the row number and the column number is even; otherwise it is white (0). The following pictures show how a chessboard looks like for N=1, 2 and 3. <br><center><img src=data/images/C92-1003-1.jpg></center><br>Given a NxN binary matrix, find the size of the largest chessboard completely located inside the matrix, as well as the number of chessboards having the largest size (these chessboards may overlap).<br>", input:"The first line of input contains an integer number T, representing the number of test cases to follow. Each test case contains on the first line an integer number N (1&lt;=N&lt;=2000), representing the number of rows and columns of the given matrix. The next N lines describe the matrix: each line contains N characters, which may be either ‘1’ (denoting a black square) or ‘0’ (denoting a white square); at the end of each line there will be a new line character. The matrix will contain at least one ‘1’ character.<br>", output:"For each of the T test cases, in the order given in the input, print one line containing the number of rows and colums of the largest chessboard, followed by a blank and then the number of chessboards having the largest size.<br>", sample_in:"1\n5\n00101\n11010\n00101\n01010\n11101", sample_out:"3 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:86, vtotal_submit:506, special_status:0, time_limit:2000, mem_limit:65535, hint:"", source:"Politehnica University of Bucharest Local Team Contest 2007", author:"", tag:["TEST"]}
{pid:1839, vid:1839, oj:"hdu", title:"Delay Constrained Maximum Capacity Path", desc:"Consider an undirected graph with N vertices, numbered from 1 to N, and M edges. The vertex numbered with 1 corresponds to a mine from where some precious minerals are extracted. The vertex numbered with N corresponds to a minerals processing factory. Each edge has an associated travel time (in time units) and capacity (in units of minerals). It has been decided that the minerals which are extracted from the mine will be delivered to the factory using a single path. This path should have the highest capacity possible, in order to be able to transport simultaneously as many units of minerals as possible. The capacity of a path is equal to the smallest capacity of any of its edges. However, the minerals are very sensitive and, once extracted from the mine, they will start decomposing after T time units, unless they reach the factory within this time interval. Therefore, the total travel time of the chosen path (the sum of the travel times of its edges) should be less or equal to T.<br>", input:"The first line of input contains an integer number X, representing the number of test cases to follow. The first line of each test case contains 3 integer numbers, separated by blanks: N (2 &lt;= N &lt;= 10.000), M (1 &lt;= M &lt;= 50.000) and T (1 &lt;= T &lt;= 500.000). Each of the next M lines will contain four integer numbers each, separated by blanks: A, B, C and D, meaning that there is an edge between vertices A and B, having capacity C (1 &lt;= C &lt;= 2.000.000.000) and the travel time D (1 &lt;= D &lt;= 50.000). A and B are different integers between 1 and N. There will exist at most one edge between any two vertices.<br>", output:"For each of the X test cases, in the order given in the input, print one line containing the highest capacity of a path from the mine to the factory, considering the travel time constraint. There will always exist at least one path between the mine and the factory obbeying the travel time constraint.<br>", sample_in:"2\n2 1 10\n1 2 13 10\n4 4 20\n1 2 1000 15\n2 4 999 6\n1 3 100 15\n3 4 99 4", sample_out:"13\n99", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:121, vtotal_submit:829, special_status:0, time_limit:10000, mem_limit:65535, hint:"", source:"Politehnica University of Bucharest Local Team Contest 2007", author:"", tag:["TEST"]}
{pid:1840, vid:1840, oj:"hdu", title:"Equations", desc:"All the problems in this contest totally bored you. And every time you get bored you like playing with quadratic equations of the form a*X<sup>2</sup> + b*X + c = 0. This time you are very curious to know how many real solutions an equation of this type has.<br>", input:"The first line of input contains an integer number Q, representing the number of equations to follow. Each of the next Q lines contains 3 integer numbers, separated by blanks, a, b and c, defining an equation. The numbers are from the interval [-1000,1000].<br>", output:"For each of the Q equations, in the order given in the input, print one line containing the number of real solutions of that equation. Print “INF” (without quotes) if the equation has an infinite number of real solutions.<br>", sample_in:"3\n1 0 0\n1 0 -1\n0 0 0", sample_out:"1\n2\nINF", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:323, vtotal_submit:861, special_status:0, time_limit:1000, mem_limit:65535, hint:"", source:"Politehnica University of Bucharest Local Team Contest 2007", author:"", tag:["TEST"]}
{pid:1841, vid:1841, oj:"hdu", title:"Find the Shortest Common Superstring", desc:"The shortest common superstring of 2 strings S<sub>1</sub> and S<sub>2</sub> is a string S with the minimum number of characters which contains both S<sub>1</sub> and S<sub>2</sub> as a sequence of consecutive characters. For instance, the shortest common superstring of “alba” and “bacau” is “albacau”.<br>Given two strings composed of lowercase English characters, find the length of their shortest common superstring. <br>", input:"The first line of input contains an integer number T, representing the number of test cases to follow. Each test case consists of 2 lines. The first of these lines contains the string S<sub>1</sub> and the second line contains the string S<sub>2</sub>. Both of these strings contain at least 1 and at most 1.000.000 characters.<br>", output:"For each of the T test cases, in the order given in the input, print one line containing the length of the shortest common superstring.<br>", sample_in:"2\nalba\nbacau\nresita\nmures", sample_out:"7\n8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:220, vtotal_submit:1311, special_status:0, time_limit:1000, mem_limit:65535, hint:"", source:"Politehnica University of Bucharest Local Team Contest 2007", author:"", tag:["TEST"]}
{pid:1842, vid:1842, oj:"hdu", title:"Gorilla.bas", desc:"Maybe you remember the old QBasic game gorilla.bas. But in case you don’t, the game was about two gorillas who were throwing explosive bananas at each other. Each gorilla was controlled by one of the two players. Each player could choose the angle and speed of the shot and the banana would follow a parabolic trajectory. As if finding the appropriate angle and speed in order to hit the opponent’s gorilla wasn’t difficult enough, there were also buildings which could block the banana’s trajectory.<br><center><img src=data/images/C92-1007-1.jpg></center><br>This time you are close to the end of a game where, coincidentally, both gorillas were located at the same height (equal to 0). So, to be more precise, your gorilla is a point located at coordinates (0,0) and the opponent’s gorilla is located at the coordinates (d,0). Between the two gorillas there are N buildings (vertical line segments), having different heights. You want to finish the game as soon as possible so you want this shot to be the last one. Therefore, the banana (which is also a point) should be thrown in such a way that it should hit the opponent’s gorilla, but not the buildings (although it may touch the top of any building). Furthermore, in order to prove your superior skills to your opponent, you want to choose the minimum speed v for throwing the banana (but you may choose any angle u between 0 and  π/2).<br>When solving this problem, you should make use of the value of the gravitational acceleration g (given as part of the input) and the following laws of motion:<br><center><img src=data/images/C92-1007-2.jpg></center><br>", input:"The first line of input contains an integer number T, representing the number of test cases to follow. The first line of each test case contains 3 numbers, separated by blanks: an integer d (1&lt;=d&lt;=1.000.000), a floatin point number g (1&lt;=g&lt;=10) and an integer N (0&lt;=N&lt;=50.000). The i<sup>th</sup> of the next N lines contains two integer numbers, separated by one blank: X<sub>i</sub> (1&lt;= X<sub>i</sub>&lt;d) and H<sub>i</sub> (1&lt;=H<sub>i</sub>&lt;=1.000.000). X<sub>i</sub> is the X coordinate of the i<sup>th</sup> building and Hi is its height. Furthermore, X<sub>i</sub>&lt;X<sub>i</sub>+1.<br>", output:"For each of the T test cases print one line containing the minimum value of the speed required to throw the banana. Print this value with 3 decimal digits, rounded (up or down) according to the 4<sup>th</sup> decimal digit.<br>", sample_in:"2\n1 9.8 0\n1000 1 1\n500 10000", sample_out:"3.130\n141.466", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:15, vtotal_submit:240, special_status:0, time_limit:2000, mem_limit:65535, hint:"", source:"Politehnica University of Bucharest Local Team Contest 2007", author:"", tag:["TEST"]}
{pid:1843, vid:1843, oj:"hdu", title:"Horizontal and Vertical Rays", desc:"There are H horizontal rays and V vertical rays. A horizontal ray is a straight line which originates at some point and extends infinitely far to the right (towards increasing X coordinates). A vertical ray is a straight line which originates at some point and extends infinitely far down (towards decreasing Y coordinates). A horizontal ray whose origin is (X<sub>h</sub>,Y<sub>h</sub>) touches a vertical ray whose origin is (X<sub>v</sub>,Y<sub>v</sub>) if X<sub>h</sub>&lt;=X<sub>v</sub> and Y<sub>h</sub>&lt;=Y<sub>v</sub>.<br>You must choose a subset S consisting of the minimum number of vertical rays such that each horizontal ray is touched by at least one vertical ray in S. It is guaranteed that it will always be possible to choose such a subset for the given test data.<br>", input:"The first line of input contains an integer number T, representing the number of test cases to follow. The first line of each test case contains 2 integer numbers: H (1&lt;=H&lt;=100.000) and V (1&lt;=V&lt;=100.000). The next H lines contain 2 integers each: X and Y, representing the (X,Y) coordinates of the origins of the horizontal rays. The next V lines contain 2 integers each: X and Y, representing the (X,Y) coordinates of the origins of the vertical rays. All the X and Y coordinates in the input are in the range 0 ... 50.000.000.<br>", output:"For each of the T test cases, in the order given in the input, print one line containing the minimum number of vertical rays chosen.<br>", sample_in:"1\n3 3\n1 6\n4 4\n6 2\n3 8\n5 7\n9 4", sample_out:"2\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nThe solution might consist of the second and third vertical rays. Another solution could be formed by the first and the third vertical rays.\n<center><img src=\'data/images/C92-1008-1.jpg\'></center>\n\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:50, vtotal_submit:237, special_status:0, time_limit:5000, mem_limit:65535, hint:"", source:"Politehnica University of Bucharest Local Team Contest 2007", author:"", tag:["TEST"]}
{pid:1844, vid:1844, oj:"hdu", title:"Intermediate Rounds for Multicasting", desc:"Consider a communication network consisting of N nodes numbered from 1 to N. The nodes are interconnected in such a way that the network has the shape of a rooted tree, with node 1 as the root. Node 1 wants to send a message (the same message) to each node which is a leaf in the tree (i.e. has no sons) – this operation is known as multicast. A message can only be sent from one node to one of its descendants (including the node itself). Each edge of the tree has an associated cost and the cost of sending a message from a node X to one of its descendants Y is the sum of the costs of the edges on the unique path from X to Y (if X=Y, then the cost is 0). The total cost of a multicast strategy is the sum of the costs of sending each message.<br>In order to reach its goal, node 1 will use the following multicast strategy: The strategy consists of K intermediate rounds. In the first round, node 1 sends an individual message to a subset of nodes S<sub>1</sub> such that each leaf is a descendant of exactly one node X in S<sub>1</sub> (this means that any node X in S<sub>1</sub> is not a descendant of another node Y in S<sub>1</sub>). In round i (2&lt;=i&lt;=K), each node X in S<sub>i</sub>-1 sends an individual message to a subset S<sub>i</sub>,X  of nodes from its subtree, such that each leaf which is a descendant of X is also a descendant of exactly one node in S<sub>i</sub>,X. The set of nodes S<sub>i</sub> is the union of the sets S<sub>i</sub>,X, for each X in S<sub>i</sub>-1. In the end, each node X in S<sub>k</sub> must send a message to each leaf node which is a descendant of X.<br>Given the communication network, the cost of each edge and the number of intermediate rounds K, find the minimum total cost of a multicast strategy.<br>", input:"The first line of input contains an integer number T, representing the number of test cases to follow. The first line of each test case contains 2 integer numbers: N (1&lt;=N&lt;=333) and K (1&lt;=K&lt;=10). The next N-1 lines contain 3 integers each: A, B and C (1&lt;=C&lt;=10.000), meaning that node B is a son of node A and the edge (A,B) has cost C.<br>", output:"For each of the T test cases, in the order given in the input, print one line containing the minimum total cost of a multicast strategy having the specified properties.<br>", sample_in:"1\n6 1\n1 2 10\n1 3 11\n2 4 21\n2 5 17\n3 6 7", sample_out:"66\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>In the first (and only) intermediate round, node 1 sends messages to node 6 (with cost 18) and to node 2 (with cost 10). \nSo the set S1 is {2,6}. In the end, node 6 will send a message to itself (with cost 0) and node 2 will send messages to node 4 (with cost 21)\n and to node 5 (with cost 17). The total cost is 18+10+21+17=66.\n<center><img src=\'data/images/C92-1009-1.jpg\'></center>\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8, vtotal_submit:32, special_status:0, time_limit:1000, mem_limit:65535, hint:"", source:"Politehnica University of Bucharest Local Team Contest 2007", author:"", tag:["TEST"]}
{pid:1845, vid:1845, oj:"hdu", title:"Jimmy’s Assignment", desc:"Jimmy is studying Advanced Graph Algorithms at his university. His most recent assignment is to find a maximum matching in a special kind of graph. This graph is undirected, has N vertices and each vertex has degree 3. Furthermore, the graph is 2-edge-connected (that is, at least 2 edges need to be removed in order to make the graph disconnected). A matching is a subset of the graph’s edges, such that no two edges in the subset have a common vertex. A maximum matching is a matching having the maximum cardinality.<br>&nbsp;&nbsp;Given a series of instances of the special graph mentioned above, find the cardinality of a maximum matching for each instance.<br>", input:"The first line of input contains an integer number T, representing the number of graph descriptions to follow. Each description contains on the first line an even integer number N (4&lt;=N&lt;=5000), representing the number of vertices. Each of the next 3*N/2 lines contains two integers A and B, separated by one blank, denoting that there is an edge between vertex A and vertex B. The vertices are numbered from 1 to N. No edge may appear twice in the input.<br>", output:"For each of the T graphs, in the order given in the input, print one line containing the cardinality of a maximum matching.<br>", sample_in:"2\n4\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n4\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4", sample_out:"2\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:188, vtotal_submit:646, special_status:0, time_limit:1000, mem_limit:65535, hint:"", source:"Politehnica University of Bucharest Local Team Contest 2007", author:"", tag:["TEST"]}
{pid:1846, vid:1846, oj:"hdu", title:"Brave Game", desc:"十年前读大学的时候，中国每年都要从国外引进一些电影大片，其中有一部电影就叫《勇敢者的游戏》（英文名称：Zathura），一直到现在，我依然对于电影中的部分电脑特技印象深刻。<br>今天，大家选择上机考试，就是一种勇敢（brave）的选择；这个短学期，我们讲的是博弈（game）专题；所以，大家现在玩的也是“勇敢者的游戏”，这也是我命名这个题目的原因。<br>当然，除了“勇敢”，我还希望看到“诚信”，无论考试成绩如何，希望看到的都是一个真实的结果，我也相信大家一定能做到的~<br><br>各位勇敢者要玩的第一个游戏是什么呢？很简单，它是这样定义的：<br>1、&nbsp;&nbsp;本游戏是一个二人游戏;<br>2、&nbsp;&nbsp;有一堆石子一共有n个；<br>3、&nbsp;&nbsp;两人轮流进行;<br>4、&nbsp;&nbsp;每走一步可以取走1…m个石子；<br>5、&nbsp;&nbsp;最先取光石子的一方为胜；<br><br>如果游戏的双方使用的都是最优策略，请输出哪个人能赢。<br>", input:"输入数据首先包含一个正整数C(C&lt;=100)，表示有C组测试数据。<br>每组测试数据占一行，包含两个整数n和m（1&lt;=n,m&lt;=1000），n和m的含义见题目描述。<br>", output:"如果先走的人能赢，请输出“first”，否则请输出“second”，每个实例的输出占一行。", sample_in:"2\n23 2\n4 3", sample_out:"first\nsecond", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2470, vtotal_submit:5354, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM Short Term Exam_2007/12/13", author:"", tag:["TEST"]}
{pid:1847, vid:1847, oj:"hdu", title:"Good Luck in CET-4 Everybody!", desc:"大学英语四级考试就要来临了，你是不是在紧张的复习？也许紧张得连短学期的ACM都没工夫练习了，反正我知道的Kiki和Cici都是如此。当然，作为在考场浸润了十几载的当代大学生，Kiki和Cici更懂得考前的放松，所谓“张弛有道”就是这个意思。这不，Kiki和Cici在每天晚上休息之前都要玩一会儿扑克牌以放松神经。<br>“升级”？“双扣”？“红五”？还是“斗地主”？<br>当然都不是！那多俗啊~<br>作为计算机学院的学生，Kiki和Cici打牌的时候可没忘记专业，她们打牌的规则是这样的：<br>1、&nbsp;&nbsp;总共n张牌;<br>2、&nbsp;&nbsp;双方轮流抓牌；<br>3、&nbsp;&nbsp;每人每次抓牌的个数只能是2的幂次（即：1，2，4，8，16…）<br>4、&nbsp;&nbsp;抓完牌，胜负结果也出来了：最后抓完牌的人为胜者；<br>假设Kiki和Cici都是足够聪明（其实不用假设，哪有不聪明的学生~），并且每次都是Kiki先抓牌，请问谁能赢呢？<br>当然，打牌无论谁赢都问题不大，重要的是马上到来的CET-4能有好的状态。<br><br>Good luck in CET-4 everybody!<br>", input:"输入数据包含多个测试用例，每个测试用例占一行，包含一个整数n（1&lt;=n&lt;=1000）。", output:"如果Kiki能赢的话，请输出“Kiki”，否则请输出“Cici”，每个实例的输出占一行。<br>", sample_in:"1\n3", sample_out:"Kiki\nCici", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1838, vtotal_submit:4305, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM Short Term Exam_2007/12/13", author:"", tag:["TEST"]}
{pid:1848, vid:1848, oj:"hdu", title:"Fibonacci again and again", desc:"任何一个大学生对菲波那契数列(Fibonacci numbers)应该都不会陌生，它是这样定义的：<br>F(1)=1;<br>F(2)=2;<br>F(n)=F(n-1)+F(n-2)(n&gt;=3);<br>所以，1,2,3,5,8,13……就是菲波那契数列。<br>在HDOJ上有不少相关的题目，比如1005 Fibonacci again就是曾经的浙江省赛题。<br>今天，又一个关于Fibonacci的题目出现了，它是一个小游戏，定义如下：<br>1、&nbsp;&nbsp;这是一个二人游戏;<br>2、&nbsp;&nbsp;一共有3堆石子，数量分别是m, n, p个；<br>3、&nbsp;&nbsp;两人轮流走;<br>4、&nbsp;&nbsp;每走一步可以选择任意一堆石子，然后取走f个；<br>5、&nbsp;&nbsp;f只能是菲波那契数列中的元素（即每次只能取1，2，3，5，8…等数量）；<br>6、&nbsp;&nbsp;最先取光所有石子的人为胜者；<br><br>假设双方都使用最优策略，请判断先手的人会赢还是后手的人会赢。<br>", input:"输入数据包含多个测试用例，每个测试用例占一行，包含3个整数m,n,p（1&lt;=m,n,p&lt;=1000）。<br>m=n=p=0则表示输入结束。<br>", output:"如果先手的人能赢，请输出“Fibo”，否则请输出“Nacci”，每个实例的输出占一行。<br>", sample_in:"1 1 1\n1 4 1\n0 0 0", sample_out:"Fibo\nNacci", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:996, vtotal_submit:3935, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM Short Term Exam_2007/12/13", author:"", tag:["TEST"]}
{pid:1849, vid:1849, oj:"hdu", title:"Rabbit and Grass", desc:"大学时光是浪漫的，女生是浪漫的，圣诞更是浪漫的，但是Rabbit和Grass这两个大学女生在今年的圣诞节却表现得一点都不浪漫：不去逛商场，不去逛公园，不去和AC男约会，两个人竟然猫在寝食下棋……<br>说是下棋，其实只是一个简单的小游戏而已，游戏的规则是这样的：<br>1、&nbsp;&nbsp;棋盘包含1*n个方格，方格从左到右分别编号为0，1，2，…，n-1；<br>2、&nbsp;&nbsp;m个棋子放在棋盘的方格上，方格可以为空，也可以放多于一个的棋子；<br>3、&nbsp;&nbsp;双方轮流走棋；<br>4、&nbsp;&nbsp;每一步可以选择任意一个棋子向左移动到任意的位置（可以多个棋子位于同一个方格），当然，任何棋子不能超出棋盘边界；<br>5、&nbsp;&nbsp;如果所有的棋子都位于最左边（即编号为0的位置），则游戏结束，并且规定最后走棋的一方为胜者。<br><br>对于本题，你不需要考虑n的大小（我们可以假设在初始状态，棋子总是位于棋盘的适当位置）。下面的示意图即为一个1*15的棋盘，共有6个棋子，其中，编号8的位置有两个棋子。<br><br><center><img src=data/images/C101-1004-1.JPG></center><br><br>大家知道，虽然偶尔不够浪漫，但是Rabbit和Grass都是冰雪聪明的女生，如果每次都是Rabbit先走棋，请输出最后的结果。", input:"输入数据包含多组测试用例，每个测试用例占二行，首先一行包含一个整数m（0&lt;=m&lt;=1000），表示本测试用例的棋子数目，紧跟着的一行包含m个整数Ki(i=1…m; 0&lt;=Ki&lt;=1000)，分别表示m个棋子初始的位置，m=0则结束输入。<br>", output:"如果Rabbit能赢的话，请输出“Rabbit Win!”，否则请输出“Grass Win!”，每个实例的输出占一行。<br>", sample_in:"2 \n3 5\n3\n3 5 6\n0", sample_out:"Rabbit Win!\nGrass Win!", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:970, vtotal_submit:1770, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM Short Term Exam_2007/12/13", author:"", tag:["TEST"]}
{pid:1850, vid:1850, oj:"hdu", title:"Being a Good Boy in Spring Festival", desc:"一年在外 父母时刻牵挂<br>春节回家 你能做几天好孩子吗<br>寒假里尝试做做下面的事情吧<br><br>陪妈妈逛一次菜场<br>悄悄给爸爸买个小礼物<br>主动地 强烈地 要求洗一次碗<br>某一天早起 给爸妈用心地做回早餐<br><br>如果愿意 你还可以和爸妈说<br>咱们玩个小游戏吧 ACM课上学的呢～<br><br>下面是一个二人小游戏：桌子上有M堆扑克牌；每堆牌的数量分别为Ni(i=1…M)；两人轮流进行；每走一步可以任意选择一堆并取走其中的任意张牌；桌子上的扑克全部取光，则游戏结束；最后一次取牌的人为胜者。<br>现在我们不想研究到底先手为胜还是为负，我只想问大家：<br>——“先手的人如果想赢，第一步有几种选择呢？”<br>", input:"输入数据包含多个测试用例，每个测试用例占2行，首先一行包含一个整数M(1&lt;M&lt;=100)，表示扑克牌的堆数，紧接着一行包含M个整数Ni(1&lt;=Ni&lt;=1000000，i=1…M)，分别表示M堆扑克的数量。M为0则表示输入数据的结束。<br>", output:"如果先手的人能赢，请输出他第一步可行的方案数，否则请输出0，每个实例的输出占一行。<br>", sample_in:"3\n5 7 9\n0", sample_out:"1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1526, vtotal_submit:3662, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM Short Term Exam_2007/12/13", author:"", tag:["TEST"]}
{pid:1851, vid:1851, oj:"hdu", title:"A Simple Game", desc:"Agrael likes play a simple game with his friend Animal during the classes. In this Game there are n piles of stones numbered from 1 to n, the 1st pile has M<sub>1</sub> stones, the 2nd pile has M<sub>2</sub> stones, ... and the n-th pile contain M<sub>n</sub> stones. Agrael and Animal take turns to move and in each move each of the players can take at most L<sub>1</sub> stones from the 1st pile or take at most L<sub>2</sub> stones from the 2nd pile or ... or take L<sub>n</sub> stones from the n-th pile. The player who takes the last stone wins.<br><br>After Agrael and Animal have played the game for months, the teacher finally got angry and decided to punish them. But when he knows the rule of the game, he is so interested in this game that he asks Agrael to play the game with him and if Agrael wins, he won\'t be punished, can Agrael win the game if the teacher and Agrael both take the best move in their turn?<br><br>The teacher always moves first(-_-), and in each turn a player must takes at least 1 stones and they can\'t take stones from more than one piles.<br>", input:"The first line contains the number of test cases. Each test cases begin with the number n (n ≤ 10), represent there are n piles. Then there are n lines follows, the i-th line contains two numbers M<sub>i</sub> and L<sub>i</sub> (20 ≥ M<sub>i</sub> &gt; 0, 20 ≥ L<sub>i</sub> &gt; 0). <br>", output:"Your program output one line per case, if Agrael can win the game print &quot;Yes&quot;, else print &quot;No&quot;. <br>", sample_in:"2\n1\n5 4\n2\n1 1\n2 2", sample_out:"Yes\nNo", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:499, vtotal_submit:948, special_status:0, time_limit:1000, mem_limit:65535, hint:"", source:"HDU 2007 Programming Contest - Final", author:"", tag:["TEST"]}
{pid:1852, vid:1852, oj:"hdu", title:"Beijing 2008", desc:"As we all know, the next Olympic Games will be held in Beijing in 2008. So the year 2008 seems a little special somehow. You are looking forward to it, too, aren\'t you? Unfortunately there still are months to go. Take it easy. Luckily you meet me. I have a problem for you to solve. Enjoy your time.<br><br>Now given a positive integer N, get the sum S of all positive integer divisors of 2008<sup>N</sup>. Oh no, the result may be much larger than you can think. But it is OK to determine the rest of the division of S by K. The result is kept as M.<br><br>Pay attention! M is not the answer we want. If you can get 2008<sup>M</sup>, that will be wonderful. If it is larger than K, leave it modulo K to the output. See the example for N = 1，K = 10000: The positive integer divisors of 20081 are 1、2、4、8、251、502、1004、2008，S = 3780, M = 3780, 2008<sup>M</sup> % K = 5776. <br><br>", input:"The input consists of several test cases. Each test case contains a line with two integers N and K (1 ≤ N ≤ 10000000, 500 ≤ K ≤ 10000). N = K = 0 ends the input file and should not be processed.<br>", output:"For each test case, in a separate line, please output the result.<br>", sample_in:"1  10000\n0  0", sample_out:"5776", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:108, vtotal_submit:465, special_status:0, time_limit:1000, mem_limit:65535, hint:"", source:"HDU 2007 Programming Contest - Final", author:"", tag:["TEST"]}
{pid:1853, vid:1853, oj:"hdu", title:"Cyclic Tour", desc:"There are N cities in our country, and M one-way roads connecting them. Now Little Tom wants to make several cyclic tours, which satisfy that, each cycle contain at least two cities, and each city belongs to one cycle exactly. Tom wants the total length of all the tours minimum, but he is too lazy to calculate. Can you help him?<br>", input:"There are several test cases in the input. You should process to the end of file (EOF).<br>The first line of each test case contains two integers N (N ≤ 100) and M, indicating the number of cities and the number of roads. The M lines followed, each of them contains three numbers A, B, and C, indicating that there is a road from city A to city B, whose length is C. (1 ≤ A,B ≤ N, A ≠ B, 1 ≤ C ≤ 1000).<br>", output:"Output one number for each test case, indicating the minimum length of all the tours. If there are no such tours, output -1. <br>", sample_in:"6 9\n1 2 5\n2 3 5\n3 1 10\n3 4 12\n4 1 8\n4 6 11\n5 4 7\n5 6 9\n6 5 4\n6 5\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n5 6 1", sample_out:"42\n-1\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div> In the first sample, there are two cycles, (1->2->3->1) and (6->5->4->6) whose length is 20 + 22 = 42. </div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:364, vtotal_submit:1273, special_status:0, time_limit:1000, mem_limit:65535, hint:"", source:"HDU 2007 Programming Contest - Final", author:"", tag:["TEST"]}
{pid:1854, vid:1854, oj:"hdu", title:"Q-Sequence", desc:"A Q-sequence is defined as:<br><br>Q-Seq := 0 or<br>Q-Seq := Q-seq Q-seq 1<br><br>That is to say a Q-Sequence is a single \'0\' or two Q-Sequences followed by an \'1\'.<br><br>Given a sequence of \'0\'s and \'1\'s, you are to determine whether it is a Q-Sequence.<br>", input:"The first line is a number n refers to the number of test cases. Then n lines follows, each line has a string made up of \'1\'s and \'0\'s. The maximum length of the sequence is 1000.<br>", output:"The output contain n lines, print &quot;Yes&quot; if it is a Q-sequence, otherwise print &quot;No&quot;.<br>", sample_in:"3\n0010011\n0101\n00011", sample_out:"Yes\nNo\nYes", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:210, vtotal_submit:500, special_status:0, time_limit:1000, mem_limit:65535, hint:"", source:"HDU 2007 Programming Contest - Final", author:"", tag:["TEST"]}
{pid:1855, vid:1855, oj:"hdu", title:"Expressions", desc:"Have you taken the course named Data Structure? Did you pass it? If you do, you should know that a mathematical expression can be expressed as a tree and why. In this problem, you are given some expressions, and you are supposed to draw the tree.<br><br>The expressions are composed of these letters:<br>(1) \'a\', \'b\', ..., \'z\' : means an operand;<br>(2) \'+\', \'-\', \'*\', \'/\' : dyadic operator, means plus sign, subtraction sign, multiplication sign and division sign;<br>(3) \'-\' : monadic operator, means negative sign;<br>(4) \'(\', \')\' : used in pairs to alter priority.<br>", input:"Input consists of multiple expressions each on a line (not exceed 50 letters). You should proceed to the end of file.<br>", output:"For each expression, You should draw a tree that can express it, following the styles indicated in the sample output. <br><br><b>Note that the \'#\' in the sample are supposed to tell you that there are spaces at the back of some lines, and you should ignore it in your output.</b><br><br><br>", sample_in:"a+b+c\n(a-a)*b+(-c)", sample_out:"   + #\n +  c#\na b  #\n     +  #\n   *  - #\n -  b  c#\na a     #", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:10, vtotal_submit:56, special_status:0, time_limit:1000, mem_limit:65535, hint:"", source:"HDU 2007 Programming Contest - Final", author:"", tag:["TEST"]}
{pid:1856, vid:1856, oj:"hdu", title:"More is better", desc:"Mr Wang wants some boys to help him with a project. Because the project is rather complex, <b>the more boys come, the better it will be</b>. Of course there are certain requirements.<br><br>Mr Wang selected a room big enough to hold the boys. The boy who are not been chosen has to leave the room immediately. There are 10000000 boys in the room numbered from 1 to 10000000 at the very beginning. After Mr Wang\'s selection any two of them who are still in this room should be friends (direct or indirect), or there is only one boy left. Given all the direct friend-pairs, you should decide the best way.<br>", input:"The first line of the input contains an integer n (0 ≤ n ≤ 100 000) - the number of direct friend-pairs. The following n lines each contains a pair of numbers A and B separated by a single space that suggests A and B are direct friends. (A ≠ B, 1 ≤ A, B ≤ 10000000) ", output:"The output in one line contains exactly one integer equals to the maximum number of boys Mr Wang may keep. <br>", sample_in:"4\n1 2\n3 4\n5 6\n1 6\n4\n1 2\n3 4\n5 6\n7 8", sample_out:"4\n2\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\nA and B are friends(direct or indirect), B and C are friends(direct or indirect), \nthen A and C are also friends(indirect).\n\n In the first sample {1,2,5,6} is the result.\nIn the second sample {1,2},{3,4},{5,6},{7,8} are four kinds of answers.\n </div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2016, vtotal_submit:11779, special_status:0, time_limit:1000, mem_limit:102400, hint:"", source:"HDU 2007 Programming Contest - Final", author:"", tag:["TEST"]}
{pid:1857, vid:1857, oj:"hdu", title:"Word Puzzle", desc:"Did you heard of a little game named &quot;Word Puzzle&quot; ? If you didn\'t, what a pity !<br>In the game, you will be given a rectangular grid of letters, in which several words are hidden. Each word may begin anywhere in the puzzle, and may be oriented in any straight line horizontally, vertically, or diagonally. However, the words must all go down, right, or down-right. A dictionary is also given to you, indicating the words to be found in the grid.<br><br>You task is to find the locations of each word within the grid.<br><br>", input:"<b>There is only one test case.</b><br><br>The first line is two integers R and C separated by a whitespace. R (20 ≤ R ≤ 500) is the number of rows of the grid. C (20 ≤ C ≤ 500) is the number of columns of the grid. <br><br>The following R lines, each line will contains exactly C characters without anything else. Each character is in the range \'A\' - \'Z\'. <br><br>A blank line will be followed after the grid.<br><br>The following lines, each line contains a unique word in the dictionary. Each word will contain between 1 and 20 characters ( also in the range \'A\' - \'Z\'). The dictionary consists of at most 10000 words.<br><br>-1 means the end of dictionary.<br><br>", output:"For each word, output the &quot;ROW COL&quot;(quotes for clarity) pair, where ROW is the 0-based row in which the first letter of the word is found, and COL is the 0-based column in which the first letter of the word is found. If the same word can be found more than once, the location in the lowest-indexed row should be returned. If there is still a tie, return the location with the lowest-indexed column. If a word cannot be found in the grid, return &quot;-1 -1&quot; for the word.<br>", sample_in:"3 5\nHENRY\nGAVIN\nMAGIC\n\nHENRY\nHGM\nHAG\nMAVIN\n-1", sample_out:"0 0\n0 0\n0 0\n-1 -1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:51, vtotal_submit:470, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2007 Programming Contest - Final", author:"", tag:["TEST"]}
{pid:1858, vid:1858, oj:"hdu", title:"Max Partial Value I", desc:"HenryFour has a number of stones which have different values from -4444 to 4444. He puts N stones in a line and wants to find the max partial value of these N stones.<br><br>Assume the values of the N stones in line are: v1, v2, v3, v4, ..., vN. The partial vaule of stones from Lth stone to Rth stone (1 ≤ L ≤ R ≤ N) is the sum of all the stones between them. i.e. PartialV(L, R) = v[L] + v[L+1] + .... + v[R] (1 ≤ L ≤ R ≤ N) <br><br>Since the number of stones (N) is very very large, it is quite difficult for HenryFour to find the max partial value. So could you develop a programme to find out the answer for him? <br>", input:"There are several test cases in the input data. The first line contains a positive integer T (1 ≤ T ≤ 14), specifying the number ot test cases. Then there are T lines. Each of these T lines contains a positive number N followed by N integers which indicate the values of the N stones in line.<br>1 ≤ N ≤ 1,000,000<br>-4444 ≤ v[i] ≤ 4444 <br>", output:"Your program is to write to standard output. For each test case, print one line with three numbers seperated by one blank: P L R. P is the max partial value of the N stones in line. L and R indicate the position of the partial stones. If there are several Ls and Rs that have the same value PartialV(Li, Ri) = P, please output the minimum pair. For pair (Li, Ri) and (Lj, Rj), we define (Li, Ri) &lt; (Lj, Rj) if and only if: Li &lt; Lj or (Li == Lj and Ri &lt; Rj) <br>", sample_in:"3\n4 32 -39 -30 -28\n8 1 2 3 -10 1 -1 5 1\n10 14 -12 -8 -13 3 5 42 -24 -32 -12", sample_out:"32 1 1\n6 1 3\n50 5 7\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div> Huge input and output,scanf and printf are recommended.</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:206, vtotal_submit:700, special_status:0, time_limit:5000, mem_limit:65535, hint:"", source:"HDU 2007 Programming Contest - Final", author:"", tag:["TEST"]}
{pid:1859, vid:1859, oj:"hdu", title:"最小长方形", desc:"给定一系列2维平面点的坐标(x, y)，其中x和y均为整数，要求用一个最小的长方形框将所有点框在内。长方形框的边分别平行于x和y坐标轴，点落在边上也算是被框在内。", input:"测试输入包含若干测试用例，每个测试用例由一系列坐标组成，每对坐标占一行，其中|x|和|y|小于 231；一对0 坐标标志着一个测试用例的结束。注意(0, 0)不作为任何一个测试用例里面的点。一个没有点的测试用例标志着整个输入的结束。 <br>", output:"对每个测试用例，在1行内输出2对整数，其间用一个空格隔开。第1对整数是长方形框左下角的坐标，第2对整数是长方形框右上角的坐标。<br>", sample_in:"12 56\n23 56\n13 10\n0 0\n12 34\n0 0\n0 0", sample_out:"12 10 23 56\n12 34 12 34", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2948, vtotal_submit:6877, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2007年", author:"", tag:["TEST"]}
{pid:1860, vid:1860, oj:"hdu", title:"统计字符", desc:"统计一个给定字符串中指定的字符出现的次数<br>", input:"测试输入包含若干测试用例，每个测试用例包含2行，第1行为一个长度不超过5的字符串，第2行为一个长度不超过80的字符串。注意这里的字符串包含空格，即空格也可能是要求被统计的字符之一。当读到\'#\'时输入结束，相应的结果不要输出。", output:"对每个测试用例，统计第1行中字符串的每个字符在第2行字符串中出现的次数，按如下格式输出：<br>c0 n0<br>c1 n1<br>c2 n2<br>... <br>其中ci是第1行中第i个字符，ni是ci出现的次数。<br>", sample_in:"I\nTHIS IS A TEST\ni ng\nthis is a long test string\n#", sample_out:"I 2\ni 3\n  5\nn 2\ng 2 \n注：第2个测试用例中，空格也是被统计的字符之一。 ", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3649, vtotal_submit:6981, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2007年", author:"", tag:["TEST"]}
{pid:1861, vid:1861, oj:"hdu", title:"游船出租", desc:"现有公园游船租赁处请你编写一个租船管理系统。当游客租船时，管理员输入船号并按下S键，系统开始计时；当游客还船时，管理员输入船号并按下E键，系统结束计时。船号为不超过100的正整数。当管理员将0作为船号输入时，表示一天租船工作结束，系统应输出当天的游客租船次数和<br>平均租船时间。<br>注意：由于线路偶尔会有故障，可能出现不完整的纪录，即只有租船没有还船，或者只有还船没有租船的纪录，系统应能自动忽略这种无效纪录。<br>", input:"测试输入包含若干测试用例，每个测试用例为一整天的租船纪录，格式为<br>船号（1~100） 键值（S或E） 发生时间（小时:分钟）<br>每一天的纪录保证按时间递增的顺序给出。当读到船号为-1时，全部输入结束，相应的结果不要输出。<br>", output:"对每个测试用例输出1行，即当天的游客租船次数和平均租船时间（以分钟为单位的精确到个位的整数时间）。", sample_in:"1 S 08:10\n2 S 08:35\n1 E 10:00\n2 E 13:16\n0 S 17:00\n0 S 17:00\n3 E 08:10\n1 S 08:20\n2 S 09:00\n1 E 09:20\n0 E 17:00\n-1", sample_out:"2 196\n0 0\n1 60", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1635, vtotal_submit:7213, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2007年", author:"", tag:["TEST"]}
{pid:1862, vid:1862, oj:"hdu", title:"EXCEL排序", desc:"Excel可以对一组纪录按任意指定列排序。现请你编写程序实现类似功能。", input:"测试输入包含若干测试用例。每个测试用例的第1行包含两个整数 N (&lt;=100000) 和 C，其中 N 是纪录的条数，C 是指定排序的列号。以下有 N <br>行，每行包含一条学生纪录。每条学生纪录由学号（6位数字，同组测试中没有重复的学号）、姓名（不超过8位且不包含空格的字符串）、成绩（闭区间[0, 100]内的整数）组成，每个项目间用1个空格隔开。当读到 N=0 时，全部输入结束，相应的结果不要输出。<br>", output:"对每个测试用例，首先输出1行“Case i:”，其中 i 是测试用例的编号（从1开始）。随后在 N 行中输出按要求排序后的结果，即：当 C=1 时，按学号递增排序；当 C=2时，按姓名的非递减字典序排序；当 C=3 <br>时，按成绩的非递减排序。当若干学生具有相同姓名或者相同成绩时，则按他们的学号递增排序。<br>", sample_in:"3 1\n000007 James 85\n000010 Amy 90\n000001 Zoe 60\n4 2\n000007 James 85\n000010 Amy 90\n000001 Zoe 60\n000002 James 98\n4 3\n000007 James 85\n000010 Amy 90\n000001 Zoe 60\n000002 James 90\n0 0", sample_out:"Case 1:\n000001 Zoe 60\n000007 James 85\n000010 Amy 90\nCase 2:\n000010 Amy 90\n000002 James 98\n000007 James 85\n000001 Zoe 60\nCase 3:\n000001 Zoe 60\n000007 James 85\n000002 James 90\n000010 Amy 90", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2144, vtotal_submit:12466, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2007年", author:"", tag:["TEST"]}
{pid:1863, vid:1863, oj:"hdu", title:"畅通工程", desc:"省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可）。经过调查评估，得到的统计表中列出了有可能建设公路的若干条道路的成本。现请你编写程序，计算出全省畅通需要的最低成本。<br>", input:"测试输入包含若干测试用例。每个测试用例的第1行给出评估的道路条数 N、村庄数目M ( &lt; 100 )；随后的 N <br>行对应村庄间道路的成本，每行给出一对正整数，分别是两个村庄的编号，以及此两村庄间道路的成本（也是正整数）。为简单起见，村庄从1到M编号。当N为0时，全部输入结束，相应的结果不要输出。<br>", output:"对每个测试用例，在1行里输出全省畅通需要的最低成本。若统计数据不足以保证畅通，则输出“?”。<br>", sample_in:"3 3\n1 2 1\n1 3 2\n2 3 4\n1 3\n2 3 2\n0 100", sample_out:"3\n?", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3278, vtotal_submit:13980, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2007年", author:"", tag:["TEST"]}
{pid:1864, vid:1864, oj:"hdu", title:"最大报销额", desc:"现有一笔经费可以报销一定额度的发票。允许报销的发票类型包括买图书（A类）、文具（B类）、差旅（C类），要求每张发票的总额不得超过1000元，每张发票上，单项物品的价值不得超过600元。现请你编写程序，在给出的一堆发票中找出可以报销的、不超过给定额度的最大报销额。<br>", input:"测试输入包含若干测试用例。每个测试用例的第1行包含两个正数 Q 和 N，其中 Q 是给定的报销额度，N（&lt;=30）是发票张数。随后是 N 行输入，每行的格式为：<br>m Type_1:price_1 Type_2:price_2 ... Type_m:price_m<br>其中正整数 m 是这张发票上所开物品的件数，Type_i 和 price_i 是第 i 项物品的种类和价值。物品种类用一个大写英文字母表示。当N为0时，全部输入结束，相应的结果不要输出。<br>", output:"对每个测试用例输出1行，即可以报销的最大数额，精确到小数点后2位。<br>", sample_in:"200.00 3\n2 A:23.50 B:100.00\n1 C:650.00\n3 A:59.99 A:120.00 X:10.00\n1200.00 2\n2 B:600.00 A:400.00\n1 C:200.50\n1200.50 3\n2 B:600.00 A:400.00\n1 C:200.50\n1 A:100.00\n100.00 0", sample_out:"123.50\n1000.00\n1200.50", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2099, vtotal_submit:14552, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2007年", author:"", tag:["TEST"]}
{pid:1865, vid:1865, oj:"hdu", title:"1sting", desc:"You will be given a string which only contains ‘1’; You can merge two adjacent ‘1’ to be ‘2’, or leave the ‘1’ there. Surly, you may get many different results. For example, given 1111 , you can get 1111, 121, 112,211,22. Now, your work is to find the total number of result you can get.<br>", input:"The first line is a number n refers to the number of test cases. Then n lines follows, each line has a string made up of  ‘1’ . The maximum length of the sequence is 200.<br>", output:"The output contain n lines, each line output the number of result you can get .<br>", sample_in:"3\n1\n11\n11111", sample_out:"1\n2\n8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:843, vtotal_submit:2807, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008杭电集训队选拔赛——热身赛", author:"", tag:["TEST"]}
{pid:1866, vid:1866, oj:"hdu", title:"A + B forever!", desc:"As always, A + B is the necessary problem of this warming-up contest. But the patterns and contents are different from the previous ones. Now I come up with a new “A + B” problem for you, the top coders of HDU.<br>As we say, the addition defined between two rectangles is the sum of their area . And you just have to tell me the ultimate area if there are a few rectangles.<br>Isn’t it a piece of cake for you? Come on! Capture the bright “accepted” for yourself.<br>", input:"There come a lot of cases. In each case, there is only a string in one line. There are four integers, such as “(x1,y1,x2,y2)”, describing the coordinates of the rectangle, with two brackets distinguishing other rectangle(s) from the string. There lies a plus symbol between every two rectangles. Blanks separating the integers and the interpunctions are added into the strings arbitrarily. The length of the string doesn’t exceed 500.<br>0&lt;=x1,x2&lt;=1000,0&lt;=y1,y2&lt;=1000.<br>", output:"For each case, you just need to print the area for this “A+B” problem. The results will not exceed the limit of the 32-signed integer.", sample_in:"(1,1,2,2)+(3,3,4,4)\n(1,1,3,3)+(2,2,4,4)+(5,5,6,6)", sample_out:"2\n8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:154, vtotal_submit:1055, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008杭电集训队选拔赛——热身赛", author:"", tag:["TEST"]}
{pid:1867, vid:1867, oj:"hdu", title:"A + B for you again", desc:"Generally speaking, there are a lot of problems about strings processing. Now you encounter another such problem. If you get two strings, such as “asdf” and “sdfg”, the result of the addition between them is “asdfg”, for “sdf” is the tail substring of “asdf” and the head substring of the “sdfg” . However, the result comes as “asdfghjk”, when you have to add “asdf” and “ghjk” and guarantee the shortest string first, then the minimum lexicographic second, the same rules for other additions.", input:"For each case, there are two strings (the chars selected just form ‘a’ to ‘z’) for you, and each length of theirs won’t exceed 10^5 and won’t be empty.", output:"Print the ultimate string by the book.", sample_in:"asdf sdfg\nasdf ghjk", sample_out:"asdfg\nasdfghjk", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:541, vtotal_submit:3530, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008杭电集训队选拔赛——热身赛", author:"", tag:["TEST"]}
{pid:1868, vid:1868, oj:"hdu", title:"Consecutive sum", desc:"Every body knew that 15 = 1+2+3+4+5 = 4+5+6 = 7+8. Now give you a number N, tell me how many ways to represent N as a sum of consecutive positive integers. For example, 15 have 3 ways to be found.", input:"Each line will contain an signed 32-bits integer N. Process to end of file.", output:"For each case, output the answer in one line.", sample_in:"15\n1050", sample_out:"3\n11", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:437, vtotal_submit:1162, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008杭电集训队选拔赛——热身赛", author:"", tag:["TEST"]}
{pid:1869, vid:1869, oj:"hdu", title:"六度分离", desc:"1967年，美国著名的社会学家斯坦利·米尔格兰姆提出了一个名为“小世界现象(small world phenomenon)”的著名假说，大意是说，任何2个素不相识的人中间最多只隔着6个人，即只用6个人就可以将他们联系在一起，因此他的理论也被称为“六度分离”理论(six degrees of separation)。虽然米尔格兰姆的理论屡屡应验，一直也有很多社会学家对其兴趣浓厚，但是在30多年的时间里，它从来就没有得到过严谨的证明，只是一种带有传奇色彩的假说而已。 <br><br>Lele对这个理论相当有兴趣，于是，他在HDU里对N个人展开了调查。他已经得到了他们之间的相识关系，现在就请你帮他验证一下“六度分离”是否成立吧。", input:"本题目包含多组测试，请处理到文件结束。<br>对于每组测试，第一行包含两个整数N,M(0&lt;N&lt;100,0&lt;M&lt;200),分别代表HDU里的人数（这些人分别编成0~N-1号)，以及他们之间的关系。<br>接下来有M行，每行两个整数A,B(0&lt;=A,B&lt;N)表示HDU里编号为A和编号B的人互相认识。<br>除了这M组关系，其他任意两人之间均不相识。<br>", output:"对于每组测试，如果数据符合“六度分离”理论就在一行里输出&quot;Yes&quot;，否则输出&quot;No&quot;。", sample_in:"8 7\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n8 8\n0 1\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 0", sample_out:"Yes\nYes", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:832, vtotal_submit:3557, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008杭电集训队选拔赛——热身赛", author:"", tag:["TEST"]}
{pid:1870, vid:1870, oj:"hdu", title:"愚人节的礼物", desc:"四月一日快到了，Vayko想了个愚人的好办法——送礼物。嘿嘿，不要想的太好，这礼物可没那么简单，Vayko为了愚人，准备了一堆盒子，其中有一个盒子里面装了礼物。盒子里面可以再放零个或者多个盒子。假设放礼物的盒子里不再放其他盒子。<br><br>用()表示一个盒子，B表示礼物，Vayko想让你帮她算出愚人指数，即最少需要拆多少个盒子才能拿到礼物。<br>", input:"本题目包含多组测试，请处理到文件结束。<br>每组测试包含一个长度不大于1000,只包含\'(\',\')\'和\'B\'三种字符的字符串，代表Vayko设计的礼物透视图。<br>你可以假设，每个透视图画的都是合法的。<br>", output:"对于每组测试，请在一行里面输出愚人指数。", sample_in:"((((B)()))())\n(B)", sample_out:"4\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2032, vtotal_submit:4146, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008杭电集训队选拔赛——热身赛", author:"", tag:["TEST"]}
{pid:1871, vid:1871, oj:"hdu", title:"无题", desc:"就要复试了，外地的考生都要在学校附近住宾馆了。假设在学校附近有C家宾馆，并且这些宾馆只有单人房，而每家宾馆的价格不一样，学生们都想找价格便宜的住，所以现在需要你的帮助，当有学生需要住宾馆的时候，告诉他哪个宾馆还有空的房间并且价格最便宜。而且有一个要求，同一个组的学生要住在同一个宾馆。", input:"输入包括多组数据。输入首先包括一个整数T(T &lt;= 50)，代表有T组数据。<br>每组数据首先是一个整数C(C &lt;= 100),代表宾馆的个数，接下来是C行数据，每行3个整数，第一个代表宾馆的编号(&lt;=1000)，第二个是宾馆的房间数(&lt;=50)，第三个是宾馆的价格(&lt;=1000)。<br>然后是一个整数T (T &lt;= 1000)，代表想找宾馆住的小组，接下来的T行每行代表一个要找宾馆的小组，每个小组不超过10人。<br>", output:"对于每组数据中的想找宾馆的小组，输出他们应该找的宾馆编号。如果没有合适的宾馆或已经住满，输出”sorry”.", sample_in:"1\n2\n1 2 100\n2 3 120\n4\n3 \n1\n1\n5", sample_out:"2\n1\n1\nsorry", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:993, vtotal_submit:2831, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008浙大研究生复试热身赛（2）——全真模拟", author:"", tag:["TEST"]}
{pid:1872, vid:1872, oj:"hdu", title:"稳定排序", desc:"大家都知道，快速排序是不稳定的排序方法。<br>如果对于数组中出现的任意a[i],a[j](i&lt;j),其中a[i]==a[j]，在进行排序以后a[i]一定出现在a[j]之前，则认为该排序是稳定的。<br><br>某高校招生办得到一份成绩列表，上面记录了考生名字和考生成绩。并且对其使用了某排序算法按成绩进行递减排序。现在请你判断一下该排序算法是否正确，如果正确的话，则判断该排序算法是否为稳定的。<br>", input:"本题目包含多组输入，请处理到文件结束。<br>对于每组数据，第一行有一个正整数N(0&lt;N&lt;300)，代表成绩列表中的考生数目。<br>接下来有N行，每一行有一个字符串代表考生名字(长度不超过50，仅包含\'a\'~\'z\'),和一个整数代表考生分数(小于500)。其中名字和成绩用一个空格隔开。<br>再接下来又有N行，是上述列表经过某排序算法以后生成的一个序列。格式同上。", output:"对于每组数据，如果算法是正确并且稳定的，就在一行里面输出&quot;Right&quot;。如果算法是正确的但不是稳定的，就在一行里面输出&quot;Not Stable&quot;，并且在下面输出正确稳定排序的列表，格式同输入。如果该算法是错误的，就在一行里面输出&quot;Error&quot;,并且在下面输出正确稳定排序的列表，格式同输入。<br><br>注意，本题目不考虑该排序算法是错误的，但结果是正确的这样的意外情况。", sample_in:"3\naa 10\nbb 10\ncc 20\ncc 20\nbb 10\naa 10\n3\naa 10\nbb 10\ncc 20\ncc 20\naa 10\nbb 10\n3\naa 10\nbb 10\ncc 20\naa 10\nbb 10\ncc 20", sample_out:"Not Stable\ncc 20\naa 10\nbb 10\nRight\nError\ncc 20\naa 10\nbb 10", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1033, vtotal_submit:3438, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008浙大研究生复试热身赛（2）——全真模拟", author:"", tag:["TEST"]}
{pid:1873, vid:1873, oj:"hdu", title:"看病要排队", desc:"看病要排队这个是地球人都知道的常识。<br>不过经过细心的0068的观察，他发现了医院里排队还是有讲究的。0068所去的医院有三个医生（汗，这么少）同时看病。而看病的人病情有轻重，所以不能根据简单的先来先服务的原则。所以医院对每种病情规定了10种不同的优先级。级别为10的优先权最高，级别为1的优先权最低。医生在看病时，则会在他的队伍里面选择一个优先权最高的人进行诊治。如果遇到两个优先权一样的病人的话，则选择最早来排队的病人。<br><br>现在就请你帮助医院模拟这个看病过程。", input:"输入数据包含多组测试，请处理到文件结束。<br>每组数据第一行有一个正整数N(0&lt;N&lt;2000)表示发生事件的数目。<br>接下来有N行分别表示发生的事件。<br>一共有两种事件：<br>1:&quot;IN A B&quot;,表示有一个拥有优先级B的病人要求医生A诊治。(0&lt;A&lt;=3,0&lt;B&lt;=10)<br>2:&quot;OUT A&quot;,表示医生A进行了一次诊治，诊治完毕后，病人出院。(0&lt;A&lt;=3)", output:"对于每个&quot;OUT A&quot;事件，请在一行里面输出被诊治人的编号ID。如果该事件时无病人需要诊治，则输出&quot;EMPTY&quot;。<br>诊治人的编号ID的定义为：在一组测试中，&quot;IN A B&quot;事件发生第K次时，进来的病人ID即为K。从1开始编号。<br>", sample_in:"7\nIN 1 1\nIN 1 2\nOUT 1\nOUT 2\nIN 2 1\nOUT 2\nOUT 1\n2\nIN 1 1\nOUT 1", sample_out:"2\nEMPTY\n3\n1\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1217, vtotal_submit:4255, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008浙大研究生复试热身赛（2）——全真模拟", author:"", tag:["TEST"]}
{pid:1874, vid:1874, oj:"hdu", title:"畅通工程续", desc:"某省自从实行了很多年的畅通工程计划后，终于修建了很多路。不过路多了也不好，每次要从一个城镇到另一个城镇时，都有许多种道路方案可以选择，而某些方案要比另一些方案行走的距离要短很多。这让行人很困扰。<br><br>现在，已知起点和终点，请你计算出要从起点到终点，最短需要行走多少距离。", input:"本题目包含多组数据，请处理到文件结束。<br>每组数据第一行包含两个正整数N和M(0&lt;N&lt;200,0&lt;M&lt;1000)，分别代表现有城镇的数目和已修建的道路的数目。城镇分别以0～N-1编号。<br>接下来是M行道路信息。每一行有三个整数A,B,X(0&lt;=A,B&lt;N,A!=B,0&lt;X&lt;10000),表示城镇A和城镇B之间有一条长度为X的双向道路。<br>再接下一行有两个整数S,T(0&lt;=S,T&lt;N)，分别代表起点和终点。", output:"对于每组数据，请在一行里输出最短需要行走的距离。如果不存在从S到T的路线，就输出-1.<br>", sample_in:"3 3\n0 1 1\n0 2 3\n1 2 1\n0 2\n3 1\n0 1 1\n1 2", sample_out:"2\n-1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3586, vtotal_submit:23305, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008浙大研究生复试热身赛（2）——全真模拟", author:"", tag:["TEST"]}
{pid:1875, vid:1875, oj:"hdu", title:"畅通工程再续", desc:"相信大家都听说一个“百岛湖”的地方吧，百岛湖的居民生活在不同的小岛中，当他们想去其他的小岛时都要通过划小船来实现。现在政府决定大力发展百岛湖，发展首先要解决的问题当然是交通问题，政府决定实现百岛湖的全畅通！经过考察小组RPRush对百岛湖的情况充分了解后，决定在符合条件的小岛间建上桥，所谓符合条件，就是2个小岛之间的距离不能小于10米，也不能大于1000米。当然，为了节省资金，只要求实现任意2个小岛之间有路通即可。其中桥的价格为 100元/米。", input:"输入包括多组数据。输入首先包括一个整数T(T &lt;= 200)，代表有T组数据。<br>每组数据首先是一个整数C(C &lt;= 100),代表小岛的个数，接下来是C组坐标，代表每个小岛的坐标，这些坐标都是 0 &lt;= x, y &lt;= 1000的整数。<br>", output:"每组输入数据输出一行，代表建桥的最小花费，结果保留一位小数。如果无法实现工程以达到全部畅通，输出”oh!”.", sample_in:"2\n2\n10 10\n20 20\n3\n1 1\n2 2\n1000 1000", sample_out:"1414.2\noh!", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2103, vtotal_submit:12104, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008浙大研究生复试热身赛（2）——全真模拟", author:"", tag:["TEST"]}
{pid:1876, vid:1876, oj:"hdu", title:"机器人系列2", desc:"这又是一个简单的游戏，你控制一个机器人从一个棋盘的起始点(1,1)走到棋盘的终点(n,m)。游戏的规则描述如下：<br>1.机器人一开始在棋盘的起始点(1,1)并有起始点所标有的能量。<br>2.机器人只能向右或者向下走，并且每走一步消耗一单位能量。<br>3.只有当机器人消耗完能量时才能获得相应格子上的能量。<br>请问机器人到达终点的过程中最多有几次完全消耗完能量，消耗完这么多次能量的方式有几种。", input:"输入<br>第一行输入一个整数T,表示数据的组数。<br>对于每一组数据第一行输入两个整数n,m(1 &lt;= n,m &lt;= 100)。表示棋盘的大小。接下来输入n行,每行m个整数e(0 &lt;= e &lt; 20)。<br>", output:"请问机器人到达终点的过程中最多有几次完全消耗完能量，消耗完这么多次能量的方式有几种。", sample_in:"1\n6 6\n4 5 6 6 4 3\n2 2 3 1 7 2\n1 1 4 6 2 7\n5 8 4 3 9 5\n7 6 6 2 1 5\n3 1 1 3 7 2", sample_out:"3 4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:126, vtotal_submit:989, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008浙大研究生复试热身赛（2）——全真模拟", author:"", tag:["TEST"]}
{pid:1877, vid:1877, oj:"hdu", title:"又一版 A+B", desc:"输入两个不超过整型定义的非负10进制整数A和B(&lt;=2<sup>31</sup>-1)，输出A+B的m (1 &lt; m &lt;10)进制数。<br><br><br><br>", input:"输入格式：测试输入包含若干测试用例。每个测试用例占一行，给出m和A，B的值。<br>当m为0时输入结束。", output:"输出格式：每个测试用例的输出占一行，输出A+B的m进制数。", sample_in:"8 1300 48\n2 1 7\n0", sample_out:"2504\n1000", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3479, vtotal_submit:12396, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2008年", author:"", tag:["TEST"]}
{pid:1878, vid:1878, oj:"hdu", title:"欧拉回路", desc:"欧拉回路是指不令笔离开纸面，可画过图中每条边仅一次，且可以回到起点的一条回路。现给定一个图，问是否存在欧拉回路？", input:"测试输入包含若干测试用例。每个测试用例的第1行给出两个正整数，分别是节点数N ( 1 &lt; N &lt; 1000 )和边数M；随后的M行对应M条边，每行给出一对正整数，分别是该条边直接连通的两个节点的编号（节点从1到N编号）。当N为0时输入结<br>束。", output:"每个测试用例的输出占一行，若欧拉回路存在则输出1，否则输出0。<br>", sample_in:"3 3\n1 2\n1 3\n2 3\n3 2\n1 2\n2 3\n0", sample_out:"1\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1836, vtotal_submit:8672, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2008年", author:"", tag:["TEST"]}
{pid:1879, vid:1879, oj:"hdu", title:"继续畅通工程", desc:"省政府“畅通工程”的目标是使全省任何两个村庄间都可以实现公路交通（但不一定有直接的公路相连，只要能间接通过公路可达即可）。现得到城镇道路统计表，表中列出了任意两城镇间修建道路的费用，以及该道路是否已经修通的状态。现请你编写程序，计算出全省畅通需要的最低成本。<br>", input:"测试输入包含若干测试用例。每个测试用例的第1行给出村庄数目N ( 1&lt; N &lt; 100 )；随后的 N(N-1)/2 行对应村庄间道路的成本及修建状态，每行给4个正整数，分别是两个村庄的编号（从1编号到N），此两村庄间道路的成本，以及修建状态：1表示已建，0表示未建。<br><br>当N为0时输入结束。", output:"每个测试用例的输出占一行，输出全省畅通需要的最低成本。", sample_in:"3\n1 2 1 0\n1 3 2 0\n2 3 4 0\n3\n1 2 1 0\n1 3 2 0\n2 3 4 1\n3\n1 2 1 0\n1 3 2 1\n2 3 4 1\n0", sample_out:"3\n1\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2779, vtotal_submit:11481, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2008年", author:"", tag:["TEST"]}
{pid:1880, vid:1880, oj:"hdu", title:"魔咒词典", desc:"哈利波特在魔法学校的必修课之一就是学习魔咒。据说魔法世界有100000种不同的魔咒，哈利很难全部记住，但是为了对抗强敌，他必须在危急时刻能够调用任何一个需要的魔咒，所以他需要你的帮助。<br><br>给你一部魔咒词典。当哈利听到一个魔咒时，你的程序必须告诉他那个魔咒的功能；当哈利需要某个功能但不知道该用什么魔咒时，你的程序要替他找到相应的魔咒。如果他要的魔咒不在词典中，就输出“what?”", input:"首先列出词典中不超过100000条不同的魔咒词条，每条格式为：<br><br>[魔咒] 对应功能<br><br>其中“魔咒”和“对应功能”分别为长度不超过20和80的字符串，字符串中保证不包含字符“[”和“]”，且“]”和后面的字符串之间有且仅有一个空格。词典最后一行以“@END@”结束，这一行不属于词典中的词条。<br>词典之后的一行包含正整数N（&lt;=1000），随后是N个测试用例。每个测试用例占一行，或者给出“[魔咒]”，或者给出“对应功能”。", output:"每个测试用例的输出占一行，输出魔咒对应的功能，或者功能对应的魔咒。如果魔咒不在词典中，就输出“what?”", sample_in:"[expelliarmus] the disarming charm\n[rictusempra] send a jet of silver light to hit the enemy\n[tarantallegra] control the movement of one\'s legs\n[serpensortia] shoot a snake out of the end of one\'s wand\n[lumos] light the wand\n[obliviate] the memory charm\n[expecto patronum] send a Patronus to the dementors\n[accio] the summoning charm\n@END@\n4\n[lumos]\nthe summoning charm\n[arha]\ntake me to the sky", sample_out:"light the wand\naccio\nwhat?\nwhat?", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1216, vtotal_submit:9295, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2008年", author:"", tag:["TEST"]}
{pid:1881, vid:1881, oj:"hdu", title:"毕业bg", desc:"每年毕业的季节都会有大量毕业生发起狂欢，好朋友们相约吃散伙饭，网络上称为“bg”。参加不同团体的bg会有不同的感觉，我们可以用一个非负整数为每个bg定义一个“快乐度”。现给定一个bg列表，上面列出每个bg的快乐度、持续长度、bg发起人的离校时间，请你安排一系列bg的时间使得自己可以获得最大的快乐度。<br><br>例如有4场bg：<br>第1场快乐度为5，持续1小时，发起人必须在1小时后离开；<br>第2场快乐度为10，持续2小时，发起人必须在3小时后离开；<br>第3场快乐度为6，持续1小时，发起人必须在2小时后离开；<br>第4场快乐度为3，持续1小时，发起人必须在1小时后离开。<br>则获得最大快乐度的安排应该是：先开始第3场，获得快乐度6，在第1小时结束，发起人也来得及离开；再开始第2场，获得快乐度10，在第3小时结束，发起人正好来得及离开。此时已经无法再安排其他的bg，因为发起人都已经离开了学校。因此获得的最大快乐度为16。<br><br>注意bg必须在发起人离开前结束，你不可以中途离开一场bg，也不可以中途加入一场bg。<br>又因为你的人缘太好，可能有多达30个团体bg你，所以你需要写个程序来解决这个时间安排的问题。", input:"测试输入包含若干测试用例。每个测试用例的第1行包含一个整数N (&lt;=30)，随后有N行，每行给出一场bg的信息：<br>h l t<br>其中 h 是快乐度，l是持续时间（小时），t是发起人离校时间。数据保证l不大于t,因为若发起人必须在t小时后离开，bg必须在主人离开前结束。<br><br>当N为负数时输入结束。", output:"每个测试用例的输出占一行，输出最大快乐度。<br>", sample_in:"3\n6 3 3\n3 2 2\n4 1 3\n4\n5 1 1\n10 2 3\n6 1 2\n3 1 1\n-1", sample_out:"7\n16", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:810, vtotal_submit:4717, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"浙大计算机研究生复试上机考试-2008年", author:"", tag:["TEST"]}
{pid:1882, vid:1882, oj:"hdu", title:"Strange Billboard", desc:"The marketing and public-relations department of the Czech Technical University has designed a new reconfigurable mechanical Flip-Flop  Bill-Board  (FFBB).  The billboard is a regular two-dimensional grid of R ×C square tiles made of plastic.  Each plastic tile is white on one side and black on the other.  The idea of the billboard is that you can create various pictures by flipping individual tiles over.  Such billboards will hang above all entrances to the university and will be used to display simple pictures and advertise upcoming academic events. <br><br>To change pictures, each billboard is equipped with a ”reconfiguration  device”.  The device is just an ordinary long wooden stick that is used to tap the tiles. if you tap a tile, it flips over to the other side, i.e., it changes from white to black or vice versa.  Do you agree this idea is very clever? <br><br>Unfortunately, the billboard makers did not realize one thing. The tiles  are very close to each other and their sides touch.  Whenever a tile is tapped, it takes all neighboring tiles with it and all of them flip over together.  Therefore, if you want to change the color of a tile, all neighboring tiles  change  their  color  too. Neighboring  tiles  are  those  that  touch  each  other  with  the  whole side.  All inner tiles have 4 neighbors, which means 5 tiles are flipped over when tapped.  Border tiles have less neighbors, of course. <br><br><center><img src=data/images/C106-1001-1.JPG></center><br><br>For example, if you have the billboard configuration shown in the left picture above and tap the tile marked with the cross, you will get the picture on the right. As you can see, the billboard reconfiguration  is  not  so  easy  under  these  conditions.    Your  task  is  to  find  the  fastest  way  to ”clear” the billboard, i.e., to flip all tiles to their white side. <br>", input:"The  input  consists  of  several  billboard  descriptions.   Each  description  begins  with  a  line  containing two integer numbers R and C  (1 ≤ R, C ≤ 16) specifying the billboard size.  Then there are R lines, each containing C  characters.  The characters can be either an uppercase letter “X” (black) or a dot “.”  (white).  There is one empty line after each map.  <br>The input is terminated by two zeros in place of the board size. ", output:"For each billboard, print one line containing the sentence “You        have   to  tap   T  tiles.”, where T is  the  minimal  possible  number  of  taps  needed  to make all squares white. if the situation cannot be solved, output the string “Damaged billboard.” instead. <br>", sample_in:"5 5\nXX.XX\nX.X.X\n.XXX.\nX.X.X\nXX.XX\n5 5\n.XX.X\n.....\n..XXX\n..X.X\n..X..\n\n1 5\n...XX\n\n5 5\n...X.\n...XX\n.XX..\n..X..\n.....\n\n8 9\n..XXXXX..\n.X.....X.\nX..X.X..X\nX.......X\nX.X...X.X\nX..XXX..X\n.X.....X.\n..XXXXX..\n\n0 0", sample_out:"You have to tap 5 tiles.\nDamaged billboard.\nYou have to tap 1 tiles.\nYou have to tap 2 tiles.\nYou have to tap 25 tiles.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:158, vtotal_submit:693, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（2）", author:"", tag:["TEST"]}
{pid:1883, vid:1883, oj:"hdu", title:"Phone Cell", desc:"Nowadays, everyone has a cellphone, or even two or three.     You probably know where their name comes from. Do you? Cellphones can be moved (they are “mobile”) and they use wireless connection to static stations called BTS (Base Transceiver Station). Each BTS covers an area around it and that area is called a cell. <br><br>The Czech Technical University runs an experimental private GSM network with a BTS right on top of the building you are in just now. Since the placement of base stations is very important for the network coverage, your task is to create a program that will find the optimal position for a BTS. The program will be given coordinates of “points of interest”.The goal is to find a position that will cover the maximal number of these points. It is supposed that a BTS can cover all points that are no further than some given distance R. Therefore, the cell has a circular shape. <br><br><center><img src=data/images/C106-1002-1.JPG></center><br><br>The picture above shows eight points of interest (little circles) and one of the possible optimal BTS positions (small triangle).    For the given distance R, it is not possible to cover more than four points. Notice that the BTS does not need to be placed in an existing point of interest. ", input:"The input consists of several scenarios. Each scenario begins with a line containing two integer numbers N and R. N is the number of points of interest, 1 ≤ N ≤ 2000. R is the maximal distance the BTS is able to cover, 0 ≤ R &lt; 10 000. Then there are N lines, each containing two integer numbers Xi , Yi giving coordinates of the i-th point, |Xi|,|Yi| &lt; 10 000. All points are distinct, i.e., no two of them will have the same coordinates. <br><br>The scenario is followed by one empty line and then the next scenario begins. The last one is followed by a line containing two zeros. <br><br>A point lying at the circle boundary (exactly in the distance R) is considered covered. To avoid floating-point inaccuracies, the input points will be selected in such a way that for any possible subset of points S that can be covered by a circle with the radius R + 0.001, there will always exist a circle with the radius R that also covers them. <br>", output:"For each scenario, print one line containing the sentence “It is possible to cover M points.”, where M is the maximal number of points of interest that may be covered by a single BTS. <br>", sample_in:"8 2\n1 2\n5 3\n5 4\n1 4\n8 2\n4 5\n7 5\n3 3\n\n2 100\n0 100\n0 -100\n\n0 0", sample_out:"It is possible to cover 4 points.\nIt is possible to cover 2 points.\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>The first sample  input scenario corresponds  to the picture, providing that the  X axis aims right and Y axis down. </div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:66, vtotal_submit:522, special_status:0, time_limit:12000, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（2）", author:"", tag:["TEST"]}
{pid:1884, vid:1884, oj:"hdu", title:"Hexagonal Parcels", desc:"A civil engineer that has recently graduated from the Czech Technical University encountered an interesting problem and asked us for a help. The problem is more of economical than engineering nature. The engineer needs to connect several buildings with an infrastructure. <br>Unfortunately, the investor is not the owner of all the land between these places. Therefore, some properties have to be bought first. <br><br>The land is divided into a regular “grid” of hexagonal parcels, each of them forms an independent unit and has the same value. Some of the parcels belong to the investor. These parcels form four connected areas, each containing one building to be connected with the others. Your task is to find the minimal number of parcels that must be acquired to connect the four given areas.<br><br><center><img src=data/images/C106-1003-1.JPG></center><br><br>The whole land also has a hexagonal shape with six sides, each consisting of exactly H parcels.<br>The above picture shows a land with H = 4, parcels with letters represent the four areas to be connected. In this case, it is necessary to buy four additional parcels. One of the possible solutions is marked by crosses. ", input:"The input contains several scenarios. Each scenario begins with an integer number H , which specifies the size of the land, 2 ≤ H ≤ 20. Then there are 2H - 1 lines representing individual “rows” of the land (always oriented as in the picture). The lines contain one non-space character for each parcel. It means the first line will contain H characters, the second line H + 1, and so on. The longest line will be the middle one, with 2.H - 1 characters. Then the “length” descends and the last line contains H parcels, again. <br><br>The character representing a parcel will be either a dot (“ .”) for the land that is not owned by the investor, or one of the uppercase letters “A”, “B”, “C”, or “D”. The areas of parcels occupied by the same letter will always be connected. It means that between any two parcels in the same area, there exists a path leading only through that area. <br><br>Beside the characters representing parcels, the lines may contain any number of spaces at any positions to improve “human readability” of the input. There is always at least one space between two letters (or the dots). After the land description, there will be one empty line and then the next scenario begins. The last scenario is followed by a line containing zero. <br>", output:"For each scenario, output one line with the sentence “You have to buy P parcels.”, where P is the minimal number of parcels that must be acquired to make all four areas connected together. <br><br>Areas are considered connected, if it is possible to find a path between them that leads only through parcels that have been bought. ", sample_in:"4\n   B . . C\n  . . . . C\n . A . . C .\n. A A . . . .\n . A . . . .\n  . . . D D\n   . . . .\n\n0", sample_out:"You have to buy 4 parcels.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:19, vtotal_submit:46, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（2）", author:"", tag:["TEST"]}
{pid:1885, vid:1885, oj:"hdu", title:"Key Task", desc:"The Czech Technical University is rather old — you already know that it celebrates 300 years of its existence in 2007. Some of the university buildings are old as well. And the navigation in old buildings can sometimes be a little bit tricky, because of strange long corridors that fork and join at absolutely unexpected places. <br><br>The result is that some first-graders have often di?culties finding the right way to their classes. Therefore, the Student Union has developed a computer game to help the students to practice their orientation skills. The goal of the game is to find the way out of a labyrinth. Your task is to write a verification software that solves this game. <br><br>The labyrinth is a 2-dimensional grid of squares, each square is either free or filled with a wall. Some of the free squares may contain doors or keys. There are four di?erent types of keys and doors: blue, yellow, red, and green. Each key can open only doors of the same color. <br><br>You can move between adjacent free squares vertically or horizontally, diagonal movement is not allowed. You may not go across walls and you cannot leave the labyrinth area. If a square contains a door, you may go there only if you have stepped on a square with an appropriate key before. ", input:"The input consists of several maps. Each map begins with a line containing two integer numbers R and C (1 ≤ R, C ≤ 100) specifying the map size. Then there are R lines each containing C characters. Each character is one of the following: <br><br><center><img src=data/images/C106-1004-1.JPG></center><br><br>Note that it is allowed to have <br> <li> more than one exit, </li><br> <li> no exit at all, </li><br> <li> more doors and/or keys of the same color, and </li><br> <li> keys without corresponding doors and vice versa. </li><br><br>You may assume that the marker of your position (“*”) will appear exactly once in every map. <br><br>There is one blank line after each map. The input is terminated by two zeros in place of the map size. ", output:"For each map, print one line containing the sentence “Escape possible in S steps.”, where S is the smallest possible number of step to reach any of the exits. If no exit can be reached, output the string “The poor student is trapped!” instead. <br><br>One step is defined as a movement between two adjacent cells. Grabbing a key or unlocking a door does not count as a step. ", sample_in:"1 10\n*........X\n\n1 3\n*#X\n\n3 20\n####################\n#XY.gBr.*.Rb.G.GG.y#\n####################\n\n0 0", sample_out:"Escape possible in 9 steps.\nThe poor student is trapped!\nEscape possible in 45 steps.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:239, vtotal_submit:985, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（2）", author:"", tag:["TEST"]}
{pid:1886, vid:1886, oj:"hdu", title:"Gates of Logic", desc:"The Department of Computer Science and Engineering runs courses dealing not only with algorithms but also with computer hardware. One such introductory course explains basic principles of integrated circuits (“chips”), binary logic, boolean algebra, etc. As you may know, the very basic units of logical circuits are called gates. A gate is an element performing one simple logical operation. It can be connected to other gates using lines. <br><br><center><img src=data/images/C106-1005-1.JPG></center><br><br>Logical circuits may be drawn as pictures with the gates represented as squares with inputs on the left and outputs on the right. In each square, there is a symbol that determines the gate type: Number 1 denotes an OR gate (its outputs are 0 if and only if there is no input with the value of 1), &amp; is an AND gate (outputs are 1 if and only if there is no 0 input), and = is a XOR gate (outputs are 1 if and only if there is an odd number inputs that have the value of 1). <br><br>Your task is to scan such a “picture” and compute values of all named circuit outputs. The lines may split and join again but you may assume that each “value consumer” (input port of a gate or a named output) will be connected to exactly one “value source” (output port of a gate or an input value). There will be no feedback loops, i.e., there exists no cycle that would lead through the same gate twice. ", input:"The input contains several pictures. Each picture consists of at least one and at most 200 rows composed of the following characters: <br><br> <li>Space (&quot; &quot;). Empty space in the picture. Spaces are used to indent other characters to appropriate locations, because the exact position of characters is often important. Trailing spaces at the end of input rows may be present but may also be left out. </li><br><br><li>Dash (&quot;-&quot;). Horizontal line. It connects characters on its left and right together, those characters will always exist and be able to &quot;accept&quot; the connection.</li><br><br><li>Pipe (&quot;|&quot;). Vertical line, connects characters that are directly above and below. Like with the horizontal line, those characters will always accept the connection.</li><br><br><li>Plus sign (&quot;+&quot;). Line connection or a bend. Connects characters on all four sides. All characters that are able to accept the connection are considered connected (there will always be at least two). However, there may be sides that contain a non-empty character that is not connected. For example, if a dash is present on a position directly below the plus sign, they are not considered connected.</li><br><br><li>Lowercase letter x (&quot;x&quot;). Crossing of two lines without a connection. All four neighboring characters will accept the connection. The character above is connected to the one below and the character to the left with the one on the right, but there is no mutual connection between these two pairs.</li><br><br><li>Equal sign (&quot;=&quot;). Represents an input or output port. It always connects characters on its left and right, at least one of these characters is the port. If there is a port on the left, it may only be a value source. If there is a port on the right, it may only be a value consumer.</li><br><br><li>Lowercase letter o (&quot;o&quot;). Negation. There will always be a gate on the left and a port on the right of this character. It makes the particular gate output negated.</li><br><br><li>Hash mark (&quot;#&quot;). Gate, which has always a rectangular shape with two vertical and two horizontal sides. The left vertical side may be connected to input ports, the right side to output ports (possibly negated). No two gates will touch each other’s side, which means that any two vertically or horizontally neighboring hash marks are always parts of the same gate.<br><br> The rectangle size will always be at least 3 characters in both directions, which means there is at least one character inside. All inner characters are empty (spaces), with exactly one exception. That single non-empty character denotes the gate type (note that it may have different meaning than outside the gate area) and will be a digit &quot;one&quot; (&quot;1&quot;), ampersand (&quot;&amp;&quot;), or an equal sign (&quot;=&quot;). </li><br><br><li>Binary digit (&quot;0&quot; and &quot;1&quot;). Input value of the circuit. It is connected to the character on its right, which is always an equal sign. </li><br><br><li>Uppercase letter (&quot;A&quot; through &quot;Z&quot;). Named output of the circuit. It accepts connection from its left, which is always an equal sign. Each letter will appear at most once, which means the number of circuit outputs is between 0 and 26, inclusive. </li><br><br>Each picture will be terminated by a row consisting solely of asterisk (&quot;*&quot;) characters (at least one). The last picture will be followed by two such rows. No row in the input will be longer than 200 characters. ", output:"For each picture, print the values of all named outputs, sorted alphabetically. Each output row should contain three characters: output name (one uppercase letter), equals sign, and a binary value (zero or one). Print one empty line after each test case. <br>", sample_in:"     0=+\n       |\n       | #######\n       +=#     #\n         # &   #o=--+\n1=------=#     #    |\n         #     #    | \n         #######    +--=### ###\n                    |   #=#=#1#o==X\n       1=-----------x--=# # ###\n               1=---x--=### \n                    +------------=Y\n***********************************\n1=A\n***\n*", sample_out:"X=0\nY=1\n\nA=1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:19, vtotal_submit:205, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（2）", author:"", tag:["TEST"]}
{pid:1887, vid:1887, oj:"hdu", title:"Weird Numbers", desc:"Binary numbers form the principal basis of computer science. Most of you have heard of other systems, such as ternary, octal, or hexadecimal. You probably know how to use these systems and how to convert numbers between them. But did you know that the system base (radix) could also be negative? One assistant professor at the Czech Technical University has recently met negabinary numbers and other systems with a negative base. Will you help him to convert numbers to and from these systems? <br><br>A number N written in the system with a positive base R will always appear as a string of digits between 0 and R - 1, inclusive. A digit at the position P (positions are counted from right to left and starting with zero) represents a value of R^P . This means the value of the digit is multiplied by R^P and values of all positions are summed together. For example, if we use the octal system (radix R = 8), a number written as 17024 has the following value: <br><br> 1.8^4 + 7.8^3 + 0.8^2 + 2.8^1 + 4.8^0 = 1.4096 + 7.512 + 2.8 + 4.1 = 7700<br><br>With a negative radix -R, the principle remains the same: each digit will have a value of (-R)^P . <br>For example, a negaoctal (radix R = -8) number 17024 counts as: <br><br> 1.(-8)^4 + 7.(-8)^3 + 0.(-8)^2 + 2.(-8)^1 + 4.(-8)^0 = 1.4096 - 7.512 - 2.8 + 4.1 = 500 <br><br>One big advantage of systems with a negative base is that we do not need a minus sign to express negative numbers. A couple of examples for the negabinary system (R = -2): <br><br><center><img src=data/images/C106-1006-1.JPG></center> <br><br>You may notice that the negabinary representation of any integer number is unique, if no “leading zeros” are allowed. The only number that can start with the digit “0”, is the zero itself. ", input:"The input will contain several conversions, each of them specified on one line. A conversion from the decimal system to some negative-base system will start with a lowercase word “to” followed by a minus sign (with no space before it), the requested base (radix) R, one space, and a decimal number N . <br><br>A conversion to the decimal system will start with a lowercase word “from”, followed by a minus sign, radix R, one space, and a number written in the system with a base of -R. <br><br>The input will be terminated by a line containing a lowercase word “end”. All numbers will satisfy the following conditions: 2 ≤ R ≤ 10, -1000000≤N≤1000000 (decimal). <br>", output:"For each conversion, print one number on a separate line. If the input used a decimal format,output the same number written in the system with a base -R. If the input contained such a number, output its decimal value. <br><br>Both input and output numbers must not contain any leading zeros. The minus sign &quot;-&quot; may only be present with negative numbers written in the decimal system. Any non-negative number or a number written in a negative-base system must not start with it. ", sample_in:"to-2 10\nfrom-2 1010\nto-10 10\nto-10 -10\nfrom-10 10\nend", sample_out:"11110\n-10\n190\n10\n-10", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:108, vtotal_submit:364, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（2）", author:"", tag:["TEST"]}
{pid:1888, vid:1888, oj:"hdu", title:"Rectangular Polygons", desc:"In this problem, we will help the Faculty of Civil Engineering. They need a software to analyze ground plans of buildings. Specifically, your task is to detect outlines of a building when all of its corners are given. <br><br><center><img src=data/images/C106-1007-1.JPG></center><br><br>You may assume that each building is a rectangular polygon with each of its sides being parallel either with X or Y axis. Therefore, each of its vertex angles is exactly either 90 or 270 degrees. <br>", input:"The input contains several buildings. The description of each building starts with a single positive integer N , the number of corners (polygon vertices), 1 ≤ N ≤ 1000. Then there are N pairs of integer numbers Xi , Yi giving coordinates of individual corners, |Xi|, |Yi| ≤ 10 000. <br><br>You may assume that all corners are listed and no two of them have the same coordinates. The polygon does always exist, it is closed, its sides do not intersect or touch (except neighboring sides, of course), and it contains no “holes” inside. In other words, the outline is formed by one closed line. The order of corners in the input file may be arbitrary. <br><br>There is an empty line after each building, then the next one is described. After the last building,there is a single zero that signals the end of input. <br>", output:"For each building, output one line containing N characters without any whitespace between them. The characters should be uppercase letters that specify directions of individual walls (sides) when the building outline is followed. “N” stands for North (the positive direction of the Y axis), “E” for East (the positive direction of the X axis), “W” for West, and “S” for South. The “walk” should start in the vertex that has been given first in the input and always proceed in the clockwise direction. <br>", sample_in:"4\n0 0\n2 2 \n0 2\n2 0\n\n6\n1 1\n2 2\n0 1\n1 0\n0 2\n2 0\n\n0", sample_out:"NESW\nWNESWN\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>The second sample  input corresponds  to the picture. </div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:47, vtotal_submit:150, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（2）", author:"", tag:["TEST"]}
{pid:1889, vid:1889, oj:"hdu", title:"Reaux! Sham! Beaux! ", desc:"Roshambo — this simple game is known all around the world. In German, it is called “Schnick, Schnack, Schnuck”, in Japanese “Janken”, in Spanish “Cachip′un”, in Polish “Papier, kamie′n, no˙zyce”. The Czechs call it “K′amen, n?uˇzky, pap′?r”. <br><br>Whatever is the name of the game, its principles remain the same. Two players simultaneously form their hand into one of three possible shapes (symbols): Rock (closed fist), Paper (open hand), or Scissors (two fingers extended). If both of them show the same symbol, it is a tie and no points are given. Otherwise, one of the symbols wins: Rock blunts Scissors, Scissors cut Paper, and Paper covers Rock. <br><br>Czech Technical University students also know the game very well and use it to resolve small disputes. Imagine, for example, two students living together in one room. Yesterday evening, there was a small celebration, and in the morning, no one wants to go to the lectures. They agreed that one person would be enough to take notices for both, but who will be the poor one? Roshambo is a very effective way to decide. <br><br>Did you know there are even the World Series of Roshambo? Our organizing team would like to host the World Championships in 2009. Your task is to help us in developing a Roshambo scoring system and write a program that evaluates one game between two players. <br><br>Since the participants will come from di?erent countries, the system must accept input in various languages. The following table shows names of three Roshambo symbols. Note that in some languages, there may be two different words for the same symbol. <br><br><center><img src=data/images/C106-1008-1.JPG></center>", input:"The input contains several games. Each game starts with two lines describing players. Each of these two lines contains two lowercase letters specifying the language used by the player (see the language code in the table above), one space, and a player name. The name will consist from at most twenty upper- or lower-case letters. <br><br>After the players description, there are at most 100 lines containing individual rounds. Each round is described by two words separated with one space. The words name the symbol shown by the first and second player, respectively. All symbols are named in the mother tongue of the concerned player. All allowed words are shown in the table above, the first letter will be always in uppercase, all other letters in lowercase. <br><br>The last round is followed by a line containing one single dash character (“-”) and then the next game begins. The only exception is the last game in the input, which is terminated by a dot (“.”) instead of the dash. ", output:"For each game, print five lines of output. The first line should contain the string “Game #G :”, where G is the number of the game, starting with one. <br><br>The second line will contain the first player name followed by a colon (“ :”), one space and the number of rounds won by that player. The number should be followed by one space and the word “points”. Use the singular form “point” if (and only if) the number of points of the player equals one. <br><br>The third line has the same format and shows the second player’s name and points. <br><br>The fourth line displays the outcome of the game. It must contain the word “WINNER” followed by a colon, space and the name of the player who gained more points. If both players have the same number of points, the fourth line will contain words “TIED GAME” instead. <br><br>The fifth line is left empty to visually separate individual games. ", sample_in:"cs Pepik\nen Johnny\nNuzky Scissors\nPapir Rock\nPapir Scissors\n-\nde Gertruda\ncs Lenka\nStein Papir\nSchere Kamen\n.", sample_out:"Game #1:\nPepik: 1 point\nJohnny: 1 point\nTIED GAME\n\nGame #2:\nGertruda: 0 points\nLenka: 2 points\nWINNER: Lenka", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:110, vtotal_submit:319, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（2）", author:"", tag:["TEST"]}
{pid:1890, vid:1890, oj:"hdu", title:"Robotic Sort", desc:"Somewhere deep in the Czech Technical University buildings, there are laboratories for examining mechanical and electrical properties of various materials. In one of yesterday’s presentations, you have seen how was one of the laboratories changed into a new multimedia lab. But there are still others, serving to their original purposes. <br><br>In this task, you are to write software for a robot that handles samples in such a laboratory. Imagine there are material samples lined up on a running belt. The samples have different heights, which may cause troubles to the next processing unit. To eliminate such troubles, we need to sort the samples by their height into the ascending order. <br><br>Reordering is done by a mechanical robot arm, which is able to pick up any number of consecutive samples and turn them round, such that their mutual order is reversed. In other words, one robot operation can reverse the order of samples on positions between A and B. <br><br>A possible way to sort the samples is to find the position of the smallest one (P1) and reverse the order between positions 1 and P1, which causes the smallest sample to become first. Then we find the second one on position P and reverse the order between 2 and P2. Then the third sample is located etc. <br><br><center><img src=data/images/C106-1009-1.JPG></center><br><br>The picture shows a simple example of 6 samples. The smallest one is on the 4th position, therefore, the robot arm reverses the first 4 samples. The second smallest sample is the last one, so the next robot operation will reverse the order of five samples on positions 2–6. The third step will be to reverse the samples 3–4, etc. <br><br>Your task is to find the correct sequence of reversal operations that will sort the samples using the above algorithm. If there are more samples with the same height, their mutual order must be preserved: the one that was given first in the initial order must be placed before the others in the final order too. ", input:"The input consists of several scenarios. Each scenario is described by two lines. The first line contains one integer number N , the number of samples, 1 ≤ N ≤ 100 000. The second line lists exactly N space-separated positive integers, they specify the heights of individual samples and their initial order. <br><br>The last scenario is followed by a line containing zero. ", output:"For each scenario, output one line with exactly N integers P1 , P1 , . . . PN ,separated by a space.<br>Each Pi must be an integer (1 ≤ Pi ≤ N ) giving the position of the i-th sample just before the i-th reversal operation. <br><br>Note that if a sample is already on its correct position Pi , you should output the number Pi anyway, indicating that the “interval between Pi and Pi ” (a single sample) should be reversed. <br>", sample_in:"6\n3 4 5 1 6 2\n4\n3 3 2 1\n0", sample_out:"4 6 4 5 6 6\n4 2 4 4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:327, vtotal_submit:1937, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（2）", author:"", tag:["TEST"]}
{pid:1891, vid:1891, oj:"hdu", title:"Tough Water Level", desc:"Czech Technical University has the word “technical” in its name. Beside others, this means that lectures in physics are important here. Do you still remember some of the basic physical principles? <br><br>For example, imagine a simple glass of water. Or, we will rather call it a cup to avoid ambiguity of this word. So, imagine a simple cup (made of glass) that is partially filled with water. You might have noticed that the stability of such a cup depends on the amount of water inside. If you brush against a full cup, it is relatively easy to knock it down and spill its contents. If the cup is empty, there is fortunately nothing to be spilled, but other than that, the situation does not improve much — it is still easy to knock the cup down with only a little force. The best stability is usually achieved with a “half-full” cup. <br><br>In this problem, your task is to determine the water level that makes a cup as much stable as possible. For the purpose of this problem, we will make a simple assumption that the “stability” of a cup is higher, if its center of mass (sometimes also called the center of gravity) is lower (closer to the bottom). <br><br>The center of mass can be informally defined as follows: Imagine that glass and water consist of a very large number of very small particles. Then the center of mass is an average of the position of all these particles. The average is weighted by particle masses. Since the density of glass is approximately 2 500 kg.m-3 and the density of water only 1 000 kg.m-3 , we will suppose that the mass of a glass particle is 2.5 times higher than the mass of a water particle of the same size. <br><br>All cups considered in this problem will have an exact rotary shape. But their radius may vary with the height — some cups are wider at the top, others are wider at the bottom. Also, the thickness of the glass may not be constant. <br><br><center><img src=data/images/C106-1010-1.JPG></center><br><br>The left figure shows a typical cup considered in this problem. It can be fully described by its height (H), thickness of the bottom (B), and two functions R and T . Both of these functions take a current height as their argument and they give the outer radius (R) and glass thickness (T) in the appropriate height. Please note that the thickness is always measured strictly horizontally and may therefore not reflect the “real thickness” of the glass in its usual meaning. ", input:"The input contains several cup descriptions. Each description consists of three lines. The first line contains two numbers: H (cup height) and B (bottom thickness), 0 &lt; B &lt; H ≤ 100. <br>The second line contains an expression R(x) (radius), the third line an expression T (x) (glass thickness). All data are given in centimeters. The last description is followed by a line with two zeros. <br><br>The expressions will contain only digits (&quot;0&quot; through &quot;9&quot;), decimal points (&quot;.&quot;), four basic operators (&quot;+&quot;, &quot;-&quot;, &quot;*&quot;, and &quot;/&quot;), parentheses (&quot;(&quot; and &quot;)&quot;), and the lowercase letters &quot;x&quot; denoting the input variable (height measured from the cup bottom). <br><br><center><img src=data/images/C106-1010-2.JPG></center><br><br>Arithmetical operators have their usual meaning and priorities, i.e., multiplication and division have a higher priority than addition and subtraction. ", output:"For each cup, output the sentence “Pour L litres / W cm of water.”, where L is the amount of water that must be poured into the cup to reach the maximal stability (in litres). W is the water level (in centimeters) measured from the bottom of the cup. Both numbers must be given with exactly three decimal digits. <br>", sample_in:"9 1\n3+x/6\n17/8-x/8\n10 1\n(x+10)\n10/(x+10)\n0 0", sample_out:"Pour 0.030 litres / 3.365 cm of water.\nPour 0.878 litres / 2.193 cm of water.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:12, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（2）", author:"", tag:["TEST"]}
{pid:1892, vid:1892, oj:"hdu", title:"See you~", desc:"Now I am leaving hust acm. In the past two and half years, I learned so many knowledge about Algorithm and Programming, and I met so many good friends. I want to say sorry to Mr, Yin, I must leave now ~~&gt;.&lt;~~. I am very sorry, we could not advanced to the World Finals last year. <br>When coming into our training room, a lot of books are in my eyes. And every time the books are moving from one place to another one. Now give you the position of the books at the early of the day. And the moving information of the books the day, your work is to tell me how many books are stayed in some rectangles. <br>To make the problem easier, we divide the room into different grids and a book can only stayed in one grid. The length and the width of the room are less than 1000. I can move one book from one position to another position, take away one book from a position or bring in one book and put it on one position. <br>", input:"In the first line of the input file there is an Integer T(1&lt;=T&lt;=10), which means the number of test cases in the input file. Then N test cases are followed. <br>For each test case, in the first line there is an Integer Q(1&lt;Q&lt;=100,000), means the queries of the case. Then followed by Q queries. <br>There are 4 kind of queries, sum, add, delete and move. <br>For example: <br>S x1 y1 x2 y2 means you should tell me the total books of the rectangle used (x1,y1)-(x2,y2) as the diagonal, including the two points. <br>A x1 y1 n1 means I put n1 books on the position (x1,y1) <br>D x1 y1 n1 means I move away n1 books on the position (x1,y1), if less than n1 books at that position, move away all of them. <br>M x1 y1 x2 y2 n1 means you move n1 books from (x1,y1) to (x2,y2), if less than n1 books at that position, move away all of them. <br>Make sure that at first, there is one book on every grid and 0&lt;=x1,y1,x2,y2&lt;=1000,1&lt;=n1&lt;=100. <br>", output:"At the beginning of each case, output &quot;Case X:&quot; where X is the index of the test case, then followed by the &quot;S&quot; queries. <br>For each &quot;S&quot; query, just print out the total number of books in that area. <br>", sample_in:"2\n3\nS 1 1 1 1\nA 1 1 2\nS 1 1 1 1\n3\nS 1 1 1 1\nA 1 1 2\nS 1 1 1 2", sample_out:"Case 1:\n1\n3\nCase 2:\n1\n4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:494, vtotal_submit:3091, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"HDU 2008-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1893, vid:1893, oj:"hdu", title:"Sibonacci Numbers", desc:"As is known to all, the definition of Fibonacci Numbers is: <br>f(1)=1 <br>f(2)=1 <br>f(n)=f(n-1)+f(n-2) (n&gt;=3) <br><br>Now Sempr found another Numbers, he named it &quot;Sibonacci Numbers&quot;, the definition is below: <br>f(x)=0 (x&lt;0) <br>f(x)=1 (0&lt;=x&lt;1) <br>f(x)=f(x-1)+f(x-3.14) (x&gt;=1) <br><br>Your work is to tell me the result of f(x), is the answer is too large, divide it by 1000000007 and give me the remainder. <br>Be careful the number x can be an integer or not. <br>", input:"In the first line there is an Integer T(0&lt;T&lt;=10000) which means the number of test cases in the input file. <br>Then followed T different lines, each contains a number x(-1000&lt;x&lt;1000). <br>", output:"For each case of the input file, just output the result, one for each line. <br>", sample_in:"3\n-1\n0.667\n3.15", sample_out:"0\n1\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:177, vtotal_submit:723, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2008-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1894, vid:1894, oj:"hdu", title:"String Compare", desc:"Maybe there are 750,000 words in English and some words are prefix of other words, for example: the word &quot;acm&quot; can be treat as one prefix of &quot;acmicpc&quot;. What\'s more, most of such pairs of words have relationship between them. Now give you a dictionary, your work is to tell me how many such pairs. <br><br><br>There may be other characters in the word, for example \'_\',\'-\',and so on. <br>Pay attention that \'A\' and \'a\' are not the same character! <br>", input:"In the first line of the input file there is an Integer T, which means the number of test cases. Followed by T test cases. <br>For each test case, in the first line there is an integer N(0&lt;N&lt;=50000), followed N lines, each contains a word whose length is less than 30 and no space appears in any word. There are no same words in two different lines. <br>", output:"For each test case, tell me how many such pairs. If the number is larger than 11519, just divide it by 11519 and only output the remainder. <br>", sample_in:"2\n2\nacmicpc\nacm\n3\na\nabc\nab", sample_out:"1\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:355, vtotal_submit:2383, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2008-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1895, vid:1895, oj:"hdu", title:"Sum Zero", desc:"There are 5 Integer Arrays and each of them contains no more than 300 integers whose value are between -100,000,000 and 100,000,000, You are to find how many such groups (i,j,k,l,m) can make A[0][i]+A[1][j]+A[2][k]+A[3][l]+A[4][m]＝0. Maybe the result is too large, you only need tell me the remainder after divided by 1000000007.<br>", input:"In the first line, there is an Integer T(0&lt;T&lt;20), means the test cases in the input file, then followed by T test cases. <br>For each test case, there are 5 lines Integers, In each line, the first one is the number of integers in its array. <br>", output:"For each test case, just output the result, followed by a newline character.<br>", sample_in:"1\n3 4 -2 3\n5 -5 -1 -7 -10 -1\n5 -10 2 4 -6 2\n2 -4 -1\n5 -7 -7 -1 -4 -6", sample_out:"11", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:97, vtotal_submit:707, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"HDU 2008-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1896, vid:1896, oj:"hdu", title:"Stones", desc:"Because of the wrong status of the bicycle, Sempr begin to walk east to west every morning and walk back every evening. Walking may cause a little tired, so Sempr always play some games this time. <br>There are many stones on the road, when he meet a stone, he will throw it ahead as far as possible if it is the odd stone he meet, or leave it where it was if it is the even stone. Now give you some informations about the stones on the road, you are to tell me the distance from the start point to the farthest stone after Sempr walk by. Please pay attention that if two or more stones stay at the same position, you will meet the larger one(the one with the smallest Di, as described in the Input) first. <br>", input:"In the first line, there is an Integer T(1&lt;=T&lt;=10), which means the test cases in the input file. Then followed by T test cases. <br>For each test case, I will give you an Integer N(0&lt;N&lt;=100,000) in the first line, which means the number of stones on the road. Then followed by N lines and there are two integers Pi(0&lt;=Pi&lt;=100,000) and Di(0&lt;=Di&lt;=1,000) in the line, which means the position of the i-th stone and how far Sempr can throw it.<br>", output:"Just output one line for one test case, as described in the Description.<br>", sample_in:"2\n2\n1 5\n2 4\n2\n1 5\n6 6", sample_out:"11\n12", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:307, vtotal_submit:746, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"HDU 2008-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1897, vid:1897, oj:"hdu", title:"SnowWolf\'s Wine Shop", desc:"After retired from hustacm, Sempr(Liangjing Wang) find a part-time-job in Snowwolf(Wei Xu)\'s wine shop. There are different qualities of wine in the shop, and all of which has a rating describing the qualities. All the ratings are larger than 0 and smaller than 1,000,000. Everyday nearly Q people will go to his shop and buy a bottle of wine because of his kindness. Once a customer want an X qualified rating but there are no such one, Sempr will sell him a better one with the smallest rating. But the boss of the shop is Snowwolf, you know, so if no wine has no more than Y qualified ratings better than the customer\'s request, Sempr will say sorry to them. Every morning, Xiangsanzi will send N bottles of different or same qualified wine.<br>", input:"In the first line there is an Integer T(0&lt;T&lt;10), which means the number of test cases in the test file, then followed by T test cases. <br>For each test case; <br>In the first line, there are 3 Integers, N,Q and Y. <br>In the second line, there are N integers, which means the quality rating of each bottle of wines. <br>In the third line, there are Q integers, which means the requests of customers from dawn to dark. <br>Here, all the Integers are between 0 and 1,000,000 <br>", output:"For each test case, output &quot;Case I:&quot;, where I is the case number, then followed by Q different lines of integers, means the quality of wine Sempr will sell that time. If he could not sell any wine, just output -1.<br>", sample_in:"2\n2 3 3\n2 3\n1 2 3\n2 3 0\n2 3\n3 1 2", sample_out:"Case 1:\n2\n3\n-1\nCase 2:\n3\n-1\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:72, vtotal_submit:242, special_status:0, time_limit:5000, mem_limit:10240, hint:"", source:"HDU 2008-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1898, vid:1898, oj:"hdu", title:"Sempr == The Best Problem Solver?", desc:"As is known to all, Sempr(Liangjing Wang) had solved more than 1400 problems on POJ, but nobody know the days and nights he had spent on solving problems. <br>Xiangsanzi(Chen Zhou) was a perfect problem solver too. Now this is a story about them happened two years ago. <br>On March 2006, Sempr &amp; Xiangsanzi were new comers of hustacm team and both of them want to be &quot;The Best New Comers of March&quot;, so they spent days and nights solving problems on POJ. <br>Now the problem is below: Both of them are perfect problem solvers and they had the same speed, that is to say Sempr can solve the same amount of problems as Xiangsanzi, but Sempr enjoyed submitting all the problems at the end of every A hours but Xiangsanzi enjoyed submitting them at the end of every B hours. In these days, static(Xiaojun Wu) was the assistant coach of hustacm, and he would check the number of problems they solved at time T. Give you three integers A,B,and T, you should tell me who is &quot;The Best New Comers of March&quot;. If they solved the same amount of problems, output &quot;Both!&quot;. If Sempr or Xiangsanzi submitted at time T, static would wait them. <br>", input:"In the first line there is an integer N, which means the number of cases in the data file, followed by N lines. <br>For each line, there are 3 integers: A, B, T. <br>Be sure that A,B and N are no more than 10000 and T is no more than 100000000. <br>", output:"For each case of the input, you should output the answer for one line. If Sempr won, output &quot;Sempr!&quot;. If Xiangsanzi won, output &quot;Xiangsanzi!&quot;. And if both of them won, output &quot;Both!&quot;. <br>", sample_in:"3\n2 3 4\n2 3 6\n2 3 9", sample_out:"Sempr!\nBoth!\nXiangsanzi!", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:619, vtotal_submit:1049, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"HDU 2008-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1899, vid:1899, oj:"hdu", title:"Sum the K-th\'s", desc:"N integers are arranged on a circle clockwise. Given two integers M &amp; K. For each position, you should take M continuous integers on the left and M continuous integers on the right. Take out the K-th number of the 2M integers. Then you will get N integers. Add all the integers up and tell me the sum. If the answer is not smaller than 1,000,000,007, divide it by 1,000,000,007 and tell me the remainder.<br><br>", input:"There is an Integer T in the first line. Which means the number of test cases in the input file. Then followed by T test cases. <br>For each test case, in the first line there are 3 Integers N(5&lt;=N&lt;=100,000),M(0&lt;M*2&lt;N),K(0&lt;K&lt;＝2*M). Then there are N Integers, all the integers are non-negative Integers and smaller than 1,000,000,000. <br>", output:"For each test case, output the answer for a line.<br>", sample_in:"2\n5 2 2\n1 2 3 4 5\n5 1 2\n1 2 3 4 5", sample_out:"12\n21", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:23, vtotal_submit:172, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"HDU 2008-4 Programming Contest", author:"", tag:["TEST"]}
{pid:1900, vid:1900, oj:"hdu", title:"Gangs", desc:"The downtown core of Inner City is laid out as a grid, with numbered streets running north-south from 1st Street in the west to 20th Street in the east, and numbered avenues running east-west from 1st Avenue in the north to 20th Avenue in the south. The area is controlled by two gangs, the Blips and the Cruds. The boundary between their territory is the Green Line, running diagonally from the intersection of 1st Street and 1st Avenue to the intersection of 20th Street and 20th Avenue. The Blips control the area to the southwest of the Green Line, and the Cruds the area to the northeast. <br>To prove their virility, the Blips go on &quot;runs&quot; through Crud territory, starting at 1st Avenue and 1st Street and ending at a point on the Green Line that varies from night to night. A run may return to the Green Line in between but never crosses it. A run uses avenues only in the east direction and streets only in the south direction. Thus a run can be described by a string of E\'s and S\'s of length 2N-2; such a run ends at Nth Street and Nth Avenue. <br><br>The Blips judge the runs made on a given night (all of which have the same length) by how &quot;OG&quot; they are. A run R1 is more OG than a run R2 if and only if: <br><br>1) R2 returns to the Green Line for the first time at an earlier point than when R1 returns to the Green Line, or <br>2) R1 and R2 return to the Green Line at the same point, but the portion of R1 to that point (ignoring the initial E and final S) is more OG than the portion of R2 to that point (also ignoring the initial E and final S), or <br>3) R1 and R2 return to the Green Line at the same point and are identical to that point, but the rest of R1 is more OG than the rest of R2. <br>Examples corresponding to these three cases: <br>1) EESS is more OG than ESES. <br>2) EEESSS is more OG than EESESS <br>3) EESSEESS is more OG than EESSESES. <br>If all the runs of a given length are ordered according to how OG they are, then the rank of a run is its position in the resulting list. EESS has rank 1 and ESES has rank 2. <br>Your task is to write a program to help the Blips plan and judge their nightly activities. <br>", input:"The input to the program is a series of instances followed by 0 0. An instance consists of a line containing a positive integer N, representing the terminus of that night\'s run (Nth Street and Nth Avenue), followed by positive integer M. <br>", output:"The output corresponding to each instance is the run of length 2N-2 of rank M, or ERROR if there are fewer than M runs of length 2N-2. <br>", sample_in:"3 1\n3 2\n3 3\n0 0", sample_out:"EESS\nESES\nERROR", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8, vtotal_submit:45, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008-1杭电公开赛(非原创)", author:"", tag:["TEST"]}
{pid:1901, vid:1901, oj:"hdu", title:"Smeech", desc:"Professor Octastichs has invented a new programming language, Smeech. An expression in Smeech may be a positive or negative integer, or may be of the form (p e1 e2) where p is a real number between 0 and 1 (inclusive) and e1 and e2 are Smeech expressions. The value represented by a Smeech expression is as follows: <br>1) An integer represents itself <br>2) With probability p, (p e1 e2) represents x+y where x is the value of e1 and y is the value of e2; otherwise it represents x-y. <br>Given a Smeech expression, what is its expected value? ", input:"Input consists of several Smeech expressions, one per line, followed by a line containing (). <br>", output:"For each expression, output its expected value to two decimal places. <br>", sample_in:"7\n(.5 3 9)\n()", sample_out:"7.00\n3.00", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:56, vtotal_submit:284, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008-1杭电公开赛(非原创)", author:"", tag:["TEST"]}
{pid:1902, vid:1902, oj:"hdu", title:"The Dragon of Loowater", desc:"Once upon a time, in the Kingdom of Loowater, a minor nuisance turned into a major problem. <br>The shores of Rellau Creek in central Loowater had always been a prime breeding ground for geese. Due to the lack of predators, the geese population was out of control. The people of Loowater mostly kept clear of the geese. Occasionally, a goose would attack one of the people, and perhaps bite off a finger or two, but in general, the people tolerated the geese as a minor nuisance. <br><br>One day, a freak mutation occurred, and one of the geese spawned a multi-headed fire-breathing dragon. When the dragon grew up, he threatened to burn the Kingdom of Loowater to a crisp. Loowater had a major problem. The king was alarmed, and called on his knights to slay the dragon and save the kingdom. <br><br>The knights explained: &quot;To slay the dragon, we must chop off all its heads. Each knight can chop off one of the dragon\'s heads. The heads of the dragon are of different sizes. In order to chop off a head, a knight must be at least as tall as the diameter of the head. The knights\' union demands that for chopping off a head, a knight must be paid a wage equal to one gold coin for each centimetre of the knight\'s height.&quot; <br><br>Would there be enough knights to defeat the dragon? The king called on his advisors to help him decide how many and which knights to hire. After having lost a lot of money building Mir Park, the king wanted to minimize the expense of slaying the dragon. As one of the advisors, your job was to help the king. You took it very seriously: if you failed, you and the whole kingdom would be burnt to a crisp! <br>", input:"The input contains several test cases. The first line of each test case contains two integers between 1 and 20000 inclusive, indicating the number n of heads that the dragon has, and the number m of knights in the kingdom. The next n lines each contain an integer, and give the diameters of the dragon\'s heads, in centimetres. The following m lines each contain an integer, and specify the heights of the knights of Loowater, also in centimetres. <br>The last test case is followed by a line containing: <br>0 0<br>", output:"For each test case, output a line containing the minimum number of gold coins that the king needs to pay to slay the dragon. If it is not possible for the knights of Loowater to slay the dragon, output the line: <br>Loowater is doomed!<br>", sample_in:"2 3\n5\n4\n7\n8\n4\n2 1\n5\n5\n10\n0 0", sample_out:"11\nLoowater is doomed!", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:249, vtotal_submit:711, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008-1杭电公开赛(非原创)", author:"", tag:["TEST"]}
{pid:1903, vid:1903, oj:"hdu", title:"Exchange Rates", desc:"Now that the Loonie is hovering about par with the Greenback, you have decided to use your $1000 entrance scholarship to engage in currency speculation. So you gaze into a crystal ball which predicts the closing exchange rate between Canadian and U.S. dollars for each of the next several days. On any given day, you can switch all of your money from Canadian to U.S. dollars, or vice versa, at the prevailing exchange rate, less a 3% commission, less any fraction of a cent. <br>Assuming your crystal ball is correct, what\'s the maximum amount of money you can have, in Canadian dollars, when you\'re done? <br>", input:"The input contains a number of test cases, followed by a line containing 0. Each test case begins with 0 &lt;d &amp;#8804; 365, the number of days that your crystal ball can predict. d lines follow, giving the price of a U.S. dollar in Canadian dollars, as a real number. <br>", output:"For each test case, output a line giving the maximum amount of money, in Canadian dollars and cents, that it is possible to have at the end of the last prediction, assuming you may exchange money on any subset of the predicted days, in order. <br>", sample_in:"3\n1.0500\n0.9300\n0.9900\n2\n1.0500\n1.1000\n0", sample_out:"1001.60\n1000.00", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:77, vtotal_submit:277, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008-1杭电公开赛(非原创)", author:"", tag:["TEST"]}
{pid:1904, vid:1904, oj:"hdu", title:"Conformity", desc:"Frosh commencing their studies at Waterloo have diverse interests, as evidenced by their desire to take various combinations of courses from among those available. <br>University administrators are uncomfortable with this situation, and therefore wish to offer a conformity prize to frosh who choose one of the most popular combinations of courses. How many frosh will win the prize? <br><br>", input:"The input consists of several test cases followed by a line containing 0. Each test case begins with an integer 1 ≤ n ≤ 10000, the number of frosh. For each frosh, a line follows containing the course numbers of five distinct courses selected by the frosh. Each course number is an integer between 100 and 499. <br>", output:"The popularity of a combination is the number of frosh selecting exactly the same combination of courses. A combination of courses is considered most popular if no other combination has higher popularity. For each line of input, you should output a single line giving the total number of students taking some combination of courses that is most popular. <br><br>", sample_in:"3\n100 101 102 103 488\n100 200 300 101 102\n103 102 101 488 100\n3\n200 202 204 206 208\n123 234 345 456 321\n100 200 300 400 444\n0", sample_out:"2\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:84, vtotal_submit:277, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008-1杭电公开赛(非原创)", author:"", tag:["TEST"]}
{pid:1905, vid:1905, oj:"hdu", title:"Pseudoprime numbers", desc:"Fermat\'s theorem states that for any prime number p and for any integer a &gt; 1, a^p == a (mod p). That is, if we raise a to the pth power and divide by p, the remainder is a. Some (but not very many) non-prime values of p, known as base-a pseudoprimes, have this property for some a. (And some, known as Carmichael Numbers, are base-a pseudoprimes for all a.) <br>Given 2 &lt; p ≤ 1,000,000,000 and 1 &lt; a &lt; p, determine whether or not p is a base-a pseudoprime. <br>", input:"Input contains several test cases followed by a line containing &quot;0 0&quot;. Each test case consists of a line containing p and a.", output:"For each test case, output &quot;yes&quot; if p is a base-a pseudoprime; otherwise output &quot;no&quot;. <br>", sample_in:"3 2\n10 3\n341 2\n341 3\n1105 2\n1105 3\n0 0", sample_out:"no\nno\nyes\nno\nyes\nyes", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:401, vtotal_submit:1763, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008-1杭电公开赛(非原创)", author:"", tag:["TEST"]}
{pid:1906, vid:1906, oj:"hdu", title:"Carpool(粗体部分为修正过的地方)", desc:"A group of friends has just completed their CS assignments, and because of the nice weather, they decide to go to Joe\'s house for a BBQ. Unfortunately, after all that coding, they are too tired to walk. Fortunately, between them they have enough cars to take everyone. <br>Joe remembers that he needs to stop off at the supermarket along the way to buy some burgers and pop. <br><br>Jenn proposes that they stop at her house to get a frisbee. <br><br>Jim decides that he doesn\'t like burgers, and wants to grab a pizza along the way. <br><br>After having spent so long in the computer lab, Jerry\'s eyes have become very sensitive to sunlight, so he needs to stop at his house for his sunglasses. <br><br>And so it goes: each person needs to run a little errand along the way. At this rate, the friends worry that it will be dark by the time they get to Joe\'s house. They launch into a heated discussion to about who should go in which car to minimize the time needed for everyone to reach Joe\'s house. The discussion itself, of course, wastes precious time that could be better spent at the BBQ. <br><br>To help the group, you will write a program to settle the discussion by computing an optimal assignment of people to cars. The overall travel time is the maximum of the travel times of each car. An optimal assignment is one that minimizes the overall travel time. <br><br>Your program will be provided with a representation of the roads in the city, in the form of distances between major landmarks. Assume that every car always travels at 60 kilometres per hour (one kilometre per minute). Each stop (at a supermarket, someone\'s house, etc.) takes five minutes. <br><br>Although the friends have many cars between them, to be nice to the environment, they decide to take no more cars than necessary. Each car can take at most five people. <br>", input:"The first line of input contains two integers n and m, <b>1 &lt;= n &lt;= 15, 1 &lt;= m &lt;= 1000</b>, the number of people in the group and the number of roads in the city. The places that must be visited along the way are numbered 1 through n. The campus is numbered 0, and Joe\'s house is numbered n+1. An additional m lines follow, each containing three integers describing a stretch of road. The first two integers are in the range 0 to n+1 inclusive, and describe the two places connected by the stretch of road. The third integer specifies the length of the stretch of road, in kilometres. A road may be taken in both directions. There is a sequence of roads connecting every place in the city to every other place. <br><br>", output:"Output a single integer, giving the number of minutes required for everyone to reach Joe\'s house using an optimal assignment of people to cars. <br><br>", sample_in:"1 2\n0 1 15\n1 2 10", sample_out:"30", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4, vtotal_submit:36, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008-1杭电公开赛(非原创)", author:"", tag:["TEST"]}
{pid:1907, vid:1907, oj:"hdu", title:"John", desc:"Little John is playing very funny game with his younger brother. There is one big box filled with M&amp;Ms of different colors. At first John has to eat several M&amp;Ms of the same color. Then his opponent has to make a turn. And so on. Please note that each player has to eat at least one M&amp;M during his turn. If John (or his brother) will eat the last M&amp;M from the box he will be considered as a looser and he will have to buy a new candy box.<br><br>Both of players are using optimal game strategy. John starts first always. You will be given information about M&amp;Ms and your task is to determine a winner of such a beautiful game.<br><br>", input:"The first line of input will contain a single integer T – the number of test cases. Next T pairs of lines will describe tests in a following format. The first line of each test will contain an integer N – the amount of different M&amp;M colors in a box. Next line will contain N integers Ai, separated by spaces – amount of M&amp;Ms of i-th color.<br><br>Constraints:<br>1 &lt;= T &lt;= 474,<br>1 &lt;= N &lt;= 47,<br>1 &lt;= Ai &lt;= 4747<br><br>", output:"Output T lines each of them containing information about game winner. Print “John” if John will win the game or “Brother” in other case.<br><br>", sample_in:"2\n3\n3 5 1\n1\n1", sample_out:"John\nBrother", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:999, vtotal_submit:2450, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southeastern Europe 2007", author:"", tag:["TEST"]}
{pid:1908, vid:1908, oj:"hdu", title:"Double Queue", desc:"The new founded Balkan Investment Group Bank (BIG-Bank) opened a new office in Bucharest, equipped with a modern computing environment provided by IBM Romania, and using modern information technologies. As usual, each client of the bank is identified by a positive integer K and, upon arriving to the bank for some services, he or she receives a positive integer priority P. One of the inventions of the young managers of the bank shocked the software engineer of the serving system. They proposed to break the tradition by sometimes calling the serving desk with the lowest priority instead of that with the highest priority. Thus, the system will receive the following types of request:<br><br>Your task is to help the software engineer of the bank by writing a program to implement the requested serving policy.<br><br>", input:"Each line of the input contains one of the possible requests; only the last line contains the stop-request (code 0). You may assume that when there is a request to include a new client in the list (code 1), there is no other request in the list of the same client or with the same priority. An identifier K is always less than 10<sup>6</sup>, and a priority P is less than 10<sup>7</sup>. The client may arrive for being served multiple times, and each time may obtain a different priority.<br><br>", output:"For each request with code 2 or 3, the program has to print, in a separate line of the standard output, the identifier of the served client. If the request arrives when the waiting list is empty, then the program prints zero (0) to the output.<br><br>", sample_in:"2\n1 20 14\n1 30 3\n2\n1 10 99\n3\n2\n2\n0", sample_out:"0\n20\n30\n10\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:226, vtotal_submit:832, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southeastern Europe 2007", author:"", tag:["TEST"]}
{pid:1909, vid:1909, oj:"hdu", title:"‘JBC’", desc:"Life can be taught, but sometimes simple problems are just very well hidden among difficult ones. Once identifying those simple problems you are almost on a half way of solving them as well as making one big step towards winning the contest. Just be careful, this is NOT the simplest problem!<br><br>Are you ready for that challenge?<br><br>Your task is to write a program that transforms numbers from various numeric systems to decade one (base=10).<br><br>", input:"Input file consists from multiple data sets separated by one or more empty lines.<br><br>First line of each set contains definition of digit ordering for some hypothetical numerical system. All ASCII printable characters (codes greater than 0x20 (space)) are allowed to appear as digits, and they are sorted according to increased decimal value (starting from zero).<br><br>Each line of the input data set (starting from second one) is one number coded with previously defined digits. Such numbers can have multiple decade interpretations (taking different base for hypothetical system) and your task is to find sum of all possible interpretations.<br><br>Explanation: If we define digit ordering as “0123456789” possible bases are 2..10 but number “6201” can be decoded only in systems with base 7..10.<br><br>Input lines can contain white space characters on both ends which should be ignored.<br><br>", output:"You are required to output one decimal number per each number from input data sets. That number represents sum of decimal representations for all valid numeric system bases.<br><br>Output data sets should be separated by one blank line.<br><br>", sample_in:"0123456789\n 90763\n1\n\n.1>C\nCC.\n>.1\n1....", sample_out:"90763\n9\n\n60\n52\n353", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:18, vtotal_submit:133, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southeastern Europe 2007", author:"", tag:["TEST"]}
{pid:1910, vid:1910, oj:"hdu", title:"Loan Scheduling", desc:"", input:"", output:"", sample_in:"", sample_out:"", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:21, vtotal_submit:41, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"", author:"", tag:["TEST"]}
{pid:1911, vid:1911, oj:"hdu", title:"Showstopper", desc:"Data-mining huge data sets can be a painful and long lasting process if we are not aware of tiny patterns existing within those data sets.<br><br>One reputable company has recently discovered a tiny bug in their hardware video processing solution and they are trying to create software workaround. To achieve maximum performance they use their chips in pairs and all data objects in memory should have even number of references. Under certain circumstances this rule became violated and exactly one data object is referred by odd number of references. They are ready to launch product and this is the only showstopper they have. They need YOU to help them resolve this critical issue in most efficient way.<br><br>Can you help them?", input:"Input file consists from multiple data sets separated by one or more empty lines.<br><br>Each data set represents a sequence of 32-bit (positive) integers (references) which are stored in compressed way.<br><br>Each line of input set consists from three single space separated 32-bit (positive) integers X Y Z and they represent following sequence of references: X, X+Z, X+2*Z, X+3*Z, …, X+K*Z, …(while (X+K*Z)&lt;=Y).<br><br>Your task is to data-mine input data and for each set determine weather data were corrupted, which reference is occurring odd number of times, and count that reference.<br><br>", output:"For each input data set you should print to standard output new line of text with either “no corruption” (low case) or two integers separated by single space (first one is reference that occurs odd number of times and second one is count of that reference).<br><br>", sample_in:"1 10 1\n2 10 1\n\n1 10 1\n1 10 1\n\n1 10 1\n4 4 1\n1 5 1\n6 10 1", sample_out:"1 1\nno corruption\n4 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:18, vtotal_submit:62, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southeastern Europe 2007", author:"", tag:["TEST"]}
{pid:1912, vid:1912, oj:"hdu", title:"Highway", desc:"Bob is a skilled engineer. He must design a highway that crosses a region with few villages. Since this region is quite unpopulated, he wants to minimize the number of exits from the highway. He models the highway as a line segment S (starting from zero), the villages as points on a plane, and the exits as points on S. Considering that the highway and the villages position are known, Bob must find the minimum number of exists such that each village location is at most at the distance D from at least one exit. He knows that all village locations are at most at the distance D from S.<br>", input:"The program input is from a text file. Each data set in the file stands for a particular set of a highway and the positions of the villages. The data set starts with the length L (fits an integer) of the highway. Follows the distance D (fits an integer), the number N of villages, and for each village the location (x,y). The program prints the minimum number of exits.<br><br>White spaces can occur freely in the input. The input data are correct and terminate with an end of file.<br><br>", output:"<br>For each set of data the program prints the result to the standard output from the beginning of a line. An input/output sample is in the table below. There is a single data set. The highway length L is 100, the distance D is 50. There are 3 villages having the locations (2, 4), (50, 10), (70, 30). The result for the data set is the minimum number of exits: 1.<br><br>", sample_in:"100\n50\n3\n2 4\n50 10\n70 30", sample_out:"1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:36, vtotal_submit:94, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southeastern Europe 2007", author:"", tag:["TEST"]}
{pid:1913, vid:1913, oj:"hdu", title:"Computers", desc:"Everybody is fond of computers, but buying a new one is always a money challenge. Fortunately, there is always a convenient way to deal with. You can replace your computer and get a brand new one, thus saving some maintenance cost. Of course, you must pay a fixed cost for each new computer you get.<br><br>Suppose you are considering an n year period over which you want to have a computer. Suppose you buy a new computer in year y, 1&lt;=y&lt;=n Then you have to pay a fixed cost c, in the year y, and a maintenance cost m(y,z) each year you own that computer, starting from year y through the year z, z&lt;=n, when you plan to buy - eventually - another computer.<br><br>Write a program that computes the minimum cost of having a computer over the n year period.<br><br>", input:"The program input is from a text file. Each data set in the file stands for a particular set of costs. A data set starts with the cost c for getting a new computer. Follows the number n of years, and the maintenance costs m(y,z), y=1..n, z=y..n. The program prints the minimum cost of having a computer throughout the n year period.<br><br>White spaces can occur freely in the input. The input data are correct and terminate with an end of file.<br>", output:"For each set of data the program prints the result to the standard output from the beginning of a line.<br><br>", sample_in:"3\n3\n5 7 50\n6 8\n10", sample_out:"19\n\n<div style=\'font-family:Times New Roman;font-size:14px;background-color:F4FBFF;border:#B7CBFF 1px dashed;padding:6px\'><div style=\'font-family:Arial;font-weight:bold;color:#7CA9ED;border-bottom:#B7CBFF 1px dashed\'><i>Hint</i></div>\n\nAn input/output sample is shown above. There is a single data set. The cost for getting a new computer is c=3. The time period n is n=3 years, and the maintenance costs are:\n\nFor the first computer, which is certainly bought: m(1,1)=5, m(1,2)=7, m(1,3)=50,\nFor the second computer, in the event the current computer is replaced: m(2,2)=6, m(2,3)=8,\nFor the third computer, in the event the current computer is replaced: m(3,3)=10.\n</div><i style=\'font-size:1px\'> </i>", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:125, vtotal_submit:480, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southeastern Europe 2007", author:"", tag:["TEST"]}
{pid:1914, vid:1914, oj:"hdu", title:"The Stable Marriage Problem", desc:"The stable marriage problem consists of matching members of two different sets according to the member’s preferences for the other set’s members. The input for our problem consists of:<br><br>   a set M of n males;<br>   a set F of n females;<br><br>for each male and female we have a list of all the members of the opposite gender in order of preference (from the most preferable to the least).<br>A marriage is a one-to-one mapping between males and females. A marriage is called stable, if there is no pair (m, f) such that f ∈ F prefers m ∈ M to her current partner and m prefers f over his current partner. The stable marriage A is called male-optimal if there is no other stable marriage B, where any male matches a female he prefers more than the one assigned in A.<br><br>Given preferable lists of males and females, you must find the male-optimal stable marriage.<br><br>", input:"The first line gives you the number of tests. The first line of each test case contains integer n (0 &lt; n &lt; 27). Next line describes n male and n female names. Male name is a lowercase letter, female name is an upper-case letter. Then go n lines, that describe preferable lists for males. Next n lines describe preferable lists for females.<br><br>", output:"For each test case find and print the pairs of the stable marriage, which is male-optimal. The pairs in each test case must be printed in lexicographical order of their male names as shown in sample output. Output an empty line between test cases.<br><br>", sample_in:"2\n3\na b c A B C\na:BAC\nb:BAC\nc:ACB\nA:acb\nB:bac\nC:cab\n3\na b c A B C\na:ABC\nb:ABC\nc:BCA\nA:bac\nB:acb\nC:abc", sample_out:"a A\nb B\nc C\n\na B\nb A\nc C", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:155, vtotal_submit:371, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southeastern Europe 2007", author:"", tag:["TEST"]}
{pid:1915, vid:1915, oj:"hdu", title:"Arne Saknussemm", desc:"Following the account of Jules Verne, a scrambled message written by the middle age alchemist Arne Saknussemm, and deciphered by professor Lidenbrock, started the incredible travel to the center of the Earth. The scrambling procedure used by Arne is alike the procedure given below.<br><br>1. Take a non empty message M that contains letters from the English alphabet, digits, commas, dots, quotes (i.e. \'), spaces and line breaks, and whose last character is different than space. For example, consider the following message whose translation reads &quot;In Sneffels\'s crater descend brave traveler, and touch the center of the Earth&quot;.<br><br>In Sneffels craterem descende audasviator, et terrestre centrum attinges.<br> <br>2. Choose an integral number 0&lt;K≤length(M) and add trailing spaces to M such that the length of the resulting message, say M\', is the least multiple of K. For K=19 and the message above, where length(M)=74 (including the 8 spaces and the line break that M contains), two trailing spaces are added yielding the message M\' with length(M\')=76.<br><br>3. Replace all the spaces from M\' by the character _ (underscore) ; replace all the line breaks from M\' by \\ (backslash), and then reverse the message. In our case:<br><br>__.segnitta_murtnec_ertserret_te_,rotaiv\\sadua_ednecsed_meretarc_sleffenS_nI<br> <br><br>4. Write the message that results from step 3 in a table with length(M\')/K rows and K columns. The writing is column wise. For the given example, the message is written in a table with 76/19=4 rows and 19 columns as follows:<br>[缺少图片]<br><br>5. The strings of characters that correspond to the rows of the table are the fragments of the scrambled message. The 4 fragments of Arne\'s message given in step 1 are:<br><br>_etmneet_t\\udsmt_fS.narctrtria_edrrlen<br> _gtuerr_,asaneeasf_si_t_seeovdec_ecenI<br> <br><br>Write a program that deciphers non empty messages scrambled as described. The length of a message, before scrambling, is at most 1000 characters, including spaces and line breaks.<br><br>", input:"The program input is from a text file where each data set corresponds to a scrambled message. A data set starts with an integer n, that shows the number of fragments of the scrambled message, and continues with n strings of characters that designate the fragments, in the order they appear in the table from step 4 of the scrambling procedure. Input data are separated by white-spaces and terminate with an end of file.<br><br>", output:"The deciphered message must be printed on the standard output, from the beginning of a line and must be followed by an empty line as shown in the input/output sample below.<br><br>", sample_in:"4  _etmneet_t\\udsmt_fS\n   _gtuerr_,asaneeasf_\n   .narctrtria_edrrlen\n   si_t_seeovdec_ecenI\n11 e n r e V _ s e l u J", sample_out:"In Sneffels craterem descende audas\nviator, et terrestre centrum attinges.\n\nJules Verne", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:73, vtotal_submit:296, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"Southeastern Europe 2007", author:"", tag:["TEST"]}
{pid:1916, vid:1916, oj:"hdu", title:"Hardware", desc:"Ola Clason’s Hardware store is an old company where most work is done “the old way”. Among other things, the company is the one and only provider of marble house numbers. These house numbers have become extremely popular among construction companies, especially the ones building luxury estates. This is of course great for Ola Clason, but also a small problem. Nisse, who has been managing the incoming orders has turned out to be a bottleneck in Ola’s business. Most orders are on the form “Coconut Drive 200, 202, 204, ..., 220”. This means every even number between 200 and 220. Nisse’s work is to transfer an order to a list of necessary digits and other symbols. <br><br>Your assignment is to write a program that automates Nisse’s work with orders containing only positive integer house numbers. Nisse will still in the future process all special orders (those including non digit symbols) by hand.<br>", input:"On the first line of input is a single positive integer n, specifying the number of orders that follow. The first line of each order contains the road name for that order. No road name is longer than 50 characters. The second line states the total number of buildings needing new marble numbers on that order. Then follows the different house number specifications on several lines. These lines are of two kinds: single number lines and multiple number lines. A single number line simply consists of the house number by itself, while a multiple number line starts with a “+”-sign, followed by three positive integer numbers: first number, last number and the interval between the house numbers. The distance between the first and last house number will always be a multiple of the house number interval. A house number will never have more than five digits. After the last house number specification line, the next order follows, if there is any.<br>", output:"For each order, the output consists of 13 lines. The first and second lines should be identical with the first two input lines. Then, there follows 10 lines with information on how many marble digits of each kind the order consists of. These rows are on the format “Make X digit Y” where X is how many copies of digit Y they need to make. The last row states the total number Z of digits needed, on the format “In total Z digits”. If there is only one digit to produce, it should say “In total 1 digit”, in order to be grammatically correct. <br><br>", sample_in:"1\nShort Street\n23 addresses\n+ 101 125 2\n275\n+ 100 900 100", sample_out:"Short Street\n23 addresses\nMake 23 digit 0\nMake 22 digit 1\nMake 5 digit 2\nMake 4 digit 3\nMake 1 digit 4\nMake 5 digit 5\nMake 1 digit 6\nMake 4 digit 7\nMake 1 digit 8\nMake 3 digit 9\nIn total 69 digits", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:12, vtotal_submit:65, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NM2003", author:"", tag:["TEST"]}
No Such Problem Called HDU 1917.<br>
{pid:1918, vid:1918, oj:"hdu", title:"Frogger", desc:"“Frogger” was one of the first really popular arcade games after it was introduced by SEGA in 1981. The game consists of helping a frog cross a multi-lane motorway without getting run over by a car. You are given a view of an n-lane motorway where each lane consists of m different spaces<br>that can either be empty or be occupied by a car. On each side of the motorway is a curb on which the frog can move freely. In the traffic lanes the frog can only move on the spaces not occupied by cars. The motorway is constructed in such a way that the direction in which the cars travel<br>alternates between the lanes, with cars in the first lane (the one closest to the starting point of the frog) moving to the right. The cars never switch lanes and only move one step forward in each turn. To ensure a steady supply of traffic, a car that reaches the boundary of its lane is reentered at the opposite end of its lane.<br>[/图片/]<br>  In one turn of the game all the cars move one step in their assigned direction while the frog can either move one step to the right or to the left, or one step up or down (between lanes or between the curb and the adjoining lane), or it can stand still. Contrary to the cars the frog cannot “wrap-around” i.e. move in one step between the first and last position of a lane or a curb.<br><br>  The frog and the cars move simultaneously. Thus the frog can move to a space given that there will be no car on it in the next round. If the frog is on the same space at the same time as a car it is run over and dies. Note that the frog can jump over an adjacent approaching car in the same lane as itself.<br><br>Your job is to write a computer program that will calculate the minimum number of turns needed for the frog to get from its starting position on the curb to its final position on the curb on the other side of the road or to determine that this is not possible within a given number of rounds.<br>", input:"First there will be a line containing the number of scenarios you are asked to help the frog in. For each scenario there will first be a line containing a positive integer x &lt;= 10^5 giving the maximum number of rounds that can be used. The next line contains the number of lanes n, 1 &lt;= n &lt;= 20, and the length of each lane m, 1 &lt;= m &lt;=50. Each of the next n + 2 lines will contain a string of m characters. The character X indicates a car, the character O (letter O) indicates a free space, the character F gives the starting position of the frog, and the character G gives the final destination of the frog. The first line indicates the destination curb, consisting of O’s and exactly one G while the last line gives the starting curb consisting of O’s and exactly one F, while the intermediate lines each represent one lane of the motorway.", output:"The output will be one line per scenario, either giving the minimum number of turns needed before the frog can get from its starting position to the final position without getting run over by a car or a statement indicating that this was not possible within the maximum number of allowed turns.", sample_in:"2\n10\n4 4\nOOGO\nXXOO\nXOOX\nXXOO\nXXOO\nOOFO\n2\n2 2\nOG\nXX\nOO\nFO", sample_out:"The minimum number of turns is 9.\nThe problem has no solution.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:7, vtotal_submit:14, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NM2003", author:"", tag:["TEST"]}
{pid:1919, vid:1919, oj:"hdu", title:"Gallup", desc:"Often, we see results of gallups, like this:<br>Prefer red: 3.5%<br>Prefer green: 4.5%<br>Prefer yellow: 22.0%<br>Prefer blue: 70.0%<br><br>and you begin to wonder: how many people did they really ask? If the numbers are simple, like 20%, 40%, and 40%, you know that they asked 5 people (or 10, or 15, or more, but we are  interested in the minimum number of people).<br><br>Your task is to write a program that reads sets of percentages and calculates the smallest number of people that could produce the given percentages. We know that this number is always less than 10 000.", input:"The input is a set of percentages. Each set is on a line of its own. Every line starts with an integer n (0 &lt;= n &lt;= 20) giving the number of percentages in the set. If n &gt; 0, the percentages follow as n numbers; these numbers may have 0–5 decimals, and all percentages in a set have the same number of decimals. (If there are no decimals, there is no decimal point.) The percentages always add up to about 100% as there may be small rounding errors. Numbers are rounded when digits are removed; they are rounded upwards if the first removed digit is 5 or more. Thus, 4.472 is rounded to 4.47, 4.5, or 4, depending on how many digits you want.", output:"For each set of data, print a line starting with “Case i :”, where “i” is the data set’s number. Then follows a space and an integer giving the computed number of people. If no legal answer in the range 1–9999 exists, print “error” instead of the number.", sample_in:"3 20 40 40\n3 33.3 33.3 33.3\n2 33 67\n1 100.0000\n4 3.75 4.25 22.00 70.00\n2 49 51\n2 50 51\n2 49 50\n0", sample_out:"Case 1: 5\nCase 2: 3\nCase 3: 3\nCase 4: 1\nCase 5: 400\nCase 6: 35\nCase 7: 200\nCase 8: error", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:7, vtotal_submit:14, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NM2003", author:"", tag:["TEST"]}
{pid:1920, vid:1920, oj:"hdu", title:"Jackpot", desc:"Bill has found the perfect way to make money playing the slot machines. After months of careful research, he has finally figured out the mechanics behind how the machines operate. Now he is ready to make profit of his findings.<br><br>But first an introduction to the game. A slot machine consists of a number of wheels, usually three or four, each with a number of symbols printed on it – cherries, oranges, bells, etc. – and will show one of its symbols at a given time. To play, you insert a coin, push a button and<br>the wheels start spinning. After spinning for a while, each wheel stops – at random it seems – at one of its symbols. If all wheels stop at the same symbol, or some nice combination of symbols, the player wins. One combination that is especially desirable is having the jackpot symbol on all wheels. This combination is simply called ’jackpot’ and will make you rich for life.<br><br>What Bill has discovered is that each wheel will stop at the jackpot symbol with a certain periodicity, which differs a lot between wheels. He has also figured out (after some sneeking around at the slot-machine factory) that all newly manufactured slot-machines are delivered showing the jackpot combination, and that they all have a counter at the back, telling how many times the machine has been played. This counter is always set to zero at delivery.<br><br>Now, all Bill needs to do is to calculate the number of times a machine has to be played between two occurrences of the jackpot combination. We will call this number the jackpot periodicity. This is of course the same as the number of times the machine has to be played after leaving the factory, before it gives its first jackpot. Thus, with a glance at the counter on the back of a machine, Bill can figure out if it is about to give a jackpot. As Bill knows that you are a skillful computer programmer, he turns to you with the problem of calculating the jackpot periodicity. For each machine, he will give you the number of wheels, and the periodicity with<br>which the jackpot symbol shows up on each wheel.", input:"One line with the number of machines n &lt;= 20. For each machine, one line with the number of wheels w &lt;= 5, and one line with w numbers, p1,p2,....pw,the periodicity of each wheel pk&lt;=1000.", output:"One line per machine: The jackpot periodicity of the machine, if it is less than or equal to a billion (10^9), otherwise output the text ’More than a billion.’.", sample_in:"1\n3\n10 6 15", sample_out:"30", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:24, vtotal_submit:51, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NM2003", author:"", tag:["TEST"]}
No Such Problem Called HDU 1921.<br>
{pid:1922, vid:1922, oj:"hdu", title:"Subway planning", desc:"The government in a foreign country is looking into the possibility of establishing a subway system in its capital. Because of practical reasons, they would like each subway line to start at the central station and then go in a straight line in some angle as far as necessary. You have been hired to investigate whether such an approach is feasible. Given the coordinates of important places in the city as well as the maximum distance these places can be from a subway station (possibly the central station, which is already built), your job is to calculate the minimum number of subway lines needed. You may assume that any number of subway stations can be<br>built along a subway line.<br><img src=data/images/1922-1.jpg><br>Figure 1: The figure above corresponds to the first data set in the example input.", input:"The first line in the input file contains an integer N, the number of data sets to follow. Each set starts with two integers, n and d (1 &lt;= n &lt;= 500, 0 &lt;= d &lt; 150). n is the number of important places in the city that must have a subway station nearby, and d is the maximum distance allowed<br>between an important place and a subway station. Then comes n lines, each line containing two integers x and y (-100 &lt;= x, y &lt;= 100), the coordinates of an important place in the capital. The central station will always have coordinates 0, 0. All pairs of coordinates within a data set<br>will be distinct (and none will be 0, 0).", output:"For each data set, output a single integer on a line by itself: the minimum number of subway lines needed to make sure all important places in the city is at a distance of at most d from a subway station.", sample_in:"2\n7 1\n-1 -4\n-3 1\n-3 -1\n2 3\n2 4\n2 -2\n6 -2\n4 0\n0 4\n-12 18\n0 27\n-34 51", sample_out:"4\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:17, vtotal_submit:83, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NM2003", author:"", tag:["TEST"]}
{pid:1923, vid:1923, oj:"hdu", title:"Exploding CPU", desc:"The well known hardware manufacturing company Processors for Professors is about to release a highly specialized CPU with exceptional functionality in, amongst other areas, number theory. It has, for example, an instruction PFACT that takes one parameter and returns all prime factors of that parameter, with an outstanding execution speed. It has, however, one considerable problem. The scientists at the testing lab has just found out that the PFACT instruction for some special input values freaks out and makes the entire processor explode. Even though this could be an amusing effect, it is not the way it was intended to work. The skilled mathematicians have, by trial and error, found that the explosive numbers all share the same interesting number theoretic properties, which might be of help when troubleshooting.<br><br>An explosive number is a number <img src=data/images/1923-1.gif> where all <img src=data/images/1923-2.gif>s are distinct prime numbers such that <img src=data/images/1923-3.gif>. A and B are always integers, and might be different for different explosive numbers.<br><br>For example, the processor will explode when factorizing the number 4505, because 4505 = 1*5*17*53 and 5 = 3*1+2, 17 = 3*5+2 and 53 = 3*17+2 and the numbers 5, 17 and 53 are all prime numbers. In this case A = 3 and B = 2.<br><br>You are kindly asked to write a computer program that will aid this company in estimating the impact of the errors, by calculating the amount of explosive numbers that exists within a given range of integers.", input:"The input starts with a row containing the number 0 &lt;= N &lt;= 100 of test cases that will follow. For each test case, there will be one row containing two integers, <img src=data/images/1923-4.gif> separated by a single space. These numbers are such that <img src=data/images/1923-5.gif>.", output:"For each test case, output the number of explosive numbers that exist in<br>the range <img src=data/images/1923-6.gif>.", sample_in:"2\n4505 4505\n0 5000", sample_out:"1\n5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:18, vtotal_submit:73, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NM2003", author:"", tag:["TEST"]}
{pid:1924, vid:1924, oj:"hdu", title:"CIVIC DILL MIX", desc:"Roman numerals are an ancient numbering system used extensively throughout Europe through the 13th century (where it was eventually replaced by our current positional system). Vestiges of this system still exist today on clock faces, building cornerstones, Super Bowls and Star Wars episodes. The system uses the following 7 symbols:<br><img src=http://acm.hdu.edu.cn/forum/attachment/11_237_63fed94cf0cc6be.jpg><br>Symbols I, X, C and M can be repeated as needed (though never more than three times for I, X and C), so that 3 is represented as III, 27 as XXVII and 4865 as MMMMDCCCLXV. The symbols are always written from the highest value to the lowest, but for one exception: if a lower symbol precedes a higher one, it is subtracted from the higher. Thus 4 is written not as IIII but as IV, and 900 is written as CM. The rules for this subtractive behavior are the following:<br>1. Only I, X and C can be subtracted.<br>2. These numbers can only appear once in their subtractive versions (e.g., you can’t write 8 as IIX).<br>3. Each can only come before symbols that are no larger than 10 times their value. Thus we can not write IC for 99 or XD for 490 (these would be XCIX and CDXC, respectively). Note that the first two words in this problem title are invalid Roman numerals, but the third is fine.<br>Your task for this problem is simple: read in a set of Roman numeral values and output their sum as a Roman numeral.<br>", input:"Input will consist of multiple test cases. Each test case starts with a positive integer n indicating the number of values to add. After this will come n values (potentially several on a line), all valid Roman numerals with whitespace only coming between values. A value of n = 0 will indicate end of input. All sums will be less than 5000.", output:"For each test case, output the case number and the sum, both as Roman numerals, using the format shown below. Case numbers should start at I.", sample_in:"2\nXII MDL\n4\nI I I\nI\n0", sample_out:"Case I: MDLXII\nCase II: IV", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:83, vtotal_submit:152, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007 East Central North America", author:"", tag:["TEST"]}
{pid:1925, vid:1925, oj:"hdu", title:"A Foldy but a Goody", desc:"Suppose you have a strip of paper and are given instructions to fold the paper in one of two ways: an upper fold, where the right end of the paper is brought over to the top of the left end; and a lower fold, where the right end of the paper is brought below the left end. The diagram below illustrates both types of folds.<br><img src=http://acm.hdu.edu.cn/forum/attachment/11_237_47a1e1f8e2d16ad.jpg><br>Now, after meticulously folding the strip several times, you are asked to unfold it by making a 90 degree angle at each crease. The example below shows the result of an upper fold, followed by a lower fold and then an unfolding.<br><img src=http://acm.hdu.edu.cn/forum/attachment/11_237_c1a3e4cf5b00467.jpg><br>If the left end of the folded strip is placed at the origin (0,0) and the first right angle is at (1,0), it is natural to ask the questions: Where will the second right angle be located? The third right angle? Where will the other end of the strip be located? Well, that’s for us to know and you to figure out.<br>", input:"The input file will contain multiple test cases. The first line of the file will contain a single integer indicating the number of test cases. Each case will consist of a string of letters U and L indicating a series of upper and lower folds followed by an integer m. The length of the string will be between 1 and 30, inclusive. The value of m identifies a position on the paper. A value of m = 0 indicates the left end (at location (0, 0)). If there are n folds, then a value of m = 2<sup>n</sup> indicates the right end of the strip. Any value for m between these two extremes represents one of the right angles; m = 1 indicates the first right angle, and so on.", output:"For each test case, output a single line of the form (x,y) indicating the location of the right angle (or end point) specified by the problem. You should assume that if there are n folds in the test case, the length of the string is 2<sup>n</sup> so that the distance between creases is 1 unit long.", sample_in:"3\nUL 4\nUL 3\nLLUL 13", sample_out:"(2,0)\n(2,-1)\n(1,-2)", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:20, vtotal_submit:41, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007 East Central North America", author:"", tag:["TEST"]}
{pid:1926, vid:1926, oj:"hdu", title:"Give Me an E", desc:"Everyone knows that the letter “E” is the most frequent letter in the English language. In fact, there are one hundred sixteen E’s on this very page ... no, make that one hundred twenty one. Indeed, when spelling out integers it is interesting to see which ones do NOT use the letter “E”. For example 6030 (six thousand thirty) doesn’t. Nor does 4002064 (four million two thousand sixty four).<br>It turns out that 6030 is the 64th positive integer that does not use an “E” when spelled out and<br>4002064 is the 838th such number. Your job is to find the n-th such number.<br>Note: 1,001,001,001,001,001,001,001,001,000 is “one octillion, one septillion, one sextillion, one quintil-lion, one quadrillion, one trillion, one billion, one million, one thousand”. (Whew!)<br>", input:"The input file will consist of multiple test cases. Each input case will consist of one positive integer n (less than 2<sup>31</sup>) on a line. A 0 indicates end-of-input. (There will be no commas in the input.)", output:"For each input n you will print, with appropriate commas, the n-th positive integer whose spelling does not use an “E”. You may assume that all answers are less than 10<sup>28</sup>.", sample_in:"1\n10\n838\n0", sample_out:"2\n44\n4,002,064", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:31, vtotal_submit:85, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007 East Central North America", author:"", tag:["TEST"]}
{pid:1927, vid:1927, oj:"hdu", title:"Lemmings, Lemmings Everywhere. But Not For Long.", desc:"On an n * m board there is a lemming on each square. Every second, the lemmings try to move either north, south, east or west, according to rules which are explained below. To determine which direction to move in, each lemming has an agenda, which is an ordering of the four possible directions (for example, one possible agenda might be NWES). The rules for lemming movement are the following:<br>1. Initially each lemming sets its direction of movement D to the first direction in its agenda.<br>2. At each time step, each lemming tries to move in its direction D. Three things can happen to lemming L:<br>(a) If L\'s current direction D causes it to move off the board, then the world has one less lemming in it. Otherwise, L\'s target destination will be to another square.<br>(b) If L\'s target square is empty or about to become empty as a result of another lemming leaving it, and no other lemming wants to move to the same square, then L moves into its target square. In this case, the lemming will use the same direction D in the next time step.<br>(c) Otherwise, if another lemming is trying to move into L\'s target square, or if the target square contains a lemming which cannot move, then L stays put. In this case, it will update its D by going to the next direction in its agenda (wrapping around to the beginning if necessary).<br>Two lemmings which want to exchange squares can do so, unless of course some other lemming is trying to move into one of their two squares (in which case all three of the lemmings would stay in their current squares). Lemmings being lemmings, they continue to move until all of them have moved off the board.<br>Your job is to determine how long that takes.<br>", input:"Input will consist of multiple test cases. Each test case will consist of multiple lines. The first line will contain two positive integers n m, specifying the number of rows and columns in the board. The maximum value for each of these is 100. The board is situated so that square (0, 0) is in the southwest corner, and square (0,m -1) is in the southeast corner. Following this will be several rows containing the agendas for the nm lemmings. Each agenda will be a permutation of the string NESW. There will be 16 agendas on each line (except perhaps the last), with a single space between each. The agendas are assigned row-wise to the lemmings, so that the first agenda is associated with the lemming on square (0, 0), the second with the lemming on square (0, 1), and so on. The last case will be followed by the line 0 0 which will terminate input.", output:"For each test case, output a single line containing the case number (using the format shown below) followed by the number of steps it takes until the last lemming(s) falls off the board. Use only single spaces to separate items on a line.", sample_in:"2 2\nENWS WSNE NESW WENS\n2 2\nENWS WSNE NESW SWEN\n0 0", sample_out:"Case 1: 2\nCase 2: 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4, vtotal_submit:18, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007 East Central North America", author:"", tag:["TEST"]}
{pid:1928, vid:1928, oj:"hdu", title:"Once Around the Lock", desc:"Most of us at one time or another have used a circular combination lock (think back to those glorious days in high school and your gym locker). Most combination locks consist of a dial with the numbers 0 through n-1 printed on it in clockwise order. The dial can be turned either clockwise or counterclockwise, bringing one of the numbers to the top of the dial (if 0 is at the top of the dial, a turn of 1 in the counterclockwise direction would bring 1 to the top). Each lock has a three number code (x, y, z) and can only be opened after the following series of steps:<br>1. The lock dial must first be spun clockwise at least one full rotation, ending with the number x at the top (with no intervening counterclockwise turns). Note this could be accomplished with consecutive clockwise turns.<br>2. The lock must be turned counterclockwise until the number y appears at the top for the second time. Note this could be accomplished with consecutive counterclockwise turns (but no intervening clockwise turns).<br>3. The lock must then be turned clockwise until the number z appears on top, without going more than one full rotation. Note this could be accomplished with consecutive clockwise turns (but no intervening counterclockwise turns).<br>Any rotation after this last step will cause the lock to be closed again.<br>For this problem, you will be given a lock and a series of turns and you must determine at the end whether or not the lock is open. You should assume prior to the first turn that the lock has just been closed, and the dial spun counterclockwise until 0 is on top.<br>", input:"Input will consist of multiple test cases. The first line of each test case will contain four integers n x y z, indicating the number of digits on the lock’s dial and the three-number combination (x, y and z will all be different and n &lt;= 1000). The next line(s) will consist of a series of dial rotations of the form d s, where d is either C or CC (for clockwise or counterclockwise) and s (&gt; 0) indicates how many numbers to spin through at the top of the dial. For example, if n = 50 and the current number on top of the dial is 4, the rotation CC 6 would bring the number 10 to the top, while a rotation of C 6 would bring 48 to the top. The series of dial rotations may extend over multiple lines, ending with the character ?. A line with a single 0 on it will follow the last test case.", output:"For each problem instance, output a single line containing either the word Open or Closed, prefaced by the test case number as shown in the sample output.", sample_in:"60 6 1 58\nC 114 CC 115 C 3 ?\n60 6 1 58\nC 54 CC 115 C 3 ?\n60 6 1 58\nC 54 C 60 CC 115 C 3 ?\n0", sample_out:"Case 1: Open\nCase 2: Closed\nCase 3: Open", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:12, vtotal_submit:36, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007 East Central North America", author:"", tag:["TEST"]}
{pid:1929, vid:1929, oj:"hdu", title:"A Puzzling Problem", desc:"Anna Graham is a puzzle maker who prides herself in the quality and complexity of her work. She makes puzzles of all kinds - crosswords, logic problems, acrostics, and word search puzzles, to name but a few. For each puzzle, she has developed a set of rules which she constrains herself to follow. For word search puzzles, she insists not only that all the words be connected to one another (as in most word search puzzles), but also that removing any word from the word list will not cause one or more words to become disconnected from the rest. (Two words are connected if they contain a common letter in the grid.) The example word search puzzle on the left satisfies this condition, but the one on the right does not (removing the word Pascal from the word list disconnects Java from the other two words).<br><img src=http://acm.hdu.edu.cn/forum/attachment/11_237_de4c3a5a3af1175.jpg><br>Your job is to write a program that checks to see if Anna’s word search problems are up to snuff.<br>", input:"Input will consist of multiple test cases. The first line of each test case contains 3 integers n m l, where n and m are the number of rows and columns in the puzzle and l is the number of words. Following this are n lines containing m uppercase characters each (the puzzle) followed by l lines containing one word each (the word list, in mixed case). Each word in the word list will appear in the puzzle exactly once. There will be no more than 100 rows and 100 columns in the puzzle and no more than 100 words to search for. There will be no spaces in the input words.", output:"For each problem instance, output the word Yes or No depending on whether the puzzle satisfies Anna’s constraints.", sample_in:"5 6 3\nPBROGR\nPASCAL\nASMMIN\nGIICON\nTCELST\nBASIC\nLISP\nPascal\n5 6 4\nPBROJR\nPASCAL\nASMMVN\nGIICAN\nTCELST\nBASIC\nJava\nLISP\nPascal\n0 0 0", sample_out:"Yes\nNo", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:7, vtotal_submit:47, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007 East Central North America", author:"", tag:["TEST"]}
{pid:1930, vid:1930, oj:"hdu", title:"And Now, a Remainder from Our Sponsor", desc:"IBM has decided that all messages sent to and from teams competing in the ACM programming contest should be encoded. They have decided that instead of sending the letters of a message, they will transmit their remainders relative to some secret keys which are four, two-digit integers that are pairwise relatively prime. For example, consider the message &quot;THE CAT IN THE HAT&quot;. The letters of this message are first converted into numeric equivalents, where A=01, B=02, ..., Z=26 and a blank=27. Each group of 3 letters is then combined to create a 6 digit number. (If the last group does not contain 3 letters it is padded on the right with blanks and then transformed into a 6 digit number.) For example <br>THE CAT IN THE HAT → 200805 270301 202709 142720 080527 080120<br>Each six-digit integer is then encoded by replacing it with the remainders modulo the secret keys as follows: Each remainder should be padded with leading 0’s, if necessary, to make it two digits long. After this, the remainders are concatenated together and then any leading 0’s are removed. For example, if the secret keys are 34, 81, 65, and 43, then the first integer 200805 would have remainders 1, 6, 20 and 38. Following the rules above, these combine to get the encoding 1062038. The entire sample message above would be encoded as<br>1062038 1043103 1473907 22794503 15135731 16114011<br>", input:"The input consists of multiple test cases. The first line of input consists of a single positive integer n indicating the number of test cases. The next 2n lines of the input consist of the test cases. The first line of each test case contains a positive integer (&lt; 50) giving the number of groups in the encoded message. The second line of each test case consists of the four keys followed by the encoded message.<br>Each message group is separated with a space.<br>", output:"For each test case write the decoded message. You should not print any trailing blanks.", sample_in:"2\n6\n34 81 65 43 1062038 1043103 1473907 22794503 15135731 16114011\n3\n20 31 53 39 5184133 14080210 7090922", sample_out:"THE CAT IN THE HAT\nTHE END", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:125, vtotal_submit:442, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007 East Central North America", author:"", tag:["TEST"]}
{pid:1931, vid:1931, oj:"hdu", title:"Target Practice", desc:"There are many forms of contests where the contestants (shooters) try to hit targets, either moving or still. In this version there are a number of small balloons sitting on the tops of poles that are in turn stuck in the ground at various points in a large field. These poles are not all the same height. The shooter circles the field and fires at the balloons, the goal being to burst all the balloons with as few shots as possible. Since the balloons offer almost no resistance to a bullet, the bullet will pass right through and possibly hit one or more other balloons. So, by judiciously taking shots, the shooter might need only a very few shots to hit all the targets (provided the shooter is a good marksman, which we will assume is the case).<br>For example, the following field of 10 targets can be covered in only four shots, as shown. (The first two numbers at each position indicate the position of the balloon, and the third number the height.)<br><img src=http://acm.hdu.edu.cn/forum/attachment/11_237_6c2fec8f6c05194.jpg><br>Your job is to determine the fewest number of shots necessary to hit all the targets in a given field.<br>", input:"There will be multiple test cases. Each test case will consist of an integer n (&lt;= 50) indicating the number of target positions to follow. A value of n = 0 indicates end of input. There will follow n integer triples, x y h, indicating a balloon at position (x, y) in the field at height h. (There will be at most one balloon at any position (x, y).) All integers are greater than 0 and no greater than 100. Furthermore assume that the shooter can take shots from anywhere on the field at any height. For simplification, assume here that the balloons are points and that the bullets can pass through the poles on which the balloons are perched.", output:"Each test case should produce one line of output of the form:<br>Target set k can be cleared using only s shots.<br>where k is the number of the test case, starting at 1, and the value of s is the minimum number of shots needed to hit all the targets in the set.<br>", sample_in:"10\n5 15 4 10 60 52 17 27 4 33 20 10 33 85 31 42 52 4 70 70 22\n78 88 4 85 40 58 100 75 7\n9\n5 15 4 10 60 52 17 27 4 33 20 10 33 85 31 42 52 4 70 70 22\n78 88 4 100 75 7\n0", sample_out:"Target set 1 can be cleared using only 4 shots.\nTarget set 2 can be cleared using only 3 shots.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:7, vtotal_submit:9, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2007 East Central North America", author:"", tag:["TEST"]}
{pid:1932, vid:1932, oj:"hdu", title:"Ambiguous Codes", desc:"An extensive area of research in computer science is the field of communications. With computer networks being part of everyday life of many people, the development of ways for making networks faster, more reliable and secure is constantly needed. This practical need motivates an extensive research activity in the theory behind communications.<br><br>The very first thing needed to establish any kind of communication is a common code. A code is a way of changing the form of a piece of information into some other form, in general to make it possible to convey that piece of information from one place to another. Flag codes used by boats and the Morse code used in telegraphy are examples of codes for translating letters into different forms to enable communication over different media.<br><br>More formally, a code is a set of strings composed of symbols from one alphabet. Each string defined in the code is called a code word. A message is then composed concatenating a set of code words to convey the information needed. For example, in Morse code the alphabet is composed of the symbols hyphen and dot; letter “S” is represented by the code word “...”, letter “O” is represented by the code word “---”, and therefore the distress message “SOS” in Morse code is “...---...”.<br><br>Codes for communication can have many desirable and undesirable properties such as ambiguity, entropy, redundancy, and many more. In this problem we will focus on ambiguity as a key property.<br><br>A code is ambiguous when there exists a message using that code that can be partitioned into different sequences of code words. In other words, in an ambiguous code a message may have more than one meaning. For example, consider the binary alphabet, composed of symbols {0,1}. For the code composed of the words {10, 01, 101} the message 10101 can be understood as 10-101 or 101-01 and therefore the code is ambiguous. On the other hand, for the code composed of the words {01, 10, 011} no ambiguous message exists and therefore the code is unambiguous.<br><br>As a part of the computer science community, you are required to develop a tester that checks if codes are ambiguous. In case a code is indeed ambiguous, you are also required to report the length (i.e. the number of symbols) of the shortest ambiguous message for that code.<br>", input:"Each test case will consist on several lines. In all test cases the alphabet will be the set of hexadecimal digits (decimal digits plus the uppercase letters “A” to “F”). The first line of a test case will contain an integer N (1 &lt;= N &lt;= 100), the number of code words in the code. Each of the next N lines describes a code word and contains a different and non-empty string of at most 50 hexadecimal digits.<br>Input is terminated by N = 0.<br>", output:"For each test case, output a single line with the length of the shortest ambiguous message forthe provided code or -1 if the code is unambiguous.<br>", sample_in:"3\n10\n01\n101\n3\nAB\nBA\nABB\n0", sample_out:"5\n-1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8, vtotal_submit:35, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM South American Programming Contest 2007", author:"", tag:["TEST"]}
{pid:1933, vid:1933, oj:"hdu", title:"Ballroom Lights", desc:"The ICPC world finals will be held in a luxurious hotel with a big ballroom. A buffet meal will be served in this ballroom, and organizers decided to decorate its walls with pictures of past champion teams.<br><br>In order to avoid criticism about favouring some of those teams over others, the organizing commitee wants to make sure that all pictures are appropiately illuminated. <br><br>The only direct way they’ve found for doing this is ensuring each picture has at least one lightbulb that directlyilluminates it.<br><br>In this way, the perimeter of the ballroom wall can be divided into illuminated parts (in whichpictures may be placed) and dark parts (which are not suitable for placing the pictures).<br><br>The ballroom has the shape of a box and contains several lightbulbs. Each lightbulb emits light in all directions, but this light can be blocked by columns. All columns in the ballroom have cylindrical shape and go from the floor to the ceiling, so light cannot pass over or above them. Columns are of course placed so that its circular section is parallel to the ballroom floor.<br><br>Any given point p on the perimeter wall is said to be illuminated if there exists a line segment (a light ray) which starts on a lightbulb, ends in p and does not touch or pass through any column.<br><img src=data/images/109_b.jpg><br><br>Your task as a helper of the ICPC organization is to examine the blueprints of the ballroom and determine the total length of illuminated sections of the perimeter wall. The blueprint consist of a rectangle indicating a top view of the ballroom, with the lightbulbs and columns marked in it.", input:"Each test case will consist on several lines. The first line will contain four integers: L, the number of lightbulbs, C, the number of columns, X, the size of the ballroom on the x coordinate and Y , the size of the ballroom on the y coordinate. The lower-left corner of the ballroom is at (0, 0) while the upper-right corner is at (X, Y ).<br><br>The next L lines will contain two integers each representing the x and y coordinate of each lightbulb. The last C lines of the test case will contain three integers each, representing the x and y coordinates of the center of a column and its radius, in that order. You can assume that 1 &lt;= L,C &lt;= 10<sup>3</sup> and 4 &lt;= X, Y &lt;= 10<sup>6</sup>. Also, for all pairs of coordinates (x,y), 0 &lt; x &lt; X and 0 &lt; y &lt; Y , both for lightbulbs and column center locations. All radii of the columns will be positive. Finally, no two columns will overlap, although they may touch, and no column will touch or intersect with the border of the ballroom. No lightbulb will be inside a column or in its boundary and no two lightbulbs will be in the same place.<br>Input is terminated with L = C = X = Y = 0.<br>", output:"For each test case, output a single line with the total length of the illuminated parts of the perimeter wall. The result must be printed as a real number with exactly four decimal figures, with the lowest-order decimal figure rounded up.", sample_in:"2 1 8 8\n6 6\n2 6\n4 4 2\n1 4 7 7\n3 3\n2 4 1\n4 2 1\n2 2 1\n4 4 1\n2 2 9 7\n1 2\n5 5\n3 3 2\n7 5 1\n0 0 0 0", sample_out:"28.0000\n0.0000\n25.8214", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2, vtotal_submit:4, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM South American Programming Contest 2007", author:"", tag:["TEST"]}
{pid:1934, vid:1934, oj:"hdu", title:"Car Plates Competition", desc:"Martin and Isa are very competitive. The newest competition they have created is about looking at the plates of the cars. Each time one of them sees a car plate in the streets, he or she sends to the other an SMS message with the content of that plate; the one who has seen the newest plate is in the lead of the game. As the Automobile Car Management (ACM) office assigns the plates sequentially in increasing order, they can compare them and find out who is the winner.<br><br>Martin has a very smart eye and he has stayed on the lead for several weeks. Maybe he keeps looking at the streets instead of working, or maybe he stays all day in front of car selling companies waiting for new cars to go out with new plates. Isa, tired of being always behind, has written a program that generates a random plate, so the next time <br><br>Martin sends a message to her, she will respond with this generated plate. In this way, she hopes to give Martin a hard time trying to beat her. However, Martin has grown suspicious, and he wants to determine if Isa actually saw a car with the plate she sent or not. This way, he will know if Isa is in the lead of the game.<br><br>He knows some facts about the plates assigned by the ACM:<br>●Each plate is a combination of 7 characters, which may be uppercase letters (A-Z), or digits (0-9).<br>●There exists two kinds of plate schemes: the old one, used for several years, and the new one which has been in use for some months, when the combinations of the old one were exhausted.<br>●In the old scheme, the first three characters were letters, and the last four were digits, so the plates run from AAA0000 to ZZZ9999.<br>●In the new scheme, the first five characters are letters, and the last two are digits. Unfortunately the chief of ACM messed up with the printing system while he was trying to create a poster for his next campaign for mayor, and the printer is not able to write the letters A, C, M, I, and P. Therefore, in this new scheme, the first plate is BBBBB00, instead of AAAAA00.<br>●The plates are assigned following a sequential order. As a particular case, the last plate from the old scheme is followed by the first plate from the new scheme.<br><br>As Isa is not aware of all of this, she has just made sure that her random generator creates a combination consisting of seven characters, where the first three characters are always uppercase letters, the last two characters are always digits, and each one of the fourth and fifth characters may be an uppercase letter or a digit (possibly generating an illegal combination, but she has not much time to worry about that).<br><br>Of course, Martin will not consider Isa the winner if he receives an illegal combination, or if he receives a legal plate, but equal to or older than his. But that\'s not all of it. Since Martin knows that new plates are not generated too fast, he will not believe that Isa saw a car with a plate newer than the one he sent, but sequentially too far. For example, if Martin sends DDDDD45, and receives ZZZZZ45, he will not believe that Isa saw a car with that plate, because he knows that the ACM couldn\'t have printed enough plates to get to ZZZZZ45 in the time he received that answer.<br><br>So, Martin has decided to consider Isa the winner only if he receives a legal plate, newer than his, and older than or equal to the C-th consecutive plate after the one he sent. He calls C his confidence number. For example, if Martin sends ABC1234, and his confidence number is 6, he will think that Isa is the winner only if he receives any plate newer than ABC1234, but older than or equal to ABC1240.<br>", input:"The input contains several test cases. Each test case is described in a single line that contains two strings SM and SI , and an integer C, separated by single spaces. SM is the 7-character string sent by Martin, which is always a legal plate. SI is the 7-character string answered by Isa, which was generated using her random generator. C is Martin\'s confidence number (1 &lt;= C &lt;= 10<sup>9</sup>).<br>The end of input is indicated by SM = SI = &quot;*&quot; and C = 0.<br>", output:"For each test case, output a single line with the uppercase character &quot;Y&quot;.<br>if, according to Martin, Isa is the winner, and with the uppercase character &quot;N&quot; otherwise.", sample_in:"ABC1234 ABC1240 6\nABC1234 ABC1234 6\nACM5932 ADM5933 260000\nBBBBB23 BBBBC23 100\nBBBBB23 BBBBD00 77\nZZZ9997 ZZZ9999 1\nZZZ9998 BBBBB01 3\nZZZZZ95 ZZZZZ99 10\nBBBBB23 BBBBB22 5\n* * 0", sample_out:"Y\nN\nN\nN\nY\nN\nY\nY\nN", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:41, vtotal_submit:172, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM South American Programming Contest 2007", author:"", tag:["TEST"]}
{pid:1935, vid:1935, oj:"hdu", title:"Drop the Triples", desc:"The inhabitants of a small Caribbean island in the region known as Bermuda\'s Triangle love to spend their warm summer nights playing cards. As a tribute to the region where they live, all of their card games have some connection to triangles. One of the most popular games in the island is known as Triples, and has very simple rules.<br><br>The game is played between two players, with a set of standard playing cards. Cards are distinguished only by their values, from 1 (Ace) to 13 (King). The cards are shuffled and placed as a pile in the center of the table, face down. This pile is called the stock. The two players take turns at playing. At each turn, a player<br>●draws the top card from the stock, adding it to her/his hand; and<br>●decides whether she/he wants to &quot;drop some triples&quot;<br><br>Dropping a triple consists of choosing three cards (a triple) from the hand and placing them on the table, face up. The dropped triples stay on the table until the end of the game. <br><br>Only some sets of three cards form a valid triple. There are two types of valid triples:<br>●Perfect triples are made of three cards whose values represent the length of sides of an equilateral triangle;<br>●Common triples are made by three cards whose values represent the length of sides of any other (not equilateral) triangle.<br><br>The figure below shows examples of perfect triples (a), common triples (b), and invalid triples(c).<br><img src=data/images/109_d.jpg><br>Only valid triples can be dropped, but a player may drop any number of triples at a given turn. In particular, since players know the number of cards in the stock at every turn, a player may decide to drop all triples in her/his last turn. Some players, however, normally drop some triples during the game, to maintain as few cards in their hands as possible.<br><br>The game finishes when the stock is empty. The winner is the player that dropped the largest number of perfect triples. If both players dropped the same number of perfect triples, the winner is the player that dropped the largest number of common triples. If both players dropped the same number of perfect triples and the same number of common triples, the result is a tie.<br><br>Given the description of the cards in the stock, write a program that determines the winner of a game of Triples, considering both players play as best as possible.<br>", input:"The input contains several test cases. The first line of a test case contains one integer N representing the number of cards in the stock (6 &lt;= N &lt;= 10<sup>4</sup>). The next line contains N integers Xi, separated by single spaces, representing the cards in the stock (1 &lt;= Xi &lt;= 13, for 1 &lt;= i &lt;= N). The cards are given in the order they are drawn by the players: the first card in the input (X1) is the first card drawn, the second card in the input (X2) is the second card drawn, and so on. Several cards with the same value may be present in the stock, and not necessarily all card values are present in the stock. The end of input is indicated by N = 0.", output:"For each test case your program must output a single line, containing \'1\'<br>if the first player to play wins the game, \'2\' if the second player wins, or \'0\' if there is a tie.", sample_in:"7\n5 6 5 6 5 6 8\n12\n13 13 13 13 13 13 1 3 2 9 3 9\n12\n1 2 1 2 1 2 3 1 4 2 5 3\n0", sample_out:"0\n2\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:12, vtotal_submit:105, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM South American Programming Contest 2007", author:"", tag:["TEST"]}
{pid:1936, vid:1936, oj:"hdu", title:"Emoticons :-)", desc:"Emoticons are used in chat and e-mail conversations to try to express the emotions that printed words cannot. This may seem like a nice feature for many, but a lot of people find it really annoying and wants to get rid of emoticons.<br><br>George is one of those people. He hates emoticons so bad, that he is preparing a plan to remove all emoticons from all e-mails in the world. Since you share his visionary plans, you are preparing a special program to help him.<br><br>Your program will receive the list of emoticons to proscribe. Each emoticon will be a string of characters not including any whitespace. You will also receive several lines of text. What you need to do is change some characters of the text into spaces to ensure no emoticon is left on the text. For an emoticon to be considered to appear in the text it has to appear in a single line and be made of consecutive characters.<br><br>To help George’s plan remain secret as long as possible, you need to do your job with the minimum possible amount of character changes.<br>", input:"The input file contains several test cases. Each test case consists of several lines. The first line of each test case will contain two integers separated by a single space: N, the number of emoticons to proscribe, and M, the number of lines the text has. The next N lines contain one emoticon each, a non-empty string of at most 15 characters. Each of the last M lines of the test case contains a line of text of at most 80 characters. You can assume 1 &lt;= N,M &lt;= 100.<br><br>Valid input characters for emoticons are uppercase and lowercase letters, digits and the symbols“!?.,:;-_’#$%&amp;/=*+(){}[]” (quotes for clarity). Each line of the text may contain the samecharacters with the addition of the space character.<br>The input is terminated by N = M = 0.<br>", output:"For each test case, output exactly one line containing a single integer that indicates the minimum number of changes you need to make to the entire text to ensure no emoticon on the list appears in it.", sample_in:"4 6\n:-)\n:-(\n(-:\n)-:\nHello uncle John! :-) :-D\nI am sad or happy? (-:-(?\nI feel so happy, my head spins\n(-:-)(-:-)(-:-)(-:-) :-) (-: :-)\nbut then sadness comes :-(\nLoves you, Joanna :-)))))\n3 1\n:)\n):\n))\n:):)):)):)):(:((:(((:):)\n0 0", sample_out:"11\n8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:27, vtotal_submit:118, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM South American Programming Contest 2007", author:"", tag:["TEST"]}
{pid:1937, vid:1937, oj:"hdu", title:"Finding Seats", desc:"A group of K friends is going to see a movie. However, they are too late to get good tickets, so they are looking for a good way to sit all nearby. Since they are all science students, they decided to come up with an optimization problem instead of going on with informal arguments to decide which tickets to buy.<br><br>The movie theater has R rows of C seats each, and they can see a map with the currently available seats marked. They decided that seating close to each other is all that matters, even if that means seating in the front row where the screen is so big it’s impossible to see it all at once. In order to have a formal criteria, they thought they would buy seats in order to minimize the extension of their group.<br><br>The extension is defined as the area of the smallest rectangle with sides parallel to the seats that contains all bought seats. The area of a rectangle is the number of seats contained in it.<br><br>They’ve taken out a laptop and pointed at you to help them find those desired seats.<br>", input:"Each test case will consist on several lines. The first line will contain three positive integers R, C and K as explained above (1 &lt;= R,C &lt;= 300, 1 &lt;= K &lt;= R × C). The next R lines will contain exactly C characters each. The j-th character of the i-th line will be ‘X’ if the j-th seat on the i-th row is taken or ‘.’ if it is available. There will always be at least K available seats in total.<br>Input is terminated with R = C = K = 0.<br>", output:"For each test case, output a single line containing the minimum extension the group can have.", sample_in:"3 5 5\n...XX\n.X.XX\nXX...\n5 6 6\n..X.X.\n.XXX..\n.XX.X.\n.XXX.X\n.XX.XX\n0 0 0", sample_out:"6\n9", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:52, vtotal_submit:269, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM South American Programming Contest 2007", author:"", tag:["TEST"]}
{pid:1938, vid:1938, oj:"hdu", title:"Galou is back!", desc:"The famous witch is back. After killing an incredible amount of monsters in order to find a hidden treasure, Zak Galou decided to buy vineyards in Burgundy and retired. Everything was calm in his new life, until the day that his farm tractor stopped working. His tractor’s engine works based on a mechanism of gears. The engine can be represented by a bidimensional grid. At most one gear can be attached to each position of the grid. <br><br>All the gears are identical and can mesh with adjacent gears. In this grid, a gear can have up to six other adjacent gears, see figure below:<br><img src=data/images/109_g1.jpg><br>Under normal utilization, when the tractor is started, some of the gears are initially activated and try to turn clockwise. When a gear tries to turn in one direction, all the adjacent gears try to turn in the opposite direction.<br><br>When Zak Galou opened his engine he noticed that it had been sabotaged (probably by a jealous treasure hunter who was not able to find the treasure). Some of the gears were removed from the engine and others have been added to it. As a consequence, some of the gears were immobile. A gear can be immobile either if it is free or if it is blocked. A gear is free when it is not an initially activated gear and no adjacent gear is trying to turn. A gear is blocked when it is trying to turn in both directions at the same time. For example, consider that there are three gears in the engine as shown in the figure below. If any of the gears is initially activated when the tractor is started, all of them will be blocked. If none of the gears are initially activated, all of them will be free.<br><img src=data/images/109_g2.jpg><br>As a part of the work of fixing his tractor, Zak Galou asks for your help to solve the following problem. Given the description of the engine and the gears that are initially activated in the clockwise direction, he wants to know for each gear, what is its state when the tractor is started: <br>turn clockwise, turn counter-clockwise, free or blocked.<br>", input:"The input contains several test cases. The first line of a test case contains two integers R and C, separated by a single space, representing respectively the number of rows and columns of the engine grid (1 &lt;= R,C &lt;= 100). The next R lines describe the engine. The i-th line represents the i-th row of the engine and contains C characters. The character “.” indicates that there is no gear in the corresponding position, the character “*” indicates that there is a gear that is not initially activated when the engine is started and an “I” indicates that there is a gear that is initially activated when the engine is started. Notice that, for simplicity reasons, the parallelogram representing the engine grid is described in the input as if it was a rectangle with each row left aligned. The end of input is indicated by R = C = 0.", output:"For each test case, your program must output R + 1 lines. The first line must be empty; each of the following R lines must have C characters. The characters printed must represent the state of each position of the grid when the engine is started. Print a “.” if there is no gear in the position; a “(” if there is a gear turning in the clockwise direction; a “)” if there is a gear turning in the counter-clockwise direction, an uppercase “F” if there is a gear that is free and an uppercase “B” if there is a blocked gear.", sample_in:"4 3\n...\n.*.\n.I.\n...\n4 4\n....\n.**.\n.I..\n..*.\n0 0", sample_out:"...\n.).\n.(.\n...\n\n....\n.BB.\n.B..\n..F.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:14, vtotal_submit:37, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM South American Programming Contest 2007", author:"", tag:["TEST"]}
{pid:1939, vid:1939, oj:"hdu", title:"He is offside!", desc:"Hemisphere Network is the largest television network in Tumbolia, a small country located east of South America (or south of East America). The most popular sport in Tumbolia, unsurprisingly, is soccer; many games are broadcast every week in Tumbolia.<br><br>Hemisphere Network receives many requests to replay dubious plays; usually, these happen when a player is deemed to be offside by the referee. An attacking player is offside if he is nearer to his opponents\' goal line than the second last opponent. A player is not offside if<br>●he is level with the second last opponent or<br>●he is level with the last two opponents.<br><br>Through the use of computer graphics technology, Hemisphere Network can take an image of the field and determine the distances of the players to the defending team\'s goal line, but they still need a program that, given these distances, decides whether a player is offside.<br>", input:"The input file contains several test cases. The first line of each test case contains two integers A and D separated by a single space indicating, respectively, the number of attacking and defending players involved in the play (2 &lt;= A,D &lt;= 11). The next line contains A integers Bi separated by single spaces, indicating the distances of the attacking players to the goal line<br>(1 &lt;= Bi &lt;= 10<sup>4</sup>). The next line contains D integers Cj separated by single spaces, indicating the distances of the defending players to the goal line (1 &lt;= Cj &lt;= 10<sup>4</sup>). The end of input is indicated by A = D = 0.<br>", output:"For each test case in the input print a line containing a single character: &quot;Y&quot;(uppercase) if there is an attacking player offside, and &quot;N&quot;(uppercase) otherwise.<br>", sample_in:"2 3\n500 700\n700 500 500\n2 2\n200 400\n200 1000\n3 4\n530 510 490\n480 470 50 310\n0 0", sample_out:"N\nY\nN", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:188, vtotal_submit:289, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM South American Programming Contest 2007", author:"", tag:["TEST"]}
{pid:1940, vid:1940, oj:"hdu", title:"ICPC Scoreboard", desc:"Charles is the contest director for the ICPC Tumbolian regional contest. His responsibility is ensuring the contest flows smoothly, that the contest rules are applied fairly, and, of course, announcing the final contest ranking.<br><br>According to ICPC rules, a team with more solved problems ranks above a team with less solved problems. If two teams have the same number of solved problems, the team with the smaller total penalty ranks above the team with the larger total penalty (in case both teams have the same number of solved problems and the same penalty, Charles considers them as tied).<br><br>The total penalty for a team is the sum of all the problem penalties of the problems that team has solved. The problem penalty for a problem is TP +EP ×FA, where TP is the time penalty for that problem, EP is the contest’s error penalty and FA is the number of failed attempts at solving the problem before submitting a correct solution.<br><br>The time penalty for a problem is the time since the start of the contest, in minutes, that the team needed to solve the problem. The error penalty is a positive integer chosen by the contest director, designed to reward teams that submit correct solutions on the first attempt.<br><br>Charles wants to change the error penalty from the “standard” value of 20 minutes to stir things up. To study the effects of that change on the final rankings, he wants to know the range of error penalties that don’t change the final standings.<br><br>In other words, if team A is ahead of team B in the original standings, then A should be ahead of B in the modified standings; if A and B are tied in the original standings, they should also be tied in the modified standings (the original standings are the ones obtained with an error penalty of 20 minutes).<br><br>Charles has been very busy organizing the Tumbolian regional, so he asked you to make a program that will compute the range for him.<br>", input:"The input contains several test cases. The first line of each test case contains two integers T and P separated by a single space, indicating the number of teams and the number of problems, respectively (2 &lt;= T &lt;= 100, 1 &lt;= P &lt;= 10). Each one of the next T lines describes the performance of a team. A team’s performance description is a line containing P problem descriptions separated by single spaces. Teams are not necessarily given in order of their final standings.<br><br>Each problem description is a string “A/S”, where A is an integer representing the number of attempts that the corresponding team made at solving that problem (0 &lt;= A &lt;= 100), and S is either “-”, if the team did not solve that problem, or an integer indicating the number of minutes it took for the team to submit a correct solution (1 &lt;= S &lt;= 300). Attempts made after the first correct submission are not counted.<br>The end of input is indicated by T = P = 0.<br>", output:"For each test case in the input print two positive integers separated by a single space, indicating the smallest and largest error penalties that would not change the final ranking. If there is no upper bound for the error penalty, print a “*” instead of the upper bound.", sample_in:"5 3\n0/- 0/- 0/-\n2/- 2/- 1/-\n1/60 1/165 1/-\n1/80 0/- 2/120\n0/- 1/17 0/-\n4 2\n17/- 5/-\n2/7 3/-\n3/- 2/-\n1/15 0/-\n3 2\n1/- 2/15\n2/53 1/17\n1/70 1/20\n0 0", sample_out:"1 24\n9 *\n20 20", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:49, vtotal_submit:258, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM South American Programming Contest 2007", author:"", tag:["TEST"]}
{pid:1941, vid:1941, oj:"hdu", title:"Justice League", desc:"Thirty five years ago, a group of super heroes was chosen to form the Justice League, whose purpose was to protect the planet Earth from the villains. After all those years helping mankind, its members are retiring and now it is time to choose the new members of the Justice League. In order to keep their secret identity, let’s say, secret, super heroes usually use an integer number to identify themselves. There are H super heroes on Earth, identified with the integers from 1 to H. With a brief look at the newspapers anyone can find out if two super heroes have already worked together in a mission. If this happened, we say that the two heroes have a relationship.<br><br>There must be only one Justice League in the world, which could be formed by any number of super heroes (even only one). Moreover, for any two heroes in the new league, they must have a relationship.<br><br>Besides, consider the set of the heroes not chosen to take part in the Justice League. For any two heroes on that set, they must not have a relationship. This prevents the formation of unofficial justice leagues.<br><br>You work for an agency in charge of creating the new Justice League. The agency doesn’t know if it is possible to create the League with the restrictions given, and asked for your programming skills. Given a set of super heroes and their relationships, determine if it is possible to select any subset to form the Justice League, according to the given restrictions.<br>", input:"The input is composed of several test cases. The first line of each test case contains two integers separated by a single space, H (2 &lt;= H &lt;= 5×10<sup>4</sup>) and R (1 &lt;= R &lt;= 10<sup>5</sup>), indicating, respectively, the number of heroes and the number of relationships. Each of the following R lines contains two integers separated by a single space, A and B (1 &lt;= A &lt; B &lt;= H), indicating that super hero A has a relationship with super hero B. Note that if A has a relationship with B, B also has a relationship with A. A relationship is never informed twice on a test case.<br>The end of input is indicated by H = R = 0.<br>", output:"For each test case in the input print a single line, containing the uppercase letter “Y” if it is possible to select a subset of heroes to form the Justice League according to the given restrictions, or the uppercase letter “N” otherwise.", sample_in:"5 5\n1 2\n2 3\n1 3\n1 4\n3 5\n9 8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n4 3\n1 2\n2 3\n3 4\n0 0", sample_out:"Y\nN\nY", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:19, vtotal_submit:86, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ACM South American Programming Contest 2007", author:"", tag:["TEST"]}
{pid:1942, vid:1942, oj:"hdu", title:"Pizza delivery", desc:"Your Irish pizza and kebab restaurant is doing very well. Not only is the restaurant full almost every night, but there is also an ever increasing number of deliveries to be made, all over town. To meet this demand, you realize that it will be necessary to separate the delivery service from the restaurant. A new large kitchen, only for baking pizzas and being a base for deliveries, has to be established somewhere in town. The main cost in the delivery service is not the making of the pizza itself, but the time it takes to deliver it. To minimize this, you need to carefully plan the location of the new kitchen. To your help you have a database of all last year\'s deliveries. For each block in the city, you know how many deliveries were made there last year. The kitchen location will be chosen based on the assumption that the pattern of demand will be the same in the future.<br>Your city has a typical suburban layot – an orthogonal grid of equalsize square blocks. All places of interest (delivery points and the kitchen) are considered to be located at street crossings. The distance between two street crossings is the Manhattan distance, i.e., the number of blocks you have to drive vertically, plus the number of blocks you have to drive horizontally. The total cost for a delivery point is its Manhattan distance from the kitchen, times the number of deliveries to the point. Note that we are only counting the distance from the kitchen to the delivery point. <br>Even though we always drive directly back to the kitchen after a delivery is made, this (equal) distance is not included in the cost measure. ", input:"On the rst line, there is a number, 1 &lt;=n &lt;=20, indicating the number of<br>test cases. Each test case begins with a line with two integers, 1 &lt;= x &lt;= 100, 1&lt;= y &lt;= 100, indicating the size of the two-dimenstional street grid. Then follow y lines, each with x integers, 0&lt;= d &lt;=1000, indicating the number of deliveries made to each street crossing last year.", output:"For each test case, output the least possible total delivery cost (the sum of all delivery costs last year), assuming that the kitchen was  located optimally.There should be one line for each test case, with an integer indicating the cost, followed by a single space and the word \'blocks\'.", sample_in:"2\n4 4\n0 8 2 0\n1 4 5 0\n0 1 0 1\n3 9 2 0\n6 7\n0 0 0 0 0 0\n0 1 0 3 0 1\n2 9 1 2 1 2\n8 7 1 3 4 3\n1 0 2 2 7 7\n0 1 0 0 1 0\n0 0 0 0 0 0", sample_out:"55 blocks\n162 blocks", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:8, vtotal_submit:26, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NM2004", author:"", tag:["TEST"]}
{pid:1943, vid:1943, oj:"hdu", title:"Ball bearings", desc:"The Swedish company SKF makes ball bearings. As explained by Britannica Online, a ball bearing is “one of the two types of rolling, or anti friction, bearings (the other is the roller bearing).<br><br>Its function is to connect two machine members that move relative to one another so that the frictional resistance to motion is minimal. In many applications, one of the members is a rotating shaft and the other a fixed housing. Each ball bearing has three main parts: two grooved, ring like races and a number of balls. The balls fill the space between the two races and roll with negligible friction in the grooves. The balls may be loosely restrained and separated by means of a retainer or cage.”<br>Presumably, the more balls you have inside the outer ring, the smoother the ride will be, but how many can you t within the outer ring? You will be given the inner diameter of the outer ring, the diameter of the balls, and the minimum distance between neighboring balls. Your task is to compute the maximum number of balls that will t on the inside of the outer ring (all balls must touch the outer ring). <br><img src=data/images/1943-1.jpg>", input:"The first line of input contains a positive integer n that indicates the number of test cases. Then follow n lines, each describing a test case. Each test case consists of three positive oating point numbers, D, d, s, where D is the inner diameter of the outer ring, d is the diameter of a ball, and s is the minimum distance between balls. All parameters are in the range [0.0001, 500.0].", output:"For each test case output a single integer m on a line by itself, where m is the maximum number of balls that can t in the ball bearing, given the above constraints. There will always be room for at least three balls.", sample_in:"2\n20 1 0.1\n100.0 13.0 0.2", sample_out:"54\n20", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:32, vtotal_submit:88, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NM2004", author:"", tag:["TEST"]}
{pid:1944, vid:1944, oj:"hdu", title:"S-Nim", desc:"Arthur and his sister Caroll have been playing a game called Nim for some time now. Nim is played as follows:<br><br><br>  The starting position has a number of heaps, all containing some, not necessarily equal, number of beads.<br><br>  The players take turns chosing a heap and removing a positive number of beads from it.<br><br>  The first player not able to make a move, loses.<br><br><br>Arthur and Caroll really enjoyed playing this simple game until they recently learned an easy way to always be able to find the best move:<br><br><br>  Xor the number of beads in the heaps in the current position (i.e. if we have 2, 4 and 7 the xor-sum will be 1 as 2 xor 4 xor 7 = 1).<br><br>  If the xor-sum is 0, too bad, you will lose.<br><br>  Otherwise, move such that the xor-sum becomes 0. This is always possible.<br><br><br>It is quite easy to convince oneself that this works. Consider these facts:<br><br>  The player that takes the last bead wins.<br><br>  After the winning player\'s last move the xor-sum will be 0.<br><br>  The xor-sum will change after every move.<br><br><br>Which means that if you make sure that the xor-sum always is 0 when you have made your move, your opponent will never be able to win, and, thus, you will win. <br><br>Understandibly it is no fun to play a game when both players know how to play perfectly (ignorance is bliss). Fourtunately, Arthur and Caroll soon came up with a similar game, S-Nim, that seemed to solve this problem. Each player is now only allowed to remove a number of beads in some predefined set S, e.g. if we have S =(2, 5) each player is only allowed to remove 2 or 5 beads. Now it is not always possible to make the xor-sum 0 and, thus, the strategy above is useless. Or is it? <br><br>your job is to write a program that determines if a position of S-Nim is a losing or a winning position. A position is a winning position if there is at least one move to a losing position. A position is a losing position if there are no moves to a losing position. This means, as expected, that a position with no legal moves is a losing position.<br>", input:"Input consists of a number of test cases.<br>For each test case: The rst line contains a number k (0 &lt; k &lt;= 100) describing the size of S, followed by k numbers si (0 &lt; si &lt;= 10000) describing S. The second line contains a number m (0 &lt; m &lt;= 100) describing the number of positions to evaluate. The next m lines each contain a number l (0 &lt; l &lt;= 100) describing the number of heaps and l numbers hi (0 &lt;= hi &lt;= 10000) describing the number of beads in the heaps.<br>The last test case is followed by a 0 on a line of its own.", output:"For each position:<br>    If the described position is a winning position print a \'W\'.<br>    If the described position is a losing position print an \'L\'.<br>Print a newline after each test case.", sample_in:"2 2 5\n3\n2 5 12\n3 2 4 7\n4 2 3 7 12\n5 1 2 3 4 5\n3\n2 5 12\n3 2 4 7\n4 2 3 7 12\n0", sample_out:"LWW\nWWL", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:252, vtotal_submit:453, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NM2004", author:"", tag:["TEST"]}
{pid:1945, vid:1945, oj:"hdu", title:"Sylvester construction", desc:"A Hadamard matrix of order n is an n * n matrix containing only 1s and -1s, called Hn, such that <img src=data/images/1945-1.gif> where <img src=data/images/1945-2.gif> is the n * n identity matrix. An interesting property of Hadamard matrices is that they have the maximum possible determinant of any n * n matrix with elements in the range [-1, 1]. Hadamard matrices have applications in errorcorrecting codes and weighing design problems. <br>The Sylvester construction is a way to create a Hadamard matrix of size 2n given <img src=data/images/1945-3.gif>. <img src=data/images/1945-4.gif> can be constructed as:<br><img src=data/images/1945-5.gif> <br>for example:<br><img src=data/images/1945-6.gif> <br><br><img src=data/images/1945-7.gif> <br>and so on.<br>In this problem you are required to print a part of a Hadamard matrix constructed in the way described above.", input:"The first number in the input is the number of test cases to follow. For each test case there are ve integers: n, x, y, w and h. n will be between 1 and 2^62 (inclusive) and will be a power of 2. x and y specify the upper left corner of the sub matrix to be printed, w and h specify the width and height respectively. Coordinates are zero based, so 0 &lt;= x,y &lt; n. You can assume that the sub matrix will t entirely inside the whole matrix and  that 0 &lt; w,h &lt;= 20. There will be no more than 1000 test cases.", output:"For each test case print the sub matrix followed by an empty line.", sample_in:"3\n2 0 0 2 2\n4 1 1 3 3\n268435456 12345 67890 11 12", sample_out:"1 1\n1 -1\n\n-1 1 -1\n1 -1 -1\n-1 -1 1\n\n1 -1 -1 1 1 -1 -1 1 1 -1 -1\n-1 -1 1 1 -1 -1 1 1 -1 -1 1\n1 1 1 -1 -1 -1 -1 1 1 1 1\n-1 1 -1 -1 1 -1 1 1 -1 1 -1\n1 -1 -1 -1 -1 1 1 1 1 -1 -1\n-1 -1 1 -1 1 1 -1 1 -1 -1 1\n-1 -1 -1 -1 -1 -1 -1 1 1 1 1\n1 -1 1 -1 1 -1 1 1 -1 1 -1\n-1 1 1 -1 -1 1 1 1 1 -1 -1\n1 1 -1 -1 1 1 -1 1 -1 -1 1\n-1 -1 -1 1 1 1 1 1 1 1 1\n1 -1 1 1 -1 1 -1 1 -1 1 -1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:11, vtotal_submit:22, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NM2004", author:"", tag:["TEST"]}
{pid:1946, vid:1946, oj:"hdu", title:"Who owns the Amiga?", desc:"In a corridor in a student dormitory, there are ve rooms numbered 1, 2, 3, 4 and 5; room number 1 is the left-most room. The rooms have doors in different colours: blue, green, red, white and yellow, but not necessarily in that order.<br><img src=data/images/1946-1.jpg><br>In these rooms live five students Anna, Bernhard, Chris, David and Ellen of five different nationalities Danish, Finnish, Icelandic, Norwegian and  Swedish. (Both the names and the nationalities are given in alphabetical order, so it does not follow automatically that Anna is Danish.) <br><br>These students have one computer each, and these computers are of different kinds: Amiga, Atari, Linux, Mac and Windows (given here in alphabetical order). They each have their own favourite programming language: C, C++, Java, Pascal and Perl (also listed in alphabetical order). <br>You want to find out who owns the Amiga computer based on some facts about the students. ", input:"The input consists of several scenarios. The rst input line contains a number 1?000 indicating how many scenarios there are. <br>Each scenario starts with a line with a number 1?000 telling how many fact lines there are for that scenario. Then follow the fact lines which each contains three words separated by one or more spaces: <br>－－－The first and third word is one of these names:<br>                   1 2 3 4 5<br>                   blue green red white yellow<br>                   anna bernhard chris david ellen<br>                   danish finnish icelandic norwegian swedish<br>                   amiga atari linux mac windows<br>                   c c++ java pascal perl<br>(Note that no uppercase letters are used.)<br><br>－－－The second word specifies a relationship; it is one of <br>                   same-as left-of right-of next-to<br> same-as tells that the first and third fact words apply to the same room; for instance<br>                   blue same-as bernhard <br>tells that Bernhard lives in the room with a blue door. <br>left-of tells that the first fact word applies to the room immediately to the left of the one to which the third fact word applies. For example,<br>                   chris left-of perl<br>means that Chris lives in the room immediately to the left of the Perl programmer.<br>right-of tells that the rst fact word applies to the room immediately to the right of the one to which the third fact word applies.<br>next-to tells that the two fact words apply to rooms next to each other. For example,<br>                   swedish next-to linux<br>means that the Swedish student lives in the next room (either to the left or the right) of the owner of the Linux computer.<br><br><br>You may assume that there are no inconsistencies in the input data. In other words, there will in every scenario be at least one person who may own the Amiga without violating the constraints.", output:"For each scenario, you should print a line starting with scenario #n : where n is the scenario number. If you can determine who (i.e., Anna, Bernhard, Chris, David or Ellen) owns the Amiga, you continue the line with<br>              xxxx owns the amiga. <br>or, if you cannot name the Amiga owner, you print cannot identify the amiga owner.", sample_in:"2\n8\nred same-as 1\ndanish same-as 1\nperl same-as 5\natari same-as 2\nlinux same-as 3\nmac same-as 4\nwindows same-as 5\nanna same-as 1\n8\nchris left-of amiga\nchris left-of 4\nc same-as 1\ndanish same-as 1\nred same-as 1\nlinux same-as red\nwindows next-to linux\nmac left-of swedish", sample_out:"scenario #1: anna owns the amiga.\nscenario #2: cannot identify the amiga owner.", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:4, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NM2004", author:"", tag:["TEST"]}
{pid:1947, vid:1947, oj:"hdu", title:"Lazy Evaluation", desc:"Most of the programming languages used in practice perform strictevaluation.<br>When a function is called, the expressions passed in the function arguments (for instance a + b in f (a + b, 3)) are evaluated first,and the resulting values are passed to the function. <br>However, this is not the only way how expressions can be evaluated, and in fact, even such a mainstream language as C++ is sometimes performing lazy evaluation: the operators &amp;&amp; and jj evaluate only those arguments that are needed to determine the value of the expression. <br>Pal Christian is now working on a comparative study of the performance of the lazy and strict evaluation. Pal wants to evaluate in both ways a set of expressions that follow this simplied syntax:<br>－－an expression is either a constant, a name, or a function call<br>－－a constant is a signed 32-bit integer; for example, 3, 0, -2, 123 are constants;<br>－－a name is a name of a built-in or user-dened function, for example, f , or add are names; names are words containing up to 32 lowercase letters from the English alphabet; <br>－－function call has the form: ( f unction arg1 . . . argN ), where f unction is an expression that evaluates to some function of N arguments, and arg1 . . . argN are expressions that evaluate to arguments passed to the function. For example, ( f 3 5 ) , or ( add 2 ( add 1 2 )) are valid function calls.<br>Expressions are evaluated according to the following simple rules:<br>－－constants evaluate to themselves<br>－－names evaluate to the functions they denote<br>－－function calls:<br>in lazy evaluation: the first expression is evaluated first to obtain a function, whose function body, with formal parameters substituted for the expressions provided as the arguments, is evaluated; however, whenever some argument gets evaluated while evaluating the  function body, the resulting value will replace all occurences of the same parameter in that function body. In other words, the expression passed in the argument is never evaluated more than once. <br>in strict evaluation: all expressions are evaluated first: the first expression  should evaluate to a function, the remaining to values that are used as function arguments; the result is the result of evaluating the corresponding function body, where all occurences of formal parameters are replaced by the values obtained by evaluating the arguments.<br><br>The following built-in functions are available: add x y - sum of the constants x and y, sub x y - returns the value x-y, mult x y - product of x and y, div x y - integer division, and rem x y - remainder (same semantics as \'/\' and \'%\' in C, C++ or Java), true x y - always returns x, f alse x y - always returns y , eq x y - returns true if x and y is the same constant, otherwise returns f alse, gt x y - returns true if x is greater than y, otherwise returns f alse.<br><br>User-defined functions are defined using the following syntax:<br>f unction name arg1 . . . argN = body, where arg1 . . . argN are distinct words (up to 32 English lowercase letters), denoting the formal parameters of the function, and the body is an expression. The formal parameters can occur in the body of the function in place of constants or names. The function name and the formal parameters are separated by a single space. There is one space on both sides of the &quot;=&quot;. Functions with zero (no)  rguments are legal. Note that the formal parameters can overshadow the function names (i.e. op in definition of not in sample input overshadows the function name op), but each function must have a unique name. ", input:"The first part of the input contains (less than 1000) lines with one function denition each, followed by a single empty line. Forward references (that is, referring to functions dened later in the input) and recursion are legal. The second part of the input contains less than 1000 test expressions. Each test expression is an expresion occupying a single line. Function names and the arguments are always separated by a single space, but there are no extra spaces around parentheses (see sample input). There is an empty line after the last expression. Expressions are to be evaluated by both the lazy and the strict evaluation. You can assume that all function definitions and expressions are syntactically correct, and that the arithmetic built-in functions (add, sub,<br>mult, div, rem, eq, gt) will always be called with integers only, and no division by 0 occurs. Overows outside the 32-bit integer range are legal and do not require any special treatment (just use the value produced by C, C++, or Java operators +, -, *, /, or %). In strict evaluation, built-in functions evaluate all their arguments too. In lazy evaluation, arithmetic built-in functions always evaluate all their arguments. All lines on the input contain no more than 255 characters including spaces. ", output:"The program should produce a table in exactly the following format:<br><br>    operator   lazy_evaluation          strict_evaluation<br>    add          addlazy                    addstrict<br>    sub          sublazy                     substrict<br>    mult         multlazy                   multstrict<br>    div           divlazy                     divstrict<br>    rem          remlazy                   remstrict<br><br>where each <img src=data/images/1947-1.gif> is an integer - how many times op has been executed in lazy evaluation of all expressions, and <img src=data/images/1947-2.gif> is the number of evaluations of <img src=data/images/1947-3.gif> in strict evaluation. Spaces can occur arbitrarily. If the evaluation of a test expression does not terminate after a total of 2345 function evaluations , you can assume that it is in an innite loop, the program should skip that expression, and do not count it into the totals (omit counting operations both in lazy and strict evaluation of this expression). ", sample_in:"if cond truepart elsepart = (cond truepart elsepart)\nfact x = (facta x 1)\nfacta x a = (if (eq x 0) a (facta (sub x 1) (mult a x)))\nand x y = (x y false)\nident x = x\ntwo = 2\nop op x = ((if (eq op 1) add sub) op x)\nnot op = (op false true)\nsum n = (suma n 0)\nsuma n a = (((gt n 1) suma false) (sub n 1) (add a n))\n(true (add 1 2) (mult 1 2))\n5\ntrue\n(and (gt (op (sub 2 1) 1) 5) (eq (two) (op 1 1)))\n(false (sub 1 2) (sum 4))\n((eq (true 1 2) (false 2 1)) (add 1 2) (sub 1 2))\n(fact 3)", sample_out:"operator lazy_evaluation strict_evaluation\nadd                 7                     8\nsub                 4                     7\nmult                0                     1\ndiv                  0                     0\nrem                 0                     0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2, vtotal_submit:13, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NM2004", author:"", tag:["TEST"]}
No Such Problem Called HDU 1948.<br>
{pid:1949, vid:1949, oj:"hdu", title:"Tourist", desc:"A lazy tourist wants to visit as many interesting locations in a city as possible without going one step further than necessary. Starting from his hotel, located in the north-west corner of city, he intends to take a walk to the south-east corner of the city and then walk back. When walking to the south-east corner, he will only walk east or south, and when walking back to the north-west corner, he will only walk north or west. After studying the city map he realizes that the task is not so simple because some areas are blocked. Therefore he has kindly asked you to write a program to solve his problem. <br>Given the city map (a 2D grid) where the interesting locations and blocked areas are marked, determine the maximum number of interesting locations he can visit. Locations visited twice are only counted once. ", input:"The first line in the input contains the number of test cases (at most 20). Then follow the cases. Each case starts with a line containing two integers, W and H (2 &lt;= W, H &lt;= 100), the width and the height of the city map. Then follow H lines, each containing a string with W characters with the following meaning:<br>\'.\' Walkable area<br>\'*\' Interesting location (also walkable area)<br>\'#\' Blocked area<br>You may assume that the upper-left corner (start and end point) and lower-right corner (turning point) are walkable, and that a walkable path of length H +W - 2 exists between them. ", output:"For each test case, output a line containing a single integer: the maximum number of interesting locations the lazy tourist can visit.<br>", sample_in:"2\n9 7\n*........\n.....**#.\n..**...#*\n..####*#.\n.*.#*.*#.\n...#**...\n*........\n5 5\n.*.*.\n*###.\n*.*.*\n.###*\n.*.*.", sample_out:"7\n8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:25, vtotal_submit:74, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NM2004", author:"", tag:["TEST"]}
{pid:1950, vid:1950, oj:"hdu", title:"Bridging signals", desc:"\'Oh no, they\'ve done it again\', cries the chief designer at the Waferland chip factory. Once more the routing designers have screwed up completely, making the signals on the chip connecting the ports of two functional blocks cross each other all over the place. At this late stage of the process, it is too<br>expensive to redo the routing. Instead, the engineers have to bridge the signals, using the third dimension, so that no two signals cross. However, bridging is a complicated operation, and thus it is desirable to bridge as few  signals as possible. The call for a computer program that finds the maximum number of signals which may be connected on the silicon surface without  rossing each other, is imminent. Bearing in mind that there may be  housands of signal ports at the boundary of a functional block, the problem asks quite a lot of the programmer. Are you up  to the task?<br><img src=data/images/1950-1.jpg><br>Figure 1. To the left: The two blocks\' ports and their signal mapping (4,2,6,3,1,5). To the right: At most three signals may be routed on the silicon surface without crossing each other. The dashed signals must be bridged. <br><br>A typical situation is schematically depicted in figure 1. The ports of the two functional blocks are numbered from 1 to p, from top to bottom. The signal mapping is described by a permutation of the numbers 1 to p in the form of a list of p unique numbers in the range 1 to p, in which the i:th number  pecifies which port on the right side should be connected to the i:th port on the left side.<br>Two signals cross if and only if the straight lines connecting the two ports of each pair do.", input:"On the first line of the input, there is a single positive integer n, telling the number of test scenarios to follow. Each test scenario begins with a line containing a single positive integer p&lt;40000, the number of ports on the two functional blocks. Then follow p lines, describing the signal mapping: On the i:th line is the port number of the block on the right side which should be connected to the i:th port of the block on the left side. ", output:"For each test scenario, output one line containing the maximum number of signals which may be routed on the silicon surface without crossing each other.", sample_in:"4\n6\n4\n2\n6\n3\n1\n5\n10\n2\n3\n4\n5\n6\n7\n8\n9\n10\n1\n8\n8\n7\n6\n5\n4\n3\n2\n1\n9\n5\n8\n9\n2\n3\n1\n7\n4\n6", sample_out:"3\n9\n1\n4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:230, vtotal_submit:470, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2003", author:"", tag:["TEST"]}
{pid:1951, vid:1951, oj:"hdu", title:"Vase collection", desc:"Mr Cheng is a collector of old Chinese porcelain, more specifically late 15th century Feng dynasty vases. The art of vase-making at this time followed very strict artistic rules. There was a limited number of accepted styles, each defined by its shape and decoration. More specifically, there were 36 vase shapes and 36 different patterns of decoration – in all 1296 different styles.<br><br>For a collector, the obvious goal is to own a sample of each of the 1296 styles. Mr Cheng however, like so many other collectors, could never afford a complete collection, and instead concentrates on some shapes and some decorations. As symmetry between shape and decoration was one of the<br>main aestheathical paradigms of the Feng dynasty, Mr Cheng wants to have a full collection of all combinations of k shapes and k decorations, for as large a k as possible. However, he has discovered that determining this k for a given collection is not always trivial. This means that his collection might actually be better than he thinks. Can you help him?", input:"On the first line of the input, there is a single positive integer n, telling the number of test scenarios to follow. Each test scenario begins with a line containing a single positive integer m &lt;=100 , the number of vases in the  collection. Then follow m lines, one per vase, each with a pair of numbers, si and di, separated by a single space, where si ( 0 &lt; i &lt;= 36  ) indicates the  shape of Mr Cheng\'s i:th vase, and di ( 0 &lt; i &lt;=36 ) indicates its decoration.", output:"For each test scenario, output one line containing the maximum k, such that there are k shapes and k decorations for which Mr Cheng\'s collection contains all k*k combined styles.", sample_in:"2\n5\n11 13\n23 5\n17 36\n11 5\n23 13\n2\n23 15\n15 23", sample_out:"2\n1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:31, vtotal_submit:126, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2003", author:"", tag:["TEST"]}
{pid:1952, vid:1952, oj:"hdu", title:"Gladiators", desc:"In the TV game show Gladiators, the final competition is to run through a steeplechase course. To get some variation, the producer has decided to change the course each week. The course is always built out of m obstacles, all of different heights, placed along a straight line. An obstacle consists of two initially connected platforms which may be separated. Between the two platforms of an obstacle, other higher obstacles may be put. Also, obstacles may be put after one another. <br><img src=data/images/1952-1.gif><br>Figure 1. To the left: An obstacle seen from the side. To the right: A steeplechase course consisting of 5 obstacles. The contestants run from left to right.<br><br>The producer thinks it is most desirable that the results from different weeks may be compared to each other. Therefore, he wants to build courses of similar degree of difficulty.<br>A proposed measure of difficulty is the number of platforms that are higher than their immediately preceeding platform along the course. Moreover, the leftmost (first) platform of the course always give rise to one point since it is located above the floor. E.g. the course to the right in figure 1 has four points of difficulty.<br>Your mission is to find out how many ways there are to build a course of a given point of difficulty,from a given number of obstacles. ", input:"On the first line of input is a single positive integer n, telling the number of test scenarios to follow. <br>Each test scenario consists of one line containing two non negative integers  m and k, where m &lt;=  50 is the number of obstacles, and k is the point of difficulty asked for.", output:"For each test scenario, output one line containing a single positive integer equal to the number of different courses constructable from the m obstacles, amounting to a point of difficulty of exactly k. You may safely assume that the answer is less than 10^100.", sample_in:"6 0\n1 0\n1 1\n2 1\n2 2\n3 1\n3 2", sample_out:"0\n1\n1\n2\n1\n8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:7, vtotal_submit:12, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2003", author:"", tag:["TEST"]}
{pid:1953, vid:1953, oj:"hdu", title:"Who’s the boss?", desc:"Several surveys indicate that the taller you are, the higher you can climb the corporate ladder. At TALL Enterprises Inc. this “de facto standard” has been properly formalized: your boss is always at least as tall as you are.  <br><br>Furthermore, you can safely assume that your boss earns a bit more than you do. In fact, you can be absolutely sure that your immediate boss is the  person who earns the least among all the employees that earn more than you and are at least as tall as you are. Furthermore, if you are the immediate boss of someone, that person is your subordinate, and all his subordinates  are your subordinates as well. If you are nobody’s boss, then you have no  subordinates. As simple as these rules are, many people working for TALL are unsure of to whom they should be turning in their weekly progress report and how many subordinates they have. Write a program that will help in determining for any employee who the immediate boss of that employee is and how many subordinates they have. Quality Assurance at TALL have devised a series of tests to ensure that your program is correct. These test are described below. <br>", input:"On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario begins with a line containing two positive integers m and q, where m (at most 30000) is the number of employees and q (at most 200) is the number of queries. The following m lines each list an employee by three integers on the same line: employee ID number (six decimal digits, the first one of which is not zero), yearly salary in Euros and finally height in μm <br>(1 μm =10<sup>-6</sup> meters – accuracy is important at TALL). The chairperson is the employee that earns more than anyone else and is also the tallest person in the company. Then there are q lines listing queries. Each query is a single legal employee ID. <br><br>The salary is a positive integer which is at most 10 000 000. No two employees have the same ID,and no two employees have the same salary. The height of an employee is at least 1 000 000  μm and at most 2 500 000 μm.<br>", output:"For each employee ID x in a query output a single line with two integers y k, separated by one space character, where y is the ID of x’s boss, and k is the number of subordinates of x. If the query is the ID of the chairperson, then you should output 0 as the ID of his or her boss (since the chairperson has no immediate boss except, possibly, God).", sample_in:"2\n3 3\n123456 14323 1700000\n123458 41412 1900000\n123457 15221 1800000\n123456\n123458\n123457\n4 4\n200002 12234 1832001\n200003 15002 1745201\n200004 18745 1883410\n200001 24834 1921313", sample_out:"123457 0\n0 2\n123458 1\n200001 2\n200004 0\n200004 0\n0 3\n200004\n200002\n200003\n200001", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:9, vtotal_submit:32, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2003", author:"", tag:["TEST"]}
{pid:1954, vid:1954, oj:"hdu", title:"Subway tree systems", desc:"Some major cities have subway systems in the form of a tree, i.e. between any pair of stations, there is one and only one way of going by subway. Moreover, most of these cities have a unique central station. Imagine you are a tourist in one of these cities and you want to explore all of the subway<br>system. You start at the central station and pick a subway line at random and jump aboard the subway car. Every time you arrive at a station, you pick one of the subway lines you have not yet travelled on. If there is none left to explore at your current station, you take the subway line back on which you first came to the station, until you eventually have travelled along all of the lines twice, once for each direction. At that point you are back at the central station. Afterwards, all you remember of the order of your exploration is whether you went further away from the central station or back towards it at any given time, i.e. you could encode your tour as a binary string, where 0 encodes taking a subway line getting you one station further away from the central station, and 1 encodes getting you one station closer to the central station. <br><img src=data/images/1954-1.gif><br>Figure 1. To the left: A subway tree system. The larger dot is the central station. To the right: Three out of several possible encodings of exploration tours for the subway system. ", input:"On the first line of input is a single positive integer n, telling the number of test scenarios to follow. <br>Each test scenario consists of two lines, each containing a string of the characters \'0\' and \'1\' of length at most 3000, both describing a correct exploration tour of a subway tree system.", output:"For each test scenario, output one line containing the text “same” if the two strings may encode exploration tours of the same subway tree system, or the text “different” if the two strings cannot be exploration tours of the same subway tree system.", sample_in:"2\n0010011101001011\n0100011011001011\n0100101100100111\n0011000111010101", sample_out:"same\ndifferent", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:49, vtotal_submit:197, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2003", author:"", tag:["TEST"]}
{pid:1955, vid:1955, oj:"hdu", title:"Prison rearrangement", desc:"In order to lower the risk of riots and escape attempts, the boards of two nearby prisons of equal prisoner capacity, have decided to rearrange their prisoners among themselves. They want to exchange half of the prisoners of one prison, for half of the prisoners of the other. However, from the archived information of the prisoners\' crime history, they know that some pairs of prisoners are dangerous to keep in the same prison, and that is why they are separated today, i.e. for every such pair of prisoners, one prisoners serves time in the first prison, and the other in the second one. The boards agree on the importance of keeping these pairs split between the prisons, which makes their rearrangement task a bit tricky. In fact, they soon find out that sometimes it is impossible to fulfil their wish of swapping half of the prisoners. Whenever this is the case, they have to settle for exchanging as close to one half of the prisoners as possible. ", input:"On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario begins with a line containing two non-negative integers m and r, 1&lt;m&lt;200 being the number of prisoners in each of the two prisons, and r the number of dangerous pairs among the prisoners. Then follow r lines each containing a pair xi yi of integers in the range 1 to m, which means that prisoner xi of the first prison must not be placed in the same prison as prisoner yi of the second prison.", output:"For each test scenario, output one line containing the largest integer k &lt;= m/ 2 , such that it is possible to exchange k prisoners of the first prison for k prisoners of the second prison without getting two prisoners of any dangerous pair in the same prison.", sample_in:"3\n101 0\n3 3\n1 2\n1 3\n1 1\n8 12\n1 1\n1 2\n1 3\n1 4\n2 5\n3 5\n4 5\n5 5\n6 6\n7 6\n8 7\n8 8", sample_out:"50\n0\n3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:17, vtotal_submit:32, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2003", author:"", tag:["TEST"]}
{pid:1956, vid:1956, oj:"hdu", title:"Sightseeing tour", desc:"The city executive board in Lund wants to construct a sightseeing tour by bus in Lund, so that tourists can see every corner of the beautiful city. They want to construct the tour so that every street in the city is visited exactly once. The bus should also start and end at the same junction. As in any city, the streets are either one-way or two-way, traffic rules that must be obeyed by the tour bus. Help the executive board and determine if it’s possible to construct a sightseeing tour under these constraints.", input:"On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario begins with a line containing two positive integers m and s, 1&lt;=m&lt;=200, 1&lt;=s&lt;=1000 being the number of junctions and streets, respectively. The following s lines contain the streets. Each street is described with three integers, xi, yi, and di, 1&lt;=xi,yi&lt;=m, 0&lt;=di&lt;=1, where xi and yi are the junctions connected by a street. If di=1, then the street is a one-way street (going from xi to yi), otherwise it’s a two-way street. You may assume that there exists a junction from where all other junctions can be reached. ", output:"For each scenario, output one line containing the text “possible” or  “impossible”, whether or not it’s possible to construct a sightseeing tour.", sample_in:"4\n5 8\n2 1 0\n1 3 0\n4 1 1\n1 5 0\n5 4 1\n3 4 0\n4 2 1\n2 2 0\n4 4\n1 2 1\n2 3 0\n3 4 0\n1 4 1\n3 3\n1 2 0\n2 3 0\n3 2 0\n3 4\n1 2 0\n2 3 1\n1 2 0\n3 2 0", sample_out:"possible\nimpossible\nimpossible\npossible", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:65, vtotal_submit:248, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2003", author:"", tag:["TEST"]}
{pid:1957, vid:1957, oj:"hdu", title:"A number game", desc:"The wide dissemination of calculators and computers is not without  disadvantages. Teachers all over the world find out that even students in technical disciplines tend to have a surprising lack of calculating ability. Accustomed as they are to the use of calculators and computers, many of them are unable to make calculations like 7*8 mentally, or to factor 91 by heart. <br><br>We all know, but who cares?<br><br>Professor Bartjens cares. Professor Bartjens is a bit old-fashioned. He decided to give his students some training in calculating without electronic  equipment - even without a slide rule. He invented a two-person game involving mental calculations. <br><br>Professor Bartjens would write a positive number on the blackboard. During the game more positive numbers may appear on the blackboard. The two players will then make moves in turn. A player on move is obliged to make a move, unless the blackboard is empty, in which case the game<br>is over. A move is one of the following:<br>－－If you see the number 1 on the blackboard, you may take it. That means: you gain one point,and the number disappears from the blackboard.<br>－－If you see a prime number p on the blackboard, you may subtract one. That is: you gain one point, and the p on the blackboard is replaced by p －1.<br>－－If you see a composite number c on the blackboard, you may replace it by two smaller (positive) numbers, a and b, such that a * b = c. You do not gain any points.<br><br>The goal is of course to obtain as many points as you can.<br><br>Professor Bartjens was hoping that his students would find the game so interesting that they would spend all day playing, thereby improving their skills in calculation. Indeed his students did find the game interesting, and spent many hours, not so much playing the game as discussing optimal strategies.<br>The students came to two conclusions. First, the sum of the two players\' points after any given game are the same regardless of the actual scheme played. Thus,&quot; a player maximising his own points also minimises his opponent\'s! Second, it is always best to take a point when you have the<br>chance. Thus, whenever prime numbers or ones are written on the blackboard, the player on move takes one of them.<br><br>Here is your problem: given a starting number, and assuming both players play to maximise their own points, what will be the outcome?", input:"On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario consists of a single line containing the positive integer m&lt;1000000, the number initially written on the blackboard.", output:"For each test scenario, output one line containing two numbers separated by one space character, equal to the points gained by the two players, both playing to maximise their own points. The first number is the number of points gained by the first player.", sample_in:"6\n1\n2\n3\n4\n5\n6", sample_out:"1 0\n1 1\n2 1\n2 2\n3 2\n2 3", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:3, vtotal_submit:13, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2003", author:"", tag:["TEST"]}
{pid:1958, vid:1958, oj:"hdu", title:"Word Encoding", desc:"In any language, certain combinations of letters do not appear (or at least appear so seldom that they can be considered non-existent). For instance, there are no English words containing the three letter combination buv as a substring. Given a list of letter combinations that do not exist, the number of possible “words” in a language can be reduced a lot (a “word” here means any combination of letters that doesn’t contain any of the given letter combinations as a substring). If we order all such words by increasing length, ordering words of the same length alphabetically, we can enumerate them starting from 1. Assume that the alphabet always consists of the lower case letters ’a’ to ’z’.<br><br>For instance, if the list only contains the combinations q, ab and aaa, the words would be<br>enumerated like this:<br>1. a<br>2. b<br>...<br>16. p<br>17. r<br>...<br>26. aa<br>27. ac<br>...<br>649. zz<br>650. aac<br>Given the list of letter combinations, write a program that for a given word outputs its number, and for a given number ouputs its word. You can assume that none of the words will exceed 20 characters and no number will be greater than 2 000 000 000 (for both input and output).<br>", input:"The input will contain several test cases. The number of test cases T appears on a line by itself. Then follow T test cases. Each test case starts with a line containing two integers, N (the number of letter combinations, non-negative, at most 1 000) and M (the number of queries for this list, positive, at most 100). Then follow N lines, each containing a lower case letter combination (between 1 and 3 letters, inclusive). After that follow M lines, each containing either a positive integer or a lower case word. If it’s a word, it will not contain any of the combinations of letters in the list for this test case. If it’s a number, it will not be greater than the number of words in the language.", output:"For each query, output a single line containing either the word’s corresponding number, or the number’s corresponding word.", sample_in:"2\n3 4\nq\nab\naaa\n16\nr\n27\naac\n7 2\na\nb\nc\nd\nef\nghi\nijk\n102345678\nksvfuw", sample_out:"p\n17\nac\n650\nxexgun\n39174383", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:4, vtotal_submit:7, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2004", author:"", tag:["TEST"]}
{pid:1959, vid:1959, oj:"hdu", title:"Watchdog", desc:"A company (name withheld) has an office building in the center of Lund. The building has a perfectly square roof with a number of hatches. Because of a series of burglaries where the perpetrators have entered through these hatches, it was decided to use a watchdog to guard the hatches. A particularly vicious but rather stupid breed of dog was chosen, and unfortunately the dog fell off the roof on its third watch.<br><br>A new dog has been procured and it has been decided to attach a leash to its collar and attach the other end at some point on the roof. However, if the leash is too short the dog cannot reach all hatches, but if it is too long then the dog will fall off the building again. The leash has hooks at both ends, so no part of it is used to tie knots. The company wants the dog to reach the center of each hatch (the dog can reach exactly as far as the leash could reach if it were lying flat on the roof), but it does not want the leash to extend beyond the edge of the roof (to the edge is OK). They hope that by carefully choosing the length of the leash and where to attach it, the dog will be able to reach all hatches without risking falling off the building. A leash can only be attached at a point with integer coordinates (if the building is 10 by 10 meters, then the south-west corner of the building has coordinates (0, 0) and the north-east corner has coordinates (10, 10)). A leash cannot be attached at a point where there is a hatch.<br><br>If there is no place where you can attach a leash, reach all hatches but not reach beyond the edge of the roof, it is impossible to use this breed of dog, and the company will instead use a poodle (which is a less vicious type of dog, but also less prone to falling off buildings). <br>", input:"On the first line of the input is a single positive integer N, telling the number of test cases to follow. Each case starts with one line with two integers S H, where S is even, 2 &lt;= S &lt;= 40, and 1 &lt;= H &lt;= 50. S is the side of the square roof in meters and H is the number of hatches. The following H lines each contain two integers X and Y. These are the coordinates of the hatches. Hatches will never lie outside the roof or on the roof’s perimeter. No two hatches will occupy the same position", output:"For each test case, output one line containing the coordinates X Y at which to fasten the leash (if there are several possible points, output the one with smallest X, and if there are still several possibilities select the one with smallest Y among those with smallest X) such that a leash of suitable length allows access to all hatches without extending beyond the edge of the roof. If there is no such point, output “poodle” for that test case.", sample_in:"3\n10 2\n6 6\n5 4\n20 2\n1 1\n19 19\n10 3\n1 1\n1 2\n1 3", sample_out:"3 6\npoodle\n2 2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:20, vtotal_submit:42, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2004", author:"", tag:["TEST"]}
{pid:1960, vid:1960, oj:"hdu", title:"Taxi Cab Scheme", desc:"Running a taxi station is not all that simple. Apart from the obvious demand for a centralised coordination of the cabs in order to pick up the customers calling to get a cab as soon as possible, there is also a need to schedule all the taxi rides which have been booked in advance. Given a list of all booked taxi rides for the next day, you want to minimise the number of cabs needed to carry out all of the rides. <br><br>For the sake of simplicity, we model a city as a rectangular grid. An address in the city is denoted by two integers: the street and avenue number. The time needed to get from the address a, b to c, d by taxi is |a &amp;#8722; c| + |b &amp;#8722; d| minutes. A cab may carry out a booked ride if it is its first ride of the day, or if it can get to the source address of the new ride from its latest , at least one minute before the new ride’s scheduled departure. Note that some rides may end after midnight.<br>", input:"On the first line of the input is a single positive integer N, telling the number of test scenarios to follow. Each scenario begins with a line containing an integer M, 0 &lt; M &lt; 500, being the number of booked taxi rides. The following M lines contain the rides. Each ride is described by a departure time on the format hh:mm (ranging from 00:00 to 23:59), two integers a b that are the coordinates of the source address and two integers c d that are the coordinates of the destination address. All coordinates are at least 0 and strictly smaller than 200. The booked rides in each scenario are sorted in order of increasing departure time.<br>", output:"For each scenario, output one line containing the minimum number of cabs required to carry out all the booked taxi rides.", sample_in:"2\n2\n08:00 10 11 9 16\n08:07 9 16 10 11\n2\n08:00 10 11 9 16\n08:06 9 16 10 11", sample_out:"1\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:82, vtotal_submit:112, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2004", author:"", tag:["TEST"]}
{pid:1961, vid:1961, oj:"hdu", title:"Pseudo-random Numbers", desc:"Access to high-quality randomness is very important for many applications, especially in cryptography. Radioactive decay is somtimes used as a source of 搕rue randomness? but this is a fairly slow procedure for getting random numbers. Also, in many applications it is important that the same 搑andom?sequence can be produced in two different places. For these reasons one often uses a pseudo-random sequence instead. A pseudo-random sequence is a sequence that is, in fact, not random, but very hard to distinguish from a truly random sequence. A pseudo-random sequence should also be difficult to predict, i.e., given the first few elements of the sequence it should be difficult do determine some later, yet unseen, number in the sequence. <br><br>The Association of Cryptographic Machinery (ACM) has devised an algorithm for generating pseudo-random number sequences, but they have no idea how good it really is.Therefore they want you to test it.<br><br>The algorithm to generate a sequence of integers, where each integer is between 0 and B &amp;#8722; 1 inclusive, is as follows: <br>1. Start with any number (the seed) in base B. This number can contain hundreds of base B digits.<br>2. The last digit (least significant) is output as the next element of the sequence.<br>3. Create a new number by writing down the sum of all neighbouring digits from left to right. E.g., with B = 10, the number 845 would yield the number 129 (since 8 + 4 = 12 and 4 + 5 = 9).<br>4. Repeat steps 2 and 3 as many times as needed, or until the number has only one base B digit. You get one more pseudo-random digit between 0 and B &amp;#8722; 1 each time.<br><br>If we have B = 10 and the seed number is 845, then the next numbers will be 129, 311 (1 + 2 = 3, 2 + 9 = 11), 42 (3 + 1 = 4, 1 + 1 = 2), and 6 (4 + 2 = 6). As 6 is a single digit base 10 number, the algorithm terminates. The pseudo-random digits generated are 5, 9, 1, 2 and 6.<br><br>You will be testing the generator as follows. You will be given the first L elements output by the generator and an integer T &gt; L. You are supposed to decide if the first T elements are completely determined by the first L elements. To check the robustness of your testing procedure the ACM have slipped in some impossible sequences, i.e. sequences that cannot be generated by any initial seed.<br>", input:"On the first line of the input is a single positive integer N, telling the number of test cases to follow. The first line of each test case consists of one integer B (2 &lt;= B &lt;= 1 000), the base. The second line consists of an integer L (1 &lt;= L &lt;= 100), followed by the L first elements of some sequence (the elements are written in base 10 and are between 0 and B &amp;#8722; 1 inclusive). The third line consists of an integer T, (L &lt; T &lt;= 100 000), the element of the sequence to predict.", output:"For each test case output, on a line of its own:<br>?搃mpossible?if no seed number can produce the given sequence.<br>?搖npredictable?if there exists a seed number that produces the given sequence but the first T elements are not completely determined by the first L elements.<br>?the T:th element of the sequence in base 10, otherwise.<br>", sample_in:"3\n10\n5 5 9 6 7 0\n7\n16\n4 11 7 8 4\n12\n2\n5 0 1 1 1 0\n10", sample_out:"8\nunpredictable\nimpossible", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:10, vtotal_submit:18, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2004", author:"", tag:["TEST"]}
{pid:1962, vid:1962, oj:"hdu", title:"Card Game Cheater", desc:"Adam and Eve play a card game using a regular deck of 52 cards. The rules are simple. The players sit on opposite sides of a table, facing each other. Each player gets k cards from the deck and, after looking at them, places the cards face down in a row on the table. Adam’s cards are numbered from 1 to k from his left, and Eve’s cards are numbered 1 to k from her right (so Eve’s i:th card is opposite Adam’s i:th card). The cards are turned face up, and points are awarded as follows (for each i ∈ {1, . . . , k}):<br>&amp;#8226; If Adam’s i:th card beats Eve’s i:th card, then Adam gets one point.<br>&amp;#8226; If Eve’s i:th card beats Adam’s i:th card, then Eve gets one point.<br>&amp;#8226; A card with higher value always beats a card with a lower value: a three beats a two, a four beats a three and a two, etc. An ace beats every card except (possibly) another ace.<br>&amp;#8226; If the two i:th cards have the same value, then the suit determines who wins: hearts beats all other suits, spades beats all suits except hearts, diamond beats only clubs, and clubs does not beat any suit. <br><br>For example, the ten of spades beats the ten of diamonds but not the Jack of clubs. This ought to be a game of chance, but lately Eve is winning most of the time, and the reason is that she has started to use marked cards. In other words, she knows which cards Adam has on the table before he turns them face up. Using this information she orders her own cards so that she gets as many points as possible.<br><br>Your task is to, given Adam’s and Eve’s cards, determine how many points Eve will get if she plays optimally.<br>", input:"There will be several test cases. The first line of input will contain a single positive integer N giving the number of test cases. After that line follow the test cases.<br><br>Each test case starts with a line with a single positive integer k ≤ 26 which is the number of cards each player gets. The next line describes the k cards Adam has placed on the table, left to right. The next line describes the k cards Eve has (but she has not yet placed them on the table). A card is described by two characters, the first one being its value (2, 3, 4, 5, 6, 7, 8 ,9, T, J, Q, K, or A), and the second one being its suit (C, D, S, or H). Cards are separated by white spaces. So if Adam’s cards are the ten of clubs, the two of hearts, and the Jack of diamonds, that could be described by the line <br><br>TC 2H JD<br>", output:"For each test case output a single line with the number of points Eve gets if she picks the optimal way to arrange her cards on the table.", sample_in:"3\n1\nJD\nJH\n2\n5D TC\n4C 5H\n3\n2H 3H 4H\n2D 3D 4D", sample_out:"1\n1\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:102, vtotal_submit:169, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2004", author:"", tag:["TEST"]}
{pid:1963, vid:1963, oj:"hdu", title:"Investment", desc:"John never knew he had a grand-uncle, until he received the notary’s letter. He learned that his late grand-uncle had gathered a lot of money, somewhere in South-America, and that John was the only inheritor.<br><br>John did not need that much money for the moment. But he realized that it would be a good idea to store this capital in a safe place, and have it grow until he decided to retire. The bank convinced him that a certain kind of bond was interesting for him. <br><br>This kind of bond has a fixed value, and gives a fixed amount of yearly interest, payed to the owner at the end of each year. The bond has no fixed term. Bonds are available in different sizes. The larger ones usually give a better interest. Soon John realized that the optimal set of bonds to buy was not trivial to figure out. Moreover, after a few years his capital would have grown, and the schedule had to be re-evaluated.<br><br>Assume the following bonds are available:<br>Value   Annual interest<br>4000    &nbsp;&nbsp;400<br>3000    &nbsp;&nbsp;250<br><br>With a capital of $10 000 one could buy two bonds of $4 000, giving a yearly interest of $800. Buying two bonds of $3 000, and one of $4 000 is a better idea, as it gives a yearly interest of $900. After two years the capital has grown to $11 800, and it makes sense to sell a $3 000 one and buy a $4 000 one, so the annual interest grows to $1 050. This is where this story grows unlikely: the bank does not charge for buying and selling bonds. Next year the total sum is $12 850, which allows for three times $4 000, giving a yearly interest of $1 200. <br><br>Here is your problem: given an amount to begin with, a number of years, and a set of bonds with their values and interests, find out how big the amount may grow in the given period, using the best schedule for buying and selling bonds.<br>", input:"The first line contains a single positive integer N which is the number of test cases. The test cases follow. <br><br>The first line of a test case contains two positive integers: the amount to start with (at most $1 000 000), and the number of years the capital may grow (at most 40). <br><br>The following line contains a single number: the number d (1 &lt;= d &lt;= 10) of available bonds.<br><br>The next d lines each contain the description of a bond. The description of a bond consists of two positive integers: the value of the bond, and the yearly interest for that bond. The value of a bond is always a multiple of $1 000. The interest of a bond is never more than 10% of its value.<br>", output:"For each test case, output – on a separate line – the capital at the end of the period, after an optimal schedule of buying and selling.", sample_in:"1\n10000 4\n2\n4000 400\n3000 250", sample_out:"14050", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:105, vtotal_submit:327, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2004", author:"", tag:["TEST"]}
{pid:1964, vid:1964, oj:"hdu", title:"Pipes", desc:"The construction of office buildings has become a very standardized task. Pre-fabricated modules are combined according to the customer’s needs, shipped from a faraway factory, and assembled on the construction site. However, there are still some tasks that require careful planning, one example being the routing of pipes for the heating system. <br><br>Amodern office building ismade up of squaremodules, one on each floor being a service module from which (among other things) hot water is pumped out to the other modules through the heating pipes. Each module (including the service module) will have heating pipes connecting it to exactly two of its two to four neighboring modules. Thus, the pipes have to run in a circuit, from the service module, visiting each module exactly once, before finally returning to the service module. Due to different properties of the modules, having pipes connecting a pair of adjacent modules comes at different costs. For example, some modules are separated by thick walls, increasing the cost of laying pipes. Your task is to, given a description of a floor of an office building, decide the cheapest way to route the heating pipes.<br>", input:"The first line of input contains a single integer, stating the number of floors to handle. Then follow n floor descriptions, each beginning on a new line with two integers, 2 &lt;= r &lt;= 10 and 2 &lt;= c &lt;= 10, defining the size of the floor – r-by-c modules. Beginning on the next line follows a floor description in ASCII format, in total 2r + 1 rows, each with 2c + 2 characters, including the final newline. All floors are perfectly rectangular, and will always have an even number of modules. All interior walls are represented by numeric characters, ’0’ to ’9’, indicating the cost of routing pipes through the wall (see sample input).", output:"For each test case, output a single line with the cost of the cheapest route.", sample_in:"3\n4 3\n#######\n# 2 3 #\n#1#9#1#\n# 2 3 #\n#1#7#1#\n# 5 3 #\n#1#9#1#\n# 2 3 #\n#######\n4 4\n#########\n# 2 3 3 #\n#1#9#1#4#\n# 2 3 6 #\n#1#7#1#5#\n# 5 3 1 #\n#1#9#1#7#\n# 2 3 0 #\n#########\n2 2\n#####\n# 1 #\n#2#3#\n# 4 #\n#####", sample_out:"28\n45\n10", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:111, vtotal_submit:451, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2004", author:"", tag:["TEST"]}
{pid:1965, vid:1965, oj:"hdu", title:"SETI", desc:"For some years, quite a lot of work has been put into listening to electromagnetic radio signals received from space, in order to understand what civilizations in distant galaxies might be trying to tell us. One signal source that has been of particular interest to the scientists at Universit磂 de Technologie Spatiale is the Nebula Stupidicus. <br><br>Recently, it was discovered that if each message is assumed to be transmitted as a sequence<br>of integers a0, a1, ...an&amp;#8722;1 the function <img src=data/images/1965-1.gif> always evaluates to values 0 &lt;= f (k) &lt;= 26 for 1 &lt;= k &lt;= n, provided that the correct value of p is used. n is of course the length of the transmitted message, and the ai denote integers such that 0 &lt;= ai &lt; p. p is a prime number that is guaranteed to be larger than n as well as larger than 26. It is, however, known to never exceed 30 000. <br><br>These relationships altogether have been considered too peculiar for being pure coincidences, which calls for further investigation. <br><br>The linguists at the faculty of Langues et Cultures Extraterrestres transcribe these messages to strings in the English alphabet to make the messages easier to handle while trying to interpret their meanings. The transcription procedure simply assigns the letters a..z to the values 1..26 that f (k) might evaluate to, such that 1 = a, 2 = b etc. The value 0 is transcribed to ??(an asterisk). While transcribing messages, the linguists simply loop from k = 1 to n, and append the character corresponding to the value of f (k) at the end of the string.<br><br>The backward transcription procedure, has however, turned out to be too complex for the linguists to handle by themselves. You are therefore assigned the task of writing a program that converts a set of strings to their corresponding Extra Terrestial number sequences.<br>", input:"On the first line of the input there is a single positive integer N, telling the number of test cases to follow. Each case consists of one line containing the value of p to use during the transcription of the string, followed by the actual string to be transcribed. The only allowed characters in the string are the lower case letters 抋?.抸?and ??(asterisk). No string will be longer than 70 characters.", output:"For each transcribed string, output a line with the corresponding list of integers, separated by space, with each integer given in the order of ascending values of i.", sample_in:"3\n31 aaa\n37 abc\n29 hello*earth", sample_out:"1 0 0\n0 1 0\n8 13 9 13 4 27 18 10 12 24 15", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:12, vtotal_submit:25, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2004", author:"", tag:["TEST"]}
{pid:1966, vid:1966, oj:"hdu", title:"Minimax Triangulation", desc:"Triangulation of surfaces has applications in the Finite Element Method of solid mechanics. The objective is to estimate the stress and strain on complex objects by partitioning them into small simple objects which are considered incompressible. It is convenient to approximate a plane surface with a simple polygon, i.e., a piecewise-linear, closed curve in the plane on m distinct vertices, which does not intersect itself. A chord is a line segment between two non-adjacent vertices of the polygon which lies entirely inside the polygon, so in particular, the endpoints of the chord are the only points of the chord that touch the boundary of the polygon. A triangulation of the polygon, is any choice of m - 3 chords, such that the polygon is divided into triangles. In a triangulation, no two of the chosen chords intersect each other, except at endpoints, and all of the remaining (unchosen) chords cross at least one of the chosen chords. Fortunately, finding an arbitrary triangulation is a fairly easy task, but what if you were asked to find the best triangulation according to some measure?<br><br><img src=data/images/1966-1.jpg><br><br>Figure I.1: Five out of nine possible triangulations of the example polygon. The leftmost has<br>the smallest largest triangle.<br>", input:"On the first line of the input is a single positive integer n, telling the number of test scenarios to follow. Each scenario begins with a line containing one positive integer 2 &lt; m &lt; 50, being the number of vertices of the simple polygon. The following m lines contain the vertices of the polygon in the order they appear along the border, going either clockwise or counter clockwise, starting at an arbitrary vertex. Each vertex is described by a pair of integers x y obeying 0 &lt;= x &lt;= 10 000 and 0 &lt;= y &lt;= 10 000.<br>", output:"For each scenario, output one line containing the area of the largest triangle in the triangulation of the polygon which has the smallest largest triangle. The area should be presented with one fractional decimal digit.", sample_in:"1\n6\n7 0\n6 2\n9 5\n3 5\n0 3\n1 1", sample_out:"9.0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5, vtotal_submit:7, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2004", author:"", tag:["TEST"]}
{pid:1967, vid:1967, oj:"hdu", title:"Sudoku", desc:"Oh no! Bill just realized that the sudoku puzzle he had spent the last ten minutes trying to solve essentially was last week’s puzzle, only rotated counterclockwise. How cheap! Couldn’t the magazine afford to make a new one every week? Of course, he had no way of knowing about this before he started to solve it, as the holes to fill with digits were other than last week. Nevertheless, realizing that this week’s puzzle was a simple derivative of last week’s certainly took the fun out of solving the rest of it.<br><br><img src=data/images/1967-1.jpg><br><br>The sudoku board consists of 9*9 cells. These can be grouped into 3*3 regions of 3*3 cells each. Some of the cells are filled with a digit 1 through 9 while the rest of them are left empty. The aim of the game is to fill each empty cell with a digit 1 . . . 9 so that every row, every column and every region contains each of the numbers 1 . . . 9 exactly once. A proper sudoku puzzle always has exactly one solution.<br><br>Help Bill avoid unpleasant surprises by creating a program that checks whether an unsolved sudoku puzzle is in fact derived from an earlier puzzle by simple operations.<br><br>The allowed operations are:<br>1. Rotating the entire puzzle clockwise or counterclockwise.<br>2. Swapping two columns within a 3 * 9 column segment.<br>3. Swapping two rows within a 9 * 3 row segment.<br>4. Swapping entire row or column segments.<br>5. Applying a permutation f of the digits 1 . . . 9 to every cell (i.e. replace x by f (x) in every cell).<br><br>An operation is considered being performed on the sudoku solution (rather than on the unsolved puzzle) and always guarantees that if the board before the transformation was a solution to a sudoku puzzle, it still is afterwards. <br>", input:"The input starts with the number of test cases 0 &lt;= N &lt;= 50 on a single line.<br><br>Then for every test case follow nine lines describing last week’s puzzle solution, fromtop to bottom. Each line corresponds to a row in the puzzle and consists of nine digits (1 . . . 9), describing the contents of the cell from left to right.<br><br>Last week’s solution is followed by nine lines describing this week’s unsolved puzzle. Here, also, every line corresponds to a puzzle row and every digit (0 . . . 9) describes the contents of a cell. 0 indicates that the cell is empty. The rows are presented ordered from top to bottom, and within each row, the cells are ordered from left to right.<br><br>After every test case except the last one follows a blank line. Every unsolved puzzle is guaranteed to be uniquely solvable and last week’s solution is always a proper sudoku solution.<br>", output:"For every test case, output Yes if the sudoku puzzle can be derived from the given solved puzzle using the allowed operations, or No if this is not possible.", sample_in:"2\n963174258\n178325649\n254689731\n821437596\n496852317\n735961824\n589713462\n317246985\n642598173\n060104050\n200000001\n008305600\n800407006\n006000300\n700901004\n500000002\n040508070\n007206900\n534678912\n672195348\n198342567\n859761423\n426853791\n713924856\n961537284\n287419635\n345286179\n010900605\n025060070\n870000902\n702050043\n000204000\n490010508\n107000056\n040080210\n208001090", sample_out:"Yes\nNo", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:9, vtotal_submit:29, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2006", author:"", tag:["TEST"]}
{pid:1968, vid:1968, oj:"hdu", title:"The SetStack Computer", desc:"Background from Wikipedia: 揝et theory is a branch of mathematics created principally by the German mathematician Georg Cantor at the end of the 19th century. Initially controversial, set theory has come to play the role of a foundational theory in modern mathematics, in the sense of a theory invoked to justify assumptions made inmathematics concerning the existence of mathematical objects (such as numbers or functions) and their properties. Formal versions of set theory also have a foundational role to play as specifying a theoretical ideal of mathematical rigor in proofs.?Given this importance of sets, being the basis of mathematics, a set of eccentric theorist set off to construct a supercomputer operating on sets instead of numbers. The initial Set-Stack Alpha is under construction, and they need you to simulate it in order to verify the operation of the prototype.<br><br><img src=data/images/1968-1.jpg><br><br>The computer operates on a single stack of sets, which is initially empty. After each operation, the cardinality of the topmost set on the stack is output. The cardinality of a set S is denoted |S| and is the number of elements in S. The instruction set of the SetStack Alpha is PUSH, DUP, UNION, INTERSECT, and ADD.<br>?PUSH will push the empty set {} on the stack.<br>?DUP will duplicate the topmost set (pop the stack, and then push that set on the stack twice).<br>?UNION will pop the stack twice and then push the union of the two sets on the stack. <br>?INTERSECT will pop the stack twice and then push the intersection of the two sets on the stack.<br>?ADD will pop the stack twice, add the first set to the second one, and then push the resulting set on the stack.<br>For illustration purposes, assume that the topmost element of the stack is A = {{}, {{}}} and that the next one is B = {{}, {{{}}}}.<br>For these sets, we have |A| = 2 and |B| = 2. Then: <br>?UNION would result in the set { {}, {{}}, {{{}}} }. The output is 3.<br>?INTERSECT would result in the set { {} }. The output is 1.<br>?ADD would result in the set { {}, {{{}}}, {{},{{}}} }. The output is 3.<br>", input:"An integer 0 &lt;= T &lt;= 5 on the first line gives the cardinality of the set of test cases. The first line of each test case contains the number of operations 0 &lt;= N &lt;= 2 000. Then follow N lines each containing one of the five commands. It is guaranteed that the SetStack computer can execute all the commands in the sequence without ever popping an empty stack.", output:"For each operation specified in the input, there will be one line of output consisting of a single integer. This integer is the cardinality of the topmost element of the stack after the corresponding command has executed. After each test case there will be a line with *** (three asterisks).", sample_in:"2\n9\nPUSH\nDUP\nADD\nPUSH\nADD\nDUP\nADD\nDUP\nUNION\n5\nPUSH\nPUSH\nADD\nPUSH\nINTERSECT", sample_out:"0\n0\n1\n0\n1\n1\n2\n2\n2\n***\n0\n0\n1\n0\n0\n***", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:5, vtotal_submit:56, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2006", author:"", tag:["TEST"]}
{pid:1969, vid:1969, oj:"hdu", title:"Pie", desc:"My birthday is coming up and traditionally I\'m serving pie. Not just one pie, no, I have a number N of them, of various tastes and of various sizes. F of my friends are coming to my party and each of them gets a piece of pie. This should be one piece of one pie, not several small pieces since that looks messy. This piece can be one whole pie though.<br><br>My friends are very annoying and if one of them gets a bigger piece than the others, they start complaining. Therefore all of them should get equally sized (but not necessarily equally shaped) pieces, even if this leads to some pie getting spoiled (which is better than spoiling the party). Of course, I want a piece of pie for myself too, and that piece should also be of the same size. <br><br>What is the largest possible piece size all of us can get? All the pies are cylindrical in shape and they all have the same height 1, but the radii of the pies can be different.<br>", input:"One line with a positive integer: the number of test cases. Then for each test case:<br>---One line with two integers N and F with 1 &lt;= N, F &lt;= 10 000: the number of pies and the number of friends.<br>---One line with N integers ri with 1 &lt;= ri &lt;= 10 000: the radii of the pies.<br>", output:"For each test case, output one line with the largest possible volume V such that me and my friends can all get a pie piece of size V. The answer should be given as a floating point number with an absolute error of at most 10^(-3).", sample_in:"3\n3 3\n4 3 3\n1 24\n5\n10 5\n1 4 2 3 4 5 6 5 4 2", sample_out:"25.1327\n3.1416\n50.2655", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:638, vtotal_submit:3399, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2006", author:"", tag:["TEST"]}
{pid:1970, vid:1970, oj:"hdu", title:"Ticket to Ride", desc:"Ticket to Ride is a board game for up to 5 players. The goal of the game is to set up train lines (and to thwart the opponents’ attempts at setting up their train lines). At the beginning of play, each player is assigned four train lines. A player may choose to discard as many of these four assignments as she likes. Each assignment has a score, corresponding to its difficulty (so, typically, a train line between e.g. Stockholm and Tokyo would be worth more than a train line between e.g. Stockholm and Utrecht). At the end of the game, each player gets points for the assignments that they have successfully completed, and penalty points for the assignments that they have failed to complete. <br><br>An assignment consists of a pair of cities that are to be connected by a series of shorter railway routes. A route can be claimed (for a certain cost associated with the route), but things are complicated by the fact that there is only a limited number of routes, and once a player claims a route, none of the other players can claim it. A player has successfully set up a train line between two cities if there is a path between the two cities using only routes that have been claimed by this player. For simplicity, we will ignore all additional aspects of the game (including the actual process of claiming routes and additional ways to score points). <br><br><img src=data/images/1970-1.jpg><br><br>For instance, if your assignment is to connect Stockholm and Amsterdam in the Figure above, you would probably want to claim the routes between Stockholm and Copenhagen, and between Copenhagen and Amsterdam. But if another player manages to claim the route between Copenhagen and Stockholm before you, your train line would have to use some other routes, e.g. by going to Copenhagen via Oslo. <br><br>In this problem, we will consider the rather bold strategy of trying to complete all four assignments (typically, this will be quite hard). As a preliminary assessment of the difficulty of achieving this, we would like to calculate the minimum cost of setting up all four lines assuming that none of the other players interfere with our plans. Your job is to write a program to determine this minimum cost.<br>", input:"The input consists of several (at most 20) games to be analyzed. Each game starts with two integers 1 &lt;= n &lt;= 30, 0 &lt;= m &lt;= 1 000, giving the number of cities and railway routes in the map, respectively. Then follow n lines, giving the names of the n cities. City names are at most 20 characters long and consist solely of lower case letters (’a’-’z’). <br><br>After this follow m lines, each containing the names of two different cities and an integer 1 &lt;= c &lt;= 10 000, indicating that there is a railway route with cost c between the two cities. Note that there may be several railway routes between the same pair of cities. You may assume that it is always possible to set up a train line from any city to any other city. <br><br>Finally, there will be four lines, each containing the names of two cities, giving the four train line assignments.<br><br>The input is terminated by a case where n = m = 0. This case should not be processed.<br>", output:"For each game, output a single line containing a single integer, the minimum possible cost to set up all four train lines.", sample_in:"10 15\nstockholm\namsterdam\nlondon\nberlin\ncopenhagen\noslo\nhelsinki\ndublin\nreykjavik\nbrussels\noslo stockholm 415\nstockholm helsinki 396\noslo london 1153\noslo copenhagen 485\nstockholm copenhagen 522\ncopenhagen berlin 354\ncopenhagen amsterdam 622\nhelsinki berlin 1107\nlondon amsterdam 356\nberlin amsterdam 575\nlondon dublin 463\nreykjavik dublin 1498\nreykjavik oslo 1748\nlondon brussels 318\nbrussels amsterdam 173\nstockholm amsterdam\noslo london\nreykjavik dublin\nbrussels helsinki\n2 1\nfirst\nsecond\nfirst second 10\nfirst first\nfirst first\nsecond first\nfirst first\n0 0", sample_out:"3907\n10", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:9, vtotal_submit:43, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2006", author:"", tag:["TEST"]}
{pid:1971, vid:1971, oj:"hdu", title:"The Bookcase", desc:"No wonder the old bookcase caved under the massive piles of books Tom had stacked on it. He had better build a new one, this time large enough to hold all of his books. Tomfinds it practical to have the books close at hand when he works at his desk. Therefore, he is imagining a compact solution with the bookcase standing on the back of the desk. Obviously, this would put some restrictions on the size of the bookcase, it should preferably be as small as possible. In addition, Tom would like the bookcase to have exactly three shelves for aesthetical reasons.<br><br>Wondering how small his bookcase could be, he models the problem as follows. He measures<br>the height hi and thickness ti of each book i and he seeks a partition of the books in three non-empty sets S1, S2, S3 such that <img src=data/images/1971-1.jpg> is minimized, i.e. the area of the bookcase as seen when standing in front of it (the depth needed is obviously the largest width of all his books, regardless of the partition). Note that this formula does not give the exact area of the bookcase, since the actual shelves cause a small additional height, and the sides cause a small additional width. For simplicity, we will ignore this small discrepancy.<br><br>Thinking a moment on the problem, Tom realizes he will need a computer program to do the job.<br>", input:"The input begins with a positive number on a line of its own telling the number of test cases (at most 20). For each test case there is one line containing a single positive integer N, 3 &lt;= N &lt;= 70 giving the number of books. Then N lines follow each containing two positive integers hi, ti, satisfying 150 &lt;= hi &lt;= 300 and 5 &lt;= ti &lt;= 30, the height and thickness of book i  respectively, in millimeters.", output:"For each test case, output one line containing the minimum area (height times width) of a three-shelf bookcase capable of holding all the books, expressed in square millimeters.", sample_in:"2\n4\n220 29\n195 20\n200 9\n180 30\n6\n256 20\n255 30\n254 15\n253 20\n252 15\n251 9", sample_out:"18000\n29796", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:10, vtotal_submit:48, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"NWERC2006", author:"", tag:["TEST"]}
{pid:1972, vid:1972, oj:"hdu", title:"Printer Queue", desc:"The only printer in the computer science students?union is experiencing an extremely heavy workload. Sometimes there are a hundred jobs in the printer queue and you may have to wait for hours to get a single page of output. Because some jobs are more important than others, the Hacker General has invented and implemented a simple priority system for the print job queue. Now, each job is assigned a priority between 1 and 9 (with 9 being the highest priority, and 1 being the lowest), and the printer operates as follows. <br>?The first job J in queue is taken from the queue.<br>?If there is some job in the queue with a higher priority than job J, thenmove J to the end of the queue without printing it.<br>?Otherwise, print job J (and do not put it back in the queue).<br><br>In this way, all those importantmuffin recipes that the Hacker General is printing get printed very quickly. Of course, those annoying term papers that others are printing may have to wait for quite some time to get printed, but that抯 life. <br><br>Your problem with the new policy is that it has become quite tricky to determine when your print job will actually be completed. You decide to write a program to figure this out. The program will be given the current queue (as a list of priorities) as well as the position of your job in the queue, and must then calculate how long it will take until your job is printed, assuming that no additional jobs will be added to the queue. To simplifymatters, we assume that printing a job always takes exactly one minute, and that adding and removing jobs from the queue is instantaneous.<br>", input:"One line with a positive integer: the number of test cases (at most 100). Then for each test case:<br>?One line with two integers n and m, where n is the number of jobs in the queue (1 &lt;= n &lt;= 100) and m is the position of your job (0 &lt;= m &lt;= n &amp;#8722; 1). The first position in the queue is number 0, the second is number 1, and so on. <br>?One linewith n integers in the range 1 to 9, giving the priorities of the jobs in the queue. The first integer gives the priority of the first job, the second integer the priority of the second job, and so on.<br>", output:"For each test case, print one line with a single integer; the number of minutes until your job is completely printed, assuming that no additional print jobs will arrive.", sample_in:"3\n1 0\n5\n4 2\n1 2 3 4\n6 0\n1 1 9 1 1 1", sample_out:"1\n2\n5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:96, vtotal_submit:221, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2006", author:"", tag:["TEST"]}
{pid:1973, vid:1973, oj:"hdu", title:"Prime Path", desc:"The ministers of the cabinet were quite upset by the message from the Chief of Security stating that they would all have to change the four-digit room numbers on their offices. <br>— It is a matter of security to change such things every now and then, to keep the enemy in the dark.<br>— But look, I have chosen my number 1033 for good reasons. I am the Prime minister, you know!<br>—I know, so therefore your new number 8179 is also a prime. You will just have to paste four new digits over the four old ones on your office door.<br>— No, it’s not that simple. Suppose that I change the first digit to an 8, then the number will read 8033 which is not a prime!<br>— I see, being the prime minister you cannot stand having a non-prime number on your door even for a few seconds.<br>— Correct! So I must invent a scheme for going from 1033 to 8179 by a path of prime numbers where only one digit is changed from one prime to the next prime.<br><br>Now, the minister of finance, who had been eavesdropping, intervened.<br>— No unnecessary expenditure, please! I happen to know that the price of a digit is one pound.<br>— Hmm, in that case I need a computer program to minimize the cost. You don’t know some very cheap software gurus, do you?<br>—In fact, I do. You see, there is this programming contest going on. . .<br><br>Help the prime minister to find the cheapest prime path between any two given four-digit primes! The first digit must be nonzero, of course. Here is a solution in the case above.<br>1033<br>1733<br>3733<br>3739<br>3779<br>8779<br>8179<br>The cost of this solution is 6 pounds. Note that the digit 1 which got pasted over in step 2 can not be reused in the last step – a new 1 must be purchased.<br>", input:"One line with a positive number: the number of test cases (at most 100). Then for each test case, one line with two numbers separated by a blank. Both numbers are four-digit primes (without leading zeros).", output:"One line for each case, either with a number stating the minimal cost or containing the word Impossible.", sample_in:"3\n1033 8179\n1373 8017\n1033 1033", sample_out:"6\n7\n0", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:151, vtotal_submit:298, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2006", author:"", tag:["TEST"]}
{pid:1974, vid:1974, oj:"hdu", title:"Lineland\'s Airport", desc:"Lineland is a strange country. As the name suggests, it抯 shape (as seen from above) is just a straight line, rather than some two-dimensional shape. The landscape along this line is very mountainous, something which occasionally leads to some problems. One such problem now occurs: in this modern era the king wants to build an airport to stimulate the country抯 economy. Unfortunately, it抯 impossible for airplanes to land on steep airstrips, so a horizontal piece of land is needed. To accommodate for the larger airplanes, this strip needs to have length at least L. <br><br>Over the years, the inhabitants of Lineland have become very proficient in flattening pieces of land. Given a piece a land, they can remove rock quickly. They don抰 want to add rock for that may lead to an unstable landing strip. To minimize the amount of effort, however, they want to remove the least amount of rock necessary to reach their goal: a flat piece of land of length L. What is this minimum amount? Because of the low-dimensional nature of Lineland, the amount of rock that needs to be removed is measured as the total area of land above the place where the landing strip is placed, rather than the volume (so in the Figure below, the amount of land removed is given by the lightly shaded area).<br>", input:"One line with a positive number: the number of test cases (at most 25). Then for each test case:<br>?One line with an integer N, 2 &lt;= N &lt;= 500, the number of points, and an integer L, 1 &lt;= L &lt;= 10 000, the necessary length to flatten. <br>?N lines with two integers xi and yi with 0 &lt;= xi, yi &lt;= 10 000 describing the landscape of Lineland. The xi are in (strictly) ascending order. At position xi the height of the landscape is yi. Between two xi the landscape has constant slope. (So the landscape is piecewise linear). The difference between xN and x1 is greater than or equal to L.<br>", output:"For each test case, output one line with the minimum amount of rock which must be removed in order to build the airport. The answer should be given as a floating point number with an absolute error of at most 10^(&amp;#8722;3).", sample_in:"4\n3 5\n0 2\n4 2\n14 0\n4 3\n0 2\n2 0\n4 0\n5 3\n3 10\n10 2\n30 2\n35 7\n2 777\n222 333\n4444 5555", sample_out:"0.9000\n0.3750\n0.0000\n373362.4867", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:2, vtotal_submit:7, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2006", author:"", tag:["TEST"]}
{pid:1975, vid:1975, oj:"hdu", title:"Leonardo’s Notebook", desc:"—I just bought Leonardo’s secret notebook! Rare object collector Stan Ucker was really agitated but his friend, special investigator Sarah Kepticwas unimpressed.<br>—How do you know it is genuine?<br>— Oh, it must be, at that price. And it is written in the da Vinci code. Sarah browsed a few of the pages. It was obvious to her that the code was a substitution cipher, where each letter of the alphabet had been substituted by another letter.<br>—Leonardo would have written the plain-text and left it to his assistant to encrypt, she said. And he must have supplied the substitution alphabet to be used. If we are lucky, we can find it on the back cover!<br>She turned up the last page and, lo and behold, there was a single line of all 26 letters of the alphabet:<br><br>QWERTYUIOPASDFGHJKLZXCVBNM<br><br>— This may be Leonardo’s instructions meaning that each A in the plain-text was to be replaced by Q, each B withW, etcetera. Let us see... To their disappointment, they soon saw that this could not be the substitution that was used in the book. Suddenly, Stan brightened.<br>— Maybe Leonardo really wrote the substitution alphabet on the last page, and by mistake his assistant coded that line as he had coded the rest of the book. So the line we have here is the result of applying some permutation TWICE to the ordinary alphabet! Sarah took out her laptop computer and coded fiercely for a few minutes. Then she turned to Stan with a sympathetic expression.<br>— No, that couldn’t be it. I am afraid that you have been duped again, my friend. In all<br>probability, the book is a fake. Write a program that takes a permutation of the English alphabet as input and decides if it may be the result of performing some permutation twice.<br>", input:"The input begins with a positive number on a line of its own telling the number of test cases (at most 500). Then for each test case there is one line containing a permutation of the 26 capital letters of the English alphabet.", output:"For each test case, output one line containing Yes if the given permutation can result from applying some permutation twice on the original alphabet string ABC...XYZ, otherwise output No.", sample_in:"2\nQWERTYUIOPASDFGHJKLZXCVBNM\nABCDEFGHIJKLMNOPQRSTUVWXYZ", sample_out:"No\nYes", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:28, vtotal_submit:90, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"NWERC2006", author:"", tag:["TEST"]}
{pid:1976, vid:1976, oj:"hdu", title:"Software Version", desc:"相信大家一定有过在网上下载软件而碰到多个不同版本的情况。<br><br>一般来说，软件的版本号由三个部分组成，主版本号（Major Version Number），子版本号（Minor Version Number)和修订号（Revision_Number）。当软件进行了重大的修改时，主版本号加一；当软件在原有基础上增加部分功能时，主版本号不变，子版本号加一；当软件仅仅修正了部分bug时，主版本号和子版本号都不变，修正号加一。<br>在我们比较软件的两个版本的新旧时，都是先比较主版本号，当主版本号相同时再比较子版本号，前两者都相同的情况下再比较修正号。版本号越大的软件越新。<br><br>现在，Lele 在载软件的时候碰到了两个版本，请你告诉他哪个版本更新一些。", input:"输入的第一行有一个整数T，代表有T组测试。接下来有T组测试。<br>每组测试分两行，第一行有三个整数代表第一个软件版本的主版本号，子版本号和修订号。第二行也有三个整数代表第二个软件版本的主版本号，子版本号和修订号。<br><br>数据中出现的整数都在[0,1000]范围之内。", output:"对于每组测试，如果第一个软件的版本新点，请输出&quot;First&quot;，如果第二个软件的版本新点，请输出&quot;Second&quot;，否则输出&quot;Same&quot;。 <br>", sample_in:"3\n1 1 0\n1 1 1\n1 1 1\n1 1 0\n1 1 1\n1 1 1", sample_out:"Second\nFirst\nSame", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1294, vtotal_submit:2036, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008杭电集训队选拔赛", author:"", tag:["TEST"]}
{pid:1977, vid:1977, oj:"hdu", title:"Consecutive sum II", desc:"Consecutive sum come again. Are you ready? Go ~~<br>1&nbsp;&nbsp;&nbsp;&nbsp;= 0 + 1<br>2+3+4&nbsp;&nbsp;&nbsp;&nbsp;= 1 + 8<br>5+6+7+8+9&nbsp;&nbsp;= 8 + 27<br>…<br>You can see the consecutive sum can be representing like that. The nth line will have 2*n+1 consecutive numbers on the left, the first number on the right equal with the second number in last line, and the sum of left numbers equal with two number’s sum on the right.<br>Your task is that tell me the right numbers in the nth line.<br>", input:"The first integer is T, and T lines will follow.<br>Each line will contain an integer N (0 &lt;= N &lt;= 2100000).<br>", output:"For each case, output the right numbers in the Nth line.<br>All answer in the range of signed 64-bits integer.<br>", sample_in:"3\n0\n1\n2", sample_out:"0 1\n1 8\n8 27", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:764, vtotal_submit:1777, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008杭电集训队选拔赛", author:"", tag:["TEST"]}
{pid:1978, vid:1978, oj:"hdu", title:"How many ways", desc:"这是一个简单的生存游戏，你控制一个机器人从一个棋盘的起始点(1,1)走到棋盘的终点(n,m)。游戏的规则描述如下：<br>1.机器人一开始在棋盘的起始点并有起始点所标有的能量。<br>2.机器人只能向右或者向下走，并且每走一步消耗一单位能量。<br>3.机器人不能在原地停留。<br>4.当机器人选择了一条可行路径后，当他走到这条路径的终点时，他将只有终点所标记的能量。<br><center> <img src=data/images/C113-1003-1.gif> </center><br>如上图，机器人一开始在(1,1)点，并拥有4单位能量，蓝色方块表示他所能到达的点，如果他在这次路径选择中选择的终点是(2,4)<br><br>点，当他到达(2,4)点时将拥有1单位的能量，并开始下一次路径选择，直到到达(6,6)点。<br>我们的问题是机器人有多少种方式从起点走到终点。这可能是一个很大的数，输出的结果对10000取模。", input:"第一行输入一个整数T,表示数据的组数。<br>对于每一组数据第一行输入两个整数n,m(1 &lt;= n,m &lt;= 100)。表示棋盘的大小。接下来输入n行,每行m个整数e(0 &lt;= e &lt; 20)。", output:"对于每一组数据输出方式总数对10000取模的结果.", sample_in:"1\n6 6\n4 5 6 6 4 3\n2 2 3 1 7 2\n1 1 4 6 2 7\n5 8 4 3 9 5\n7 6 6 2 1 5\n3 1 1 3 7 2", sample_out:"3948", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:867, vtotal_submit:2338, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008杭电集训队选拔赛", author:"", tag:["TEST"]}
{pid:1979, vid:1979, oj:"hdu", title:"Fill the blanks", desc:"There is a matrix of 4*4, you should fill it with digits 0 – 9, and you should follow the rules in the following picture:<br><br><center> <img src=data/images/C113-1004-1.JPG> </center>", input:"No input.", output:"Print all the matrixs that fits the rules in the picture. <br>And there is a blank line between the every two matrixs.<br>", sample_in:"1193\n1009\n9221\n3191\n\n1193\n1021\n9029\n3911\n\n……\n\n9173\n1559\n3821\n3391", sample_out:"", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:73, vtotal_submit:236, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008杭电集训队选拔赛", author:"", tag:["TEST"]}
{pid:1980, vid:1980, oj:"hdu", title:"Game！just a game!", desc:"This game is played by two persons, who are regarded as the Positive player (P player) and the Negative player (N player). There is a graph G=(V, E ) with P vertexs and Q bidirectional edges between the vertexs. Sometimes there are a lot of edges between two vertexs, and all the edges differ from each other. V1 is the first vertex and Vp is the last vertex.<br><br>&nbsp;&nbsp;Everytime P player marks a ‘+’ on one of the remained edges which have neither a ‘+’ nor ‘-‘ at all, and N player marks a ‘-‘ on that kind of edges without any marks. At the beginning, N player acts first, and then P player does, and then N player does alternately. The game comes to an  end when all the edges are marked with either a ‘+’ or a ‘-‘.<br>&nbsp;&nbsp;Now we give the rules to judge the winner:<br>1)&nbsp;&nbsp;If there exists a road from V1 to Vp, whose edges are all marked with ‘+’, P player wins the game ultimately. So we can see, P player tries his best to create a such road to win the game.<br>2)&nbsp;&nbsp;If there exists none such road ,whose edges are all marked with ‘+’ from V1 to Vp, P player losses the game finally. Also we can see, N player does the best to destory that kind of roads described above in rule(1).<br><br>Now give you such a graph, you need to verdict the result whether the P player can win the game. If true, print “Yes”, or “No”.<br>", input:"There are T cases. In the first line of each case, there are two intergers P and Q, P is the number of the vertexs and Q is the number of the edges. Then there come Q lines,each contains two integers v1(1 – P), and v2 ( 1 – P), indicating one edge between the vertex v1 and v2. <br>&nbsp;&nbsp;T&lt;=100,2&lt;=P&lt;=30,1&lt;=Q&lt;=1000.<br>&nbsp;&nbsp;There is a blank line to separate the adjacent cases.", output:"For each case, print the result “Yes” or “No”.", sample_in:"2\n2 2\n1 2\n1 2\n\n4 5\n1 2\n1 3\n2 3\n2 4\n3 4", sample_out:"Yes\nNo", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:0, vtotal_submit:41, special_status:0, time_limit:3000, mem_limit:32768, hint:"", source:"2008杭电集训队选拔赛", author:"", tag:["TEST"]}
{pid:1981, vid:1981, oj:"hdu", title:"A Special Text Editor", desc:"After AC all the hardest problems in the world , the ACboy 8006 now has nothing to do . So he develops a special text editor.The text editor is so special that it only supports 3 special operation: &quot;Reverse&quot;,&quot;Shift&quot; and &quot;Query&quot;.<br><br>1.The &quot;Reverse&quot; command has 2 parameters A and B.<br>The format is &quot;R A B&quot;. After the command executed, the editor will reverse the substring which is in the string from position A to position B.<br><br>2.The &quot;Shift&quot; command also has 2 parameters A and B.<br>The format is &quot;S A B&quot;. After the command executed, the editor will translate every character in the substring which is in the string from positon A to position B to the NEXT character in alphabetic table.In another word, it will translate \'a\' to \'b\',\'b\' to \'c\' ... \'y\' to \'z\'. Specially it will translate \'z\' to \'a\'.<br><br>3.The &quot;Query&quot; command has only 1 parameter A.<br>The format is &quot;Q A&quot;. When the text editor receives the command,it just reports the character which is in the postion A of the string now.<br><br><br>For example, let\'s consider the string &quot;abcdefzh&quot; whose length is 8.<br>After we operate the  command &quot;R 2 7&quot;, the string will be &quot;azfedcbh&quot;.<br>Then after we operate the command &quot;S 2 3&quot;, it will be &quot;aagedcbh&quot;.<br><br>Now your task is to simulate the process, and output the exact character when you read a &quot;Query&quot; command. Is that easy ?  Just come and AC it !", input:"The first line of the input contains an integer T which means the number of test cases. Then T test cases follow.<br>In the first line there are two integers N(0&lt;N&lt;=80000) and C(0&lt;C&lt;=3000) which indicate  the length of the string and the number of the commands.<br>In the second line there is a string whose length is N and which is only consisted of lowercase letters.<br>Then C lines follow. Each line describes a command in the form of \'Q A\' or \'R A B\' or \'S A B\' (0&lt;A&lt;=B&lt;=N).", output:"For each &quot;Query&quot; command, output the character which the text editor reports.", sample_in:"1\n8 5\nabcdefzh\nQ 4\nR 2 7\nQ 3\nS 2 3\nQ 2", sample_out:"d\nf\na", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:146, vtotal_submit:654, special_status:0, time_limit:2000, mem_limit:32768, hint:"", source:"2008杭电集训队选拔赛", author:"", tag:["TEST"]}
{pid:1982, vid:1982, oj:"hdu", title:"Kaitou Kid - The Phantom Thief (1)", desc:"Do you know Kaitou Kid? In the legend, Kaitou Kid is a master of disguise, and can take on the voice and form of anyone. He is not an evil person, but he is on the wrong side of the law. He\'s the very elusive phantom thief who never miss his prey although he always uses word puzzles to announce his targets before action.<br><br><center><img src=data/images/C113-1007-1.jpg></center><br><br>You are the leader of a museum. Recently, you get several priceless jewels and plan to hold an exhibition. But at the moment, you receive Kid\'s word puzzle... Fortunately, It seems Kid doesn’t want to trouble you, and his puzzle is very easy. Just a few minutes, You have found the way to solve the puzzle:<br><br>(1) change 1 to \'A\', 2 TO \'B\',..,26 TO \'Z\'<br>(2) change \'#\' to a blank<br>(3) ignore the \'-\' symbol, it just used to separate the numbers in the puzzle<br>", input:"The first line of the input contains an integer C which means the number of test cases. Then C lines follow. Each line is a sentence of Kid’s word puzzle which is consisted of \'0\' ~ \'9\' , \'-\' and \'#\'. The length of each sentence is no longer than 10000.", output:"For each case, output the translated text.", sample_in:"4\n9#23-9-12-12#19-20-5-1-12#1-20#12-5-1-19-20#15-14-5#10-5-23-5-12\n1-14-4#12-5-1-22-5#20-8-5#13-21-19-5-21-13#9-14#20#13-9-14-21-20-5-19\n1-6-20-5-18#20-8-5#15-16-5-14-9-14-7#15-6#20-8-5#5-24-8-9-2-9-20-9-15-14\n7-15-15-4#12-21-3-11", sample_out:"I WILL STEAL AT LEAST ONE JEWEL\nAND LEAVE THE MUSEUM IN T MINUTES\nAFTER THE OPENING OF THE EXHIBITION\nGOOD LUCK", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:773, vtotal_submit:2062, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"2008杭电集训队选拔赛", author:"", tag:["TEST"]}
{pid:1983, vid:1983, oj:"hdu", title:"Kaitou Kid - The Phantom Thief (2)", desc:"破解字迷之后，你得知Kid将会在展览开始后T分钟内盗取至少一颗宝石，并离开展馆。整个展馆呈矩形分布，划分为N*M个区域，有唯一的入口和出口（不能从出口进入，同样不能从入口出去）。由某个区域可直接移动至相邻四个区域中的一个，且最快需要一分钟。假设Kid进入放有宝石的区域即可盗取宝石，无需耗时。问至少要封锁几个区域（可以封锁放有宝石的区域，但不能封锁入口和出口）才能保证Kid无法完成任务。", input:"输入的第一行有一个整数C，代表有C组测试数据。每组测试数据的第一行有三个整数N，M，T(2&lt;=N,M&lt;=8,T&gt;0)。接下来N行M列为展馆布置图，其中包括：<br><br>\'S\'：入口<br>\'E\'：出口<br>\'J\'：放有宝石的区域，至少出现一次<br>\'.\'：空白区域<br>\'#\'：墙<br>", output:"对每组测试数据，输出至少要封锁的区域数。", sample_in:"2\n5 5 5\nSJJJJ\n..##J\n.JJJJ\n.J...\nEJ...\n5 5 6\nSJJJJ\n..##J\n.JJJJ\n.J...\nEJ...", sample_out:"0\n2", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:188, vtotal_submit:958, special_status:0, time_limit:5000, mem_limit:32768, hint:"", source:"2008杭电集训队选拔赛", author:"", tag:["TEST"]}
{pid:1984, vid:1984, oj:"hdu", title:"Mispelling4", desc:"Misspelling is an art form that students seem to excel at. Write a program that removes the nth character from an input string.<br>", input:"The first line of input contains a single integer N, (1 ≤ N ≤ 1000) which is the number of datasets that follow.<br>Each dataset consists of a single line of input containing M, a space, and a single word made up of uppercase letters only. M will be less than or equal to the length of the word. The length of the word is guaranteed to be less than or equal to 80.", output:"For each dataset, you should generate one line of output with the following values: The dataset number as a decimal integer (start counting at one), a space, and the misspelled word. The misspelled word is the input word with the indicated character deleted.<br>", sample_in:"4\n4 MISSPELL\n1 PROGRAMMING\n7 CONTEST\n3 BALLOON", sample_out:"1 MISPELL\n2 ROGRAMMING\n3 CONTES\n4 BALOON", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1085, vtotal_submit:1745, special_status:0, time_limit:500, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（1）", author:"", tag:["TEST"]}
{pid:1985, vid:1985, oj:"hdu", title:"Conversions", desc:"Conversion between the metric and English measurement systems is relatively simple. Often, it involves either multiplying or dividing by a constant. You must write a program that converts between the following units:<br><center><img src=data/images/C105-1002-1.JPG></center> <br>", input:"The first line of input contains a single integer N, (1 ≤ N ≤ 1000) which is the number of datasets that follow.<br>Each dataset consists of a single line of input containing a floating point (double precision) number, a space and the unit specification for the measurement to be converted. The unit specification is one of kg, lb, l, or g referring to kilograms, pounds, liters and gallons respectively.<br>", output:"For each dataset, you should generate one line of output with the following values: The dataset number as a decimal integer (start counting at one), a space, and the appropriately converted value rounded to 4 decimal places, a space and the unit specification for the converted value.<br><br>", sample_in:"5\n1 kg\n2 l\n7 lb\n3.5 g\n0 l", sample_out:"1 2.2046 lb\n2 0.5284 g\n3 3.1752 kg\n4 13.2489 l\n5 0.0000 g", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:770, vtotal_submit:1443, special_status:0, time_limit:500, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（1）", author:"", tag:["TEST"]}
{pid:1986, vid:1986, oj:"hdu", title:"Encoding", desc:"Chip and Dale have devised an encryption method to hide their (written) text messages. They first agree secretly on two numbers that will be used as the number of rows (R) and columns (C) in a matrix. The sender encodes an intermediate format using the following rules:<br>1. The text is formed with uppercase letters [A-Z] and &lt;space&gt;.<br>2. Each text character will be represented by decimal values as follows:<br>&lt;space&gt; = 0, A = 1, B = 2, C = 3, ..., Y = 25, Z = 26<br>The sender enters the 5 digit binary representation of the characters’ values in a spiral pattern along the matrix as shown below. The matrix is padded out with zeroes (0) to fill the matrix completely. For example, if the text to encode is: &quot;ACM&quot; and R=4 and C=4, the matrix would be filled in as follows:<br><br><center><img src=data/images/C105-1003-1.JPG> </center><br><br>The bits in the matrix are then concatenated together in row major order and sent to the receiver. The example above would be encoded as: 0000110100101100<br><br><br>", input:"The first line of input contains a single integer N, (1 ≤ N ≤ 1000) which is the number of datasets that follow.<br>Each dataset consists of a single line of input containing R (1&lt;=R&lt;=20), a space, C (1&lt;=C&lt;=20), a space, and a text string consisting of uppercase letters [A-Z] and &lt;space&gt;. The length of the text string is guaranteed to be &lt;= (R*C)/5.<br><br><br>", output:"For each dataset, you should generate one line of output with the following values: The dataset number as a decimal integer (start counting at one), a space, and a string of binary digits (R*C) long describing the encoded text. The binary string represents the values used to fill in the matrix in rowmajor<br>order. You may have to fill out the matrix with zeroes (0) to complete the matrix.", sample_in:"4\n4 4 ACM\n5 2 HI\n2 6 HI\n5 5 HI HO", sample_out:"1 0000110100101100\n2 0110000010\n3 010000001001\n4 0100001000011010110000010", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:278, vtotal_submit:976, special_status:0, time_limit:500, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（1）", author:"", tag:["TEST"]}
{pid:1987, vid:1987, oj:"hdu", title:"Decoding", desc:"Chip and Dale have devised an encryption method to hide their (written) text messages. They first agree secretly on two numbers that will be used as the number of rows (R) and columns (C) in a matrix. The sender encodes an intermediate format using the following rules:<br>1. The text is formed with uppercase letters [A-Z] and &lt;space&gt;.<br>2. Each text character will be represented by decimal values as follows:<br>&lt;space&gt; = 0, A = 1, B = 2, C = 3, ..., Y = 25, Z = 26<br>The sender enters the 5 digit binary representation of the characters’ values in a spiral pattern along the matrix as shown below. The matrix is padded out with zeroes (0) to fill the matrix completely. For example, if the text to encode is: &quot;ACM&quot; and R=4 and C=4, the matrix would be filled in as follows:<br><br><center><img src=data/images/C105-1004-1.JPG> </center><br><br>The bits in the matrix are then concatenated together in row major order and sent to the receiver.<br>The example above would be encoded as: 0000110100101100<br><br>", input:"The first line of input contains a single integer N, (1 ≤ N ≤ 1000) which is the number of datasets that follow.<br>Each dataset consists of a single line of input containing R (1&lt;=R&lt;=20), a space, C (1&lt;=C&lt;=20), a space, and a string of binary digits that represents the contents of the matrix (R * C binary digits).<br>The binary digits are in row major order.<br>", output:"For each dataset, you should generate one line of output with the following values: The dataset number as a decimal integer (start counting at one), a space, and the decoded text message. You should throw away any trailing spaces and/or partial characters found while decoding.<br>", sample_in:"4\n4 4 0000110100101100\n5 2 0110000010\n2 6 010000001001\n5 5 0100001000011010110000010", sample_out:"1 ACM\n2 HI\n3 HI\n4 HI HO", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:183, vtotal_submit:618, special_status:0, time_limit:500, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（1）", author:"", tag:["TEST"]}
{pid:1988, vid:1988, oj:"hdu", title:"Flipping Burned Pancakes", desc:"The cook at the Frobbozz Magic Pancake House sometimes falls asleep on the job while cooking pancakes. As a result, one side of a stack of pancakes is often burned. Clearly, it is bad business to serve visibly burned pancakes to the patrons. Before serving, the waitress will arrange the stacks of pancakes so that the burned sides are facing down. You must write a program to aid the waitress in stacking the pancakes correctly.<br>We start with a stack of N pancakes of distinct sizes, each of which is burned on one side. The problem is to convert the stack to one in which the pancakes are in size order with the smallest on the top and the largest on the bottom and burned side down for each pancake. To do this, we are<br>allowed to flip the top k pancakes over as a unit (so the k-th pancake is now on top and the pancake previously on top is now in the k-th position and the burned side goes from top to bottom and vice versa).<br>For example (+ indicates burned bottom, - a burned top):<br><br><center><img src=data/images/C105-1005-1.JPG> </center><br><br>You must write a program which finds a sequence of at most (3n – 2) flips, which converts a given stack of pancakes to a sorted stack with burned sides down.<br>", input:"The first line of the input contains a single decimal integer, N, the number of problem instances to follow. Each of the following N lines gives a separate dataset as a sequence of numbers separated by spaces. The first number on each line gives the number, M, of pancakes in the data set. The remainder of the data set is the numbers 1 through M in some order, each with a plus or minus sign, giving the initial pancake stack. The numbers indicate the relative sizes of the pancakes and the signs indicate whether the burned side is up (-) or down (+). M will be, at most, 30.<br>", output:"For each dataset, you should generate one line of output with the following values: The dataset number as a decimal integer (start counting at one), a space, the number of flips (K, where K &gt;= 0) required to sort the pancakes and a sequence of K numbers, each of which gives the number of pancakes to flip on the corresponding sorting step. There may be several correct solutions for some datasets. For instance 3 2 3 is also a solution to the first problem below.<br>", sample_in:"3\n3 +1 -3 -2\n4 -3 +1 -2 -4\n5 +1 +2 +3 +4 -5", sample_out:"1 6 2 1 3 1 2 1\n2 6 4 1 4 3 1 2\n3 3 5 1 5", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:95, vtotal_submit:276, special_status:0, time_limit:500, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（1）", author:"", tag:["TEST"]}
No Such Problem Called HDU 1989.<br>
{pid:1990, vid:1990, oj:"hdu", title:"Monkey Vines", desc:"Deep in the Amazon jungle, exceptionally tall trees grow that support a rich biosphere of figs and juniper bugs, which happen to be the culinary delight of brown monkeys.<br>Reaching the canopy of these trees requires the monkeys to perform careful navigation through the tall tree’s fragile vine system. These vines operate like a see-saw: an unbalancing of weight at any vine junction would snap the vine from the tree, and the monkeys would plummet to the ground below. The monkeys have figured out that if they work together to keep the vines properly balanced, they can all feast on the figs and juniper bugs in the canopy of the trees.<br>A vine junction supports exactly two sub-vines, each of which must contain the same number of monkeys, or else the vine will break, leaving a pile of dead monkeys on the jungle ground. For purposes of this problem, a vine junction is denoted by a pair of matching square brackets [ ], which may contain nested information about junctions further down its sub-vines. The nesting of vines will go no further than 25 levels deep.<br><br><center><img src=data/images/C105-1006-1.JPG> </center><br><br>You will write a program that calculates the minimum number of monkeys required to balance a particular vine configuration. There is always at least one monkey needed, and, multiple monkeys may hang from the same vine.<br>", input:"The first line of input contains a single integer N, (1 ≤ N ≤ 1000) which is the number of datasets that follow.<br>Each dataset consists of a single line of input containing a vine configuration consisting of a string of [ and ] characters as described above. The length of the string of [ and ] will be greater than or equal to zero, and less than or equal to 150.<br>", output:"For each dataset, you should generate one line of output with the following values: The dataset number as a decimal integer (start counting at one), a space, and the minimum number of monkeys required to reach the canopy successfully. Assume that all the hanging vines are reachable from the jungle floor, and that all monkeys jump on the vines at the same time.<br>", sample_in:"3\n[]\n\n[[][[]]]", sample_out:"1 2\n2 1\n3 8", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:160, vtotal_submit:347, special_status:0, time_limit:500, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（1）", author:"", tag:["TEST"]}
{pid:1991, vid:1991, oj:"hdu", title:"Model Rocket Height", desc:"Just when you thought we had run out of model rocket height problems…<br><br>Yet another method used to determine the height achieved by a model rocket is the vertical line method. Two observers A and B are spaced D feet apart along a base line along one edge of the flat test field. The launch latform is equidistant from observers A and B and L feet from the base line.<br><br>Each observer has a theodolite or some other device for measuring angle above the horizontal (elevation angle) of a distant object and the azimuth angle (the angle the vertical plane of the sight line makes with the line from A through B measured counter-clockwise). Each measuring device is on a stand. A’s device is HA feet above the level of the launch platform and B’s device is HB feet above the level of the launch platform. <br><br>When a rocket is fired, near the top of its flight, it deploys a parachute and emits a puff of smoke. Each observer measures the elevation angle and azimuth angle of the puff of smoke from their location. If the peak location is on the wrong side of the baseline or outside the lines determined by A and B perpendicular to the base line, it is out of bounds and disqualified. From this information, the height of the rocket may be determined as follows:<br><br>Each sight line determines a vertical plane. These two planes intersect in a vertical line (thus the name of the method). Each sight line intersects this vertical line in a point. If these points are more than ERRDIST feet apart, an error is assumed and the flight is rejected. Otherwise, the point halfway between the two points where a sight line intersects the vertical line is computed. The rocket height is the distance of this midpoint above the launch platform.<br><br>You must write a program which, given the parameters D (the distance in feet between observers A and B), L (the distance in feet from the base line to the launch platform), HA (the distance of the measuring device A above the launch platform in feet), HB (the distance of the measuring device B above the launch platform in feet), ERRDIST (the maximum distance between the intersection points of a sight line with the vertical line), α (the elevation angle of the rocket in degrees measured by the left observer A), β (the elevation angle of the rocket in degrees observed by the right observer B), γ (the azimuth angle in degrees measured by the left observer A) and δ (the azimuth angle in degrees measured by the right observer B), computes the height of the rocket above the launch platform in feet to the nearest foot.<br><br>", input:"The first line of input contains a single integer N, (1 ≤ N ≤ 1000) which is the number of datasets that follow.<br>The second line contains the parameters D, L, HA, HB and ERRDIST in that order as (floating point) decimal values. These values would be measured once at the beginning of the day and remain fixed through all rocket shots.<br>Each succeeding line of input represents a single dataset. Each dataset will contain the angles α, β, γ and δ in that order (measured in degrees) as (floating point) decimal values for a rocket shot.<br>", output:"For each dataset of four angles, the output consists of a single line . If angles α, β and γ are not strictly between 0 and 90 degrees or δ is not strictly between 90 degrees and 180 degrees, the line should contain the dataset number, a space and the word “DISQUALIFIED” (without the quotes).<br>Otherwise, if the distance between the intersection points of a sight line with the vertical line is more that ERRDIST feet, the line should contain the dataset number, a space and the word “ERROR” (without the quotes). Otherwise, the line should contain the dataset number, a space and the height above the launch platform in feet to the nearest foot.<br><br>", sample_in:"4\n100.0 300.0 5.25 2.92 5.00\n40.1 36.2 35.3 151.6\n64.9 71.1 15.7 160.1\n44.9 41.2 33.1 152.5\n44.9 41.2 33.1 52.5", sample_out:"1 50\n2 ERROR\n3 58\n4 DISQUALIFIED", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:17, vtotal_submit:49, special_status:0, time_limit:500, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（1）", author:"", tag:["TEST"]}
{pid:1992, vid:1992, oj:"hdu", title:"Tiling a Grid With Dominoes", desc:"We wish to tile a grid 4 units high and N units long with rectangles (dominoes) 2 units by one unit (in either orientation). For example, the figure shows the five different ways that a grid 4 units high and 2 units wide may be tiled.<br><br><center><img src=data/images/C105-1008-1.JPG> </center><br><br>Write a program that takes as input the width, W, of the grid and outputs the number of different ways to tile a 4-by-W grid.<br>", input:"The first line of input contains a single integer N, (1 ≤ N ≤ 1000) which is the number of datasets that follow.<br>Each dataset contains a single decimal integer, the width, W, of the grid for this problem instance.<br>", output:"For each problem instance, there is one line of output: The problem instance number as a decimal integer (start counting at one), a single space and the number of tilings of a 4-by-W grid. The values of W will be chosen so the count will fit in a 32-bit integer.<br>", sample_in:"3\n2\n3\n7", sample_out:"1 5\n2 11\n3 781", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:261, vtotal_submit:401, special_status:0, time_limit:500, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（1）", author:"", tag:["TEST"]}
{pid:1993, vid:1993, oj:"hdu", title:"Spatial Concepts Test", desc:"The Flathead Testing Corporation (FTC) supplies various tests for Human Resources departments at many companies. One type of test they supply includes spatial concepts questions such as:<br>When the following figure is folded back on the interior lines it forms a cube.<br><br><center><img src=data/images/C105-1009-1.JPG> </center><br><br>Which of the following could be an image of one corner of the resulting cube?<br><br><center><img src=data/images/C105-1009-2.JPG> </center><br><br>Unfortunately, FTC was recently embarrassed when one such question on a test had no solution among the choices and another (given in the example) had two solutions among the choices (1 and 3).<br>FTC needs a routine which will read in a specification of the unfolded cube and specifications of corner views and determine, for each corner view, whether it is a view of a corner of the cube specified in the unfolded part.<br>FTC uses the following images as faces of each cube. Each image is symmetrical about the vertical axis and has a distinguished end (up in each image).<br><br><center><img src=data/images/C105-1009-3.JPG> </center><br><br>The unfolded cube is specified by a string of six pairs of a letter indicating the image on the face and a number indicating the orientation of the distinguished end of the face: 1 is up, 2 is right, 3 is down and 4 is left. The faces are specified in the order given in the following figure with the orientations indicated in the square to the right:<br><br><center><img src=data/images/C105-1009-4.JPG> </center><br><br>So the unfolded cube in the example is specified as “F3E4E2D3C2F3”. FTC has a routine which reads this specification and generates the unfolded image for the question.<br>The answer images are specified by three pairs of a letter and a digit indicating a face image and an orientation as indicated in the following diagram. The faces are specified in the order top, right, left (indicated by numbers in brackets in the figures), that is clockwise around the center vertex starting at the top. The orientation of the distinguished end of each face is indicated by the numbers on the edges in the diagram. They circle each face clockwise, starting at the center vertex.<br><br><center><img src=data/images/C105-1009-5.JPG> </center><br><br>For the example, the answer figures are specified as “C2D2F2”, “E3F3C4”, “F2C2D2”, “D1E1F3” and “E1C1E1”. Again, FTC has a routine which reads this specification and generates each answer image for the question. They just need your routine to make sure there is exactly one correct answer to each question.<br>", input:"The first line of input contains a single integer N, (1 ≤ N ≤ 1000) which is the number of datasets that follow.<br>Each dataset consists of six lines of input. The first line of input is the specification for the folded out cube as described above. This line is followed by five lines, each of which gives the specification of one answer image as described above.<br>", output:"For each dataset, output on a single line the dataset number, (1 through N), a blank, the number of answers which are solutions of the problem (corners of the cube specified in the folded out line), a blank and five ‘Y’ or ‘N’ characters separated by a blank indicating which of the answer images was a<br>solution (‘Y’ for a solution, ‘N’ for not a solution).<br>", sample_in:"2\nF3E4E2D3C2F3\nC2D2F2\nE3F3C4\nF2C2D2\nD1E1F3\nE1C1E1\nA2F4F1A3A3C4\nC3A4A2\nF3F4A1\nF3C4A1\nA2C3A2\nA4A4F1", sample_out:"1 2 Y N Y N N\n2 0 N N N N N", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:12, vtotal_submit:23, special_status:0, time_limit:500, mem_limit:32768, hint:"", source:"2008 “Shun Yu Cup” Zhejiang Collegiate Programming Contest - Warm Up（1）", author:"", tag:["TEST"]}
{pid:1994, vid:1994, oj:"hdu", title:"利息计算", desc:"    为自行解决学费，chx勤工俭学收入10000元以1年定期存入银行，年利率为3.7% 。利率<br>按年计算，表示100元存1年的利息为3.7元.实际上有时提前有时推迟取，因此实际利息按天<br>计算，1年按365天计算，因此Q天的利息是<br>   本金*3.7/100 *Q/365<br>存了100天后1年定期年利息提高到3.9%。如将存款提前全取出，再存1年定期。那么前面的<br>100天只能按活期利息1.7%计算。<br>  100天的利息和本金：10000（1+1.7/100*100/365)=10046.6 <br>  再存1年定期      ：10046.6(1+3.9/100)=10438.4 <br>得到的利息加本金为10438.4 <br>  如果无视利息的提高，再存1年。得到的利息加本金为（定期推迟取，利率不变） <br>  10000（1+3.7/100*（100+365）/365)=10471.4<br>", input:"输入数据有多组，第1行为整数T,是数据的组数.每组占一行5个数，Y-存入的本金&lt;=100000,<br>Q-已存天数&lt;=365,e-活期利率,f-定期利率,g-提高后的定期利率.<br>", output:"每组数据输出2行.<br>第1行,提前支取后再存1年所得本金和利息.<br>第2行,继续存1年,Q+365天后所得本金和利息.<br>", sample_in:"4 \n10000 100 2.3 3.7 3.9\n10000 100 1.7 3.7 3.9 \n10000 200 1.7 3.7 3.9 \n10000 300 1.7 3.7 3.9 ", sample_out:"10455.5\n10471.4\n10438.4\n10471.4\n10486.8\n10572.7\n10535.2\n10674.1", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1750, vtotal_submit:2659, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ECJTU 2008 Spring Contest", author:"", tag:["TEST"]}
{pid:1995, vid:1995, oj:"hdu", title:"汉诺塔V", desc:"    用1,2,...,n表示n个盘子，称为1号盘，2号盘,...。号数大盘子就大。经典的汉诺塔问<br>题经常作为一个递归的经典例题存在。可能有人并不知道汉诺塔问题的典故。汉诺塔来源于<br>印度传说的一个故事，上帝创造世界时作了三根金刚石柱子，在一根柱子上从下往上按大小<br>顺序摞着64片黄金圆盘。上帝命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱<br>子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一回只能移动一个圆盘。我们<br>知道最少需要移动2^64-1次.在移动过程中发现，有的圆盘移动次数多，有的少 。 告之盘<br>子总数和盘号，计算该盘子的移动次数. ", input:"包含多组数据，首先输入T,表示有T组数据.每个数据一行，是盘子的数目N(1&lt;=N&lt;=60)和盘<br>号k(1&lt;=k&lt;=N)。<br>", output:"对于每组数据，输出一个数，到达目标时k号盘需要的最少移动数。<br>", sample_in:"2\n60 1\n3 1", sample_out:"576460752303423488\n4", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1092, vtotal_submit:2197, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ECJTU 2008 Spring Contest", author:"", tag:["TEST"]}
{pid:1996, vid:1996, oj:"hdu", title:"汉诺塔VI", desc:"  n个盘子的汉诺塔问题的最少移动次数是2^n-1,即在移动过程中会产生2^n个系列。由于<br>发生错移产生的系列就增加了，这种错误是放错了柱子，并不会把大盘放到小盘上，即各柱<br>子从下往上的大小仍保持如下关系 ：<br>n=m+p+q <br>a1&gt;a2&gt;...&gt;am<br>b1&gt;b2&gt;...&gt;bp<br>c1&gt;c2&gt;...&gt;cq<br>计算所有会产生的系列总数.<br>", input:"包含多组数据，首先输入T,表示有T组数据.每个数据一行，是盘子的数<br>目N&lt;30.", output:"对于每组数据，输出移动过程中所有会产生的系列总数。", sample_in:"3\n1\n3 \n29", sample_out:"3\n27\n68630377364883", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:795, vtotal_submit:1238, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ECJTU 2008 Spring Contest", author:"", tag:["TEST"]}
{pid:1997, vid:1997, oj:"hdu", title:"汉诺塔VII", desc:"n个盘子的汉诺塔问题的最少移动次数是2^n-1,即在移动过程中会产生2^n个系列。由于发生错移产生的系列就增加了，这种错误是放错了柱子，并不会把大盘放到小盘上，即各柱子从下往上的大小仍保持如下关系 ： <br>n=m+p+q<br>a1&gt;a2&gt;...&gt;am<br>b1&gt;b2&gt;...&gt;bp<br>c1&gt;c2&gt;...&gt;cq<br>ai是A柱上的盘的盘号系列，bi是B柱上的盘的盘号系列， ci是C柱上的盘的盘号系列，最初目标是将A柱上的n个盘子移到C盘. 给出1个系列，判断它是否是在正确的移动中产生的系列.<br>例1：n=3<br>3<br>2<br>1<br>是正确的<br>例2：n=3<br>3<br>1<br>2<br>是不正确的。<br>注：对于例2如果目标是将A柱上的n个盘子移到B盘. 则是正确的. ", input:"包含多组数据，首先输入T,表示有T组数据.每组数据4行，第1行N是盘子的数目N&lt;=64.<br>后3行如下<br>m a1 a2 ...am<br>p b1 b2 ...bp<br>q c1 c2 ...cq<br>N=m+p+q,0&lt;=m&lt;=N,0&lt;=p&lt;=N,0&lt;=q&lt;=N,", output:"对于每组数据，判断它是否是在正确的移动中产生的系列.正确输出true，否则false <br>", sample_in:"6\n3\n1 3\n1 2\n1 1\n3\n1 3\n1 1\n1 2\n6\n3 6 5 4\n1 1\n2 3 2\n6\n3 6 5 4\n2 3 2\n1 1\n3\n1 3\n1 2\n1 1\n20\n2 20 17\n2 19 18\n16 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", sample_out:"true\nfalse\nfalse\nfalse\ntrue\ntrue", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:510, vtotal_submit:896, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ECJTU 2008 Spring Contest", author:"", tag:["TEST"]}
{pid:1998, vid:1998, oj:"hdu", title:"奇数阶魔方", desc:"一个 n 阶方阵的元素是1,2,...,n^2,它的每行，每列和2条对角线上元素的和相等，这样<br>的方阵叫魔方。n为奇数时我们有1种构造方法，叫做“右上方” ，例如下面给出n=3，5，7时<br>的魔方.<br>3<br>   8   1   6<br>   3   5   7<br>   4   9   2<br>5<br>  17  24   1   8  15<br>  23   5   7  14  16<br>   4   6  13  20  22<br>  10  12  19  21   3<br>  11  18  25   2   9<br>7<br>  30  39  48   1  10  19  28<br>  38  47   7   9  18  27  29<br>  46   6   8  17  26  35  37<br>   5  14  16  25  34  36  45<br>  13  15  24  33  42  44   4<br>  21  23  32  41  43   3  12<br>  22  31  40  49   2  11  20<br>第1行中间的数总是1，最后1行中间的数是n^2,他的右边是2，从这三个魔方，你可看出“右<br>上方”是何意。 <br>", input:"包含多组数据，首先输入T,表示有T组数据.每组数据1行给出n(3&lt;=n&lt;=19)是奇数。<br>", output:"对于每组数据，输出n阶魔方，每个数占4格，右对齐<br>", sample_in:"2\n3\n5", sample_out:"   8   1   6\n   3   5   7\n   4   9   2\n  17  24   1   8  15\n  23   5   7  14  16\n   4   6  13  20  22\n  10  12  19  21   3\n  11  18  25   2   9", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:927, vtotal_submit:1911, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ECJTU 2008 Spring Contest", author:"", tag:["TEST"]}
{pid:1999, vid:1999, oj:"hdu", title:"不可摸数", desc:" s(n)是正整数n的真因子之和，即小于n且整除n的因子和.例如s(12)=1+2+3+4+6=16.如果任何<br>数m，s(m)都不等于n,则称n为不可摸数.<br>", input:"包含多组数据，首先输入T,表示有T组数据.每组数据1行给出n(2&lt;=n&lt;=1000)是整数。", output:"如果n是不可摸数，输出yes，否则输出no ", sample_in:"3\n2\n5\n8", sample_out:"yes\nyes\nno", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:1327, vtotal_submit:7566, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"ECJTU 2008 Spring Contest", author:"", tag:["TEST"]}
{pid:2000, vid:2000, oj:"hdu", title:"ASCII码排序", desc:"输入三个字符后，按各字符的ASCII码从小到大的顺序输出这三个字符。", input:"输入数据有多组，每组占一行，有三个字符组成，之间无空格。", output:"对于每组输入数据，输出一行，字符中间用一个空格分开。", sample_in:"qwe\nasd\nzxc", sample_out:"e q w\na d s\nc x z", num_of_testcases:0, total_submit:0, total_ac:0, total_wa:0, total_re:0, total_ce:0, total_tle:0, total_mle:0, total_pe:0, total_ole:0, total_rf:0, vtotal_ac:26201, vtotal_submit:78744, special_status:0, time_limit:1000, mem_limit:32768, hint:"", source:"C语言程序设计练习（一）", author:"", tag:["TEST"]}
